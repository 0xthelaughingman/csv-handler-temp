=======================================================================================
=======================================================================================
QUERY_NO: 1
QUERY_ID: 90fe663f-e5ee-4a48-a483-56a1fa099399
QUERY_TITLE: [wormhole] Wormhole Adoption By Existing Shuttle Users ( Over Time )

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ), common_user as ( SELECT
	min_wh_user.address, wh_date, shuttle_date, 'test' as dummy,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.address = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ) SELECT
	COUNT(DISTINCT address) as new_adopters,
		date_trunc('day', wh_date) as ddate,
			SUM(new_adopters) OVER (ORDER BY ddate ASC) as adopter_growth from common_user GROUP by ddate



=======================================================================================
=======================================================================================
QUERY_NO: 2
QUERY_ID: 917fbdc5-7a52-4cfc-b01f-e429ba9799c1
QUERY_TITLE: [ALGO][Q3] Tinyman Assets Base Search

QUERY_STRING:

with tinyman_assets as (
	  SELECT
	address, asset_name, asset_id,
	
			amount
	
	from algorand.account_asset
	
	WHERE
	
		(asset_name LIKE '%inyman%' AND asset_name LIKE '%ool%' AND asset_name like '%-ALGO') ), algo_swap_summary as (
	  SELECT
	COUNT(DISTINCT tx_group_id) as total_swaps,  -- At times a fee TXN part of the series of txn, helps avoid dupe counting
				COUNT(DISTINCT sender) as unique_users,
	
	
		receiver as algo_receiver,
	
	
		SUM(amount) as algo_amount		 
		
	  from algorand.payment_transaction
	  WHERE
			receiver IN (
	 
		SELECT address as receiver from tinyman_assets
	 
	)
		AND asset_id = 0
		AND tx_group_id IS NOT NULL
		GROUP BY algo_receiver ORDER BY total_swaps
		 ) SELECT
	total_swaps, unique_users, algo_amount, algo_amount/total_swaps as avg_algo_swapped,
			REGEXP_SUBSTR( asset_name, '\\s(\\w+-\\w+)', 1, 1, 'e', 1) as asset_name,
	
		algo_receiver, asset_id from algo_swap_summary LEFT JOIN algorand.account_asset as acc ON algo_swap_summary.algo_receiver = acc.address WHERE
	(asset_name LIKE '%inyman%' AND asset_name LIKE '%ool%' AND asset_name like '%-ALGO')
		AND unique_users>1000 ORDER BY total_swaps DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 3
QUERY_ID: 91ee6f20-bc62-44b1-ae92-1ea2e49df8cb
QUERY_TITLE: [ALGO] Algofi goETH Alt

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	--'465814065' --ALGO market
						--'465814103', --USDC
						--'465814149' --goBTC
	
					'465814222' --goETH
						--'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14' AND block_timestamp<'2022-02-01')
		 ), refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 51)) ), mock_types as (
	SELECT DISTINCT types
		from refine
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_amount, backup) as total_amount,
		SUM(total_amount) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as amount_over_time from base_data b LEFT JOIN refine c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 4
QUERY_ID: 93fbddfb-27c0-4621-bdc0-809d1168c9d4
QUERY_TITLE: [algo] Popular Pairs

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						) ), filter as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=5 THEN sender ELSE NULL END) as final_sender,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as asset_id_2,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
	 
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	 
	MAX(CASE WHEN order_num=5 THEN tx_message:txn:xaid ELSE NULL END) as pool_asset_id,
	
	
	CASE WHEN app_call_sender = final_sender THEN 'add' ELSE 'remove' END as cat,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id )
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		SUM(CASE WHEN cat='add' THEN algo_amount ELSE algo_amount*(-1) END ) as algo_amount,
	
	
		SUM(CASE WHEN cat='add' THEN asset_amount ELSE asset_amount*(-1) END ) as asset_amount,
	
	
		asset_id_2,
	 
		filter.pool_asset_id  as pool_id, asset_name as pool_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.pool_asset_id = ass.asset_id
	  WHERE
	
		totals = 5 AND cat = 'add'
	  GROUP BY pool_name, pool_id, asset_id_2 ORDER BY total_wallets DESC
	  LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 5
QUERY_ID: 93b19f6c-df86-40b0-bdd8-25c28d772b77
QUERY_TITLE: [ALGO][Q4] Voting Breakdown - By Vote Counts

QUERY_STRING:

/* with p1_voters as (	
	SELECT
	
		sender,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop, tx_id, block_id,
			lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1)) as opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			--AND sender= '46QNIYQEMLKNOBTQC56UEBBHFNH37EWLHGT2KGL3ZGB4SW77W6V7GBKPDY'
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ),*/ with p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ) SELECT COUNT(DISTINCT sender) as totals, final_opt, prop from p1_voters_debug WHERE prop = 3 GROUP BY prop, final_opt



=======================================================================================
=======================================================================================
QUERY_NO: 6
QUERY_ID: 3ef6c5f2-3cfe-4ed3-b521-823385bd9723
QUERY_TITLE: Copy of [avax] Data Debug

QUERY_STRING:

with base as (
	SELECT
	block_number,
		lag(block_number,1) OVER (order by block_number) as pblock_number,
		block_number-pblock_number as diff,
		block_timestamp,
		lag(block_timestamp,1) OVER (ORDER BY block_number) as ptime,
		DATEDIFF(seconds, ptime, block_timestamp) as block_time_seconds
	from avalanche.core.fact_blocks
	WHERE 1=1
		AND  block_timestamp::date = '2022-06-24' ) SELECT
	block_number,
		pblock_number,
		diff,
		block_time_seconds,
		block_timestamp, ptime from base WHERE diff>1 ORDER BY DIFF DESC



=======================================================================================
=======================================================================================
QUERY_NO: 7
QUERY_ID: a5b26796-392c-4b9d-b29a-e760df26790f
QUERY_TITLE: Top Delegates (All-time/Current) by 'Power'

QUERY_STRING:

with latest_del_stats as (
	SELECT MAX(block_id) as block_id, REPLACE(event_inputs:"delegate",'"','') as new_del
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	  GROUP BY new_del ) SELECT REPLACE(event_inputs:"delegate",'"','') as delegate, MAX(REPLACE(event_inputs:"newBalance",'"','')) as power  from ethereum.events_emitted WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND block_id IN (
			SELECT block_id from latest_del_stats ) GROUP BY delegate ORDER BY power DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 8
QUERY_ID: 8f76db87-fd95-4cc6-b482-6be82016f098
QUERY_TITLE: [ENS][Q2] Big Drop Wallets

QUERY_STRING:

with all_tokens as (
	  SELECT MAX(AMOUNT/1e18) as "tokens", origin_address, tx_id
	  FROM ethereum.udm_events
	  WHERE
		origin_address = to_address
	 
	AND contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND origin_function_signature = '0x76122903'
	 
	AND event_type = 'erc20_transfer'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	
	
	 GROUP BY origin_address, tx_id
	ORDER BY "tokens" DESC
	LIMIT 1000
	) , wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	  GROUP BY origin_address ) SELECT
	--SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END)/(25*1e6) * 100 as not_moved_per,
		--SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END) as not_moved_tokens,
		CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN 'Not Moved' ELSE 'Moved' END as typez,
		COUNT(typez) as Totals from wallets WHERE
	tokens_in!=0
	AND origin_address IN (
		SELECT origin_address
		from all_tokens ) GROUP BY typez



=======================================================================================
=======================================================================================
QUERY_NO: 9
QUERY_ID: a6cc798c-193b-400b-87a5-116b8e8880b0
QUERY_TITLE: [ENS][Q13] Claims - Failures trend

QUERY_STRING:

SELECT	COUNT(DISTINCT tx_id) as total_counts,
			date_trunc('day', block_timestamp) as ddate FROM ethereum.transactions  WHERE
	to_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND function_signature = '0x76122903'
	AND success!=TRUE
	AND block_timestamp < '2021-12-10' GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 10
QUERY_ID: 6d78ef40-ecda-4a4a-b45f-7989c717e865
QUERY_TITLE: [Worm] Hunt - Wormhole to Solana

QUERY_STRING:

SELECT  * from solana.transactions WHERE tx_id ='2JThqUEa9PAhK1vVj3NqNqvuqsQmUUE3iisdbRjJrPgK5hazisApmkvdqSDyE7pMmjf9v2RraGNgFU8SDe9snWxM'



=======================================================================================
=======================================================================================
QUERY_NO: 11
QUERY_ID: 3ebe34b9-c32a-4f32-ba05-2697c44a7a54
QUERY_TITLE: [ALGO][Q77] RAND Gallery Unique Purchases

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), min_dates_wallets as (
	SELECT
		buyer,
		'1' as is_new,
		min(ddate) as ddate
	from all_purchases
	GROUP BY buyer ), purchase_types as (
	SELECT
		f.buyer as wallet,
		f.ddate as pdate,
		CASE	WHEN is_new=1 THEN 'NEW'
				ELSE 'OLD' END as cat
	from all_purchases f
	LEFT JOIN  min_dates_wallets m ON f.ddate = m.ddate AND f.buyer=m.buyer ) SELECT
	COUNT(wallet) as total_purchases,
	cat,
	pdate as purchase_date from purchase_types GROUP BY purchase_date,CAT ORDER BY purchase_date ASC



=======================================================================================
=======================================================================================
QUERY_NO: 12
QUERY_ID: ac1e7f13-d09b-443c-b086-0008b2661e0b
QUERY_TITLE: [wormhole] All in/out txns

QUERY_STRING:

SELECT	
			date(block_timestamp) as wh_date,
			tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	date(block_timestamp) as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	date(block_timestamp) as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 13
QUERY_ID: 29771bfe-68a7-451b-a7c7-430c72b73001
QUERY_TITLE: [SOL][Q2] Sol transactions

QUERY_STRING:

SELECT	date_trunc('day', block_timestamp) as ddate,
	
		COUNT(DISTINCT tx_id) as txns,
			COUNT(DISTINCT tx_from_address) as senders from solana.transactions  WHERE 
	tx_to_address in (
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
	)
		AND block_timestamp >= '2021-12-01' AND block_timestamp <= '2021-12-31' GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 14
QUERY_ID: ac2ce488-e4ca-4200-8711-df1e1e326b96
QUERY_TITLE: [ALGO][Q15] AB-2 Overall Summaries

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  COUNT(DISTINCT ASSET_ID) as unique_assets,
			COUNT(DISTINCT buyer) as unique_buyers,
			SUM(algo_amount) as algo_amount,
			SUM(asset_amount) as asset_amount from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL



=======================================================================================
=======================================================================================
QUERY_NO: 15
QUERY_ID: 3e507a88-52de-49a8-923b-da020b2e73d2
QUERY_TITLE: [ALGO] AlgoDex Trades Daily

QUERY_STRING:

with tgroups as (
	SELECT
		DISTINCT tx_group_id
	from algorand.transactions
	WHERE
			(block_timestamp>='2022-02-10')
			AND tx_type_name = 'application call'
			AND tx_message:txn:apid IN ('354073834', '354073718' )
	 ), samples as (
	  SELECT
	
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '(\\[.*\\])', 1, 1, 'e', 1) as substr_note_l,
		CASE
			WHEN substr_note_l like any ('%partial%', '%full%') THEN 1 ELSE 0 END as trades,
			CASE
			WHEN substr_note_l like '%close%' THEN 'fclose'
			WHEN substr_note_l like '%full%' THEN 'filled'
			ELSE NULL END as status,
			CASE
			WHEN substr_note_l like '%open%' THEN 1 ELSE 0 END as opened,
			CASE
			WHEN substr_note_l like '%asa%' THEN TRUE ELSE FALSE END as is_asa,
		REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.* ":(.*)', 1, 1, 'e', 1) as substr_note_r,
		TRY_PARSE_JSON(SUBSTRING( substr_note_r, 0, LEN(substr_note_r) -1 )) as json_note,
		json_note:escrowAddr as escrow_wallet,
		json_note:escrowOrderType as otype,
			json_note:txnNum as tnum,
			tx_group_id,
			date_trunc('day', block_timestamp) as ddate
	  from algorand.transactions
	  WHERE
		tx_group_id in (SELECT * from tgroups) ), dedups as (
	  SELECT	DISTINCT escrow_wallet, tx_group_id, trades, status, opened, otype, is_asa, ddate
	  from samples ), combo as (
	SELECT
		SUM(trades) as trades,
		MAX(opened) as opened,
		MAX(status) as status,
		MAX(is_asa) as is_asa,
		MAX(TX_GROUP_ID) as eg_txn,
		escrow_wallet, ddate
	from dedups
	GROUP BY escrow_wallet, ddate ) SELECT
	SUM(trades) as totals, ddate,
		CASE WHEN IS_ASA=TRUE THEN 'buy'  ELSE 'sell'  END as txn_type from combo GROUP BY ddate,  txn_type



=======================================================================================
=======================================================================================
QUERY_NO: 16
QUERY_ID: ad62b9ae-dc8d-496c-b947-1768b9e40920
QUERY_TITLE: [ENS][Q4] Price & Claims Minus (2nd week onward)

QUERY_STRING:

with claims_t as ( SELECT COUNT(distinct origin_address) as "claims", contract_address as token_address, date_trunc('hour', block_timestamp)  as hours FROM ethereum.udm_events  WHERE
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name='Claim'
	AND block_timestamp >= CURRENT_DATE - 60
	AND block_timestamp >='2021-11-16' GROUP BY hours,token_address ), ens_prices as (
	SELECT hour as hours, token_address, price
	  FROM ethereum.token_prices_hourly
	
	WHERE
	 
	token_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND hour >= CURRENT_DATE - 60 
		 ) SELECT "claims", claims_t.hours, price from claims_t INNER JOIN ens_prices  ON ens_prices.token_address=claims_t.token_address AND ens_prices.hours=claims_t.hours



=======================================================================================
=======================================================================================
QUERY_NO: 17
QUERY_ID: 11855e45-c185-4430-b0a3-55973deccbab
QUERY_TITLE: [ENS][Q15] Probability of a Renewal

QUERY_STRING:

with events_regs as (
	  SELECT
			COUNT(DISTINCT event_inputs:"name") as total_created, 'dummy' as dfield
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	--NOT THE BEST WAY ), events_renewed as (
	  SELECT
	
	
	COUNT(DISTINCT event_inputs:"name") as total_renewed, 'dummy' as dfield
		
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRenewed'
	
	
	--AND block_timestamp >= '2021-11-01'  ) SELECT
	total_created, total_renewed, (total_renewed/total_created)*100 as probability from events_renewed LEFT JOIN events_regs ON events_renewed.dfield = events_regs.dfield



=======================================================================================
=======================================================================================
QUERY_NO: 18
QUERY_ID: 1234469b-1d33-44fd-8368-d0bcd054f1c2
QUERY_TITLE: [Terra][Q166] IBC Totals

QUERY_STRING:

--1-Osmosis, 16-Secret, 19- AXELAR, 17-INJECTIVE  with luna_prices as (
	SELECT
	  date_trunc('day', block_timestamp) as ddate,
	  AVG(price_usd) as price_usd
	from terra.oracle_prices
	WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		AND block_timestamp>='2021-10-21'
	 GROUP by ddate ), daily_stats as (
	SELECT
	
	COUNT(tx_id)  as totals,
	  CASE
	 
	WHEN msg_value:source_channel='channel-16' THEN 'SECRET'
	 
	WHEN msg_value:source_channel='channel-17' THEN 'INJECTIVE'
	 
	WHEN msg_value:source_channel='channel-19' THEN 'AXELAR'
	 
	ELSE 'OSMOSIS' END as cat,
	  SUM(msg_value:token:amount/1e6) as amt,
	CASE
			WHEN msg_value:token:denom = 'uluna' THEN 'uluna' ELSE 'uusd' END as token,
	  date_trunc('day', block_timestamp) as ddate
	  --msg_value:token:denom as token
	from  terra.msgs
	WHERE
	  (block_timestamp>='2021-10-21' AND block_timestamp<='2022-03-10')
	  --block_timestamp>='2022-02-01'
	  AND msg_value:"@type" = '/ibc.applications.transfer.v1.MsgTransfer'
	  AND msg_value:source_channel IN ('channel-1','channel-16', 'channel-17','channel-19')
	  AND msg_value:token:denom IN ('uluna', 'uusd')
	  AND msg_value:sender LIKE 'terra%%'
	  AND tx_status = 'SUCCEEDED'
	GROUP BY ddate, cat, token ), combo as (
	SELECT
		ds.ddate as dday,
		SUM (CASE
	
			WHEN token='uluna' THEN amt * p.price_usd
				ELSE amt END ) as usd_amount,
		cat
	from daily_stats ds LEFT JOIN luna_prices p
	ON ds.ddate=p.ddate
	GROUP BY dday, cat ) SELECT
	SUM(usd_amount) as total_usd,
	CAT from combo GROUP BY CAT ORDER BY CAT DESC



=======================================================================================
=======================================================================================
QUERY_NO: 19
QUERY_ID: a3448dcc-80d6-4317-9980-89c3145c10f4
QUERY_TITLE: DEBUG SEI Bridging Daily Stats copy

QUERY_STRING:

-- forked from SEI Bridging Daily Stats @ https://flipsidecrypto.xyz/edit/queries/206980e9-d50e-463c-89c5-5548c3f8f976 -- forked from SEI Transfers Abuse @ https://flipsidecrypto.xyz/edit/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1 -- forked from SEI transfers/bridging of claimers FIXED @ https://flipsidecrypto.xyz/edit/queries/8f764723-2027-4da8-a983-b44379113127 with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where hourly >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	 ) ,  merge_txns as (
	SELECT
	
	SUM(volume) as vol
	  , block_timestamp::date as ddate
	  , cat
	from all_bridges
	GROUP BY ddate, cat ) SELECT
	 CASE WHEN cat='in' THEN vol ELSE vol*(-1) END as vol
	, vol as net_flow
	, ddate
	, cat from merge_txns --WHERE ddate!='2023-08-21' --ignoring this date as data for inflows bugged due to pipeline...inflows shown as 242Bn.... ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 20
QUERY_ID: 09de38cd-1163-41bf-8384-1c4ba2d87066
QUERY_TITLE: [Nouns] Proposals And Voter Turn-Out

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime,
		substr(event_inputs:description, 0, 70) as short_desc
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		coalesce(fb2.block_timestamp, DATEADD(day,3,start_date)) as end_date, --Handling shit that ENDS IN FUTURE ie no block data yet!
		short_desc
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), votes as (
	SELECT
	
	event_inputs:proposalId as prop_id,
	  event_inputs:votes as votes,
		event_inputs:voter as voter,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
	from ethereum.core.fact_event_logs f
	CROSS JOIN merge m
	 WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
		AND m.prop_id = event_inputs:proposalId
		AND m.end_date> f.block_timestamp
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	--GROUP BY prop_id, cat ORDER BY prop_id ASC ),
	 vnp as (
	SELECT
	
	v.prop_id,
		COUNT(DISTINCT voter) as voters,
		SUM(votes) as total_votes,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc
	from votes v
	LEFT JOIN merge m ON  m.prop_id = v.prop_id
	group by v.prop_id ), base_mints as (
	SELECT
	
	block_timestamp as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), refine as (
	SELECT
		prop_id,voters,
		total_votes as total_vote_turnout,
		nouns_existing,
		start_date,
	  end_date,
		datediff(second, end_date, m.ddate) as diff,
		short_desc,
		row_number() OVER (PARTITION BY prop_id ORDER BY DIFF DESC) as rank
	from vnp v
	 CROSS JOIN mints m
	WHERE 1=1
	AND m.ddate<v.end_date AND m.ddate>v.start_date
	qualify rank=1 ) SELECT
	 TO_NUMBER(prop_id) as prop_id,
	total_vote_turnout,
	nouns_existing,
	round((total_vote_turnout/nouns_existing)*100, 2) as proposal_engagement,
	start_date,
	end_date,
	short_desc from refine  ORDER BY prop_id



=======================================================================================
=======================================================================================
QUERY_NO: 21
QUERY_ID: 13d0e038-cbc0-48fa-814b-0eee5e76eb3d
QUERY_TITLE: [ENS][Q7] ENS Registrations & GAS Relationship

QUERY_STRING:

with ens_regs as (
	select * from ethereum.events_emitted
	WHERE
		block_timestamp >= CURRENT_DATE - 180
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		 ) SELECT
	COUNT(DISTINCT tx_id) as total_regs,
		AVG(FEE_USD) as avg_gas_usd,
		date_trunc('days', block_timestamp) as days  from ethereum.transactions WHERE
	block_timestamp >= CURRENT_DATE - 180
	AND tx_id IN(
		SELECT tx_id from ens_regs ) GROUP BY DAYS



=======================================================================================
=======================================================================================
QUERY_NO: 22
QUERY_ID: 1208ca7b-d013-47b6-a7b9-20744f92359f
QUERY_TITLE: [ALGO][Q33] STBL Staked Over Time

QUERY_STRING:

with app_calls as (
	SELECT
		tx_group_id,
		CASE
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'unstaked'
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'staked'
			ELSE NULL END as cat
	from algorand.application_call_transaction
	WHERE
		app_id = '482608867'
		AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: mt' ) ), stakes as (
	SELECT
		block_timestamp,
		tx_group_id,
		asset_amount/1e6 as amt
		--'staked' as cat
	from algorand.asset_transfer_transaction
	WHERE
		tx_group_id IN ( SELECT tx_group_id from app_calls WHERE cat = 'staked') ), --TX_MESSAGE:dt:itx[0]:txn:amt/1e6 unstakes as (
	SELECT
		block_timestamp,
		tx_group_id,
		--tx_id,
		--TX_MESSAGE,
		(TX_MESSAGE:dt:itx[0]:txn:aamt/1e6)*(-1) as amt
		--'unstaked' as cat
	from algorand.transactions
	WHERE
		tx_group_id IN ( SELECT DISTINCT tx_group_id from app_calls WHERE cat = 'unstaked')
		AND tx_type = 'appl' AND TX_MESSAGE:dt:itx[0]:txn:aamt IS NOT NULL ), combo as (
	SELECT * from stakes
	UNION ALL
	SELECT * from unstakes ), day_activity as (
	SELECT
	  SUM(amt) as STBL,
	  date_trunc('day', block_timestamp) as ddate,
	  SUM(STBL) OVER (ORDER BY ddate ASC) as STBL_staked
	from combo
	GROUP by ddate ORDER BY ddate ASC ) SELECT
	*,
	CASE
		WHEN STBL>=0 THEN 'net_inflow' ELSE 'net_outflow' END as day_type from day_activity



=======================================================================================
=======================================================================================
QUERY_NO: 23
QUERY_ID: ae4eef41-3444-47b1-bd0b-95e66a676b35
QUERY_TITLE: [algo]Tinyman Swaps ( By Average Algo Details)

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		AVG(algo_amount) as avg_algo_swapped,
			SUM(algo_amount) as total_algo_volume,
	
	
		token_id,
	 
		asset_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.token_id = ass.asset_id
	  WHERE
	
		totals = 4 AND algo_amount IS NOT NULL
	  GROUP BY token_id,asset_name ORDER BY avg_algo_swapped DESC
	  LIMIT 10 ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 24
QUERY_ID: e63bd8c0-dab3-491c-b31a-353c602f4d98
QUERY_TITLE: Aurora Block Check

QUERY_STRING:

-- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (
	SELECT
	
	BLOCK_NUMBER
	  , block_timestamp::date as ddate
	  , lag(BLOCK_NUMBER) OVER (ORDER BY BLOCK_NUMBER ASC) as pblock
	  , BLOCK_NUMBER-pblock as diff
	FROM aurora.core.fact_transactions ) SELECT
	 SUM(diff) as missing
	, ddate from base WHERE
	NOT diff IN (0,1) GROUP BY ddate ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 25
QUERY_ID: 153aaf19-e643-4971-abb2-aab543e21ead
QUERY_TITLE: [TC] Deposits Base Year CAT

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		concat(token) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*) AND CURRENT_DATE-1 ) SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
	s.cat,
		SUM(total_txns) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_txns_cumu from sample_space s  LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat WHERE 1=1
	AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})



=======================================================================================
=======================================================================================
QUERY_NO: 26
QUERY_ID: 215c7882-348d-4902-847f-8ac8a0b9f601
QUERY_TITLE: [ALGO][Q4] Voting Behavior - By Committed Algos by a Wallet

QUERY_STRING:

with comms as (
	SELECT
	
		CASE WHEN RECEIVER='GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' THEN 'p1' ELSE 'p2' END as period,
			sender,
		tx_id,
			block_id,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			--TRY_TO_NUMBER(LTRIM(substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ))) as num_value,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			CASE WHEN num_value IS NULL THEN substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ) ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		--AND RECEIVER IN('GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U', '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY')
	
		AND RECEIVER IN( 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U')
		--AND sender = '6NTP2VYDYVNYJECH5KTWHX43CRNMAMDFHUEJNQDTTSPKHVB6P6J6MKKOTE'
			--AND NOT (TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE  ANY ('%:0}', '%: 0}')) ), p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ), p1_votes_filtered as (
	SELECT sender , MAX(final_opt) as final_opt, prop
	from p1_voters_debug
	WHERE prop = 3
	GROUP BY prop, sender ), pre_final as (
	  SELECT COUNT(DISTINCT comms.SENDER) as totals, final_opt,
		CASE	WHEN final_commit<1000 THEN 'fish'
			WHEN final_commit>1000 AND final_commit<10000 THEN 'shark'
				ELSE 'whale' END
			as wallet_type
	  from comms
	  LEFT JOIN p1_votes_filtered as v
	  ON comms.sender = v.sender
	  WHERE FINAL_OPT IS NOT NULL
	  GROUP BY final_opt, wallet_type ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 27
QUERY_ID: 26af95fe-3bc7-45ac-a6d9-8e1b6cecf1c4
QUERY_TITLE: [NEAR][T3] Ref Finance Calls By Function

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
		method_name,
		tx
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	--AND tx not ilike '%"status":{"Failure"%' ), pre as (
	SELECT
	COUNT(DISTINCT tx_hash) as totals,
		method_name,
		ddate
	from base
	GROUP BY ddate, method_name ORDER BY ddate ASC ) SELECT *,
	rank() OVER (PARTITION BY ddate ORDER BY totals DESC) as rank from pre  qualify rank<=5



=======================================================================================
=======================================================================================
QUERY_NO: 28
QUERY_ID: 59203d55-8358-410c-8427-52b47a1cdf78
QUERY_TITLE: [NEAR] Validator Tool - Daily Stake Actions

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  AND r.receiver_id = '{{validator}}'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  datediff('day', min_dtime, coalesce(max_dtime, CURRENT_DATE)) as tstake
	  , cur_stake
	  , staker
	  , min_dtime
	  , CASE WHEN cur_stake<=0 THEN 'inactive' ELSE 'active' END as CAT
	from stakers ) SELECT
	 COUNT(DISTINCT staker) as stakers
	, SUM(cur_stake) as dstake
	, trunc(min_dtime, 'day') as dtime from refine WHERE CAT = 'active' GROUP BY dtime



=======================================================================================
=======================================================================================
QUERY_NO: 29
QUERY_ID: aed987cc-a5b3-42b4-8944-a4e441eeed67
QUERY_TITLE: [NEAR] Empty Blocks

QUERY_STRING:

with sol as (
	SELECT
	
	COUNT(DISTINCT b.block_id) as total,
		date_trunc('day', b.block_timestamp) as ddate
	from solana.core.fact_blocks b
	LEFT JOIN solana.core.fact_votes_agg_block v ON b.block_id=v.block_id
	WHERE 1=1
		AND b.block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
		AND b.tx_count-v.num_votes = 0
	GROUP BY ddate ), eth as (
	SELECT
	
	COUNT(DISTINCT block_number) as total,
		date_trunc('day', block_timestamp) as ddate
	from ethereum.core.fact_blocks
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
		AND  tx_count = 0
	GROUP BY ddate ), near as (
	SELECT
	
	COUNT(DISTINCT block_height) as total,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.mdao_near.blocks
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
		AND  tx_count = 0
	GROUP BY ddate ) SELECT *, 'sol' as cat from sol  UNION ALL  SELECT *, 'eth' as cat from eth  UNION ALL SELECT *, 'near' as cat from near  ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 30
QUERY_ID: bebb0b68-b279-42a0-8878-666d7340f572
QUERY_TITLE: [TC] Deposits Base USD tier

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token,':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ) SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
		coalesce(token_amounts, 0) as token_amounts,
		price,
		token_amounts*price as volume_usd,
	s.cat,
		SUM(total_txns) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_txns_cumu,
		SUM(volume_usd) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_volume_cumu from sample_space s  LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat LEFT JOIN  (
	SELECT
	 avg(price) as price,
	 CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	date_trunc('day', HOUR) as pdate
	FROM ethereum.core.fact_hourly_token_prices
	WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(split(cat,':')[0])='eth' THEN 'weth' ELSE split(cat,':')[0] END as cat from refine WHERE cat IS NOT NULL)
	GROUP BY pdate,symbol
	) p  ON s.ddate = pdate AND lower((split(s.cat,':')[0]))=p.symbol WHERE 1=1
	AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})



=======================================================================================
=======================================================================================
QUERY_NO: 31
QUERY_ID: 957b3600-08c7-49d8-9129-b540009eccc5
QUERY_TITLE: [Optimism][Q10] Velodrome Daily User Types

QUERY_STRING:

with base as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'staking action' as activity from optimism.velodrome.ez_staking_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'LP action' as activity from optimism.velodrome.ez_lp_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'claim rewards' as activity from optimism.velodrome.ez_claimed_rewards
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'swaps'  as activity from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO locks' as activity from optimism.velodrome.ez_velo_locks
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO votes' as activity from optimism.velodrome.ez_votes ) , min_dates as (
	SELECT
		sender,
		MIN(block_timestamp::date) as min_ddate
	from base
	GROUP BY sender ) , pre as (
	SELECT
	COUNT(DISTINCT b.sender) as users,
	block_timestamp::date as ddate,
		CASE WHEN ddate>min_ddate THEN 'old' ELSE 'NEW' END as type
	from base b
	 LEFT JOIN min_dates m ON b.sender = m.sender
	 group by ddate, type  ) SELECT * from pre



=======================================================================================
=======================================================================================
QUERY_NO: 32
QUERY_ID: af191b7a-ffb4-4d58-8348-48c37474f734
QUERY_TITLE: [Arb] HOP deposit to L2

QUERY_STRING:

SELECT *  from ethereum.core.ez_eth_transfers WHERE
	 block_timestamp::date = '2022-06-25'
	AND tx_hash = '0x6673e76644815f7ccc3ae5fe0b607120960f3d7cccbb5a85fb3f47784ffadfb4'



=======================================================================================
=======================================================================================
QUERY_NO: 33
QUERY_ID: 3733a24b-40d5-466a-818a-1b7920a5428d
QUERY_TITLE: [SOL][Q2] Base 3

QUERY_STRING:

select block_timestamp::date as day, count(distinct tx_id)  from solana.transactions  where
	
	--day like '%2021-12%'
	--month(block_timestamp) = '12' and year(block_timestamp) = '2021'
	--block_timestamp::date < '2022-01-01'
	block_timestamp::date >= '2021-12-01' and block_timestamp::date < '2022-01-01'
	and (
	tx_to_address in (
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
	) or tx_from_address in (
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
	)
	) group by 1 order by 1



=======================================================================================
=======================================================================================
QUERY_NO: 34
QUERY_ID: af0139f1-d3f1-4dec-9bdc-1ade82f6c434
QUERY_TITLE: [ALGO][Q34] P2 Votes over time

QUERY_STRING:

with p2_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			block_id,
			block_timestamp,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,.*"(\\w)".*', 1, 1, 'e', 1) as opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		--AND (block_timestamp>='2022-01-31 21:29:00' AND block_timestamp<='2022-02-28')
			AND (block_timestamp>='2022-01-31 13:29:00' AND block_timestamp<'2022-02-28 15:59:00')
			--AND (block_timestamp >= '2022-01-31'AND block_timestamp <= '2022-02-27') ),
	 p2_vote_refine as (
	SELECT
		DISTINCT sender,
		last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as  last_ts,
		last_value(prop) OVER (PARTITION BY sender order by block_id asc) as  prop,
		last_value(opt) OVER (PARTITION BY sender order by block_id asc) as  final_opt
	from p2_voters_debug ),
	 p2_vote as (
	SELECT  DISTINCT sender , final_opt, prop, last_ts
	from p2_vote_refine
	WHERE prop = 5 ) SELECT
	
	COUNT(sender) as total_wallets,
	final_opt as option_voted,
	date_trunc('day', last_ts) as ddate,
	SUM(total_wallets) OVER (PARTITION by option_voted ORDER BY ddate ASC) as votes_over_time from p2_vote GROUP BY ddate, option_voted



=======================================================================================
=======================================================================================
QUERY_NO: 35
QUERY_ID: c8015987-bca2-4971-b9c2-54134d6158d5
QUERY_TITLE: [TC] Total Users Drilldown

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token,':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate,
		actor
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY actor,cat, ddate ), pre as (
	SELECT 
	r.actor,
		ddate,
		cat,
	total_txns,
		token_amounts,
		price,
		token_amounts*price as volume_usd
	from refine r
	 LEFT JOIN  (
	  SELECT
	
	avg(price) as price,
	
	CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	  date_trunc('day', HOUR) as pdate
	  FROM ethereum.core.fact_hourly_token_prices
	  WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(split(cat,':')[0])='eth' THEN 'weth' ELSE split(cat,':')[0] END as cat from refine WHERE cat IS NOT NULL)
	  GROUP BY pdate,symbol
	  ) p ON lower((split(r.cat,':')[0]))=p.symbol AND r.ddate =p.pdate
	WHERE 1=1
		AND r.cat ilike '%{{ASSET}}%'  ), pre_final as (
	SELECT
	SUM(volume_usd) as volume_usd,
	actor
	from pre
	GROUP BY actor ) SELECT
	 COUNT(DISTINCT actor) as total_users from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 36
QUERY_ID: aefc2f41-6ae5-4f11-ba30-dde51c894f95
QUERY_TITLE: [ENS][Q1] Total Wallets

QUERY_STRING:

SELECT 137689 AS "Eligible Walllets" from ethereum.transactions LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 37
QUERY_ID: 047b7e24-8af3-4a26-9de3-fa2be69819e9
QUERY_TITLE: [TC] Deposits Base Year

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		concat(token, ':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ) SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
	s.cat,
		SUM(total_txns) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_txns_cumu from sample_space s  LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat WHERE 1=1
	AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})



=======================================================================================
=======================================================================================
QUERY_NO: 38
QUERY_ID: 7a97f696-e242-47f1-b4bd-ee4ef6e9108f
QUERY_TITLE: [FS] Shrooms Costing

QUERY_STRING:

with mints as (
	SELECT
		date_trunc('hour', block_timestamp) as hdate,
		tx_hash,
		round(tx_fee * price, 2) as mint_cost
	from ethereum.core.ez_nft_mints m
	LEFT JOIN ethereum.core.fact_hourly_token_prices p ON date_trunc('hour', block_timestamp) = p.hour
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
		AND p.token_address = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 39
QUERY_ID: 66161c27-f0a5-4c52-881e-06c946a8b3e7
QUERY_TITLE: [NEAR][2023] Staking User Stats DEBUG

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer
	  , receiver_id
	from base
	GROUP BY tx_signer, receiver_id ) , refine as (
	SELECT
	  COUNT(DISTINCT tx_signer) as stakers
	  , CASE WHEN cur_stake<=0.001 THEN 'inactive' ELSE 'active' END as CAT
	from stakers
	GROUP BY CAT ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 40
QUERY_ID: 4d2e51b9-35e1-46f0-9256-e75d73a033a9
QUERY_TITLE: [NEAR] Daily Users: Connoisseur vs Tourists

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), pre_stats as (
	SELECT
		tx_signer,
		MIN(date_trunc('day', block_timestamp)) as min_ddate
	from types
	WHERE type IN ('nft_mint', 'resolve_purchase')
	GROUP BY tx_signer  ), refine_stats as (
	SELECT
		t.tx_signer as users,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN ddate>min_ddate THEN 'OLD' ELSE 'NEW' END as type
	from types t
	 LEFT JOIN pre_stats ps on t.tx_signer = ps.tx_signer
	WHERE 1=1
		AND type IN ('nft_mint', 'resolve_purchase') ), stats as (
	SELECT
		COUNT(DISTINCT users) as users,
		ddate,
		type
	from refine_stats t
	GROUP BY ddate, type ORDER BY ddate ASC ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 400)) ), collats as (
	SELECT DISTINCT type, '0' as blank
	from stats ), sample_space as (
	SELECT
	
	d.ddate,
		type,
		MAX(blank) as blank
	from dates d
	CROSS JOIN collats c
	GROUP BY d.ddate,type ORDER BY ddate ) SELECT sp.ddate,
	coalesce(users, blank) as users,
	sp.type from sample_space sp LEFT JOIN stats s ON sp.ddate=s.ddate AND sp.type=s.type WHERE
	sp.ddate>='2021-09-07' ORDER BY sp.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 41
QUERY_ID: 2210360f-8690-4729-828a-ce802bd9bfdf
QUERY_TITLE: [ALGO] Defly Top 5 Swaps

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), defly_txns as (
	SELECT tx_group_id
		from algorand.asset_transfer_transaction
	WHERE
		asset_id = '470842789'
		AND tx_group_id IN ( SELECT tx_group_id from tinyman_txns) ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from defly_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
		MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
			MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * , 'buy' as side from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * , 'sell' as side from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ) SELECT
		algo_amount,
	wallet,
	side,
		block_timestamp,
		tx_group_id from filter ORDER BY algo_amount DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 42
QUERY_ID: 455b97a3-34b4-4c36-9aa6-31069f2fb606
QUERY_TITLE: [NEAR] NFT Daily Traffic - Over Time

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND ((tx_receiver LIKE '%paras%') OR  (tx_signer LIKE '%paras%') ) ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), stats as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txs,
		SUM(price) as near_volume,
		COUNT(DISTINCT tx_signer) as daily_users,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN type='nft_mint' THEN 'NFT Mints' ELSE 'NFT Secondary Sales' END as type
	from types
	WHERE type IN ('nft_mint', 'resolve_purchase')
	GROUP BY ddate, type ORDER BY ddate ASC ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 400)) ), collats as (
	SELECT DISTINCT type, '0' as blank
	from stats ), sample_space as (
	SELECT
	
	ddate,
		type,
		MAX(blank) as blank
	from dates d
	CROSS JOIN collats c
	GROUP BY ddate, type ORDER BY ddate ) SELECT sp.ddate,
	coalesce(near_volume, blank) as near_volume,
	SUM(near_volume) OVER(PARTITION BY sp.type ORDER BY sp.ddate ASC) as volume_cumulative,
	coalesce(total_txs, blank) as total_txs,
	SUM(total_txs) OVER(PARTITION BY sp.type ORDER BY sp.ddate ASC) as txs_cumulative,
	sp.type from sample_space sp LEFT JOIN stats s ON sp.ddate=s.ddate AND sp.type = s.type WHERE
	sp.ddate>='2021-09-07' ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 43
QUERY_ID: 58ce8894-bfa8-4195-97b6-7398847ac1bf
QUERY_TITLE: [poly][Q4] Active Wallets

QUERY_STRING:

with base_wallets as (
	SELECT
	
	COUNT(*) as txns,
		from_address as wallet,
		MAX(DATEADD('day', 90, date_trunc('day', block_timestamp))) as ddate_ul,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.polygon.transactions
	WHERE
		block_timestamp >= CURRENT_DATE - 365
	GROUP BY ddate, wallet ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 275)) ), mixer as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		b.ddate_ul
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_ul AND d.dkey>=b.ddate ) SELECT COUNT(DISTINCT wallet) as active_wallets, dkey from mixer GROUP BY dkey ORDER BY dkey ASC



=======================================================================================
=======================================================================================
QUERY_NO: 44
QUERY_ID: 1f1b4c46-8989-49d5-a20f-6007dfab64a4
QUERY_TITLE: test

QUERY_STRING:

SELECT
	(SUM (CASE WHEN ACTION='Stake' THEN STAKE_AMOUNT ELSE (STAKE_AMOUNT*(-1)) END))/1e24 as total_stake from near.core.dim_staking_actions



=======================================================================================
=======================================================================================
QUERY_NO: 45
QUERY_ID: eaa7e74e-f71a-4324-9e0c-f6edb18d4f08
QUERY_TITLE: NEAR Blocks

QUERY_STRING:

-- forked from Aurora Blocks @ https://flipsidecrypto.xyz/edit/queries/9dbf63ec-0fff-467b-8dfe-cf12bf28e45c SELECT
	COUNT(1) as totals
	, tx_count from near.core.fact_blocks group by tx_count



=======================================================================================
=======================================================================================
QUERY_NO: 46
QUERY_ID: c4a1e1bd-8d21-4a87-add4-dc084a16f58f
QUERY_TITLE: [ALGO][Q15] AB-2 part 1

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  COUNT(DISTINCT ASSET_ID) as unique_assets,
			COUNT(DISTINCT buyer) as unique_buyers,
			SUM(algo_amount) as algo_amount,
			SUM(asset_amount) as asset_amount,
		date_trunc('day', trade_close_date) as ddate from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL
		 GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 47
QUERY_ID: c7c74cfc-8238-4a50-9ba5-db9bea39dd95
QUERY_TITLE: [ALGO][Q42] Arbs Refined

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ) SELECT
	 TIME_DELTA_SECONDS, PROFIT, PROFIT_PERC,
	SWAPPER, block_timestamp, TX_GROUP_ID,
	P_TGROUP, PF_ASSET, PF_AMT, PT_ASSET, PT_AMT, P_TIME,
	SWAP_FROM_ASSET_ID, SWAP_FROM_AMOUNT, SWAP_TO_ASSET_ID, SWAP_TO_AMOUNT,
	SWAP_PROGRAM, POOL_ADDRESS, P_PROGRAM, P_POOL from refine WHERE
	time_delta_seconds <= 600
	AND profit_perc> 0



=======================================================================================
=======================================================================================
QUERY_NO: 48
QUERY_ID: 33e84d4b-33a4-4fde-8025-a1e62c4a074a
QUERY_TITLE: Near Transactions vs KAIKAI Gas

QUERY_STRING:

SELECT *,
	
	 (tx:actions[0]:Transfer:deposit)/1e24 as gas_paid from near.core.fact_transactions WHERE
	tx_hash = '349xyjzX5f573yvVdaCgpCU5gyyuTwp7tynjRyMWUV9W'
	AND tx_signer = 'hotwallet.kaiching'
	AND ARRAY_SIZE(tx:actions) = 1
	AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005



=======================================================================================
=======================================================================================
QUERY_NO: 49
QUERY_ID: c9143494-06f6-4706-ad1d-dccd0035208a
QUERY_TITLE: [ENS][Q14] Revenues (6 months )

QUERY_STRING:

with events as (
	  SELECT
	
	
	SUM(ROUND(event_inputs:"cost"/1e18,4)) as revenue,
			date_trunc('week', block_timestamp) as ddate,
		COUNT(tx_id) as total_tns,
			CASE WHEN event_name = 'NameRenewed' THEN 'Renewal' ELSE 'Registration' END as types
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND (event_name = 'NameRegistered' OR event_name = 'NameRenewed')
	
	
	AND block_timestamp >= '2021-05-01' -- Registries in last 6 months
	GROUP by ddate, types ) SELECT
	* from events



=======================================================================================
=======================================================================================
QUERY_NO: 50
QUERY_ID: c953d022-1981-427a-9866-d919ac5bf1a3
QUERY_TITLE: [NEAR] NFT Paras marketplace Tests

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), all_series as (
	SELECT
	 token_series,
	MAX(actor) as creator,
	--coalesce(split(value, ':')[0], 0) as royalty_taker,
	SUM(coalesce(split(value, ':')[1], 0)) as royalty_perc,
	MAX(log_json:params:token_metadata:title) as title
	from types, table(flatten(input=>royalty_set))
	WHERE 1=1
	AND type = 'nft_create_series'
		--AND try_to_decimal(coalesce(split(value, ':')[1], '0')) IS NULL
	GROUP BY token_series ) SELECT * from types WHERE
	type LIKE '%mint%' LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 51
QUERY_ID: 25beb043-71a5-4a45-9a65-548f2346c09a
QUERY_TITLE: [ALGO][Q4] Voting Breakdown - By Committed Algo

QUERY_STRING:

with comms as (
	SELECT
	
		CASE WHEN RECEIVER='GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' THEN 'p1' ELSE 'p2' END as period,
			sender,
		tx_id,
			block_id,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			--TRY_TO_NUMBER(LTRIM(substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ))) as num_value,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			CASE WHEN num_value IS NULL THEN substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ) ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		--AND RECEIVER IN('GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U', '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY')
	
		AND RECEIVER IN( 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U')
			AND ( (block_id>=16528779 AND block_id<=16824818) OR  (block_id>=18204612 AND block_id<=18502160) )
		--AND sender = '6NTP2VYDYVNYJECH5KTWHX43CRNMAMDFHUEJNQDTTSPKHVB6P6J6MKKOTE'
			--AND NOT (TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE  ANY ('%:0}', '%: 0}')) ), p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			AND (block_id>=17139424 AND block_id<=17434687)
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ), p1_votes_filtered as (
	SELECT sender , MAX(final_opt) as final_opt, prop
	from p1_voters_debug
	WHERE prop = 3
	GROUP BY prop, sender ), pre_final as (
	  SELECT COUNT(DISTINCT comms.SENDER), SUM(final_commit) as total_algo, final_opt
	  from comms
	  LEFT JOIN p1_votes_filtered as v
	  ON comms.sender = v.sender
	  WHERE FINAL_OPT IS NOT NULL
	  GROUP BY final_opt ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 52
QUERY_ID: c9f1c735-8321-49df-87d9-8bb87ec94688
QUERY_TITLE: [ALGO][Q19] Period 2 Gov Base

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-07') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address ) SELECT * from pre_final LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 53
QUERY_ID: cc1d77ed-527c-49b2-9a67-e753874cd8ae
QUERY_TITLE: Step 3: What is your historical balance?

QUERY_STRING:

-- Using what we just learned in the previous query for labels:
	-- Come up with a solution that would show the balance of all Binance labeled addresses for USDC -- Use the Visual Builder by pressing 'New Visual' in the top right corner, to create a line chart to show the trend over the last 30 days!  -- Share your query in Discord!  SELECT
	 balance_date,
	sum(balance) as balance FROM ethereum.erc20_balances  WHERE label ='binance'
	AND  symbol = 'USDC'
	  AND balance_date >= current_date - 30 GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 54
QUERY_ID: cc64e86d-0750-4980-b906-1691f2fa85a4
QUERY_TITLE: [AAVE-29] Average TX_FEE for Ethereum Transactions

QUERY_STRING:

SELECT AVG(FEE_USD), date_trunc('month', block_timestamp) as mdate FROM ethereum.transactions WHERE
	block_timestamp >= CURRENT_DATE - 720 GROUP BY mdate



=======================================================================================
=======================================================================================
QUERY_NO: 55
QUERY_ID: ad20647b-81d5-41ab-ae93-7a23c8252fe0
QUERY_TITLE: [ALGO][Q16] Top 10

QUERY_STRING:

SELECT	COUNT(DISTINCT address) as total_holders,
		asset_id,
		asset_name from algorand.account_asset WHERE
	asset_closed = FALSE
		AND amount!=0
	AND asset_name NOT LIKE '%Pending Props%' GROUP BY asset_id, asset_name ORDER BY total_holders DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 56
QUERY_ID: d23ecd36-0735-45f2-9d9c-3c4b2fc6cdb4
QUERY_TITLE: [ENS][Q10] Recent Registrations

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
		MAX(date_trunc('day', block_timestamp)) as max_date,
	MIN(date_trunc('day', block_timestamp)) as min_date
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered' GROUP BY owner ORDER BY domains DESC ) SELECT
	max_date as ddate,
		CASE
	WHEN domains=1 OR (domains>1 AND min_date=max_date) THEN 'new'
	
				ELSE 'multiple' END
					as trend,
		COUNT(trend) as total,
		SUM(total)
				OVER (PARTITION BY trend ORDER BY ddate)
				AS growth from totals WHERE
	max_date >= '2021-11-01' GROUP BY ddate,trend



=======================================================================================
=======================================================================================
QUERY_NO: 57
QUERY_ID: 142c202c-9a4a-4917-9936-6afda59234f7
QUERY_TITLE: [ENS][Q14] Revenues Totals

QUERY_STRING:

with events_regs as (
	  SELECT
	
	
	SUM(ROUND(event_inputs:"cost"/1e18,4)) as reg_revenue,
			date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_id) as reg_total_tns
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	AND block_timestamp >= '2021-11-01' --AND block_timestamp <= '2021-12-20' -- Registries in last 6 months	-- Registries in last 6 months
	GROUP by ddate ), events_renewed as (
	  SELECT
	
	
	SUM(ROUND(event_inputs:"cost"/1e18,4)) as ren_revenue,
			date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_id) as ren_total_tns
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRenewed'
	
	
	AND block_timestamp >= '2021-11-01' --AND block_timestamp <= '2021-12-20' -- Registries in last 6 months	-- Registries in last 6 months
	GROUP by ddate ) SELECT
	
			SUM(reg_revenue) as registration_revenue,
		SUM(ren_revenue) as ren_revenue from events_renewed JOIN events_regs ON events_renewed.ddate = events_regs.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 58
QUERY_ID: d6849b35-5fe0-4954-9e6f-617c2e1eac19
QUERY_TITLE: Copy of Copy of ETHER txn inspect

QUERY_STRING:

with total_flash as (
	SELECT *
	from aave.flashloans
	WHERE 
	block_timestamp >= CURRENT_DATE - 360
	  AND initiator_address IN ('0xa5d330f6619d6bf892a5b87d80272e1607b3e34d','0xaed662abcc4fa3314985e67ea993cad064a7f5cf')
	  OR target_address IN ('0xa5d330f6619d6bf892a5b87d80272e1607b3e34d','0xaed662abcc4fa3314985e67ea993cad064a7f5cf')
		LIMIT 500
	) , ds_data as (
		SELECT *
	from ethereum.udm_events
	WHERE
	origin_address IN ('0xa5d330f6619d6bf892a5b87d80272e1607b3e34d','0xaed662abcc4fa3314985e67ea993cad064a7f5cf')
	  OR from_address IN ('0xa5d330f6619d6bf892a5b87d80272e1607b3e34d','0xaed662abcc4fa3314985e67ea993cad064a7f5cf')
	AND tx_id IN (SELECT
					tx_id
					from aave.flashloans
					WHERE 
					block_timestamp >= CURRENT_DATE - 360)
	AND block_timestamp >= CURRENT_DATE - 360
	  LIMIT 100)
	SELECT * from ds_data



=======================================================================================
=======================================================================================
QUERY_NO: 59
QUERY_ID: d692d32d-cb1d-4f3e-89aa-7076a510168c
QUERY_TITLE: [LilNouns] Vote & Holders Comparison

QUERY_STRING:

with all_voters as (
	SELECT
	
	DISTINCT ORIGIN_FROM_ADDRESS as voter,
		'1' as tag
	from ethereum.core.fact_event_logs
	 WHERE 1=1
		AND contract_address = '0x5d2c31ce16924c2a71d317e5bbfd5ce387854039'
		AND event_name = 'VoteCast' ), base_holders as (
	SELECT
	
	*,
		dense_rank() over (PARTITION by TOKENID ORDER BY BLOCK_TIMESTAMP DESC, EVENT_INDEX DESC) as row_num --EVENT-INDEX for the hops during mint...
	from ethereum.core.ez_nft_transfers
	WHERE 1=1
		AND NFT_ADDRESS = lower('0x4b10701Bfd7BFEdc47d50562b76b436fbB5BdB3B')
	qualify row_num=1 ), all_holders as (
	SELECT
	
	DISTINCT NFT_TO_ADDRESS as holder
	from base_holders ), mix as (
	SELECT
		holder,
		CASE	WHEN tag=1 THEN 'participated at least once' ELSE 'Never participated' END as cat
	from all_holders
	LEFT JOIN all_voters on holder = voter ) SELECT
	COUNT(*) as users,
	cat from mix group by cat



=======================================================================================
=======================================================================================
QUERY_NO: 60
QUERY_ID: d699142e-1ab9-4177-bcad-6a563840cd47
QUERY_TITLE: [OP] L2 Summer Transaction Types

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	COUNT(DISTINCT a.sender) as totals
	, CASE	WHEN mdate IS NULL THEN 'Optimism Only'
				WHEN mdate>ddate THEN 'Both/Optimism First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	GROUP BY  cat  ) SELECT 
	* from refine ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 61
QUERY_ID: 8529fd1c-ff9b-4ef2-9be8-d58d29eeadac
QUERY_TITLE: ARB txns base

QUERY_STRING:

-- forked from SOL txns base @ https://flipsidecrypto.xyz/edit/queries/56c0b34e-cfb0-4a84-8a65-f1ac5986e7d0  with base as (
	SELECT
	
	COUNT(DISTINCT TX_HASH) as totals
	  , date_trunc('day',block_timestamp) as dday
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday ) , wallets_100 as (
	SELECT
	  COUNT(DISTINCT TX_HASH) as totals
	  , FROM_ADDRESS as wallet
	  , date_trunc('day',block_timestamp) as dday
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday, wallet
	QUALIFY row_number() OVER (PARTITION BY dday ORDER BY totals DESC)<={{No_Wallets}} ) , sums as (
	SELECT
	  SUM(w.totals) as wtotals
	  , w.dday as day
	  , b.totals as dtotals
	from wallets_100 w
	 LEFT JOIN base b ON w.dday=b.dday
	GROUP BY day, dtotals ) SELECT
	 day
	, wtotals
	, dtotals
	, ROUND((wtotals/dtotals)*100, 2) as top_wallets_perc from sums



=======================================================================================
=======================================================================================
QUERY_NO: 62
QUERY_ID: 2a8d4722-0b80-4565-b2ed-faa99b1cb7dc
QUERY_TITLE: [ALGO][Q42] Arbs: Trade Direction

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ) SELECT
	 COUNT(*) as total,
	coalesce(asset_name, 'ALGO') as asset_name,
	concat(p_program, '-->', swap_program) as route from refine r left JOIN algorand.asset a ON r.swap_from_asset_id = a.asset_id WHERE
		time_delta_seconds <= 600
		AND profit_perc> 0
	AND swap_from_asset_id IN (465865291, 0) GROUP BY asset_name, route



=======================================================================================
=======================================================================================
QUERY_NO: 63
QUERY_ID: 072812f2-e3e2-4741-a130-dcda9209c366
QUERY_TITLE: [NEAR] Validator Tool - Daily Stake Actions DEBUG

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name  IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  AND r.receiver_id = '{{validator}}'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer )  SELECT * from stakers



=======================================================================================
=======================================================================================
QUERY_NO: 64
QUERY_ID: 97371d07-e7b1-4c34-8503-adc2531fbaf2
QUERY_TITLE: [ENS][Q11] Registrations and activity TEST

QUERY_STRING:

with wallets as (
	  SELECT
	
	
	REPLACE(event_inputs:"owner",'"','') as owner,
	
	
	COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
	
	
	MAX(date_trunc('day', block_timestamp)) as max_date,
	 
	MIN(date_trunc('day', block_timestamp)) as min_date
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	AND block_timestamp >= '2021-05-01' AND block_timestamp <= '2021-12-20'	-- Registries in last ~ 6 months
	GROUP BY owner ), --  Handling both in/out txns out_txns as (
	SELECT COUNT(distinct tx_id) as totals, from_address as wallet
	from ethereum.transactions
	WHERE
		from_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-05-01' AND block_timestamp <= '2021-12-20'
		GROUP BY wallet ), in_txns as (
		SELECT COUNT(distinct tx_id) as totals, to_address as wallet
	from ethereum.transactions
	WHERE
		to_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-05-01' AND block_timestamp <= '2021-12-20'
		GROUP BY wallet ), combo as (
	SELECT * from in_txns
	UNION
	SELECT * from out_txns ), interm as (
	SELECT
			SUM(totals) as totals,
		wallet
	from combo
	GROUP BY wallet ) SELECT
	* from interm ORDER BY totals asc LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 65
QUERY_ID: dc7f86ec-73c6-49a2-a7d4-6e0c3ae30b58
QUERY_TITLE: tests - offer sales

QUERY_STRING:

with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	  , token_standard
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	
	 , token_standard
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) SELECT * from offer_sales WHERE 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 66
QUERY_ID: 2bec4785-b144-4fa8-9b06-31f30c581c94
QUERY_TITLE: [ENS][Q11] Total Registries

QUERY_STRING:

with wallets as (
	  SELECT
	
	
	REPLACE(event_inputs:"owner",'"','') as owner,
	
	
	COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
	
	
	MAX(date_trunc('day', block_timestamp)) as max_date,
	 
	MIN(date_trunc('day', block_timestamp)) as min_date
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20' -- Registries in last 6 months	-- Registries in last 6 months
	GROUP BY owner ), --  Handling both in/out txns out_txns as (
	SELECT COUNT(distinct tx_id) as totals, from_address as wallet
	from ethereum.transactions
	WHERE
		from_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20' -- Registries in last 6 months
		GROUP BY wallet ), in_txns as (
		SELECT COUNT(distinct tx_id) as totals, to_address as wallet
	from ethereum.transactions
	WHERE
		to_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20' -- Registries in last 6 months
		GROUP BY wallet ), combo as (
	SELECT * from in_txns
	UNION
	SELECT * from out_txns ), interm as (
	SELECT
			SUM(totals) as totals,
		wallet
	from combo
	GROUP BY wallet ) SELECT COUNT(DISTINCT owner) as total_registries from wallets



=======================================================================================
=======================================================================================
QUERY_NO: 67
QUERY_ID: db96a07f-3668-467b-aaf7-9b27aaf54251
QUERY_TITLE: [wormhole] Usage comparison among Users of Both.

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ), common_user as ( SELECT
	min_wh_user.address, wh_date, shuttle_date, 'test' as dummy,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.address = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ), total_txns as (
	SELECT shuttle_date as ddate, tx_id, cat, address from total_shuttle_txns
	UNION ALL
	SELECT wh_date as ddate, tx_id, cat, address from wh_txns ), post_txns as (
		SELECT ddate, tx_id, cat,  total_txns.address, dummy, wh_date
		from total_txns
	LEFT JOIN common_user ON total_txns.address = common_user.address
	WHERE
	dummy IS NOT NULL
	AND ddate>wh_date ),
	 txns_formatted as (
	SELECT 
		CASE WHEN cat='wh' THEN 1 ELSE 0 END as wh_count,
		CASE WHEN cat='shuttle' THEN 1 ELSE 0 END as shuttle_count,
		tx_id, ddate, cat ,address
	from post_txns	 ), pre_output as (
	SELECT
	SUM(wh_count) as wh_count,
				SUM(shuttle_count) as shuttle_count,
			COUNT(DISTINCT tx_id) as total_txns,
				address
	from txns_formatted
	GROUP BY address ), outputs as (
	  SELECT	CASE
	WHEN WH_COUNT=0 AND SHUTTLE_COUNT!=0 THEN 'shuttle only'
	 
				WHEN WH_COUNT!=0 AND SHUTTLE_COUNT=0 THEN 'wormhole only'
	 
				ELSE 'BOTH' END
	
				as types,
				wh_count,
				shuttle_count,
				wh_count+shuttle_count as total_counts,
	 
		address
	  from pre_output ) SELECT	
			CASE	WHEN (wh_count/total_counts) * 100 < 45 THEN 'Shuttle Majority'
				WHEN (wh_count/total_counts) * 100 >= 45 AND (wh_count/total_counts) * 100 <= 55 THEN 'Equal Usage'
					ELSE 'Wormhole Majority' END
			as usage_type,
			COUNT(DISTINCT address) as totals from outputs WHERE types='BOTH' GROUP BY usage_type



=======================================================================================
=======================================================================================
QUERY_NO: 68
QUERY_ID: 2ee85981-ebbf-428d-a796-fb6ee18e297a
QUERY_TITLE: [NEAR][2023] Inactive Stakers and Duration

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  datediff('day', min_dtime, coalesce(max_dtime, CURRENT_DATE)) as tstake
	  , staker
	  , min_dtime
	  , CASE WHEN cur_stake<=0.001 THEN 'inactive' ELSE 'active' END as CAT
	from stakers ) SELECT
	 staker
	, min_dtime
	, tstake
	, CASE  WHEN tstake<7 THEN 'Less than a week'
	
	
	  WHEN tstake<30 THEN 'Less than a month'
	
	
	  WHEN tstake>=31 AND tstake<60 THEN '1 Month+'
	
	
	  WHEN tstake>=60 AND tstake<365 THEN 'Multiple months'
	
	
	  ELSE 'Year or more' END as CAT2 from refine WHERE CAT = 'inactive'



=======================================================================================
=======================================================================================
QUERY_NO: 69
QUERY_ID: b1230a30-7cc5-40c7-a2ad-7a53399ea7d4
QUERY_TITLE: Top Restakes:  New Governor

QUERY_STRING:

with actions as (
	SELECT
	
	a.block_timestamp as dtime,
		tx_signer as staker,
	
	tx_receiver as gov,
		a.tx_hash,
		method_name as act
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
	ORDER BY staker, dtime ), refine as (
	SELECT
	*,
		lag(gov) OVER (PARTITION BY staker ORDER BY dtime) as pgov,
		lag(act) OVER (PARTITION BY staker ORDER BY dtime) as pact,
		lag(tx_hash) OVER (PARTITION BY staker ORDER BY dtime) as ptx,
		lag(dtime) OVER (PARTITION BY staker ORDER BY dtime) as ptime,
		TIMEDIFF(seconds, ptime, dtime) as time_delta
	from actions ), restakes as (
	SELECT * from refine
	WHERE 1=1
		AND (pact = 'unstake_all' AND act ='deposit_and_stake')
		AND (gov!=pgov) ) SELECT
	gov as new_gov,
		COUNT(DISTINCT staker) as totals from restakes group by new_gov order by TOTALS DESC



=======================================================================================
=======================================================================================
QUERY_NO: 70
QUERY_ID: de18fc21-167f-48c5-861a-e4a08b511e41
QUERY_TITLE: [ThorChain][38] Rune Upgrades - Last 4 Week Charts

QUERY_STRING:

SELECT
	date_trunc('day', block_timestamp) as wdate,
		COUNT(DISTINCT from_address) as wallets,
			SUM(RUNE_AMOUNT) as total_rune,
		SUM(RUNE_AMOUNT_USD) as total_usd,
			AVG(wallets) OVER (ORDER BY wdate ASC) as avg_daily_wallets,
			AVG(total_rune) OVER (ORDER BY wdate ASC) as avg_daily_rune from thorchain.upgrades WHERE  block_timestamp>= '2021-12-01' AND block_timestamp< '2022-01-01' GROUP BY wdate ORDER BY wdate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 71
QUERY_ID: 1ecab836-93bf-48ee-af32-89ed5a891941
QUERY_TITLE: [ENS][Q15] Renewal Timing behavior in weeks from Expiry

QUERY_STRING:

with events_regs as (
	  SELECT
			MAX(date_trunc('day', DATE(event_inputs:"expires"))) as reg_expiry,
	
		MAX(date_trunc('day', block_timestamp)) as reg_date,
		event_inputs:"name" as ens_name
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	--AND block_timestamp >= '2021-11-01'  NEED TO FIND All REG-RENEWAL PAIRS!
	GROUP by ens_name ), events_renewed as (
	  SELECT
	
	
	MAX(date_trunc('day', DATE(event_inputs:"expires"))) as ren_expiry,
	
		MAX(date_trunc('day', block_timestamp)) as ren_date,
			event_inputs:"name" as ens_name
		
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRenewed'
	
	
	--AND block_timestamp >= '2021-11-01' 
	GROUP by ens_name  ), ren_days as (
		SELECT
	events_renewed.ens_name, CAST(DATEDIFF('days', reg_expiry, ren_date)/7 as INTEGER) as weeks_from_expiry,
					ren_date, ren_expiry, reg_date, reg_expiry
		from events_renewed
		LEFT JOIN events_regs
		ON events_renewed.ens_name = events_regs.ens_name
		WHERE
			reg_date<ren_date ) /* WHERE date condition as I was getting REG dates > REN dates may be due to transfers/reselling? Not sure. Only acting on valid/sound results. */ SELECT
		COUNT(*) as totals,
		CASE
	WHEN weeks_from_expiry<-50 THEN -50
				WHEN weeks_from_expiry>50 THEN 50
				ELSE weeks_from_expiry END	
		as types from ren_days GROUP BY types



=======================================================================================
=======================================================================================
QUERY_NO: 72
QUERY_ID: d689d3d2-5c06-4a08-a86b-a032564a0a67
QUERY_TITLE: [ENS][Q8] ENS users trend

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND block_timestamp >= CURRENT_DATE - 180 GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>1 THEN 'Multiple' ELSE 'Single' END as trends,
		COUNT(OWNER) as wallets from totals WHERE
	domains!=0 GROUP BY trends ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 73
QUERY_ID: e19a0008-db88-4452-b19d-177deb878fc7
QUERY_TITLE: [ENS][Q5] Registration Behaviour

QUERY_STRING:

with debug as (
	select COUNT(event_name) as registrations, date_trunc('day', block_timestamp) as day
	from ethereum.events_emitted
	WHERE
		block_timestamp >= CURRENT_DATE - 360
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		GROUP BY DAY ) SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 74
QUERY_ID: 227b28e0-68bb-480d-8046-fcd8ac8d9bf5
QUERY_TITLE: [AAVE] [Q19]  Flashloan Traffic in terms of USD amount

QUERY_STRING:

with total_flash as (
	SELECT COUNT(tx_id) as total_count, date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
	block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	) , ds_data as (
		SELECT COUNT(tx_id) as ds_count, date_trunc('month', block_timestamp) as mdate
	from ethereum.events_emitted
	WHERE
	event_name='FlashLoan'
	--AND tx_id = '0x382cf7914c74aae37ab8e4dec4dfa7924125db0b42a09aeb8954bd35f136cdb3'
	AND tx_from_label = 'defi saver'
	--AND block_timestamp >= CURRENT_DATE - 7
	AND tx_id IN (SELECT
					tx_id
					from aave.flashloans
					WHERE 
					block_timestamp >= CURRENT_DATE - 720)
	AND block_timestamp >= CURRENT_DATE - 720
		GROUP BY mdate ) SELECT 
	total_count, 'Total AAVE Flashloans' as label, mdate FROM total_flash
	 UNION
	  SELECT 
	ds_count as total_count, 'DefiSaver Flashloans' as label, mdate FROM ds_data



=======================================================================================
=======================================================================================
QUERY_NO: 75
QUERY_ID: 96b51440-4c68-4cf6-98c5-5c2cfdc66039
QUERY_TITLE: Edge Maker Volume (USD)

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	ddate
	, label
	, SUM(volume) as volume from edge_vols WHERE 1=1
	AND label2 = 'EDGE' GROUP BY ddate, label ORDER BY ddate ASC, label DESC



=======================================================================================
=======================================================================================
QUERY_NO: 76
QUERY_ID: b99de592-aaca-426e-83c5-8e345e4c8749
QUERY_TITLE: Total maker Volume (all instances)

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	ddate
	, label2
	 , SUM(volume) as volume from edge_vols WHERE 1=1 GROUP BY ddate, label2 ORDER BY ddate ASC, label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 77
QUERY_ID: 226f51ee-b5a4-47f2-a860-0dfdc50715f1
QUERY_TITLE: Lofty - Wallets invested into most properties

QUERY_STRING:

with loft_asas as (
	SELECT asset_name, asset_url,total_supply,total_supply*50 as TTIP, asset_id
	from algorand.asset
	WHERE
		creator_address = 'LOFTYRITC3QUX6TVQBGT3BARKWAZDEB2TTJWYQMH6YITKNH7IOMWRLC7SA'
			AND (ASSET_NAME IS NOT NULL AND asset_name!='Lofty AI') ), prop_holders as (
	SELECT address, amount, asset_id
	from algorand.account_asset
	WHERE
		asset_id IN ( SELECT asset_id from loft_asas)
		AND amount!=0
		AND asset_closed=FALSE
		AND address!='LOFTYRITC3QUX6TVQBGT3BARKWAZDEB2TTJWYQMH6YITKNH7IOMWRLC7SA' ) SELECT
	COUNT(DISTINCT asset_id) as property_count,
	address from prop_holders GROUP BY address ORDER BY property_count DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 78
QUERY_ID: 230a0c98-aac9-4d4e-80e1-31fd2aef0ed0
QUERY_TITLE: [ALGO] Defly Daily Tinyman Swaps

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), defly_txns as (
	SELECT tx_group_id
		from algorand.asset_transfer_transaction
	WHERE
		asset_id = '470842789'
		AND tx_group_id IN ( SELECT tx_group_id from tinyman_txns) ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from defly_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
		MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
			MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * , 'buy' as side from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * , 'sell' as side from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ) SELECT
	date_trunc('day', block_timestamp) as ddate,
	COUNT(DISTINCT tx_group_id) as swaps,
	side from filter GROUP BY ddate,side



=======================================================================================
=======================================================================================
QUERY_NO: 79
QUERY_ID: bce7f809-2ce5-428c-a9dd-adad74c7ca24
QUERY_TITLE: [ENS][Q9] Tokens Claimed Distribution

QUERY_STRING:

select 
	round(event_inputs:"value"/1e18,-1) as tokens,
		COUNT(tx_id) as wallets from ethereum.events_emitted where 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name = 'Claim' GROUP BY tokens



=======================================================================================
=======================================================================================
QUERY_NO: 80
QUERY_ID: c1cc6e8f-2368-449b-8221-b0554630a6ea
QUERY_TITLE: [Nouns] Mints By Day

QUERY_STRING:

with base_mints as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), dates as (
	  select
	 
	-- first argument is unit of time to add, second is amount to increment, third is starting date
	 
	dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 360)) ), combo as (
	SELECT
		d.ddate,
		lag(nouns_existing,1) IGNORE NULLS OVER( ORDER BY d.ddate ASC) as pnouns,
		coalesce(nouns_existing, pnouns) as nouns_existing
	from dates d
	LEFT JOIN mints m ON d.ddate = m.ddate ) SELECT * ,
	CASE
	WHEN nouns_existing-pnouns=0 THEN 'no mint'
			WHEN nouns_existing-pnouns=2 OR ddate ='2021-08-08' THEN 'double mint'
			ELSE 'single mint' END as cat from combo WHERE ddate>='2021-08-08' AND ddate NOT IN (CURRENT_DATE, CURRENT_DATE-1)



=======================================================================================
=======================================================================================
QUERY_NO: 81
QUERY_ID: c95b6785-4a7a-448a-a6a0-813295a97ee6
QUERY_TITLE: EDGE - Maker Destination Volume Distribution

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	label
	, SUM(volume) as volume from edge_vols WHERE 1=1
	AND label2 = 'EDGE' GROUP BY label ORDER BY label DESC



=======================================================================================
=======================================================================================
QUERY_NO: 82
QUERY_ID: c810b826-e888-46eb-9baa-3bef73c53bea
QUERY_TITLE: Step 2: Which protocol have you sent the most money to?

QUERY_STRING:

-- Use our labels to see who a user address is interacting with.  -- A label is a tag on an address that provides human-readable context to events and balances.  -- You can find more about labels in our docs here: https://docs.flipsidecrypto.com/our-data/data-models/labels -- First you can see if this user address is mostly interacting with centralized exchanges, or decentralized exchanges or NFTs, or any other category sorted by main function or ownership.  -- To do so, comment out line 12 and uncomment out line 13 -- Or you can look at which particular centralized exchange, or DEX etc. this address is interacting with.  -- To do so, uncomment out line 17 and see a breakdown of all centralized exchanges or cex that this particular address has sent to in the last 30 days. SELECT
		to_label,
	to_label_type,
		sum(amount_usd) as amount_usd FROM ethereum.udm_events  WHERE label = 'binance'
	AND to_label_type = 'cex' AND block_timestamp >= current_date - 30  GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 83
QUERY_ID: c8c0dd04-ff21-4908-ad7e-790e9b58cf0e
QUERY_TITLE: [THOR][Q51] Largest Swaps

QUERY_STRING:

SELECT
	MAX(from_amount_usd) as max_usd_amount,
			REGEXP_SUBSTR( POOL_NAME, '(\\w+\.\\w+)', 1, 1, 'e', 1) as POOL_NAME from thorchain.swaps GROUP BY pool_name ORDER BY max_usd_amount DESC



=======================================================================================
=======================================================================================
QUERY_NO: 84
QUERY_ID: a56ea0b9-fdd4-49fe-a14f-ad411c6705ee
QUERY_TITLE: Near Transactions vs KAIKAI Debug

QUERY_STRING:

with filter as (
	SELECT
	
	tx_hash
	FROM near.core.fact_transactions
	WHERE tx_status='Success'
	  AND (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	  AND block_timestamp >= '2023-08-01' ) , debug as (
	SELECT
	
	COUNT ( DISTINCT tx_hash) as total_txns
	  , COUNT ( DISTINCT signer_id )  as total_wallets
	  , MIN(tx_hash) as sample_txn
	  , MAX(args) as sample_args
	  , action_name as AN
	  , method_name as MN
	from near.core.fact_actions_events_function_call
	WHERE 1=1
	  AND block_timestamp >= '2023-08-01'
	  AND tx_hash IN (SELECT * from filter)
	GROUP BY AN, MN  )  SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 85
QUERY_ID: 0cdf5bcd-3bac-40fb-9a25-5c25d5b03c54
QUERY_TITLE: [ALGO][Q77] RAND Gallery Counts

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), min_dates_wallets as (
	SELECT
		buyer,
		'1' as is_new,
		min(ddate) as ddate
	from all_purchases
	GROUP BY buyer ), dates as ( SELECT
	COUNT(buyer) as unique_wallets,
	ddate from min_dates_wallets GROUP BY ddate ) SELECT
	*,
	SUM(unique_wallets) OVER (ORDER BY ddate ASC) as unique_wallets_cumulative from dates ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 86
QUERY_ID: 0bac2e9b-eed1-4e61-807b-642d54de2c47
QUERY_TITLE: [ALGO][Q35] DEXs - Top 10 Popular ASAs (Pactfi)

QUERY_STRING:

with base as (
	SELECT
		COUNT(DISTINCT tx_group_id) as total_swaps,
		COUNT(DISTINCT swapper) as unique_wallets,
		swap_to_asset_id as swap_to,
		SWAP_PROGRAM as app
	from algorand.swaps
	WHERE
		(block_timestamp>='2022-01-01' AND block_timestamp<='2022-03-20')
		--AND swap_from_asset_id = 0
		AND swap_to_asset_id!=0
		AND swap_from_amount>0
	AND swap_to_amount>0
	GROUP BY swap_to, app ) SELECT
	app,
	asset_name,
	total_swaps,
	unique_wallets,
	row_number() OVER (PARTITION by app ORDER BY total_swaps DESC) as rno from base b LEFT JOIN algorand.asset a ON b.swap_to = a.asset_id WHERE
	app = 'pactfi' qualify rno <= 10 ORDER BY rno



=======================================================================================
=======================================================================================
QUERY_NO: 87
QUERY_ID: 4a715f60-1128-4e84-bff7-16f82cd8f2d0
QUERY_TITLE: Copy of [Nouns] Proposal Voting Outcomes

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime,
		substr(event_inputs:description, 0, 70) as short_desc
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		coalesce(fb2.block_timestamp, DATEADD(day,3,start_date)) as end_date, --Handling shit that ENDS IN FUTURE ie no block data yet!
		short_desc
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), votes as (
	SELECT
	
	event_inputs:proposalId as prop_id,
	  event_inputs:votes as votes,
		event_inputs:voter as voter,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
	from ethereum.core.fact_event_logs f
	CROSS JOIN merge m
	 WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
		AND m.prop_id = event_inputs:proposalId
		AND m.end_date> f.block_timestamp
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	--GROUP BY prop_id, cat ORDER BY prop_id ASC ),
	 vnp as (
	SELECT
	
	v.prop_id,
		COUNT(DISTINCT voter) as voters,
		SUM(votes) as total_votes,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc
	from votes v
	LEFT JOIN merge m ON  m.prop_id = v.prop_id
	group by v.prop_id ), base_mints as (
	SELECT
	
	block_timestamp as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), refine as (
	SELECT
		prop_id,voters,
		total_votes as total_vote_turnout,
		nouns_existing,
		start_date,
	  end_date,
		datediff(second, end_date, m.ddate) as diff,
		short_desc,
		row_number() OVER (PARTITION BY prop_id ORDER BY DIFF DESC) as rank
	from vnp v
	 CROSS JOIN mints m
	WHERE 1=1
	AND m.ddate<v.end_date AND m.ddate>v.start_date
	qualify rank=1 ) SELECT
	 TO_NUMBER(prop_id) as prop_id,
	total_vote_turnout,
	nouns_existing,
	round((total_vote_turnout/nouns_existing)*100, 2) as proposal_engagement,
	start_date,
	end_date,
	short_desc from refine  ORDER BY prop_id



=======================================================================================
=======================================================================================
QUERY_NO: 88
QUERY_ID: bf6f891e-2d80-436d-94ef-ad5809be8bf7
QUERY_TITLE: Copy of [SOL][Q2] Sol transactions

QUERY_STRING:

SELECT	* from solana.transactions  WHERE 
	tx_to_address in (
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
	)
		AND succeeded = TRUE
		AND block_timestamp >= '2021-12-01' AND block_timestamp <= '2021-12-31'
	 LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 89
QUERY_ID: 07269389-0741-4826-a61f-9e842af37eea
QUERY_TITLE: [Arb] Odyssey ETH mig

QUERY_STRING:

SELECT *  from arbitrum.core.fact_transactions WHERE
	tx_hash = '0x295a55daf66d7201e7e2b36027ba3e3e6506ebcfe4cc120eb627a1fe3b784dac'



=======================================================================================
=======================================================================================
QUERY_NO: 90
QUERY_ID: bfc892e2-97c7-4d82-89a7-4dc22ce84ee5
QUERY_TITLE: [ENS][Q14] Revenues

QUERY_STRING:

with events_regs as (
	  SELECT
	
	
	SUM(ROUND(event_inputs:"cost"/1e18,4)) as reg_revenue,
			date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_id) as reg_total_tns
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	AND block_timestamp >= '2021-11-01' --AND block_timestamp <= '2021-12-20' -- Registries in last 6 months	-- Registries in last 6 months
	GROUP by ddate ), events_renewed as (
	  SELECT
	
	
	SUM(ROUND(event_inputs:"cost"/1e18,4)) as ren_revenue,
			date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_id) as ren_total_tns
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRenewed'
	
	
	AND block_timestamp >= '2021-11-01' --AND block_timestamp <= '2021-12-20' -- Registries in last 6 months	-- Registries in last 6 months
	GROUP by ddate ) SELECT
	events_renewed.ddate as ddate_j,
			reg_revenue,
		SUM(reg_revenue) OVER (ORDER BY ddate_j) as registration_revenue,
		ren_revenue,
			SUM(ren_revenue) OVER (ORDER BY ddate_j) as renewal_revenue,
			reg_total_tns,
			ren_total_tns from events_renewed JOIN events_regs ON events_renewed.ddate = events_regs.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 91
QUERY_ID: c4df3c64-dbec-461e-84bd-e33a459809cc
QUERY_TITLE: Top 10 delegates ( Cumulative ) TEST

QUERY_STRING:

with top_10 as (
		select 
		sum(voting_power) as v_pow,
	
		voter 
	from aave.votes
	GROUP by voter
	ORDER by v_pow desc 
	limit 10
	) , mapper as (
	SELECT
	DISTINCT(from_address) as voter, from_address_name, from_label, from_label_subtype
		from ethereum.transactions
	WHERE voter in (SELECT voter from top_10) )
	 SELECT tt.voter as voter, v_pow, FROM_ADDRESS_NAME from top_10 as tt LEFT  JOIN mapper as mp WHERE tt.voter = mp.voter



=======================================================================================
=======================================================================================
QUERY_NO: 92
QUERY_ID: d8434219-90d4-4d8e-af3c-f1f1b408cb65
QUERY_TITLE: Polygon Hunt // AAVE Deposit

QUERY_STRING:

SELECT *  FROM polygon.transactions WHERE lower(from_address)=lower('0x9Ec949ee9494622d194311b704d730525d3693E5') OR lower(to_address)=lower('0x9Ec949ee9494622d194311b704d730525d3693E5')
		AND block_timestamp >= CURRENT_DATE - 30



=======================================================================================
=======================================================================================
QUERY_NO: 93
QUERY_ID: d885144d-7854-4694-8607-5c1bad6ba00c
QUERY_TITLE: [NEAR] Solana TPS

QUERY_STRING:

with tps as (
	SELECT
	
	SUM(tx_count-num_votes) as total,
		date_trunc('day', b.block_timestamp) as ddate
	from solana.core.fact_blocks b
	LEFT JOIN solana.core.fact_votes_agg_block v ON b.block_id=v.block_id
	WHERE 1=1
		AND b.block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
	GROUP BY ddate ) SELECT
	ddate,
	round(total/86400, 2) as tps from tps



=======================================================================================
=======================================================================================
QUERY_NO: 94
QUERY_ID: 65428cbd-9ac3-420b-a488-a1a2703ec261
QUERY_TITLE: [Optimism][Q10] Velodrome Daily Transactions

QUERY_STRING:

with base as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'staking action' as activity from optimism.velodrome.ez_staking_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'LP action' as activity from optimism.velodrome.ez_lp_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'claim rewards' as activity from optimism.velodrome.ez_claimed_rewards
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'swaps'  as activity from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO locks' as activity from optimism.velodrome.ez_velo_locks
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO votes' as activity from optimism.velodrome.ez_votes ) SELECT 
	block_timestamp::date as ddate,
	COUNT(DISTINCT tx_hash) as total_txns,
		COUNT(DISTINCT sender) as total_users,
		activity from base group by ddate, activity ORDER BY ddate asc



=======================================================================================
=======================================================================================
QUERY_NO: 95
QUERY_ID: 23ce902b-1031-4816-a240-995c3ddab3d9
QUERY_TITLE: [ALGO][Q32] ALGO donated transfers

QUERY_STRING:

SELECT 
	* from algorand.payment_transaction p LEFT JOIN algorand.labels l ON (p.receiver = l.address ) WHERE
	sender = '2XBL47CKYWTNAIVUQCTAMFBL75EXXRT3TBG2ZK7SOG7MDBER7Q3XNL77XQ'
		AND block_timestamp IS NOT NULL
	AND amount!=0



=======================================================================================
=======================================================================================
QUERY_NO: 96
QUERY_ID: bfdd764e-bda5-4e9b-a689-9ba626f8f648
QUERY_TITLE: [ALGO][Q35] Top 10 Popular ASAs (Algofi)

QUERY_STRING:

with base as (
	SELECT
		COUNT(DISTINCT tx_group_id) as total_swaps,
		COUNT(DISTINCT swapper) as unique_wallets,
		swap_to_asset_id as swap_to,
		SWAP_PROGRAM as app
	from algorand.swaps
	WHERE
		(block_timestamp>='2022-01-01' AND block_timestamp<='2022-03-20')
		--AND swap_from_asset_id = 0
		AND swap_to_asset_id!=0
		AND swap_from_amount>0
	AND swap_to_amount>0
	GROUP BY swap_to, app ) SELECT
	app,
	asset_name,
	total_swaps,
	unique_wallets,
	row_number() OVER (PARTITION by app ORDER BY total_swaps DESC) as rno from base b LEFT JOIN algorand.asset a ON b.swap_to = a.asset_id WHERE
	app = 'algofi' qualify rno <= 10 ORDER BY rno



=======================================================================================
=======================================================================================
QUERY_NO: 97
QUERY_ID: de37e69d-ec72-4864-b4c4-5e8266228230
QUERY_TITLE: [Optimism][Q10] Velodrome New User Acquisition

QUERY_STRING:

with base as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'staking action' as activity from optimism.velodrome.ez_staking_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'LP action' as activity from optimism.velodrome.ez_lp_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'claim rewards' as activity from optimism.velodrome.ez_claimed_rewards
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'swaps'  as activity from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO locks' as activity from optimism.velodrome.ez_velo_locks
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO votes' as activity from optimism.velodrome.ez_votes ) , min_dates as (
	SELECT
		sender,
		MIN(block_timestamp::date) as min_ddate
	from base
	GROUP BY sender ) , pre as (
	SELECT
	COUNT(DISTINCT sender) as unique_users,
	min_ddate as ddate
	from min_dates
	group by ddate ) SELECT *,
	SUM(unique_users) OVER (ORDER by ddate ASC) as unique_users_cumnulative from pre



=======================================================================================
=======================================================================================
QUERY_NO: 98
QUERY_ID: 2e7e6708-fae8-409d-a5a1-44cc91c9c788
QUERY_TITLE: [ALGO][Q15] November Anomaly Chart

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery'
			AND (block_timestamp>='2021-11-08' AND block_timestamp<'2021-11-10') ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  COUNT(DISTINCT ASSET_ID) as unique_assets,
			COUNT(DISTINCT buyer) as unique_buyers,
			SUM(algo_amount) as algo_amount,
			SUM(asset_amount) as asset_amount,
		date_trunc('hour', trade_close_date) as
	ddate from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL GROUP BY ddate ORDER BY algo_amount DESC



=======================================================================================
=======================================================================================
QUERY_NO: 99
QUERY_ID: e0c0b387-bb99-4a6f-ba6e-5ee1eac92d8c
QUERY_TITLE: [ALGO] AlgoFi Active Wallets (By Market)

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	'465814065', --ALGO market
						'465814103', --USDC
						'465814149', --goBTC
						'465814222', --goETH
						'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14')
		 ), wallets as (
	  SELECT
	MIN(date_trunc('day', block_timestamp)) as ddate,
			SUM(AMOUNT) as amount,
			sender,
				market,
				types
	from groups
	WHERE 
		types IN ('liquidity', 'borrow')
		GROUP by sender, market, types ), valid_wallets as (
	SELECT
			market,
			types,
			COUNT(DISTINCT sender) as total_wallets
		from wallets
	WHERE
			amount>0
		GROUP BY market, types ) SELECT * from valid_wallets ORDER BY market ASC



=======================================================================================
=======================================================================================
QUERY_NO: 100
QUERY_ID: cb0057b8-6355-4c45-b982-45acb3b41a66
QUERY_TITLE: [ALGO][Q32] ALGO donated over time

QUERY_STRING:

SELECT 
	SUM(amount) as total_algo,
	date_trunc('day', block_timestamp) as ddate,
	SUM(total_algo) OVER (ORDER BY DDATE ASC) as algo_over_time from algorand.payment_transaction WHERE
	receiver = '2XBL47CKYWTNAIVUQCTAMFBL75EXXRT3TBG2ZK7SOG7MDBER7Q3XNL77XQ'
		AND block_timestamp IS NOT NULL GROUP BY ddate ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 101
QUERY_ID: cae0aeef-d7f0-430b-b2e1-4a655f474dc8
QUERY_TITLE: Top 10 Delegates (First Week 9th-15th Nov) by 'Power'

QUERY_STRING:

with latest_del_stats as (
	SELECT MAX(block_id) as block_id, REPLACE(event_inputs:"delegate",'"','') as new_del
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
	 
	AND date_trunc('day', block_timestamp) >= '2021-11-09' 
		AND date_trunc('day', block_timestamp) < '2021-11-16'
	  GROUP BY new_del ) SELECT REPLACE(event_inputs:"delegate",'"','') as delegate, MAX(REPLACE(event_inputs:"newBalance",'"','')) as power  from ethereum.events_emitted WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
	 
	AND date_trunc('day', block_timestamp) >= '2021-11-09' 
		AND date_trunc('day', block_timestamp) < '2021-11-16'
		AND block_id IN (
			SELECT block_id from latest_del_stats ) GROUP BY delegate ORDER BY power DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 102
QUERY_ID: 0f7d3c1e-5eae-4649-bb5d-a9ecee1d0066
QUERY_TITLE: [AAVE-29] Average Borrow Amount

QUERY_STRING:

with total_flash as (
	SELECT AVG(borrowed_usd), date_trunc('month', block_timestamp) as mdate
	from aave.borrows
	WHERE 
	block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	) SELECT 
	* FROM total_flash



=======================================================================================
=======================================================================================
QUERY_NO: 103
QUERY_ID: 31e4e6ff-0119-40ca-94d5-64f086392cae
QUERY_TITLE: Step 1: How much have you spent on fees?

QUERY_STRING:

-- Use this query to find out how much someone has paid in fees on the Ethereum network.  -- -- For demonstration purposes, we've selected a wallet that *may* belong to Snoop Dogg, -- who is, among other things, a legendary NFT connoisseur. -- The first column tells you how much Snoop has spent in terms of ETH, the second -- tells you the same thing in terms of USD. -- -- Copy paste your own wallet address in lines 15 & 22 to find the answer for your wallet! -- -- If you want to see a breakdown by week, just uncomment lines 15 and 22 and re-run the query. SELECT
	 date_trunc('week', block_timestamp) as date,
	sum(tx_fee) as total_tx_fees_paid,
	 sum(fee_usd) as total_tx_fees_paid_usd FROM ethereum.transactions  WHERE
	 from_address = lower('0xce90a7949bb78892f159f428d0dc23a8e3584d75') OR
	to_address = lower('0xce90a7949bb78892f159f428d0dc23a8e3584d75') group by 1



=======================================================================================
=======================================================================================
QUERY_NO: 104
QUERY_ID: decc1861-c10c-4621-ba8c-456b546712a6
QUERY_TITLE: [ENS][Q8]Domains held by Airdrop 'HODLers'

QUERY_STRING:

with drop_wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND event_type = 'erc20_transfer'
	  GROUP BY origin_address ), hodler_totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND REPLACE(event_inputs:"owner",'"','') IN (
				SELECT origin_address as owner
				from drop_wallets
			where tokens_in!=0 AND tokens_out=0 --Filtering those that still hold airdrop
	
	
	) GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>=10 THEN TO_VARCHAR('10 or more') ELSE TO_VARCHAR(domains) END as ndomains,
		COUNT(OWNER) as wallets from hodler_totals WHERE
	domains!=0 GROUP BY ndomains ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 105
QUERY_ID: 0b91ba65-0643-46e0-9ee1-0ebba94c590c
QUERY_TITLE: [ENS][Q8] Domains held by ENS Users

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered' GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>=10 THEN TO_VARCHAR('10 or more') ELSE TO_VARCHAR(domains) END as ndomains,
		COUNT(OWNER) as wallets from totals WHERE
	domains!=0 GROUP BY ndomains ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 106
QUERY_ID: ccc9bb3e-5cd7-43af-9ed7-a0fd9d2bef79
QUERY_TITLE: [ENS][Q8] Airdrop 'HODLers' and their ENS behavior

QUERY_STRING:

with drop_wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND event_type = 'erc20_transfer'
	  GROUP BY origin_address ), hodler_totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND REPLACE(event_inputs:"owner",'"','') IN (
				SELECT origin_address as owner
				from drop_wallets
			where tokens_in!=0 AND tokens_out=0 --Filtering those that still hold airdrop
	
	
	) GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>1 THEN 'Multiple' ELSE 'Single' END as trends,
		COUNT(OWNER) as wallets from hodler_totals WHERE
	domains!=0 GROUP BY trends ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 107
QUERY_ID: e41fb13f-f399-49e2-a4ac-77b97f366cea
QUERY_TITLE: [NEAR] Perf: ETH Fails

QUERY_STRING:

with eth as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_hash) as total_txns,
		CASE	WHEN status!='SUCCESS' THEN 'FAIL' ELSE 'SUCCESSFUL' END as types
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
	GROUP BY ddate, types ) SELECT *  from eth



=======================================================================================
=======================================================================================
QUERY_NO: 108
QUERY_ID: da43fda1-f84b-4a34-a7d2-945e5db4d4a6
QUERY_TITLE: [algo] Tinyman1.1 Pools Overview

QUERY_STRING:

with base_txns as (
	SELECT tx_group_id
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), tiny_assets as (
	SELECT asset_id
		from algorand.asset_configuration_transaction
		WHERE
			tx_group_id IN ( select * from base_txns ) ), asset_details as (
	SELECT tiny_assets.asset_id, asset_name, address,created_at as block
		from tiny_assets
		LEFT JOIN algorand.asset t on tiny_assets.asset_id = t.asset_id ), pre_final as (
	  SELECT asset_details.asset_id, asset_name, block_timestamp
	  from asset_details
	  LEFT JOIN algorand.block t on asset_details.block = t.block_id ) SELECT COUNT( asset_id) as total_pools from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 109
QUERY_ID: 3bf602fd-f3ed-4423-adfc-9180a3687aa3
QUERY_TITLE: SEI transfers Modded copy

QUERY_STRING:

-- forked from SEI transfers Modded @ https://flipsidecrypto.xyz/edit/queries/841679fc-2a03-403d-8c66-6e72d9ac470a -- forked from SEI transfers in-out @ https://flipsidecrypto.xyz/edit/queries/66e0e60c-5cbb-4a9c-8bd0-e027cf7063f3  -- Hard_coded Tokens Based on SEI document with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left outer join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	from axelar.defi.ez_bridge_satellite a left outer join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	from axelar.defi.ez_bridge_squid a left outer join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=90') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=90') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i
	where symbol = 'SEI' ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	 )
	  and TX_SUCCEEDED = 'true'
	  and transfer_type = 'IBC_TRANSFER' ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	 (amount / pow(10, 6)) * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  case when symbol_address = token_address then (amount / pow(10, 6)) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers ) ,  stats as  (
	 select
	
	trunc(block_timestamp,'day') as ddate,
	
	CASE WHEN cat='in' THEN '🟩' ELSE '🟥' END as status,
	
	bridge,
	  count(DISTINCT(user)) as users,
	  count(DISTINCT(tx_id)) as count_tx, sum(volume) as usd_volume, avg(volume) as avg_volume,
	  max(volume) as max_volume, median(volume) as median_volume , min(volume) as min_volume
	from all_bridges
	group by 1,2,3 ) SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 110
QUERY_ID: d00c2cc8-b03f-4602-8151-6e60b03fef89
QUERY_TITLE: Bridge Overview

QUERY_STRING:

-- Hard_coded Tokens Based on SEI document with token_bonk as ( select * from ( values ( '8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'), ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'), ('6','USDC','optimism','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'), ('6','USDC','polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp' ), ('6','USDC','arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ' ), ( '8','WBTC','ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br' ), ('6','USDC','ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H' ), ('8','ETH','ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2' )) as a (decimal, token_name, chain, token_address)) , bridge_in as (select DISTINCT tx_id  from sei.core.fact_msg_attributes where ATTRIBUTE_KEY = 'minter') , bridge_out as ( select DISTINCT tx_id from sei.core.fact_msg_attributes where ATTRIBUTE_KEY = 'burner') ,
	-- Contract addresses are similar to User addresses.
	 -- To separate the contract addresses from the user addresses. contract_addess as ( select DISTINCT attribute_value from sei.core.fact_msg_attributes where ATTRIBUTE_KEY = '_contract_address'),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm as ( select DISTINCT tx_id from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address and block_timestamp::date >= '2023-08-15' and tx_id in (select tx_id from bridge_out) and label = 'wormhole' and label_type = 'bridge' ),
	 -- Extract User addresses (Recevers from Wormhole bridge) users as ( select block_timestamp, tx_id, attribute_value as user from sei.core.fact_msg_attributes where MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and tx_id in ( select tx_id from bridge_tx_worm)), -- Bridged Amount transfer as ( select DISTINCT a.tx_id, b.block_timestamp, user, split(ATTRIBUTE_VALUE, 'factory') as seprator, seprator[0] as amt, seprator[1] as tok_address from users a join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id where MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount' and user not in ( select attribute_value from contract_addess) ),
	 -- Bridge details - Join with hard-coded token addresses wormhole as ( select DISTINCT tx_id, 'Wormhole' as bridge, trunc(block_timestamp, 'hour') as hourly, user, amt / pow(10, decimal) as amount, token_name, chain from transfer a join token_bonk b on a.tok_address = token_address ),
	 -- ETH and BTC prices to calculate USD Volume price as ( select hour as hourly, case when symbol = 'WETH' then 'ETH' else 'WBTC' end as symb, avg(price) as prices from ethereum.price.ez_hourly_token_prices where symbol in ('WETH', 'WBTC') and hour::date >= '2023-08-15' group by 1, 2 ), -- Join with Axelar Bridge transactions volume as ( select DISTINCT tx_id, a.hourly, bridge, case when token_name = symb then amount * prices else amount end as volume, user, chain, token_name from wormhole a left outer join price b on a.hourly = b.hourly and a.token_name = b.symb UNION select DISTINCT tx_hash as tx_id, trunc(block_timestamp, 'hour') as hourly, 'Satellite' as bridge, case when token_symbol = 'ETH' then amount*prices  when token_symbol = 'WBTC' then amount*prices else amount end as volume, sender as user, DESTINATION_CHAIN as chain, case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name from axelar.defi.ez_bridge_satellite a left outer join price b on trunc(block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb where SOURCE_CHAIN = 'sei' and token_symbol not in ('OSMO','ATOM') and block_timestamp::date >= '2023-08-15' UNION select DISTINCT tx_hash as tx_id, trunc(block_timestamp, 'hour') as hourly, 'Squid' as bridge, case when token_symbol = 'ETH' then amount*prices  when token_symbol = 'WBTC' then amount*prices else amount end as volume, sender as user, DESTINATION_CHAIN as chain, case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name from axelar.defi.ez_bridge_squid a left outer join price b on trunc(block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb where source_chain = 'sei' and token_symbol not in ('OSMO','ATOM') and block_timestamp::date >= '2023-08-15') ,
	-- IBC Transfers  ibc_transfer as (select DISTINCT tx_id, trunc(block_timestamp, 'hour') as hourly, 'IBC' as bridge, amount, currency, sender, receiver from sei.core.fact_transfers where sender like 'sei%' and (receiver like 'osmo%' or receiver like 'cosmos%') and TX_SUCCEEDED = 'true' and block_timestamp::date >= '2023-08-15' and transfer_type = 'IBC_TRANSFER_OUT') , --Sei and Astri price astro_price as (Select TO_TIMESTAMP(value[0]::string) as day, 'Astro' as symbol, 'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address, 6 as decimal, value[1] as price from ( SELECT livequery.live.udf_api( 'https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=90') as resp ) ,LATERAL FLATTEN (input => resp:data:prices) UNION Select TO_TIMESTAMP(value[0]::string) as day, 'SEI' as symbol, 'usei' as token_address, 6 as decimal, value[1] as price from ( SELECT livequery.live.udf_api( 'https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=90') as resp ) ,LATERAL FLATTEN (input => resp:data:prices)) , price_i as ( select trunc(day,'hour') as hourly, symbol, token_address, avg(price) as prices from astro_price where day >= '2023-08-15' group by 1,2,3 ), -- ATOM and Osmo Prices price_ibc as ( select trunc(RECORDED_hour,'hour') as hourly, case when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518' when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388' end as token_address, symbol, avg(price) as prices from osmosis.price.ez_prices where RECORDED_hour::date >= '2023-08-15' and symbol in ('ATOM', 'OSMO') group by 1, 2, 3 UNION select trunc(RECORDED_hour,'hour') as hourly, case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9' end as token_address, symbol, avg(price) as prices from osmosis.price.ez_prices where RECORDED_hour::date >= '2023-08-15' and symbol in ('ATOM') group by 1, 2, 3 UNION select hourly, symbol, token_address, prices  from price_i where symbol = 'SEI') , all_bridge as ( select DISTINCT tx_id, a.hourly, bridge, case when currency = token_address then (amount / pow(10, 6)) * prices end as volume, sender as user, case when receiver like 'osmo%' then 'Osmosis'  when receiver like 'cosmos%' then 'cosmoshub' end as chain, symbol, 'Outflow' as type from ibc_transfer a join price_ibc b on a.hourly = b.hourly and a.currency = b.token_address UNION select *, 'Outflow' as type from volume ) , final_out as ( select  DISTINCT tx_id, trunc(BLOCK_TIMESTAMP,'hour') as hourly, 'IBC' as bridge, (amount / pow(10, 6)) * prices as volume, sender as user, 'Terra' as chain, symbol, 'Outflow' as type from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address where sender like 'sei%' and receiver like 'terra%' and block_timestamp::date >= '2023-08-15' UNION select * from all_bridge) , -- Wormhole Contract address to find Bridges related to Wormhole bridge_tx_worm_in as ( select DISTINCT tx_id from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address where label = 'wormhole' and label_type = 'bridge' and block_timestamp::date >= '2023-08-15' and tx_id in (select tx_id from bridge_in)), -- Extract User addresses (Recevers from Wormhole bridge) users_in as (select block_timestamp, tx_id, attribute_value as user from sei.core.fact_msg_attributes  where MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and tx_id in ( select tx_id from bridge_tx_worm_in)) ,
	-- Bridged Amount transfer_in as ( select DISTINCT a.tx_id, b.block_timestamp, user, split(ATTRIBUTE_VALUE, 'factory') as seprator, seprator[0] as amt, seprator[1] as tok_address from users_in a join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id where MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount' and user not in ( select attribute_value from contract_addess)) ,
	-- Bridge details - Join with hard-coded token addresses wormhole_in as (select DISTINCT tx_id, 'Wormhole' as bridge, trunc(block_timestamp, 'hour') as hourly, user, amt / pow(10, decimal) as amount, token_name, chain from transfer_in a join token_bonk b on a.tok_address = token_address) , -- Join with Axelar Bridge transactions volume_in as ( select DISTINCT tx_id, a.hourly, bridge, case when token_name = symb then amount * prices else amount end as volume, user, chain, token_name from wormhole_in a left outer join price b on a.hourly = b.hourly and a.token_name = b.symb UNION select DISTINCT tx_hash as tx_id, trunc(block_timestamp, 'hour') as hourly, 'Satellite' as bridge, case when token_symbol = 'ETH' then amount*prices  when token_symbol = 'WBTC' then amount*prices else amount end as volume, receiver as user, source_chain as chain, case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name from axelar.defi.ez_bridge_satellite a left outer join price b on trunc(block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb where destination_chain = 'sei' and token_symbol not in ('ATOM', 'OSMO') and block_timestamp::date >= '2023-08-15' UNION select DISTINCT tx_hash as tx_id, trunc(block_timestamp, 'hour') as hourly, 'Squid' as bridge, case when token_symbol = 'ETH' then amount*prices  when token_symbol = 'WBTC' then amount*prices else amount end as volume, receiver as user, source_chain as chain, case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name from axelar.defi.ez_bridge_squid a left outer join price b on trunc(block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb where destination_chain = 'sei' and token_symbol not in ('ATOM', 'OSMO') and block_timestamp::date >= '2023-08-15') ,
	-- IBC Transfers  ibc_transfer_in as ( select DISTINCT tx_id, trunc(block_timestamp, 'hour') as hourly, 'IBC' as bridge, amount, currency, sender, receiver from sei.core.fact_transfers where receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%') and TX_SUCCEEDED = 'true' and block_timestamp::date >= '2023-08-15' and transfer_type = 'IBC_TRANSFER_IN'),
	 all_bridge_in as ( select DISTINCT tx_id, a.hourly, bridge, case when currency = token_address then (amount / pow(10, 6)) * prices end as volume, receiver as user, case when sender like 'osmo%' then 'Osmosis'  when sender like 'cosmos%' then 'cosmoshub' end as chain, symbol, 'Inflow' as type from ibc_transfer_in a join price_ibc b on a.hourly = b.hourly and a.currency = b.token_address UNION  select *,  'Inflow' as type from volume_in) , final_in as ( select  DISTINCT tx_id, trunc(BLOCK_TIMESTAMP,'hour') as hourly, 'IBC' as bridge, (amount / pow(10, 6)) * prices as volume, sender as user, 'Terra' as chain, symbol, 'Inflow' as type from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address where receiver like 'sei%' and sender like 'terra%' and block_timestamp::date >= '2023-08-15' UNION select * from all_bridge_in) , final_result as ( select * from final_out UNION select * from Final_in) , status as (select trunc(hourly,'day') as date, '🟩' as status, bridge, count(DISTINCT(user)) as users,  count(DISTINCT(tx_id)) as count_tx, sum(volume) as usd_volume, avg(volume) as avg_volume, max(volume) as max_volume, median(volume) as median_volume , min(volume) as min_volume from final_in group by 1,2,3 UNION select trunc(hourly,'day') as date, '🟥' as status, bridge, count(DISTINCT(user))*-1 as users, count(DISTINCT(tx_id))*-1 as count_tx, sum(volume)*-1 as usd_volume, avg(volume)*-1 as avg_volume, max(volume)*-1 as max_volume, median(volume)*-1 as median_volume , min(volume)*-1 as min_volume from final_out group by 1,2,3) select date,  status,  bridge, users,  count_tx,  TO_VARCHAR(usd_volume, '$999,999,999,999') as "USD VOlume", TO_VARCHAR(avg_volume, 'FM999,999,999,999') as "Avg Volume (USD)", TO_VARCHAR(max_volume, 'FM999,999,999,999') as "Max Volume (USD)", TO_VARCHAR(median_volume, 'FM999,999,999,999') as "Median Volume (USD)" from status order by date asc



=======================================================================================
=======================================================================================
QUERY_NO: 111
QUERY_ID: c82ff353-4ea7-40cd-9b20-efc7f0acb044
QUERY_TITLE: [poly][Q4] Current Active Wallets

QUERY_STRING:

with base_wallets as (
	SELECT
	
	COUNT(*) as txns,
		from_address as wallet,
		MAX(DATEADD('day', 90, date_trunc('day', block_timestamp))) as ddate_ul,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.polygon.transactions
	WHERE
		block_timestamp >= CURRENT_DATE - 90
	GROUP BY ddate, wallet ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 275)) ) SELECT COUNT(DISTINCT wallet) as active_wallets from base_wallets



=======================================================================================
=======================================================================================
QUERY_NO: 112
QUERY_ID: 2c8a7765-e964-476c-92bd-4b27c0473c4c
QUERY_TITLE: [NEAR] Perf: Sol Fails

QUERY_STRING:

with sol as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate,
		COUNT(tx_id) as total_txns,
		CASE	WHEN succeeded!=TRUE THEN 'FAIL' ELSE 'SUCCESSFUL' END as types
	from solana.core.fact_transactions
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
	GROUP BY ddate, types ) SELECT *  from sol



=======================================================================================
=======================================================================================
QUERY_NO: 113
QUERY_ID: dadf6d1f-b830-4884-bdd3-f9e2c5f64aa6
QUERY_TITLE: [AAVE-29] Average FEE for Deposits

QUERY_STRING:

SELECT AVG(FEE_USD), date_trunc('month', block_timestamp) as mdate FROM ethereum.transactions WHERE
	tx_id IN (
		SELECT tx_id
		from aave.deposits
		WHERE 
			block_timestamp >= CURRENT_DATE - 720
	)
	AND block_timestamp >= CURRENT_DATE - 720 GROUP BY mdate



=======================================================================================
=======================================================================================
QUERY_NO: 114
QUERY_ID: 3a5f53ab-515c-4fb7-a8cf-9af530a5f61e
QUERY_TITLE: [ALGO][Q19] Average Commit Percentage of Wallet Balance

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address
	WHERE
		balance>=fcommit ) SELECT  AVG((fcommit/balance) * 100) as avg_pct from pre_final WHERE
	balance!=0



=======================================================================================
=======================================================================================
QUERY_NO: 115
QUERY_ID: 3a9e2af0-9b2e-4001-9779-b462a4c015d1
QUERY_TITLE: [BANKLESS][Q2] Dex Swaps Platforms

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT' ), base_groups as (
	SELECT *,
	row_number() OVER(Partition BY tx_id ORDER BY event_index ASC) as row_num
	from ethereum.dex_swaps
	WHERE
	tx_id IN (SELECT * from swap_outs) ), groups as (
	SELECT
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN pool_name ELSE NULL END) as final_pool,
	MAX(CASE WHEN row_num=1 AND direction='IN' THEN token_address ELSE NULL END) as swap_token,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN platform ELSE NULL END) as platform,
	tx_id
	from base_groups
	GROUP BY tx_id ) SELECT
	COUNT(tx_id) as totals,
	regexp_substr(final_pool,'^(\\w+-\\w+)', 1, 1, 'e', 1) as final_pool,
	platform from groups GROUP BY final_pool, platform



=======================================================================================
=======================================================================================
QUERY_NO: 116
QUERY_ID: eff9e7b8-4797-4d3c-b00a-46a05961d8b8
QUERY_TITLE: [ENS][Q5] Registration Example

QUERY_STRING:

with debug as (
	select * from ethereum.events_emitted
	WHERE
		block_timestamp >= CURRENT_DATE - 180
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		LIMIT 20 ) SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 117
QUERY_ID: ff0bc89c-3b93-4ba8-9205-5b1eabee8510
QUERY_TITLE: airdrop claims time

QUERY_STRING:

with claimers as (
	SELECT
	
	min(block_timestamp) as min_dtime
	  , max(block_timestamp) as max_dtime
	  , SUM(events[0]:data:amount/1e8) as amount
	  , COUNT(version) as txns
	  , sender as wallet
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	 GROUP BY sender ) , stats as (
	  SELECT
	
	 COUNT(DISTINCT wallet) as claimers
	  , SUM(amount) as amount
	  , min_dtime::date as ddate
	
	  from claimers
	where 1=1
	  and min_dtime>TO_TIMESTAMP(1666133400)
	  and ( (txns=1 and amount in (150,300) OR (amount=450) ) )
	group by ddate ) SELECT
	 *
	 , SUM(claimers) OVER (ORDER BY DDATE ASC) as claimers_total
	, SUM(amount) OVER (ORDER BY DDATE ASC) as amount_total from stats ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 118
QUERY_ID: d95e3233-6bbe-4b31-8312-f81549e54e51
QUERY_TITLE: claimers post-airdrop   Days

QUERY_STRING:

-- forked from claimers post-airdrop
	HOURS @ https://flipsidecrypto.xyz/edit/queries/e0c7a6c9-3053-4849-bfad-a3a020b5fa72 -- forked from airdrop claims time @ https://flipsidecrypto.xyz/edit/queries/ff0bc89c-3b93-4ba8-9205-5b1eabee8510 with claimers as (
	SELECT
	
	min(block_timestamp) as min_dtime
	  , max(block_timestamp) as max_dtime
	  , SUM(events[0]:data:amount/1e8) as amount
	  , COUNT(version) as txns
	  , sender as wallet
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	 GROUP BY sender ) , txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , COUNT(DISTINCT block_timestamp::date) as unique_days
	  , MAX(max_dtime) as ctime
	  , COUNT(DISTINCT version) as txns
	  , sender as user
	from aptos.core.fact_transactions t
	LEFT JOIN claimers c on c.wallet=t.sender
	WHERE 1=1
	  AND max_dtime<block_timestamp
	  AND SENDER IN (SELECT DISTINCT wallet from claimers)
	GROUP BY USER ) , refine as (
	SELECT
	  *
	  , CASE
	
	
	
	WHEN unique_days=1 THEN 'Single Day'
	
	
	  WHEN unique_days between 2 and 7 THEN '2-7 Days'
	
	
	  ELSE '>7 days' END as cat
	from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 119
QUERY_ID: 23d2e624-5333-4719-a2e1-c6bcd7b1a73b
QUERY_TITLE: Sector Summaries (labels) 

QUERY_STRING:

with new_wallets as (
	SELECT
	
	from_address as wallet
	  , 1 as new
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT wallet) as total_new_users
	from new_wallets )  , base as (
	SELECT
	
	COALESCE(INITCAP(LABEL_TYPE), 'Other') as SECTOR
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT from_address) as users
	  , COUNT(DISTINCT CASE WHEN new=1 THEN from_address ELSE NULL END) as new_ethereum_users
	  , MAX(total_new_users) as total_new_users
	from ethereum.core.fact_transactions t
	 LEFT JOIN ethereum.core.dim_labels l on t.to_address = l.address
	LEFT JOIN new_wallets n on t.from_address=n.wallet
	LEFT JOIN stats s on 1=1
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND STATUS = 'SUCCESS'  GROUP BY SECTOR
	 ) SELECT
	 SECTOR
	, txns as "Transaction Counts"
	, users as "Total Users"
	, new_ethereum_users as "New Ethereum Users"
	, round((new_ethereum_users/total_new_users)*100, 2) as "% of Total New Ethereum Users" from base  ORDER BY USERS DESC



=======================================================================================
=======================================================================================
QUERY_NO: 120
QUERY_ID: ec4abb46-3d92-4dc7-97d1-a0fa923206d9
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP Algo

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (0)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 121
QUERY_ID: f344de96-8e6a-4eb1-8ed4-521e57d94147
QUERY_TITLE: [ALGO][Q19] Top 10 Committers to Period 2

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address
	WHERE
		balance>=fcommit
	ORDER BY fcommit DESC
	LIMIT 10 ) SELECT fcommit as algo_committed, sender, dda from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 122
QUERY_ID: de5b9155-364b-4e38-a3f9-32fc7f940f8c
QUERY_TITLE: [ENS][Q7] ENS Registrations and ETH price

QUERY_STRING:

with ens_regs as (
	select * from ethereum.events_emitted
	WHERE
		block_timestamp >= CURRENT_DATE - 180
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		 ), valid_txns as (
	  SELECT
	COUNT(DISTINCT tx_id) as total_regs,
	
	
	
	 AVG(FEE_USD) as avg_gas_usd,
	
	
	
	 date_trunc('days', block_timestamp) as days
	
	from ethereum.transactions
	  WHERE
	 
	block_timestamp >= CURRENT_DATE - 180
	  AND tx_id IN(
	 
	SELECT tx_id from ens_regs
	  )
	  GROUP BY DAYS ), eth_price as (
	SELECT AVG(price) as price, date_trunc('days', hour) as days
		from ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 180
	GROUP BY days ) SELECT total_regs, avg_gas_usd, valid_txns.days, price as AVG_ETH_PRICE from valid_txns INNER JOIN eth_price ON eth_price.days = valid_txns.days



=======================================================================================
=======================================================================================
QUERY_NO: 123
QUERY_ID: 26ae57c7-4c96-481b-9dda-c6c1700a2813
QUERY_TITLE: Top Restakes:  Routes

QUERY_STRING:

with actions as (
	SELECT
	
	a.block_timestamp as dtime,
		tx_signer as staker,
	
	tx_receiver as gov,
		a.tx_hash,
		method_name as act
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
	ORDER BY staker, dtime ), refine as (
	SELECT
	*,
		lag(gov) OVER (PARTITION BY staker ORDER BY dtime) as pgov,
		lag(act) OVER (PARTITION BY staker ORDER BY dtime) as pact,
		lag(tx_hash) OVER (PARTITION BY staker ORDER BY dtime) as ptx,
		lag(dtime) OVER (PARTITION BY staker ORDER BY dtime) as ptime,
		TIMEDIFF(seconds, ptime, dtime) as time_delta
	from actions ), restakes as (
	SELECT * from refine
	WHERE 1=1
		AND (pact = 'unstake_all' AND act ='deposit_and_stake')
		AND (gov!=pgov) ) SELECT
	concat(pgov, ' --> ', gov) as route,
		COUNT(DISTINCT staker) as totals from restakes group by route order by TOTALS DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 124
QUERY_ID: 2ceee32f-0755-41e2-8e9c-e2482a479532
QUERY_TITLE: [ENS][Q11] Registrations and activity

QUERY_STRING:

with wallets as (
	  SELECT
	
	
	REPLACE(event_inputs:"owner",'"','') as owner,
	
	
	COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
	
	
	MAX(date_trunc('day', block_timestamp)) as max_date,
	 
	MIN(date_trunc('day', block_timestamp)) as min_date
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20' -- Registries in last 6 months
	GROUP BY owner ), --  Handling both in/out txns out_txns as (
	SELECT COUNT(distinct tx_id) as totals, from_address as wallet
	from ethereum.transactions
	WHERE
		from_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20'
		GROUP BY wallet ), in_txns as (
		SELECT COUNT(distinct tx_id) as totals, to_address as wallet
	from ethereum.transactions
	WHERE
		to_address IN (
				SELECT owner as from_address from wallets
	 
	)
			-- Ignoring ENS contract interaction!
		AND (
	to_address!= '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5'
					OR from_address!='0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5' )
			AND block_timestamp >= '2021-06-01' AND block_timestamp <= '2021-12-20'
		GROUP BY wallet ), combo as (
	SELECT * from in_txns
	UNION
	SELECT * from out_txns ), interm as (
	SELECT
			SUM(totals) as totals,
		wallet
	from combo
	GROUP BY wallet ) SELECT
	COUNT(DISTINCT wallet) as total_wallets,
			CASE
	
				WHEN totals>100 THEN 'very active'
				WHEN totals<10 THEN 'limited activity'
				ELSE 'active' END as types
	 from interm GROUP BY types



=======================================================================================
=======================================================================================
QUERY_NO: 125
QUERY_ID: e2a32efc-abb4-467d-b864-e5d56a37b4d9
QUERY_TITLE: [ALGO][Q78] AB2 Wallets Distribution

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), pre_final as (
	SELECT
	
	COUNT(DISTINCT tx_group_id) as total_buys,
		buyer
	from filter_trades
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL
	GROUP BY buyer ) SELECT
	COUNT(DISTINCT buyer) as wallets,
	CASE
	
		WHEN total_buys=1 THEN '1'
		WHEN total_buys>1 AND total_buys<=5 THEN '2-5'
		WHEN total_buys>5 AND total_buys<=10 THEN '6-10'
		WHEN total_buys>10 AND total_buys<=20 THEN '11-20'
		WHEN total_buys>20 AND total_buys<=50 THEN '21-50'
		WHEN total_buys>50 AND total_buys<=100 THEN '51-100'
		ELSE '100+' END as CAT from pre_final GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 126
QUERY_ID: f51700d5-917a-4461-a395-b5d6310b7216
QUERY_TITLE: [POOLY][Q2] Base Stats Totals

QUERY_STRING:

with base as (
	SELECT 
	*,
		CASE	WHEN NFT_ADDRESS = lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523') THEN 'Pooly Judge'
				WHEN NFT_ADDRESS = lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9') THEN 'Pooly Lawyer'
				ELSE 'Pooly Supporter' END as types
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS IN
	
	(lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523'),
		 lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9'),
		 lower('0x90B3832e2F2aDe2FE382a911805B6933C056D6ed')) )				 SELECT
	COUNT(*) as total_mints,
		COUNT(DISTINCT NFT_TO_ADDRESS) as unique_minters,
		SUM(MINT_PRICE_ETH) as total_eth_raised from base



=======================================================================================
=======================================================================================
QUERY_NO: 127
QUERY_ID: 10e58bc0-24ef-4126-b4d6-cf485956ca71
QUERY_TITLE: [ARB] L2 Summer Initial Funding

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender
	, CASE	WHEN mdate IS NULL THEN 'Arbitrum Only'
				WHEN mdate>ddate THEN 'Both/Arbitrum First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , init_funds as (
	SELECT 
	from_address
		, ETH_VALUE
		, CAT
		, address_name
		, label_subtype
		, label_type
		, project_name
		, tx_hash
		, block_timestamp
		, rank() OVER (PARTITION BY to_address ORDER BY block_timestamp ASC) as ranks
	from arbitrum.core.fact_transactions t
	LEFT JOIN arbitrum.core.dim_labels l ON from_address=address
	LEFT JOIN refine r ON from_address=sender
	WHERE 1=1
		AND ETH_VALUE!=0
		AND to_address IN (SELECT sender from refine WHERE CAT='Arbitrum Only')
	QUALIFY ranks=1 ) SELECT
		COUNT(tx_hash) as totals
		, CASE
	WHEN from_address='0xa60113f7d43130919802b0863abdcdb956664fd5' THEN 'ftx'
	
			WHEN project_name IS NULL AND CAT IS NOT NULL THEN 'Another Arbitrum Wallet'
				WHEN project_name IS NULL AND CAT IS NULL THEN 'Untagged'
				ELSE project_name END as pname from init_funds GROUP BY pname HAVING totals>20 ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 128
QUERY_ID: 4c968f74-2e5a-4a2b-b578-0af1a6e23f01
QUERY_TITLE: [algo]Tinyman Swaps ( By Total Algo Volume swapped ) II

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		AVG(algo_amount) as avg_algo_swapped,
			SUM(algo_amount) as total_algo_volume,
	
	
		token_id,
	 
		asset_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.token_id = ass.asset_id
	  WHERE
	
		totals = 4 AND algo_amount IS NOT NULL
	  GROUP BY token_id,asset_name ORDER BY total_algo_volume DESC
	  LIMIT 10 ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 129
QUERY_ID: 4d34a88e-7261-4be8-83bd-4981fe990e02
QUERY_TITLE: [THOR][Q48] New Vs Existing LPers

QUERY_STRING:

with all_addresses as (
	  SELECT from_address from thorchain.liquidity_actions
	  WHERE
	 
	pool_name LIKE '%DOGE%'
	 
	AND LP_action = 'add_liquidity' ), all_from_txns as (
	SELECT
	 
	MIN(block_timestamp) as t_from,
	
	
	from_address as address
		from thorchain.transfers
	WHERE
			from_address IN (SELECT * from all_addresses)
		GROUP by address ), all_to_txns as (
		SELECT
	 
	MIN(block_timestamp) as t_to,
	
	
	to_address as address
		from thorchain.transfers
	WHERE
			to_address IN (SELECT from_address as to_address from all_addresses)
		GROUP by address ), combo as (
	SELECT t_to, NULL as t_from, address from all_to_txns
		UNION ALL
		SELECT NULL as t_to, t_from, address  from all_from_txns ), merge as (
		SELECT
		MIN(t_from) as t_from,
			MIN(t_to) as t_to,
			address
	from combo
		GROUP BY address ), cats as (
		SELECT
	CASE WHEN t_from<t_to THEN t_from ELSE t_to END as min_date,
		CASE WHEN min_date<'2022-01-15' THEN 'existing' ELSE 'new' END as category,
		address
		from merge ), all_msgs as (
		SELECT
	MIN(block_timestamp) as min_date,
		from_address as address
		from thorchain.message_events
		WHERE
		from_address in (SELECT * from all_addresses)
		GROUP BY address ), alt_cats as (
	SELECT
			COUNT(DISTINCT address) as total_wallets,
		CASE WHEN min_date<'2022-01-15' THEN 'existing' ELSE 'new' END as category
		from all_msgs
	GROUP BY category ) --SELECT * from alt_cats SELECT
	COUNT(DISTINCT address) as total_wallets,
		category from cats GROUP BY category



=======================================================================================
=======================================================================================
QUERY_NO: 130
QUERY_ID: 6bf1c529-3921-40ac-aa1b-72acaeac518a
QUERY_TITLE: [Wormhole][Q128] Fees on Terra Bridge/Shuttle

QUERY_STRING:

with shuttle_txns as (
		SELECT tx_id from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-07' ) SELECT
	COUNT(tx_id) as txns,
		AVG(fee[0]:amount[0]:amount/1e6) as avg_txn_fee,
			date_trunc('day', block_timestamp)as d_date
	 from terra.transactions WHERE 
	tx_id IN (
			select * from shuttle_txns
	  )
		AND fee[0]:amount[0]:denom = 'uusd' GROUP BY d_date



=======================================================================================
=======================================================================================
QUERY_NO: 131
QUERY_ID: 2d733691-0164-4635-9cac-ba5b33a1e004
QUERY_TITLE: digest example  copy

QUERY_STRING:

-- forked from digest example  @ https://flipsidecrypto.xyz/studio/queries/a7917b7f-5991-4bf3-8730-3d0990f12a62 -- forked from digest samples @ https://flipsidecrypto.xyz/studio/queries/218dddd5-e778-4512-ad6a-abba6752a532 SELECT
	 * from arbitrum.vertex.ez_perp_trades WHERE 1=1  AND digest='0xe691ef42fef401522e60ae013825bfe0f55ecf9c851b063acb9b84d3ba4be743'



=======================================================================================
=======================================================================================
QUERY_NO: 132
QUERY_ID: 37f364d6-1e71-4244-9d3d-18544ace666d
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP - gAlgo

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 133
QUERY_ID: e60fe3eb-97b2-41c0-a0aa-8333d208f1fb
QUERY_TITLE: [ENS][Q1] ENS Tokens Count Final

QUERY_STRING:

with all_tokens as (
	  SELECT MAX(AMOUNT/1e18) as "tokens", origin_address, tx_id
	  FROM ethereum.udm_events
	  WHERE
	 
	origin_address = to_address
	 
	AND contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND origin_function_signature = '0x76122903'
	 
	AND event_type = 'erc20_transfer'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	
	
	 GROUP BY origin_address, tx_id
	) SELECT SUM("tokens") as "Total Tokens Claimed", COUNT(DISTINCT origin_address) as "Wallets", 25000000 as "Total Tokens", SUM("tokens")/25000000 * 100 as "Percentage Claimed" from all_tokens



=======================================================================================
=======================================================================================
QUERY_NO: 134
QUERY_ID: 38834463-0284-4cc2-a1f6-d20d74c27f85
QUERY_TITLE: [ALGO] Algofi STBL Alt

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	--'465814065' --ALGO market
						--'465814103', --USDC
						--'465814149' --goBTC
	
					--'465814222' --goETH
						'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14' AND block_timestamp<'2022-02-01')
		 ), refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 51)) ), mock_types as (
	SELECT DISTINCT types
		from refine
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_amount, backup) as total_amount,
		SUM(total_amount) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as amount_over_time from base_data b LEFT JOIN refine c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 135
QUERY_ID: 64268b8c-4a8b-4bc3-8d09-069f38f3db93
QUERY_TITLE: [SOL][Q2] Base 2

QUERY_STRING:

SELECT	date_trunc('day', block_timestamp) as ddate,
	
		COUNT(DISTINCT tx_id) as txns,
			COUNT(DISTINCT tx_from_address) as senders from solana.transactions  WHERE 
	tx_to_address in (
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
	)
		AND block_timestamp >= '2021-12-01' AND block_timestamp <= '2021-12-31'
	AND tx_to_address != tx_from_address GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 136
QUERY_ID: 655f3a98-2067-40ea-acfe-9e22382419c9
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP Base

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ) SELECT * from pre_final_cdp



=======================================================================================
=======================================================================================
QUERY_NO: 137
QUERY_ID: 65f581d5-f531-4602-b1ed-54f08d93bde4
QUERY_TITLE: [ALGO][Q78] AB2 Daily Averages

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), pre_final as (
	SELECT
		COUNT(buyer) as total_buyers,
		COUNT(DISTINCT buyer) as unique_buyers,
		date_trunc('day', trade_close_date) as ddate
	from filter_trades
	GROUP BY ddate ORDER BY ddate ASC ) SELECT
	*,
		AVG(total_buyers) OVER (ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as daily_buyers_7D_MA,
	  AVG(unique_buyers) OVER (ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as daily_unique_buyers_7D_MA from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 138
QUERY_ID: 04a4a9a3-a48c-4610-a960-5ac880174ade
QUERY_TITLE: [WvS] WormHole Txns and Unique Users

QUERY_STRING:

with wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ),
	 min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ),
	 wormhole_stats as (
	SELECT
	COUNT(DISTINCT address) as distinct_users,
				COUNT(DISTINCT tx_id) as total_txns,
				date_trunc('day', wh_date) as ddate
		from wh_txns
		GROUP BY ddate ) SELECT * FROM wormhole_stats



=======================================================================================
=======================================================================================
QUERY_NO: 139
QUERY_ID: fefc179f-e48d-4391-8270-5a44c4119aa5
QUERY_TITLE: [WvS]  Shuttle Txns and Unique Users

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT
	COUNT(DISTINCT address) as distinct_users,
				COUNT(DISTINCT tx_id) as total_txns,
				date_trunc('day', shuttle_date) as ddate
		from total_shuttle_txns
		GROUP BY ddate ) SELECT * FROM shuttle_stats



=======================================================================================
=======================================================================================
QUERY_NO: 140
QUERY_ID: ce414b5e-6641-4271-aabc-e92dcd236744
QUERY_TITLE: [WvS] WormHole Users Interacted Over Time

QUERY_STRING:

with wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ),
	 min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address )
	 SELECT
	date_trunc('day', wh_date) as ddate,
		COUNT(DISTINCT address) as new_users,
			SUM(new_users) OVER (ORDER BY ddate ASC) as user_growth from min_wh_user GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 141
QUERY_ID: 3f7dd33e-27d0-49cb-8595-8a0ea7ac64c9
QUERY_TITLE: [WvS] Shuttle Frequency By User-Types

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), frequencies as ( SELECT
	date_trunc('hour', shuttle_date) as ddate,
			tx_id,
		lag(ddate, 1, NULL) over (partition by address order by ddate) as time_prev,
			DATEDIFF('hour', time_prev, ddate) as time_since_last,
			address from total_shuttle_txns order by address, ddate ), pre_group as (
	  SELECT
	COUNT(DISTINCT tx_id) as txn_totals,
	 
		AVG(time_since_last) as avg_frequency_hr,
	 
		address
	  from frequencies
	  GROUP BY address ORDER BY txn_totals DESC ), debug as ( 
	SELECT 
	CASE	WHEN txn_totals>=2 AND txn_totals<=10	THEN 'less_frequent_user'
			WHEN txn_totals>10 AND txn_totals<=50	THEN 'frequent_user'
			WHEN txn_totals>50	THEN 'spammy_user'
			WHEN txn_totals=1 THEN 'one_time_user' END 
		as cat,
		COUNT(DISTINCT address) as total_users,
			AVG (avg_frequency_hr) as avg_hr_gap
	from pre_group
	GROUP BY cat ) SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 142
QUERY_ID: 04a0972d-b108-4467-ab1b-b996a406d39e
QUERY_TITLE: [WvS] Wormhole Frequency By User-Types

QUERY_STRING:

with wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), frequencies as ( SELECT
	date_trunc('hour', wh_date) as ddate,
			tx_id,
		lag(ddate, 1, NULL) over (partition by address order by ddate) as time_prev,
			DATEDIFF('hour', time_prev, ddate) as time_since_last,
			address from wh_txns order by address, ddate ), pre_group as (
	  SELECT
	COUNT(DISTINCT tx_id) as txn_totals,
	 
		AVG(time_since_last) as avg_frequency_hr,
	 
		address
	  from frequencies
	  GROUP BY address ORDER BY txn_totals DESC ), debug as ( 
	SELECT 
	CASE	WHEN txn_totals>=2 AND txn_totals<=10	THEN 'less_frequent_user'
			WHEN txn_totals>10 AND txn_totals<=50	THEN 'frequent_user'
			WHEN txn_totals>50	THEN 'spammy_user'
			WHEN txn_totals=1 THEN 'one_time_user' END 
		as cat,
		COUNT(DISTINCT address) as total_users,
			AVG (avg_frequency_hr) as avg_hr_gap
	from pre_group
	GROUP BY cat ) SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 143
QUERY_ID: 66438ad2-3db2-454a-bc4b-1600b5261afc
QUERY_TITLE: [ALGO][Q4] Voting Breakdown - Votes Example

QUERY_STRING:

with p1_voters as (	
	SELECT
	
		sender,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1)) as opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ), p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ) SELECT COUNT(TX_ID) as totals, MAX(last_tx_id), prop, sender, MAX(final_opt) from p1_voters_debug GROUP BY sender,prop ORDER BY totals DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 144
QUERY_ID: 430db199-f894-42e3-96c0-950babe16171
QUERY_TITLE: Aurora Base

QUERY_STRING:

with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT FROM_ADDRESS) as t_users
	  , SUM(TX_FEE) as t_fee
	  , date_trunc(day, BLOCK_TIMESTAMP) as ddate
	  , STATUS as TX_STATUS
	FROM aurora.core.fact_transactions
	GROUP BY ddate, TX_STATUS ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 145
QUERY_ID: 667f9ecc-0c7a-4ad7-9581-90997a49433f
QUERY_TITLE: [Optimism][Q10] Velodrome Daily Users

QUERY_STRING:

with base as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'staking action' as activity from optimism.velodrome.ez_staking_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'LP action' as activity from optimism.velodrome.ez_lp_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'claim rewards' as activity from optimism.velodrome.ez_claimed_rewards
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'swaps'  as activity from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO locks' as activity from optimism.velodrome.ez_velo_locks
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO votes' as activity from optimism.velodrome.ez_votes ) SELECT 
	block_timestamp::date as ddate,
	COUNT(DISTINCT tx_hash) as total_txns,
		COUNT(DISTINCT sender) as total_users from base group by ddate ORDER BY ddate asc



=======================================================================================
=======================================================================================
QUERY_NO: 146
QUERY_ID: 8c786d64-38fc-4fb9-9f56-f0a671991cee
QUERY_TITLE: Aurora Block Check Enhanced

QUERY_STRING:

-- forked from Aurora Block Check @ https://flipsidecrypto.xyz/edit/queries/e63bd8c0-dab3-491c-b31a-353c602f4d98 -- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (
	SELECT
	
	b.BLOCK_NUMBER
	  , t.BLOCK_NUMBER as t_block_no
	  , b.tx_count as b_txns
	  , b.block_timestamp::date as ddate
	  , CASE WHEN t_block_no IS NULL AND b_txns!=0 THEN 1 ELSE 0 END as missing
	FROM aurora.core.fact_blocks b
	LEFT JOIN aurora.core.fact_transactions t ON b.block_number = t.block_number
	ORDER BY BLOCK_NUMBER ASC ) SELECT
	 SUM(missing) as missing
	, ddate from base GROUP BY ddate ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 147
QUERY_ID: 7e9ee138-3a9d-4789-a6da-9681f94a8a1f
QUERY_TITLE: [Optimism][Q10] Velodrome Daily LP stats

QUERY_STRING:

with base as (
	SELECT
		block_timestamp::date as ddate,
		LP_TOKEN_ACTION as act,
		count(DISTINCT tx_hash) as total_txns,
		SUM(CASE WHEN act='mint' THEN LP_TOKEN_AMOUNT_USD ELSE (-1)*LP_TOKEN_AMOUNT_USD END) as usd_amt
	from optimism.velodrome.ez_lp_actions
	GROUP BY ddate, act ) SELECT 
	*,
	SUM(usd_amt) OVER (PARTITION BY ddate) as net_amt from base



=======================================================================================
=======================================================================================
QUERY_NO: 148
QUERY_ID: d2676227-3299-41a8-bc56-6425d16fac64
QUERY_TITLE: Get data from previous query

QUERY_STRING:

/* The query id can be taken from the browser address bar when editing your target query */ with get_base_query AS ( -- Get data from target query SELECT
	value[0]::date as day
	, value[1]::string AS chain
	, value[2]::numeric AS actions  FROM (
	SELECT
	  livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7cd588bd-5dee-42d1-9269-ffb381932438/latest-run') as response
	), lateral FLATTEN (input => response:data:data) ) -- Calc a few stats SELECT
	sum(actions) AS weekly_actions
	, max(actions) AS most_active_day_actions FROM get_base_query



=======================================================================================
=======================================================================================
QUERY_NO: 149
QUERY_ID: 469b2e50-9d8c-4807-9f25-06893ad23918
QUERY_TITLE: bluemove tests

QUERY_STRING:

bluemove



=======================================================================================
=======================================================================================
QUERY_NO: 150
QUERY_ID: ba354610-441d-448d-b9f4-05300cdcb869
QUERY_TITLE: Sweat Traffic

QUERY_STRING:

with base as (
	 select
	
	block_timestamp
	  , tx_signer as user
	  , tx_hash
	  , CASE WHEN (project_name ilike '%sweat%' and project_name not ilike '%farand%') THEN 1 ELSE 0 END as destination_type
	  , 0 origin_type
	from near.core.fact_transactions t
	 join near.core.dim_address_labels l on t.tx_receiver = l.address
	where 1=1
	  AND block_timestamp>='2022-08-01'
	  AND  TX_STATUS = 'Success'
	UNION ALL
	select
	
	block_timestamp,
	
	tx_receiver as user
	  , tx_hash
	  , 0 as destination_type
	  , CASE WHEN (project_name ilike '%sweat%' and project_name not ilike '%farand%') THEN 1 ELSE 0 END as origin_type
	from near.core.fact_transactions t
	 join near.core.dim_address_labels l on t.tx_signer = l.address
	where 1=1
	  AND block_timestamp>='2022-08-01'
	  AND TX_STATUS = 'Success' ), refine as (
	SELECT
	
	tx_hash
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(destination_type+origin_type) as txn_type
	from base
	GROUP BY tx_hash ) SELECT
	block_timestamp::date as ddate
	, CASE WHEN txn_type>=1 THEN 'sweat' ELSE 'others' END as cat
	, COUNT(DISTINCT tx_hash) as totals from refine GROUP BY ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 151
QUERY_ID: 1c6d0209-84d5-408c-964b-5903218e4369
QUERY_TITLE: SEI Transfers Abuse  RNG % First Few Days

QUERY_STRING:

-- forked from SEI Transfers Abuse  RNG % @ https://flipsidecrypto.xyz/edit/queries/303e80ea-363c-4d33-8639-89010c86b05c -- forked from SEI Transfers Abuse @ https://flipsidecrypto.xyz/edit/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1 -- forked from SEI transfers/bridging of claimers FIXED @ https://flipsidecrypto.xyz/edit/queries/8f764723-2027-4da8-a983-b44379113127 with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=150') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=150') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'day') = b.hourly and a.symbol_address = b.token_address ) ,  merge_txns as (
	SELECT
	
	SUM(CASE WHEN cat='in' THEN volume ELSE null END) as vol_in
	  , SUM(CASE WHEN cat='out' THEN volume ELSE null END) as vol_out
	  , SUM(CASE WHEN cat='drop' THEN volume ELSE NULL END) as vol_drop
	  , SUM(CASE WHEN cat='drop' THEN amount ELSE NULL END) as amt_drop
	  , COUNT(DISTINCT tx_id) as txns
	  , MIN(block_timestamp) as t_min
	  , MAX(block_timestamp) as t_max
	  , MIN(CASE WHEN cat='drop' THEN block_timestamp ELSE NULL END) as t_drop
	  , user
	from all_bridges
	GROUP BY user ) SELECT
	  CASE WHEN AMT_DROP <5000 THEN 'no extra drop' ELSE 'extra drop' END as cat
	, COUNT(DISTINCT user) as totals from merge_txns where 1=1
	AND (VOL_IN>9999)
	AND t_drop < '2023-08-19' group by cat



=======================================================================================
=======================================================================================
QUERY_NO: 152
QUERY_ID: a94bbe36-bd3b-41a5-afcf-f8725009bdb2
QUERY_TITLE: sample bonus case

QUERY_STRING:

with tuples as (
	 SELECT
		ARRAY_CONSTRUCT(183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 84, 83, 83, 83, 83, 83, 83, 84, 85, 85, 85, 85, 85, 60, 59, 59, 59, 59, 59, 59, 61, 61, 61, 61, 61, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 62, 61, 61, 61, 61, 61, 60, 59, 58, 58, 57, 55, 54, 54, 54, 53, 52, 51, 50, 50, 49, 48, 48, 47, 46, 45, 45, 45, 45, 45, 44, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 41, 41, 41, 41, 43, 43, 44, 45, 45, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 54, 54, 56, 56, 59, 59, 61, 63, 63, 65, 65, 134, 135, 135, 135, 135, 135, 137, 137, 137, 137, 137, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183) as span0
		, ARRAY_CONSTRUCT(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 4, 5, 5, 3, 3, 4, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 4, 3, 3, 3, 4, 5, 5, 3, 4, 5, 6, 4, 3, 4, 5, 5, 5, 4, 4, 5, 4, 4, 4, 5, 4, 3, 3, 3, 4, 5, 4, 4, 5, 4, 3, 3, 3, 3, 3, 3, 4, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 4, 5, 5, 4, 4, 4, 3, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 7, 6, 6, 6, 7, 6, 5, 6, 5, 4,4.0,3.0,3.0,4.0,5.0,5.0,3.0,3.0,3.0,3.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span1
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,98.0,97.0,97.0,97.0,97.0,97.0,96.0,96.0,95.0,95.0,95.0,95.0,95.0,24.0,24.0,24.0,25.0,24.0,23.0,23.0,25.0,25.0,24.0,23.0,23.0,24.0, 25, 25,25.0,25.0,25.0,26.0,27.0,27.0,27.0,27.0,28.0,29.0,29.0,29.0,31.0,32.0,32.0,32.0,32.0,33.0,34.0,35.0,35.0,36.0,37.0,38.0,38.0,39.0,40.0,40.0,42.0,44.0,45.0,46.0,46.0,48.0,49.0,49.0,49.0,51.0,52.0,53.0,56.0,56.0,57.0, 59, 61,61.0,62.0,63.0,63.0,64.0,65.0,65.0,66.0,67.0,68.0,70.0,71.0,71.0,71.0,71.0,73.0,73.0,74.0,75.0,76.0,77.0,77.0,78.0,78.0,79.0,79.0,80.0,80.0,79.0,79.0,78.0,78.0,77.0,76.0,76.0,76.0,77.0,76.0,76.0,77.0,76.0,75.0,74.0,75.0,74.0,73.0,73.0,74.0,73.0,72.0,71.0,69.0,68.0,68.0,66.0,65.0,64.0,65.0,64.0,63.0,64.0,45.0,45.0,45.0,44.0,43.0,43.0,43.0,43.0,43.0,43.0,44.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0, 0) as span2
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,3.0,4.0,3.0,3.0,4.0,5.0,3.0,3.0,3.0,4.0,4.0,4.0,3.0,3.0,3.0,4.0,4.0,4.0,3.0,3.0,4.0,4.0,4.0,3.0,4.0,5.0,4.0,3.0,3.0,4.0,4.0,4.0,4.0,3.0,4.0, 3, 3,4.0,4.0,4.0,3.0,4.0,3.0,4.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,4.0,5.0,3.0,4.0,4.0,4.0,3.0,3.0,3.0,4.0,4.0,4.0,3.0,3.0,4.0,4.0,4.0,3.0,3.0,4.0,5.0,5.0,3.0,4.0,3.0,3.0,3.0,3.0,4.0,3.0,4.0,3.0,4.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,4.0,5.0,5.0,3.0,3.0,4.0,5.0,3.0,4.0,4.0,4.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,5.0,5.0,3.0,3.0,4.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span3
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,94.0,94.0,93.0,93.0,93.0,92.0,91.0,91.0,91.0,91.0,90.0,90.0,89.0,89.0,89.0,89.0,88.0,88.0,87.0,87.0,87.0,86.0,86.0,85.0,85.0,84.0,83.0,82.0,82.0,82.0,81.0,81.0,80.0,79.0,79.0,78.0,78.0,78.0,77.0,77.0,76.0,76.0,75.0,75.0,74.0,74.0,74.0,74.0,74.0,74.0,74.0,74.0,73.0,72.0,71.0,71.0,70.0,70.0,69.0, 69, 69,69.0,68.0,68.0,67.0,67.0,67.0,66.0,66.0,65.0,65.0,65.0,64.0,63.0,63.0,63.0,62.0,62.0,61.0,61.0,61.0,60.0,60.0,59.0,59.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,57.0,57.0,56.0,55.0,54.0,54.0,54.0,54.0,53.0,52.0,52.0,51.0,51.0,50.0,50.0,50.0,50.0,50.0,50.0,49.0,49.0,48.0,47.0,47.0,47.0,47.0,46.0,46.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span4 ) , row0 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span0 FROM tuples))),  row1 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span1 FROM tuples))),  row2 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span2 FROM tuples))),  row3 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span3 FROM tuples))),  row4 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span4 FROM tuples))) SELECT row0.index,
	row0.value as value_0, 
	row1.value as value_1, 
	row2.value as value_2, 
	row3.value as value_3, 
	row4.value as value_4 from row0 LEFT JOIN row1 ON row0.index = row1.index LEFT JOIN row2 ON row0.index = row2.index LEFT JOIN row3 ON row0.index = row3.index LEFT JOIN row4 ON row0.index = row4.index



=======================================================================================
=======================================================================================
QUERY_NO: 153
QUERY_ID: 4928272a-500f-4334-b49e-b8b33a9fc3e8
QUERY_TITLE: [OP] L2 Summer Base

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), refine as (
	SELECT
	
	COUNT(DISTINCT sender) as new_users,
		ddate
	from new_arb
	GROUP BY ddate  ) SELECT
	 *,
	SUM(new_users) OVER (ORDER BY ddate ASC) as new_users_total from refine ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 154
QUERY_ID: 9dbf63ec-0fff-467b-8dfe-cf12bf28e45c
QUERY_TITLE: Aurora Blocks

QUERY_STRING:

SELECT
	COUNT(1) as totals
	, block_timestamp::date as ddate
	, CASE WHEN tx_count=0 THEN 'empty' ELSE 'Not empty' END as cat from aurora.core.fact_blocks WHERE
	ddate>'2021-10-01' group by ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 155
QUERY_ID: 0de71382-40f9-4460-8256-50170f3286b1
QUERY_TITLE: [Terra][Q169] Failed Transactions Drilldown

QUERY_STRING:

with terra_txns as (
	SELECT
		COUNT(CASE WHEN tx_status='SUCCEEDED' THEN tx_id ELSE NULL END) as stotals,
		COUNT(CASE WHEN tx_status!='SUCCEEDED' THEN tx_id ELSE NULL END) as ftotals,
		COUNT(tx_id) as totals,
		---tx_status,
		date_trunc('day', block_timestamp) as ddate
	from  terra.transactions
	WHERE
		block_timestamp>='2021-11-01'
	GROUP BY ddate ORDER BY ddate ASC ),
	 luna_prices as (
	SELECT
	  date_trunc('day', block_timestamp) as ddate,
	  AVG(price_usd) as price_usd
	from terra.oracle_prices
	WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		AND block_timestamp>='2021-11-01'
	 GROUP by ddate ) SELECT
	 t.ddate,
	(ftotals/totals)*100 as failure_rate,
	stotals as successful_txns,
	ftotals as failed_txns,
	price_usd from terra_txns t LEFT JOIN luna_prices lp on t.ddate=lp.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 156
QUERY_ID: 01ab4be5-6143-4afb-ac0d-4b5c23f6a75e
QUERY_TITLE: airdrop claims overview stats

QUERY_STRING:

-- forked from airdrop claims time @ https://flipsidecrypto.xyz/edit/queries/ff0bc89c-3b93-4ba8-9205-5b1eabee8510 with claimers as (
	SELECT
	
	min(block_timestamp) as min_dtime
	  , max(block_timestamp) as max_dtime
	  , SUM(events[0]:data:amount/1e8) as amount
	  , COUNT(version) as txns
	  , sender as wallet
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	 GROUP BY sender ) , stats as (
	  SELECT
	
	 COUNT(DISTINCT wallet) as claimers
	  , SUM(amount) as amount_claimed
	  , min(amount) as min_amount
	  , max(amount) as max_amount
	
	  from claimers
	where 1=1
	  and min_dtime>TO_TIMESTAMP(1666133400)
	  and ( (txns=1 and amount in (150,300) OR (amount=450) ) ) )
	SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 157
QUERY_ID: 3ff77840-be53-4905-875c-841542cd0475
QUERY_TITLE: L0 Sample

QUERY_STRING:

SELECT * from external.layerzero.fact_transactions_snapshot WHERE
	 SENDER_WALLET= '0xa3fa406010fb3a2cfa8259984c24a0190fd26e02' LIMIT 100 -- COUNT(DISTINCT project) -- SUM(NATIVE_DROP_USD) -- SUM(STARGATE_SWAP_USD)



=======================================================================================
=======================================================================================
QUERY_NO: 158
QUERY_ID: 1604f02c-4882-4b5a-b562-4aea6e7939f6
QUERY_TITLE: [Nouns] Proposal Distinct Voters

QUERY_STRING:

with votes as (
	SELECT
	
	TO_NUMBER(event_inputs:proposalId) as prop_id,
		COUNT(DISTINCT event_inputs:voter) as total_voters
		
		/* MAX(nouns_existing) as nouns_existing,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc */
	from ethereum.core.fact_event_logs f
	WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	GROUP BY prop_id ORDER BY prop_id ASC ) SELECT * from votes



=======================================================================================
=======================================================================================
QUERY_NO: 159
QUERY_ID: 191fda0b-330d-41fd-88e5-88ea594dbfee
QUERY_TITLE: kwenta - trades debug

QUERY_STRING:

-- forked from kwenta - accounts @ https://flipsidecrypto.xyz/edit/queries/70771449-6a97-4e3e-be51-6315eff8ec83 with orders as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , contract_address as market_proxy
	  , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0]) as margin
	  , ethereum.public.udf_hex_to_int(params [1]) as size
	  , ethereum.public.udf_hex_to_int(params [2]) as trade_size
	  , ethereum.public.udf_hex_to_int(params [3]) as last_price
	  , ethereum.public.udf_hex_to_int(params [5]) as fee
	  , ethereum.public.udf_hex_to_int(params [6]) as skew
	 --------decides fee/fee rate
	  , '0x' || substring(topics[2], 27, 66) as sub_account
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  -- AND event_name = 'NewAccount'
	  AND origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	  AND topics[0] = '0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43' --PositionModified
	  AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3' ) , market_infos as (
	SELECT
	
	block_timestamp
	  , tx_hash
	
	
	 , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0]) as base_asset
	  , ethereum.public.udf_hex_to_int(params [1]) as market_key
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  -- AND event_name = 'NewAccount'
	  AND origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	  AND topics[0] = '0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4' --PerpsTracking
	  AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3' ) SELECT
	 o.tx_hash
	, market_proxy
	, margin
	, size
	, trade_size
	, last_price
	, sub_account
	, base_asset
	, market_key from orders o  LEFT JOIN market_infos i ON o.tx_hash=i.tx_hash



=======================================================================================
=======================================================================================
QUERY_NO: 160
QUERY_ID: 92462428-6074-4361-8b2d-6599f357dce7
QUERY_TITLE: arb- retentions copy

QUERY_STRING:

-- forked from arb- retentions @ https://flipsidecrypto.xyz/edit/queries/d054be95-aa8d-4b3a-9888-b68e192b9886  -- forked from arb-airdrop base txns @ https://flipsidecrypto.xyz/edit/queries/2a44e480-ee89-49ad-a743-88964ea2395e with airdrop_wallets AS (
	  SELECT
	
	 ethereum.public.udf_hex_to_int (DATA) / pow(10, 18) AS amount
	
	 , CONCAT('0x', SUBSTR(TOPICS[1], -40, 40)) AS receiver_wallet
	
	 , block_timestamp as claim_time
	
	 , tx_hash as claim_tx
	  FROM
	
	 arbitrum.core.fact_event_logs
	  WHERE 1=1
	
	 AND ORIGIN_TO_ADDRESS = '0x67a24ce4321ab3af51c2d0a4801c3e111d88c9d9'
	
	 AND ORIGIN_FUNCTION_SIGNATURE = '0xae373c1b'
	
	 AND BLOCK_NUMBER >= 70506697
	
	 AND TX_STATUS = 'SUCCESS' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from arbitrum.core.fact_transactions
	where 1=1
	  and ( block_timestamp>'2022-09-01' AND block_timestamp<'2023-09-01')
	  AND from_address in ( SELECT receiver_wallet as from_address from airdrop_wallets) ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference || ' Month' as difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  TO_VARCHAR(count_new_users.earliest_date, 'yyyy-MM') as cohort_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) select * from long_retention_table



=======================================================================================
=======================================================================================
QUERY_NO: 161
QUERY_ID: 2e40dfc0-8cdf-4fc1-8b01-fca95ad3725f
QUERY_TITLE: [Optmism] VELO - Base Days Bar

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' ), refine as (
	SELECT
		tx_hash,
		date_trunc('hour',block_timestamp) as hdate,
		ORIGIN_FROM_ADDRESS,
		ORIGIN_TO_ADDRESS,
		contract_address,
		provider,
		locked_date,
		tokenID,
		weight,
		deposit_type,
		DATEDIFF(day, date_trunc('day',block_timestamp), locked_date)  as days,
		test
	FROM base
	WHERE weight>0 )  SELECT
	 COUNT(*) as totals,
	CASE	WHEN days <=5 THEN '00: less than a Week'
			WHEN days IN (6,7) THEN '01: 1 Week'
			WHEN days >=8 AND days<28 THEN '02: >Week'
			WHEN days IN (28,29,30) THEN '03: 1 Month'
			WHEN days >=31 AND days <360 THEN '04: >1 Month'
			WHEN days BETWEEN 360 AND 370 THEN '05: 1 year'
			WHEN days BETWEEN 370 AND 725 THEN '06: >1 Year'
	
		WHEN days BETWEEN 726 AND 735 THEN '07: 2 years'
			WHEN days BETWEEN 736 AND 1090 THEN '08: >2 years'
			WHEN days BETWEEN 1091 AND 1100 THEN '09: 3 years'
			WHEN days BETWEEN 1101 AND 1445 THEN '10: >3 years'
			WHEN days>1445 THEN '11: 4 years or more' ELSE '???' END as cat from refine GROUP BY cat ORDER BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 162
QUERY_ID: 163cd6f0-cc49-4dd9-9b3c-be861023bdec
QUERY_TITLE: [Optmism] VELO - Base Days

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' ), refine as (
	SELECT
		tx_hash,
		date_trunc('hour',block_timestamp) as hdate,
		ORIGIN_FROM_ADDRESS,
		ORIGIN_TO_ADDRESS,
		contract_address,
		provider,
		locked_date,
		tokenID,
		weight,
		deposit_type,
		DATEDIFF(day, date_trunc('day',block_timestamp), locked_date)  as days,
		test
	FROM base
	WHERE weight>0 )  SELECT
	 COUNT(*) as totals,
	CASE	WHEN days <=5 THEN 'less than a Week'
			WHEN days IN (6,7) THEN '1 Week'
			WHEN days >=8 AND days<28 THEN '>Week'
			WHEN days IN (28,29,30) THEN '1 Month'
			WHEN days >=31 AND days <360 THEN '>1 Month'
			WHEN days BETWEEN 360 AND 370 THEN '1 year'
			WHEN days BETWEEN 370 AND 725 THEN '>1 Year'
	
		WHEN days BETWEEN 726 AND 735 THEN '2 years'
			WHEN days BETWEEN 736 AND 1090 THEN '>2 years'
			WHEN days BETWEEN 1091 AND 1100 THEN '3 years'
			WHEN days BETWEEN 1101 AND 1445 THEN '>3 years'
			WHEN days>1445 THEN '4 years or more' ELSE '???' END as cat from refine GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 163
QUERY_ID: 351b2864-fea2-41a2-b321-656cfb17f215
QUERY_TITLE: [NEAR][T3] Ref Finance Calls Failures

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
		method_name,
		tx,
		CASE WHEN tx not ilike '%"status":{"Failure"%' THEN 'success' ELSE 'fail' END as cat
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%') ) SELECT
	COUNT(DISTINCT tx_hash) as totals,
		cat,
		ddate from base GROUP BY ddate,cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 164
QUERY_ID: 0b9bf455-df07-4d17-ae96-fa934c4f0ea7
QUERY_TITLE: [NEAR][T3] Ref Finance Calls ACTIONS

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
		method_name,
		CASE
	
		WHEN logs[0] ilike 'swapped%' THEN 'swaps'
			WHEN method_name ilike '%liquid%' THEN method_name
			ELSE 'other methods' END as cat,
		tx
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	AND tx not ilike '%"status":{"Failure"%' ) SELECT
	COUNT(DISTINCT tx_hash) as totals,
		cat,
		ddate from base GROUP BY ddate,cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 165
QUERY_ID: 7b51cd5a-ee3c-4330-9da3-caa80e77ec9b
QUERY_TITLE: Contracts Over Time

QUERY_STRING:

with base as (
	SELECT
		tx_receiver as contract,
		a.block_timestamp,
	
	first_value(a.block_timestamp) OVER (PARTITION BY contract ORDER BY a.block_timestamp) as origin,
		tx
	from near.core.fact_actions_events a
	 LEFT JOIN near.core.fact_transactions t ON t.tx_hash = a.tx_hash
	where action_name = 'DeployContract' ), refine as(
	SELECT
	COUNT(DISTINCT contract) as totals,
		CASE WHEN block_timestamp = origin THEN 'new' ELSE 'upgrade existing' END as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	GROUP BY ddate, cat
	ORDER BY ddate  ) SELECT * ,
	SUM(totals) OVER (PARTITION BY CAT ORDER BY ddate ASC) as totals_cum from refine



=======================================================================================
=======================================================================================
QUERY_NO: 166
QUERY_ID: c8d15327-bcd8-4034-9bf4-897f8c8a62de
QUERY_TITLE: [NEAR][T3] Citizens & Ref Finance

QUERY_STRING:

with citizens as (
	SELECT
	
	parse_json(args) as json_args,
		json_args:new_account_id as citizen,
		block_timestamp as ddate
	from near.core.fact_actions_events_function_call
	where method_name = 'create_account' and args LIKE '%new_account_id%' ), txns as (
	SELECT
	
	MIN(a.block_timestamp) as mdate,
		
		tx_signer
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
		AND tx not ilike '%"status":{"Failure"%'
	GROUP BY tx_signer ) SELECT 
	COUNT(DISTINCT citizen) as totals,
	--mddate,
		CASE WHEN mdate IS NOT NULL THEN 'User of Ref Finance' ELSE 'Never Used' END as cat from citizens LEFT JOIN txns ON citizen=tx_signer GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 167
QUERY_ID: 7567883e-2d16-4105-8f95-8c6770a3cee7
QUERY_TITLE: [NEAR] NFT Daily Traffic

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ) SELECT
	COUNT(DISTINCT tx_hash) as total_txs,
	SUM(price) as near_volume,
		COUNT(DISTINCT tx_signer) as daily_users,
		date_trunc('day', block_timestamp) as ddate,
	CASE WHEN type='nft_mint' THEN 'NFT Mints' ELSE 'NFT Secondary Sales' END as type from types WHERE type IN ('nft_mint', 'resolve_purchase') GROUP BY ddate, type ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 168
QUERY_ID: a1d0803b-56be-4c71-9de3-545aa89aafc5
QUERY_TITLE: [NEAR] User NFT Purchases

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as txns,
		CASE	WHEN is_offer=TRUE
		THEN 'Offer Bid'
				WHEN is_auction=TRUE	THEN 'Auction Win'
				ELSE 'Direct Listing' END as cat
		
	FROM types
	WHERE
		type IN ( 'resolve_purchase')
	GROUP BY cat ) SELECT
	* from refine



=======================================================================================
=======================================================================================
QUERY_NO: 169
QUERY_ID: 25de1796-75fd-42ec-9609-c9034db24cf9
QUERY_TITLE: [ALGO] Algofi goBTC Alt

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	--'465814065' --ALGO market
						--'465814103', --USDC
						'465814149' --goBTC
						--'465814222', --goETH
						--'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14' AND block_timestamp<'2022-02-01')
		 ), refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE 
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 51)) ), mock_types as (
	SELECT DISTINCT types
		from refine
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_amount, backup) as total_amount,
		SUM(total_amount) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as amount_over_time from base_data b LEFT JOIN refine c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 170
QUERY_ID: 1054bbfc-94de-447e-a20e-33c490e12f15
QUERY_TITLE: [avax] Block Times

QUERY_STRING:

with avax as (
	SELECT
		COUNT(block_number) as totals,
		date_trunc('hour', block_timestamp) as hdate
	from ethereum.core.fact_blocks
	WHERE 1=1
		AND tx_count=0
	AND  block_timestamp >= '2022-06-20'
	GROUP BY hdate ) SELECT * from avax



=======================================================================================
=======================================================================================
QUERY_NO: 171
QUERY_ID: 89bef148-6f79-4282-b7fb-829be0c7ebe0
QUERY_TITLE: [ENS][Q6] ENS Re-Registrations Plot

QUERY_STRING:

with valid_txns as (
	SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from ethereum.events_emitted
	WHERE
		tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
		AND block_timestamp >= CURRENT_DATE - 360
	GROUP BY tx_id, block_timestamp
	
	), samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('hour', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND tx_id IN (
			select tx_id from valid_txns
				WHERE
					burn_out = 1
					AND controller_in = 1
			)
		AND block_timestamp >= CURRENT_DATE - 360 ) SELECT
	COUNT(DISTINCT tx_id) as totals,
		date_trunc('day', days) as ddate from samples GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 172
QUERY_ID: b459dd03-6be7-4136-bec8-604e2cf12252
QUERY_TITLE: monthly swaps affected %

QUERY_STRING:

-- forked from odd-case dex_swaps w/ Hippo Aggregator @ https://flipsidecrypto.xyz/studio/queries/00a51ac5-18ea-4924-8055-3b0b96de933e with swaps as (
	SELECT DISTINCT version from  aptos.defi.ez_dex_swaps
	WHERE 1=1
	  AND block_timestamp between '2022-09-01' AND '2024-09-30' ) , swap_details as (
	SELECT
	
	block_timestamp
	  , version
	  , MAX(CASE WHEN event_type = '0x89576037b3cc0b89645ea393a47787bb348272c76d6941c574b053672b848039::aggregator::SwapStepEvent' THEN 1 ELSE 0 END) as hippo
	from aptos.core.fact_events
	WHERE 1=1
	
	AND version in (SELECT version from swaps)
	  AND block_timestamp between '2022-09-01' AND '2024-09-30'
	GROUP BY 1, 2 ) SELECT
	 date_trunc('month', block_timestamp) as ddate
	, COUNT(CASE WHEN hippo=1 THEN 1 ELSE NULL END) as hippo_swaps
	, COUNT(*) as total_swaps
	, ROUND((hippo_swaps/total_swaps)*100, 2) as hippo_perc
	, MAX(CASE WHEN hippo=1 THEN version END) as sample_ver from swap_details GROUP BY ddate ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 173
QUERY_ID: f92ae984-7371-43a5-baf5-4189bc3aa578
QUERY_TITLE: [BANKLESS] DEBUG #1

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT' ), base_groups as (
	SELECT *,
	row_number() OVER(Partition BY tx_id ORDER BY event_index ASC) as row_num
	from ethereum.dex_swaps
	WHERE
	tx_id IN (SELECT * from swap_outs) ), groups as (
	SELECT
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN pool_name ELSE NULL END) as final_pool,
	MAX(CASE WHEN (row_num IN (1,2) AND direction='IN' AND token_address!='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198') THEN token_address ELSE NULL END) as swap_token,
		MAX(CASE WHEN (row_num IN (1,2) AND direction='IN' AND token_address!='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198')  THEN pool_name ELSE NULL END) as swap_pool,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN platform ELSE NULL END) as platform,
		COUNT(tx_id) as tx_totals,
	tx_id
	 from base_groups
	GROUP BY tx_id ) SELECT * from groups WHERE
	swap_token IS NULL



=======================================================================================
=======================================================================================
QUERY_NO: 174
QUERY_ID: f916fc64-988a-44d5-8a7e-f461625ef50b
QUERY_TITLE: [ANCHOR][Q123] Total Anchor D/B

QUERY_STRING:

with wdeps as ( SELECT
	SUM(deposit_amount_usd) as usd_dep,
		date_trunc('week', block_timestamp) as wdate from anchor.deposits WHERE
	block_timestamp>'2021-01-01' AND block_timestamp<'2021-12-31' GROUP BY wdate ), wborrs as ( SELECT
	SUM(amount_usd) as usd_borr,
		date_trunc('week', block_timestamp) as wdate from anchor.borrows WHERE
	block_timestamp>'2021-01-01' AND block_timestamp<'2021-12-31' GROUP BY wdate ) SELECT
	wdeps.wdate as wwdate, usd_dep, usd_borr,
		SUM(usd_dep) OVER (ORDER BY wwdate) as dep_sums,
		SUM(usd_borr) OVER (ORDER BY wwdate) as borr_sums from wdeps  JOIN wborrs ON wborrs.wdate=wdeps.wdate



=======================================================================================
=======================================================================================
QUERY_NO: 175
QUERY_ID: 1efe9d8d-c188-4827-b4e2-00ddd6c14c84
QUERY_TITLE: [NEAR] Retention Tourists & Citizens

QUERY_STRING:

with base_wallets as (
	SELECT
	
	TX_SIGNER as wallet,
		MIN(date_trunc('day', block_timestamp)) as min_date
	from flipside_prod_db.mdao_near.transactions
	WHERE
		block_timestamp >= '2022-01-01' -- Extra Time to store up wallets
	GROUP BY wallet ), new_txns as (
	SELECT
	
	COUNT(TXN_HASH) as totals,
		TX_SIGNER as wallet,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN ddate>min_date THEN 'old' ELSE 'new' END as cat
	from flipside_prod_db.mdao_near.transactions t
	LEFT JOIN base_wallets b ON t.TX_SIGNER = b.wallet
	WHERE
		block_timestamp >= '2022-03-01'
	GROUP BY ddate, TX_SIGNER, cat ) SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	ddate,
	cat from new_txns GROUP BY ddate,cat ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 176
QUERY_ID: e75f0519-c128-4bbc-ae01-1eab5accc38a
QUERY_TITLE: [NEAR] Active Wallets Dive

QUERY_STRING:

with base_wallets as (
	SELECT
	
	COUNT(*) as txns,
		TX_SIGNER as wallet,
		MAX(DATEADD('day', 90, date_trunc('day', block_timestamp))) as ddate_90,
		MAX(DATEADD('day', 60, date_trunc('day', block_timestamp))) as ddate_60,
		MAX(DATEADD('day', 30, date_trunc('day', block_timestamp))) as ddate_30,
		MAX(DATEADD('day', 7, date_trunc('day', block_timestamp))) as ddate_7,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.mdao_near.transactions
	WHERE
		block_timestamp  >= '2022-01-01' -- Extra Time to store up wallets
	GROUP BY ddate, wallet ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 365)) ), mixer90 as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		'90day Rolling' as cat
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_90 AND d.dkey>=b.ddate ), mixer60 as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		'60day Rolling' as cat
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_60 AND d.dkey>=b.ddate ), mixer30 as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		'30day Rolling' as cat
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_30 AND d.dkey>=b.ddate ), mixer7 as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		'7day Rolling' as cat
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_7 AND d.dkey>=b.ddate ), mix_fin as (
	SELECT * from mixer90
	UNION ALL
	SELECT * from mixer60
	UNION ALL
	SELECT * from mixer30
	UNION ALL
	SELECT * from mixer7 ) SELECT
	COUNT(DISTINCT wallet) as active_wallets,
	dkey, cat from mix_fin WHERE dkey >= '2022-03-01' GROUP BY dkey,cat ORDER BY dkey ASC



=======================================================================================
=======================================================================================
QUERY_NO: 177
QUERY_ID: 94386bf0-5d71-42f7-9453-20d134f5e0c3
QUERY_TITLE: [NEAR] Defining a Citizen

QUERY_STRING:

with txn_types as (
	SELECT COUNT(DISTINCT ACTION_ID) as totals,
		MAX(CASE WHEN ACTION_NAME = 'Transfer' THEN 0 ELSE 1 END ) as txn_type,
	TXN_HASH
	from flipside_prod_db.mdao_near.actions_events
	WHERE block_timestamp>=CURRENT_DATE-180
	GROUP BY txn_hash ), user_types as (
	SELECT
	
	TX_SIGNER,
	  MAX(totals) as max_actions, MAX(txn_type) as txn_type,
	  date_trunc('day', block_timestamp) as ddate
	 from flipside_prod_db.mdao_near.transactions t
	 LEFT JOIN txn_types tt ON t.txn_hash = tt.txn_hash
	WHERE
		block_timestamp>=CURRENT_DATE-180
	GROUP BY ddate,tx_signer ), user_types_fin as (
	SELECT
	
	TX_SIGNER ,
		CASE WHEN max_actions>=2 OR txn_type!=0 THEN 'Sophisticated User' ELSE 'Casual User' END as cat2,
		MAX(DATEADD('day', 90, date_trunc('day', ddate))) as ddate_90,
		MAX(DATEADD('day', 60, date_trunc('day', ddate))) as ddate_60,
		MAX(DATEADD('day', 30, date_trunc('day', ddate))) as ddate_30,
		MAX(DATEADD('day', 7, date_trunc('day', ddate))) as ddate_7,
		ddate
	from user_types
	GROUP BY TX_SIGNER, cat2, ddate ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 360)) ), mixer as (
	 SELECT
		d.dkey,
		ut.TX_SIGNER,
	  ut.ddate as user_txn_date,
	
	ut.ddate_60 as user_max_date,
		cat2 as user_type
	from dates d
	--CROSS JOIN base_wallets b
	 CROSS JOIN user_types_fin ut
	), refine as (
	SELECT
	
	tx_signer,
	  COUNT(DISTINCT date_trunc('week', txn_date)) as txn_weeks_prior,
		dkey
	from mixer
	WHERE  UT_MDATE>=dkey AND dkey>=txn_date AND user_type='Sophisticated User'
	group by dkey,tx_signer ) SELECT
	COUNT(DISTINCT tx_signer) as citizens,
	dkey from refine WHERE 
	txn_weeks_prior >= 3
		AND dkey>='2022-03-01' GROUP by dkey ORDER BY dkey ASC



=======================================================================================
=======================================================================================
QUERY_NO: 178
QUERY_ID: 03e39c44-c333-4029-89a9-30ba92c84750
QUERY_TITLE: [NEAR][T2] Gov Current Base Stats

QUERY_STRING:

with latest as (
	SELECT
	
	a.block_timestamp as dtime,
		method_name,
		coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) as line,
		TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance,
		
		tx_signer,
		tx_receiver,
		rank() OVER (PARTITION by tx_receiver ORDER BY dtime DESC) as rank
	FROM flipside_prod_db.mdao_near.actions_events_function_call a
	JOIN flipside_prod_db.mdao_near.transactions t ON a.txn_hash = t.txn_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
		AND coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) LIKE ('Contract total staked%')
	qualify rank=1 ), refine as (
	SELECT * from latest
	WHERE balance>186284 --current min. stake requirement? https://near-staking.com/ ) SELECT
	 COUNT(DISTINCT tx_receiver) as validators,
	sum(balance) as near_staked from refine



=======================================================================================
=======================================================================================
QUERY_NO: 179
QUERY_ID: 3b7125b7-7604-41bf-9ff1-328cb6a5521f
QUERY_TITLE: [NEAR][2023] Inactive Stakers and Duration Stats

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  datediff('day', min_dtime, coalesce(max_dtime, CURRENT_DATE)) as tstake
	  , staker
	  , min_dtime
	  , CASE WHEN cur_stake<=0.001 THEN 'inactive' ELSE 'active' END as CAT
	from stakers ) SELECT
	 COUNT(DISTINCT staker) as stakers
	, CASE  WHEN tstake<7 THEN 'Less than a week'
	
	
	  WHEN tstake<30 THEN 'Less than a month'
	
	
	  WHEN tstake>=31 AND tstake<60 THEN '1 Month+'
	
	
	  WHEN tstake>=60 AND tstake<365 THEN 'Multiple months'
	
	
	  ELSE 'Year or more' END as category from refine WHERE CAT = 'inactive' GROUP BY category



=======================================================================================
=======================================================================================
QUERY_NO: 180
QUERY_ID: 2a80e91f-284e-45bd-9107-95fec8ebfafa
QUERY_TITLE: Majority Governors

QUERY_STRING:

with latest as (
	SELECT
	
	a.block_timestamp as dtime,
		method_name,
		coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) as line,
		TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance,
		
		tx_signer,
		tx_receiver,
		rank() OVER (PARTITION by tx_receiver ORDER BY dtime DESC) as rank
	FROM flipside_prod_db.mdao_near.actions_events_function_call a
	JOIN flipside_prod_db.mdao_near.transactions t ON a.txn_hash = t.txn_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
		AND coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) LIKE ('Contract total staked%')
	qualify rank=1 ), refine as (
	SELECT
	
	balance,
		tx_receiver as validator,
		SUM(balance) OVER() as total_balance,
		balance as stake,
		ROUND( (stake/total_balance)*100, 2) as total_stake_perc,
		rank() OVER (ORDER BY stake DESC) as validator_rank,
		SUM(stake) OVER (ORDER BY stake DESC) as cum_balance,
		ROUND( (cum_balance/total_balance)*100, 2) as cum_bal_perc
	from latest
	WHERE balance>186284 --current min. stake requirement? https://near-staking.com/ ),
	 nako as (
	SELECT MIN(validator_rank) as rank_limit
	from refine
	WHERE cum_bal_perc>=33 )
	 SELECT
	 validator,
	stake,
	cum_bal_perc as cumulative_stake,
	total_stake_perc,
	validator_rank,
	CASE WHEN validator_rank <= rank_limit THEN 'majority' ELSE 'minority' END as cat from refine LEFT JOIN nako on 1=1 qualify cat='majority' ORDER BY balance DESC



=======================================================================================
=======================================================================================
QUERY_NO: 181
QUERY_ID: 73cd1ef8-2f9a-4817-a3ef-4d756085d8b4
QUERY_TITLE: [Nouns] Proposals Over Time

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		fb2.block_timestamp as end_date
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), base_mints as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 360)) ), combo as (
	SELECT
		d.ddate,
		lag(nouns_existing,1) IGNORE NULLS OVER( ORDER BY d.ddate ASC) as pnouns,
		coalesce(nouns_existing, pnouns) as nouns_existing
	from dates d
	LEFT JOIN mints m ON d.ddate = m.ddate ) SELECT
	 m.ddate as prop_creation,
	start_date, end_date,
	prop_id,
	 nouns_existing from merge m LEFT JOIN combo c ON m.end_date::date = c.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 182
QUERY_ID: d45425ab-f733-4812-8faf-a4a0b14f79a7
QUERY_TITLE: CQ - Query 2: Daily number of NFT (erc721) holders for a given collection copy

QUERY_STRING:

-- forked from sam / CQ - Query 2: Daily number of NFT (erc721) holders for a given collection @ https://flipsidecrypto.xyz/sam/q/IvW0LreAs8cZ/cq---query-2-daily-number-of-nft-erc721-holders-for-a-given-collection -- we'll be using the Azuki Elementals collection (0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e) -- and a timeframe from June 2023 with min_date as ( select  min(block_timestamp)::date as min_timestamp from ethereum.nft.ez_nft_transfers where nft_address = '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e' ), dates as ( -- my favourite table ; gets a list of dates  select  date_day  from ethereum.core.dim_dates where date_day between (select min_timestamp from min_date) and current_date() ), elementals_total_holders as ( -- all possible addresses that have held elementals select distinct nft_to_address from ethereum.nft.ez_nft_transfers where nft_address = '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e' -- azuki elementals ), dates_x_elementals_total_holders as (-- cross join between dates and holders so that for every date, there is an entry for each user select  date_day as full_dates, nft_to_address as full_user_addresses from dates  cross join elementals_total_holders ), end_of_day_balance as (  select  date_trunc('day', block_timestamp) as day, user_address, balance  from ethereum.core.fact_token_balances where user_address in (select nft_to_address from elementals_total_holders) and contract_address = '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e' qualify row_number() over (partition by day, user_address order by block_timestamp desc) = 1 -- ensures we take the latest change in balance daily  ), total_list_x_balance as ( -- left join our full list of dates & addresses with daily balance and use lag to fill in the gaps select full_dates, full_user_addresses, balance , coalesce(
	balance,
	 lag(balance) ignore nulls over (partition by full_user_addresses order by full_dates asc)  ) as daily_balance  from dates_x_elementals_total_holders d  left join end_of_day_balance b  on full_dates = b.day and full_user_addresses = user_address ) select  full_dates,  count(1) -- counts the number of addresses with a nonzero balance daily from total_list_x_balance  where full_dates >= '2023-06-01' and daily_balance > 0  group by all



=======================================================================================
=======================================================================================
QUERY_NO: 183
QUERY_ID: 89ece117-adf3-42eb-aa20-631e7bf980cd
QUERY_TITLE: [ENS][Q6] ENS premiums TXNS

QUERY_STRING:

with samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('day', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND DATE(event_inputs:"expires") >= '2022-01-01'
	 ), daily_price as (
	SELECT AVG(price) as price, date_trunc('day', hour) as days
		from ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 180
	GROUP BY days ) /* select * from ethereum.events_emitted WHERE tx_id = '0xd34be7e4ad416aa97d73708bbd780081c26da4c9bc78867c8a3087eef29e62a4' */ SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from ethereum.events_emitted
	WHERE
		tx_id = '0xd34be7e4ad416aa97d73708bbd780081c26da4c9bc78867c8a3087eef29e62a4'
		AND tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
	GROUP BY tx_id, block_timestamp



=======================================================================================
=======================================================================================
QUERY_NO: 184
QUERY_ID: 6ef615b8-365e-4232-bfff-c57935b8c2f0
QUERY_TITLE: artistic-white copy copy copy

QUERY_STRING:

-- forked from marqu / artistic-white copy copy @ https://flipsidecrypto.xyz/marqu/q/2WgF1KPt3904/artistic-white-copy-copy -- forked from flyingfish / artistic-white copy @ https://flipsidecrypto.xyz/flyingfish/q/fkjJjYeX8RVE/artistic-white-copy with  market_names as (
	select
	
	  array_agg(f_name.value) within group (order by f_name.key) as mkt_binary_array
	
	from solana.core.fact_decoded_instructions
	inner join lateral flatten (input => decoded_instruction :args :name) as f_name
	where 1 = 1
	  and tx_id = '2NDqmjV1fSkBpvbSWrhr8cV83fiXR7AJd2dH8gHr4jY6mZmbnEebkTeZHJSsAr4QyYGkgQp8c4MnynSiENgiR8H4'
	  and block_id = 284961436
	  and event_type = 'initializePerpMarket' ) select * from market_names /* select inner_instruction: * from solana.core.fact_events where 1 = 1 and tx_id = '2NDqmjV1fSkBpvbSWrhr8cV83fiXR7AJd2dH8gHr4jY6mZmbnEebkTeZHJSsAr4QyYGkgQp8c4MnynSiENgiR8H4' and block_id = 284961436 and program_id = 'SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf' --and event_type = 'initializePerpMarket'  */



=======================================================================================
=======================================================================================
QUERY_NO: 185
QUERY_ID: 6925502c-5a84-4a9f-94e7-13d009a60f8b
QUERY_TITLE: count of token holders daily - erc20 / erc721 

QUERY_STRING:

with min_date_nft as (
	select
	 min(block_timestamp)::date as min_timestamp
	from ethereum.core.ez_balance_deltas
	where contract_address = lower('0x6B3595068778DD592e39A122f4f5a5cF09C90fE2') -- sushi token  ), list_of_dates as (
	select
	 distinct block_timestamp::date as full_dates
	from ethereum.core.ez_balance_deltas
	where full_dates >= (select min_timestamp from min_date_nft )
	order by full_dates asc  ),  list_address as (
	select
	 distinct user_address as user_addresses
	 from ethereum.core.ez_balance_deltas
	where contract_address = lower('0x6B3595068778DD592e39A122f4f5a5cF09C90fE2')
	), dates_x_address as (
	select*
	 from list_of_dates
	 cross join list_address ), delta_raw as (
	select
	 block_timestamp::date as day,
	 user_address,
	 prev_bal_unadj,
	current_bal_unadj
	 from ethereum.core.ez_balance_deltas
	where contract_address = lower('0x6B3595068778DD592e39A122f4f5a5cF09C90fE2')
	qualify row_number() over (partition by user_address, day order by block_timestamp desc) = 1 ),
	 list_of_holders_balance as ( select
	 d.full_dates,
	d.user_addresses,
	prev_bal_unadj,
	current_bal_unadj,
	case
	
	when prev_bal_unadj is null and current_bal_unadj is null
	
		then coalesce (lag(current_bal_unadj) ignore nulls over (partition by user_addresses order by d.full_dates asc) , 0)
		when current_bal_unadj is not null then current_bal_unadj
			end as latest_balance
	 from dates_x_address d
	 left join delta_raw r on d.full_dates = r.day and d.user_addresses = r.user_address
	)  select  full_dates,
	 count(user_addresses) from list_of_holders_balance
	 where latest_balance > 0  group by full_dates



=======================================================================================
=======================================================================================
QUERY_NO: 186
QUERY_ID: 841679fc-2a03-403d-8c66-6e72d9ac470a
QUERY_TITLE: SEI transfers Modded

QUERY_STRING:

-- forked from SEI transfers in-out @ https://flipsidecrypto.xyz/edit/queries/66e0e60c-5cbb-4a9c-8bd0-e027cf7063f3  -- Hard_coded Tokens Based on SEI document with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , -- airdrop_claimers as ( --
	SELECT --
	  tx_id --
	  , block_timestamp --
	  , receiver as claimer --
	  , amount/pow(10,6)  as volume --
	FROM sei.core.fact_transfers --
	WHERE --
	  sender IN ( --
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044', --
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2' --
	  ) --
	  and tx_succeeded = 'true' --
	  and currency = 'usei' --
	  AND block_timestamp >= '2023-08-15' -- ) -- , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left outer join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	from axelar.defi.ez_bridge_satellite a left outer join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	from axelar.defi.ez_bridge_squid a left outer join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=90') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=90') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i
	where symbol = 'SEI' ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	 )
	  and TX_SUCCEEDED = 'true'
	  and transfer_type in ('IBC_TRANSFER_OUT', 'IBC_TRANSFER_IN') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	 (amount / pow(10, 6)) * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  case when symbol_address = token_address then (amount / pow(10, 6)) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers ) ,  stats as  (
	 select
	
	trunc(block_timestamp,'day') as ddate,
	
	CASE WHEN cat='in' THEN '🟩' ELSE '🟥' END as status,
	
	bridge,
	  count(DISTINCT(user)) as users,
	  count(DISTINCT(tx_id)) as count_tx, sum(volume) as usd_volume, avg(volume) as avg_volume,
	  max(volume) as max_volume, median(volume) as median_volume , min(volume) as min_volume
	from all_bridges
	group by 1,2,3 ) SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 187
QUERY_ID: e0c7a6c9-3053-4849-bfad-a3a020b5fa72
QUERY_TITLE: claimers post-airdrop   HOURS

QUERY_STRING:

-- forked from airdrop claims time @ https://flipsidecrypto.xyz/edit/queries/ff0bc89c-3b93-4ba8-9205-5b1eabee8510 with claimers as (
	SELECT
	
	min(block_timestamp) as min_dtime
	  , max(block_timestamp) as max_dtime
	  , SUM(events[0]:data:amount/1e8) as amount
	  , COUNT(version) as txns
	  , sender as wallet
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	 GROUP BY sender ) , txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , MAX(max_dtime) as ctime
	  , COUNT(DISTINCT version) as txns
	  , sender as user
	from aptos.core.fact_transactions t
	LEFT JOIN claimers c on c.wallet=t.sender
	WHERE 1=1
	  AND max_dtime<block_timestamp
	  AND SENDER IN (SELECT DISTINCT wallet from claimers)
	GROUP BY USER ) , refine as (
	SELECT *,
	  DATEDIFF('hour', ctime, last_time) as time_delta
	  , CASE
	
	  WHEN time_delta=0 THEN 'Less than a Hour'
	
	 WHEN time_delta=1 THEN 'Roughly an Hour'
	
	 WHEN time_delta>1 AND time_delta<24 THEN 'Multiple Hours'
	
	 ELSE 'Day(s) apart' END as cat
	  from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 188
QUERY_ID: 7eb04748-b4a9-48f6-b859-88e80edaf6d9
QUERY_TITLE: [Nouns] Top 5 Highest Engagement Proposals

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime,
		substr(event_inputs:description, 0, 70) as short_desc
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		coalesce(fb2.block_timestamp, DATEADD(day,3,start_date)) as end_date, --Handling shit that ENDS IN FUTURE ie no block data yet!
		short_desc
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), votes as (
	SELECT
	
	event_inputs:proposalId as prop_id,
	  event_inputs:votes as votes,
		event_inputs:voter as voter,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
	from ethereum.core.fact_event_logs f
	CROSS JOIN merge m
	 WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
		AND m.prop_id = event_inputs:proposalId
		AND m.end_date> f.block_timestamp
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	--GROUP BY prop_id, cat ORDER BY prop_id ASC ),
	 vnp as (
	SELECT
	
	v.prop_id,
		COUNT(DISTINCT voter) as voters,
		SUM(votes) as total_votes,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc
	from votes v
	LEFT JOIN merge m ON  m.prop_id = v.prop_id
	group by v.prop_id ), base_mints as (
	SELECT
	
	block_timestamp as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), refine as (
	SELECT
		prop_id,voters,
		total_votes as total_vote_turnout,
		nouns_existing,
		start_date,
	  end_date,
		datediff(second, end_date, m.ddate) as diff,
		short_desc,
		row_number() OVER (PARTITION BY prop_id ORDER BY DIFF DESC) as rank
	from vnp v
	 CROSS JOIN mints m
	WHERE 1=1
	AND m.ddate<v.end_date AND m.ddate>v.start_date
	qualify rank=1 ) SELECT
	 TO_VARCHAR(prop_id) as prop_id,
	total_vote_turnout,
	nouns_existing,
	round((total_vote_turnout/nouns_existing)*100, 2) as proposal_engagement,
	start_date,
	end_date,
	short_desc from refine ORDER BY proposal_engagement DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 189
QUERY_ID: b064fa49-9777-4b0c-88a8-fd8ebaecf9d6
QUERY_TITLE: 2023-12-09 01:27 AM

QUERY_STRING:

SELECT * from aptos.core.fact_transactions WHERE version=354635461



=======================================================================================
=======================================================================================
QUERY_NO: 190
QUERY_ID: ea02effe-e84c-4a71-b3b4-6e4cc9fbf09d
QUERY_TITLE: REPORT # 1 - Cluster Detail 

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM URL -- https://platform.arkhamintelligence.com/visualizer/entity/0x95DCf8372dCEB2a43478D590872c9d27cF43DD84?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x95dcf8372dceb2a43478d590872c9d27cf43dd84')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 191
QUERY_ID: fedb5b5e-d4c0-4302-82b0-5e5d334849eb
QUERY_TITLE: Axelar Test

QUERY_STRING:

with price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	and user = 'sei15ksmnwvyy2s9rcrgl36hg5uefqegsx7ruwt6u5'
	--and receiver = 'sei1z2sv8s9r8prn0zdgel3yykk7kw3nw77mar3kmc'
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left  join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and user='sei15ksmnwvyy2s9rcrgl36hg5uefqegsx7ruwt6u5'
	
	) SELECT * from total_bridging



=======================================================================================
=======================================================================================
QUERY_NO: 192
QUERY_ID: 7a8b8b43-86a7-41f5-a0d4-5142d9a6d952
QUERY_TITLE: [TC] Withdraws Base

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ) SELECT
	 * from ethereum.core.fact_event_logs f WHERE 1=1
		AND tx_hash = '0x88d6dbac88a235b4ab8a5c6da226edf0e5a499224cee09e846ade79efec97e80' 
	-- AND block_timestamp between CURRENT_DATE -366 AND CURRENT_DATE -1
	-- AND ORIGIN_FUNCTION_SIGNATURE IN (	'0x13d98d13' )  --'0xb438689f'
	-- AND event_name IN ('Deposit', 'Withdrawal')



=======================================================================================
=======================================================================================
QUERY_NO: 193
QUERY_ID: a25f0653-f2d8-4722-b77e-cef129a6d9b3
QUERY_TITLE: Most Active Apps (From May '23)

QUERY_STRING:

with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , coalesce(l1.project_name, l2.project_name, 'other') as cat
	FROM near.core.fact_transactions b
	 LEFT JOIN near.core.dim_address_labels l1 on b.tx_signer = l1.address
	LEFT JOIN near.core.dim_address_labels l2 on b.tx_receiver = l2.address
	WHERE tx_status='Success'
	  AND block_timestamp >='2023-05-01'
	 GROUP BY cat ) SELECT * from base ORDER BY t_users DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 194
QUERY_ID: 5ceb898d-9dfd-4318-8d4e-b057a89fad96
QUERY_TITLE: [ALGO][16] Smilecoin Distribution

QUERY_STRING:

with base as (
	  SELECT
	address, amount/1e6 as abs_amount,
	
			CASE
	WHEN abs_amount<1
			THEN '<1'
	
					WHEN abs_amount>=1
			AND abs_amount<10
			THEN '1-10'
	
						WHEN abs_amount>=10
		AND abs_amount<100
			THEN '10-100'
	
						WHEN abs_amount>=100
		AND abs_amount<1000
		THEN '100-1K'
	
					WHEN abs_amount>=1000
		AND abs_amount<10000
		THEN '1K-10k'
	
						WHEN abs_amount>=10000
		AND abs_amount<100000
		THEN '10K-100k'
	
					WHEN abs_amount>=100000
	AND abs_amount<1000000
		THEN '100K-1M'
	
						WHEN abs_amount>=1000000
	AND abs_amount<10000000
	THEN '1M-10M'
	
					WHEN abs_amount>=10000000
	AND abs_amount<100000000
	THEN '10M-100M'
	
					WHEN abs_amount>=100000000
	AND abs_amount<1000000000
	THEN '100M-1B'
	
						WHEN abs_amount>=1000000000
	
						THEN '>=1B'
	
						END as category
	  from algorand.account_asset
	  WHERE
	 
	asset_id = '300208676'
	 
	AND asset_closed = FALSE
	
	
	AND frozen = FALSE
	 
	AND amount!=0 ) SELECT
	COUNT(*) as total_wallets,
			SUM(abs_amount) as total_tokens,
		category from base GROUP BY category ORDER BY total_wallets



=======================================================================================
=======================================================================================
QUERY_NO: 195
QUERY_ID: 31fb4368-718c-4628-beeb-717bbff13aa0
QUERY_TITLE: [FF] TOP REKTs by Liquidator Profits ( Volumes in USD ) 💸💸

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns,
		liquidator,
	tx_group_id
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	htime,
		liquidator,
		income as profits,
		perc_returns,
		tx_group_id from refine ORDER BY profits DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 196
QUERY_ID: 90466b7a-a99b-4ef4-a501-914751529194
QUERY_TITLE: NEAR - Chain Stats Wallets/Users Age

QUERY_STRING:

with base_wallets as (
	SELECT
	
	TX_SIGNER as wallet,
		MIN(date_trunc('day', block_timestamp)) as min_date
	from near.core.fact_transactions
	WHERE 1=1
		 -- Extra Time to store up wallets
	GROUP BY wallet ), new_txns as (
	SELECT
	
	COUNT(TX_HASH) as totals,
		TX_SIGNER as wallet,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN ddate>min_date THEN 'old' ELSE 'new' END as cat
	from near.core.fact_transactions t
	LEFT JOIN base_wallets b ON t.TX_SIGNER = b.wallet
	WHERE
		block_timestamp >= '2023-05-01'
	GROUP BY ddate, TX_SIGNER, cat ) SELECT
	COUNT(DISTINCT wallet) as wallets,
	ddate,
	cat from new_txns GROUP BY ddate,cat ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 197
QUERY_ID: 4ade6fb0-b61c-428f-91ca-f6fb8cbfa6cd
QUERY_TITLE: NEAR - New Wallets Added

QUERY_STRING:

-- forked from NEAR - Chain Stats Wallets/Users Age @ https://flipsidecrypto.xyz/edit/queries/90466b7a-a99b-4ef4-a501-914751529194 with base_wallets as (
	SELECT
	
	TX_SIGNER as wallet
		, MIN(date_trunc('day', block_timestamp)) as min_date
	from near.core.fact_transactions
	WHERE 1=1
	  and TX_SUCCEEDED = 'true'
	GROUP BY wallet
	UNION ALL
	 SELECT
	
	TX_RECEIVER as wallet
		, MIN(date_trunc('day', block_timestamp)) as min_date
	from near.core.fact_transactions
	WHERE 1=1
	  and TX_SUCCEEDED = 'true'
	GROUP BY wallet ), wallet_age as (
	SELECT
	
	wallet
	  , min(min_date) as min_date
	from base_wallets
	GROUP BY wallet ) SELECT
	COUNT(DISTINCT wallet) as wallets
	, min_date as  ddate from wallet_age WHERE 1=1
	and ddate >= '2023-05-01' GROUP BY ddate ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 198
QUERY_ID: f7dd6e84-327f-498a-ba16-9328528c0c6c
QUERY_TITLE: Most Active Apps (From Jan '24)

QUERY_STRING:

-- forked from Most Active Apps (From May '23) @ https://flipsidecrypto.xyz/edit/queries/a25f0653-f2d8-4722-b77e-cef129a6d9b3 with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , coalesce(l1.project_name, l2.project_name, 'other') as cat
	FROM near.core.fact_transactions b
	 LEFT JOIN near.core.dim_address_labels l1 on b.tx_signer = l1.address
	LEFT JOIN near.core.dim_address_labels l2 on b.tx_receiver = l2.address
	WHERE tx_status='Success'
	  AND block_timestamp >='2024-01-01'
	
	
	GROUP BY cat ) SELECT * from base ORDER BY t_users DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 199
QUERY_ID: 7b8d269d-4fcf-402a-81ac-9fe907309243
QUERY_TITLE: [wormhole] Existing Shuttle Users

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp < '2021-10-20' ), terra_shuttle_in as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp < '2021-10-20'
			 ), total_shuttle_users_pre as (
	SELECT address, shuttle_date from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_users_pre
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), min_wh_user as (
	  SELECT	msg_value:sender as sender,
	
	
	 
	MIN(date_trunc('day', block_timestamp)) as wh_date
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND msg_value:sender IN ( SELECT address as sender from total_shuttle_users)
	 
	AND block_timestamp >= '2021-10-20' --Official
	
	GROUP by sender ), common_user as ( SELECT
	sender, wh_date,
		DATEDIFF('day', '2021-10-20', wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff,
			'test' as dummy from min_wh_user ), pre_output as ( SELECT
	COUNT(DISTINCT SENDER) as total_wh_adopters,
		AVG(w_diff) as avg_adoption_weeks from common_user ) SELECT
	total_wh_adopters,
		avg_adoption_weeks,
		shuttle_users from pre_output JOIN shuttle_stats on 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 200
QUERY_ID: 638dd28b-a0da-4f7f-a407-2f85c1b5d814
QUERY_TITLE: Report #3 - Cluster Detail

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM : https://platform.arkhamintelligence.com/visualizer/entity/0xF6adfFF0233c01d76E9B09007b6BC1a412977B81?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xf6adfff0233c01d76e9b09007b6bc1a412977b81')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 201
QUERY_ID: 8165a3ec-bb22-4dae-8e76-0cb0baf7f105
QUERY_TITLE: [LilNouns] Gov Participation and ETH balances

QUERY_STRING:

with all_voters as (
	SELECT
	
	DISTINCT ORIGIN_FROM_ADDRESS as voter,
		'1' as tag
	from ethereum.core.fact_event_logs
	 WHERE 1=1
		AND contract_address = '0x5d2c31ce16924c2a71d317e5bbfd5ce387854039'
		AND event_name = 'VoteCast' ), base_holders as (
	SELECT
	
	*,
		dense_rank() over (PARTITION by TOKENID ORDER BY BLOCK_TIMESTAMP DESC, EVENT_INDEX DESC) as row_num --EVENT-INDEX for the hops during mint...
	from ethereum.core.ez_nft_transfers
	WHERE 1=1
		AND NFT_ADDRESS = lower('0x4b10701Bfd7BFEdc47d50562b76b436fbB5BdB3B')
	qualify row_num=1 ), all_holders as (
	SELECT
	
	DISTINCT NFT_TO_ADDRESS as holder,
	CASE	WHEN tag=1 THEN 'participated at least once' ELSE 'Never participated' END as cat
	from base_holders
	LEFT JOIN all_voters on NFT_TO_ADDRESS = voter ), counts as (
	SELECT
	COUNT(*) as users,
	cat
	from all_holders
	group by cat
	), eth_balances_base as (
	SELECT
	
	balance,
	
	balance_date,
		user_address as holder,
		AVG(balance) OVER (PARTITION by holder ORDER BY balance_date ASC rows between 6 preceding and current row) as rolling_balance_7d
	from flipside_prod_db.ethereum.erc20_balances
	WHERE 1=1
		AND balance_date>=CURRENT_DATE-60
		AND contract_address = 'ETH'
		AND user_address IN ( SELECT holder as user_address from all_holders) ) SELECT
	--AVG(rolling_balance_7d) as balance,
		MAX(balance) as balance,
		bal.holder,
		cat from all_holders a LEFT JOIN eth_balances_base bal  ON a.holder=bal.holder WHERE 1=1
	AND bal.holder NOT IN ('0x0bc3807ec262cb779b38d65b38158acc3bfede10', '0x0000000000000000000000000000000000000000') --Ignoring the DAO, etc GROUP BY bal.holder, cat



=======================================================================================
=======================================================================================
QUERY_NO: 202
QUERY_ID: 81306479-896e-473d-b7f0-fc20bfb02a4a
QUERY_TITLE: [ALGO][Q19] Period 2 Charts

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address
	WHERE
		balance>=fcommit ) SELECT
	COUNT(DISTINCT sender) as total_wallets,
			SUM(fcommit) as algo_committed,
			SUM(total_wallets) OVER (ORDER BY ddate ASC) as wallets_committed,
			SUM(algo_committed) OVER (ORDER BY ddate ASC) as algo_commits,
		TO_DATE(ddate) as ddate from pre_final GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 203
QUERY_ID: de1276c9-67c8-4166-9020-f304f65c1617
QUERY_TITLE: [Nouns] Votes Sample

QUERY_STRING:

SELECT
	 SUM(TO_NUMBER(event_inputs:votes)) as total_vote_turnout,
	event_inputs:proposalId as prop_id from ethereum.core.fact_event_logs WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
	AND event_inputs:votes!=0



=======================================================================================
=======================================================================================
QUERY_NO: 204
QUERY_ID: 820a704b-f614-40f2-bbd6-2e70f66fd488
QUERY_TITLE: [ENS][Q4] Price & Claims

QUERY_STRING:

with claims_t as ( SELECT COUNT(distinct origin_address) as "claims", contract_address as token_address, date_trunc('hour', block_timestamp)  as hours FROM ethereum.udm_events  WHERE
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name='Claim'
	AND block_timestamp >= CURRENT_DATE - 60 GROUP BY hours,token_address ), ens_prices as (
	SELECT hour as hours, token_address, price
	  FROM ethereum.token_prices_hourly
	
	WHERE
	 
	token_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND hour >= CURRENT_DATE - 60
		 ) SELECT "claims", claims_t.hours, price from claims_t INNER JOIN ens_prices  ON ens_prices.token_address=claims_t.token_address AND ens_prices.hours=claims_t.hours



=======================================================================================
=======================================================================================
QUERY_NO: 205
QUERY_ID: a693d7f4-4da6-45de-96ef-2e37cc1e45ac
QUERY_TITLE: donut-issue base query

QUERY_STRING:

select * from external.tokenlists.ez_verified_tokens where symbol is not null --LIMIT 20000



=======================================================================================
=======================================================================================
QUERY_NO: 206
QUERY_ID: b5f1a806-1264-46a5-be65-bd112d6aee94
QUERY_TITLE: NFTs Overview

QUERY_STRING:

SELECT
	 COUNT(DISTINCT EZ_NFT_SALES_ID) as sales
	, SUM(total_price) as volume
	, SUM(total_price_usd) as volume_usd
	, block_timestamp::date as ddate from aptos.nft.ez_nft_sales WHERE 1=1 GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 207
QUERY_ID: 72238308-d437-410b-be21-7d8fd43c70f4
QUERY_TITLE: artistic-white copy copy copy

QUERY_STRING:

-- forked from sam / artistic-white copy copy @ https://flipsidecrypto.xyz/sam/q/S_l3MCFb1ulx/artistic-white-copy-copy -- forked from flyingfish / artistic-white copy @ https://flipsidecrypto.xyz/flyingfish/q/fkjJjYeX8RVE/artistic-white-copy with raw as ( select
	parse_json(decoded_instruction:args:name) as market_name from solana.core.fact_decoded_instructions where 1 = 1 and tx_id = '2NDqmjV1fSkBpvbSWrhr8cV83fiXR7AJd2dH8gHr4jY6mZmbnEebkTeZHJSsAr4QyYGkgQp8c4MnynSiENgiR8H4' and block_id = 284961436 and event_type = 'initializePerpMarket' ), extract_values AS (
	  SELECT 0 AS idx, GET(market_name, '0')::INT AS value
	  FROM raw
	
	
	 UNION ALL
	
	
	 SELECT idx + 1, GET(market_name, (idx + 1)::STRING)::INT AS value
	  FROM extract_values, raw
	  WHERE idx < 31 ), hex_values AS (
	  SELECT idx::int as idx_int, value, utils.udf_int_to_hex(value) as hex, case when len(hex) =4 then substr(hex, 3, 2) else '0' || substr(hex, 3, 1)  end as hex_final
	
	FROM extract_values ) select  * --listagg(hex_final) within group (order by idx_int) as list, --utils.udf_hex_to_base58(list::string) from hex_values --order by idx_int asc  ;  --A86100000100000000A0860100400D03000080C6A47E8D030000000000000000



=======================================================================================
=======================================================================================
QUERY_NO: 208
QUERY_ID: d5e89226-a095-43b7-9cae-ae4f27a08db2
QUERY_TITLE: [algo] Total Liquidity (ALGO)

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						) ), filter as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=5 THEN sender ELSE NULL END) as final_sender,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as asset_id_2,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
	 
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	 
	MAX(CASE WHEN order_num=5 THEN tx_message:txn:xaid ELSE NULL END) as pool_asset_id,
	
	
	CASE WHEN app_call_sender = final_sender THEN 'add' ELSE 'remove' END as cat,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		SUM(CASE WHEN cat='add' THEN algo_amount ELSE algo_amount*(-1) END ) as algo_amount,
	
	
		SUM(CASE WHEN cat='add' THEN asset_amount ELSE asset_amount*(-1) END ) as asset_amount,
	
	
		asset_id_2,
	 
		filter.pool_asset_id  as pool_id, asset_name as pool_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.pool_asset_id = ass.asset_id
	  WHERE
	
		totals = 5
	  GROUP BY pool_name, pool_id, asset_id_2 ORDER BY total_wallets DESC
	  LIMIT 20 ) SELECT
	pool_name, algo_amount,
			total_wallets,
		asset_amount/POW(10, decimals) as asset_amount,
			asset_id_2 as token_id from pre_final LEFT JOIN  algorand.asset ass ON pre_final.asset_id_2 = ass.asset_id WHERE 
	ALGO_AMOUNT IS NOT NULL
	AND DECIMALS IS NOT NULL ORDER BY total_wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 209
QUERY_ID: 4745985b-b9c7-4cec-a166-b3c205075d74
QUERY_TITLE: REPORT #5

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed --ARKHAM : https://platform.arkhamintelligence.com/visualizer/entity/0x5ebDD2907B9529FB9C06e1a7e58357665eC5986c?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, 'OKX' CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x5ebdd2907b9529fb9c06e1a7e58357665ec5986c')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 210
QUERY_ID: aa217236-209f-42b1-a744-a17b4865a6d9
QUERY_TITLE: Copy of [TC] Deposits Base Year

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		concat(token) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ) SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
	s.cat,
		SUM(total_txns) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_txns_cumu from sample_space s  LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat WHERE 1=1
	AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})



=======================================================================================
=======================================================================================
QUERY_NO: 211
QUERY_ID: 05bef0c0-e808-458d-b63a-e53bc19f1bea
QUERY_TITLE: [Wormhole][Q129] Wormhole Monthly Volume (USD)

QUERY_STRING:

with base_txns as (
	  SELECT	msg_value:sender as sender, tx_id,
	
	
		date_trunc('day', block_timestamp) as ddate,
	
	
		msg_value:execute_msg:initiate_transfer:asset:amount/1e6 as amount,
	
	
		replace(msg_value:execute_msg:initiate_transfer:asset:info:native_token:denom,'"','') as currency
	  from terra.msgs
	  WHERE
	 
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	 
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL							-- Ensure of transfer/bridge type
	
	
	AND msg_value:execute_msg:initiate_transfer:asset:info:native_token IS NOT NULL -- ENSURE LUNA/UST ONLY ), luna_daily as (
	SELECT
		date_trunc('day', block_timestamp) as ddate,
			AVG(price_usd) as price_usd
		from terra.oracle_prices
		WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		GROUP by ddate ), final_txns as (
	SELECT
	base_txns.ddate as dates, tx_id, sender,
				CASE
	WHEN currency= 'uluna'	THEN (amount*price_usd)	ELSE amount END as usd_value		
	from base_txns
	LEFT JOIN luna_daily as ld
	ON base_txns.ddate = ld.ddate ), pre_final as (
		SELECT	COUNT(DISTINCT tx_id) as total_txns,
		SUM(usd_value) as usd_totals,
		date_trunc('month', dates) as dates, 
		sender
		
	from final_txns
	GROUP BY dates,sender ) SELECT
	AVG(total_txns) as avg_txns,
			AVG(usd_totals) as avg_usd_totals,
			dates,
		CASE	WHEN usd_totals<1000	THEN 'minnow'
					WHEN usd_totals<10000	THEN 'fish'
					WHEN usd_totals<100000	THEN 'shark'
					WHEN usd_totals<1000000	THEN 'whale'
	
				ELSE 'kingpin' END as category,
			COUNT(DISTINCT sender) as total_wallets from pre_final GROUP BY dates, category



=======================================================================================
=======================================================================================
QUERY_NO: 212
QUERY_ID: 2f1ab586-3ded-49bd-a346-f4d5687b83fa
QUERY_TITLE: [Wormhole][Q128] Fees on Wormhole

QUERY_STRING:

with uluna_txns as (
	SELECT
			tx_id, date_trunc('day', block_timestamp) as ddate,
			fee[0]:amount[0]:amount /1e6 as luna_amount,
	
		case when fee[0]:amount[1]:amount /1e6 is null then 0 else fee[0]:amount[1]:amount /1e6 end as ust_amount
		from terra.transactions
		WHERE
			tx_id IN (
				SELECT tx_id from terra.msgs
			WHERE
				msg_type = 'wasm/MsgExecuteContract'
					AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	)
			AND fee[0]:amount[0]:denom = 'uluna' ), uusd_txns as (
	SELECT
			tx_id, date_trunc('day', block_timestamp) as ddate,
			fee[0]:amount[0]:amount /1e6 as ust_amount,
	
		case when fee[0]:amount[1]:amount /1e6 is null then 0 else fee[0]:amount[1]:amount /1e6 end as luna_amount
		from terra.transactions
		WHERE
			tx_id IN (
				SELECT tx_id from terra.msgs
			WHERE
				msg_type = 'wasm/MsgExecuteContract'
					AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	)
			AND fee[0]:amount[0]:denom = 'uusd'
		 ), combo as (
	SELECT * from uluna_txns
		UNION
	SELECT * from uusd_txns ), luna_prices as (
	SELECT
		date_trunc('day', block_timestamp) as ddate,
			AVG(price_usd) as price_usd
		from terra.oracle_prices
		WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		GROUP by ddate ) SELECT
	combo.ddate as d_date,
		AVG( (luna_amount *t.price_usd) + ust_amount) as avg_txn_fee,
		COUNT(DISTINCT tx_id) as txns
		from combo
			JOIN luna_prices t 
		ON combo.ddate = t.ddate
		GROUP BY d_date



=======================================================================================
=======================================================================================
QUERY_NO: 213
QUERY_ID: 11cef979-8b8a-422c-9484-43d6ada15181
QUERY_TITLE: [NEAR][2023] Block Producers

QUERY_STRING:

SELECT
	COUNT(BLOCK_ID) as totals
	, block_author from near.core.fact_blocks GROUP BY block_author



=======================================================================================
=======================================================================================
QUERY_NO: 214
QUERY_ID: 8aa439f4-6108-4530-a947-045f9129cdb1
QUERY_TITLE: [Nouns] Proposal Voting Outcomes

QUERY_STRING:

with votes as (
	SELECT
	
	TO_NUMBER(event_inputs:proposalId) as prop_id,
		SUM(TO_NUMBER(event_inputs:votes)) as total_vote_turnout,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
		/* MAX(nouns_existing) as nouns_existing,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc */
	from ethereum.core.fact_event_logs f
	WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	GROUP BY prop_id, cat ORDER BY prop_id ASC ) SELECT * from votes



=======================================================================================
=======================================================================================
QUERY_NO: 215
QUERY_ID: 481f4b77-39c8-4f03-b6c0-f0421c8af731
QUERY_TITLE: [NEAR][T3] Ref Finance Top Swaps - Swap From

QUERY_STRING:

--THANKS TO PINE/KIDA! WITH near_token_address AS ( select 'wrap.near' as contract_address, 'NEAR' as symbol, 24 as decimal union select 'meta-pool.near' as contract_address, 'stNEAR' as symbol, 24 as decimal union select 'usn' as contract_address, 'USN' as symbol, 18 as decimal union select 'aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near' as contract_address, 'Aurora' as symbol, 18 as decimal union select 'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near' as contract_address, 'USDT' as symbol, 6 as decimal union -- stable select 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near' as contract_address, 'USDC' as symbol, 6 as decimal union -- stable select '6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near' as contract_address, 'DAI' as symbol, 18 as decimal union -- stable select '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near' as contract_address, 'WBTC' as symbol, 8 as decimal union  select 'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near' as contract_address, 'WETH' as symbol, 18 as decimal union select 'aurora' as contract_address, 'WETH' as symbol, 18 as decimal union select 'token.paras.near' as contract_address, 'Paras' as symbol, 18 as decimal union select 'token.v2.ref-finance.near' as contract_address, 'REF' as symbol, 18 as decimal union select 'linear-protocol.near' as contract_address, 'LINEAR' as symbol, 24 as decimal union select 'token.burrow.near' as contract_address, 'BRRR' as symbol, 18 as decimal union select 'berryclub.ek.near' as contract_address, 'BANANA' as symbol, 18 as decimal union select 'farm.berryclub.ek.near' as contract_address, 'CUCUMBER' as symbol, 18 as decimal union select 'token.skyward.near' as contract_address, 'Skyward' as symbol, 18 as decimal union select 'token.shrm.near' as contract_address, 'SHRM' as symbol, 18 as decimal union select 'token.cheddar.near' as contract_address, 'Cheddar' as symbol, 24 as decimal union select 'v3.oin_finance.near' as contract_address, 'nUSDO' as symbol, 8 as decimal union -- stable select 'cusd.token.a11bd.near' as contract_address, 'cUSD' as symbol, 24 as decimal union -- stable select 'marmaj.tkn.near' as contract_address, 'marma' as symbol, 18 as decimal union  select 'hak.tkn.near' as contract_address, 'HAK' as symbol, 18 as decimal union  select '9aeb50f542050172359a0e1a25a9933bc8c01259.factory.bridge.near' as contract_address, 'OIN' as symbol, 8 as decimal union select '514910771af9ca656af840dff83e8264ecf986ca.factory.bridge.near' as contract_address, 'LINK' as symbol, 18 as decimal union select 'd9c2d319cd7e6177336b0a9c93c21cb48d84fb54.factory.bridge.near' as contract_address, 'HAPI' as symbol, 18 as decimal union select '52a047ee205701895ee06a375492490ec9c597ce.factory.bridge.near' as contract_address, 'PULSE' as symbol, 18 as decimal union select 'de30da39c46104798bb5aa3fe8b9e0e1f348163f.factory.bridge.near' as contract_address, 'Gitcoin' as symbol, 18 as decimal union select 'f5cfbc74057c610c8ef151a439252680ac68c6dc.factory.bridge.near' as contract_address, 'Octopus Network' as symbol, 18 as decimal union select 'pixeltoken.near' as contract_address, 'PXT' as symbol, 6 as decimal union  select 'meta-token.near' as contract_address, 'META' as symbol, 18 as decimal union select '3ea8ea4237344c9931214796d9417af1a1180770.factory.bridge.near' as contract_address, 'FLX' as symbol, 18 as decimal ),
	 base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
	
		regexp_substr(logs[0], 'Swapped (\\d+) ([\\w\\.-]+) for', 1, 1, 'e', 1) as swap_from_amt,
		n.decimal as swap_from_dec,
		regexp_substr(logs[0], 'Swapped (\\d+) ([\\w\\.-]+) for', 1, 1, 'e', 2) as swap_from_text,
		
		--FIND final swap log, ignore FEE bulshit
		CASE WHEN logs[array_size(logs)-1] ILIKE 'admin v2%' THEN 2 ELSE 1 END as diff,
		CASE WHEN logs[array_size(logs)-diff] ILIKE 'referral%' THEN diff+1 ELSE diff END as diff_final,
	
		logs[array_size(logs)-diff_final] as to_line,
		regexp_substr(logs[array_size(logs)-diff_final], '.*for (\\d+) ([\\w\\.-]+)', 1, 1, 'e', 1) as swap_to_amt,
		nn.decimal as swap_from_dec,
		regexp_substr(logs[array_size(logs)-diff_final], '.*for (\\d+) ([\\w\\.-]+)', 1, 1, 'e', 2) as swap_to_text,
		coalesce(n.symbol, swap_from_text) as swap_from,
		coalesce(nn.symbol, swap_to_text) as swap_to,
		concat(swap_from, '-->', swap_to) as route,
		CASE WHEN nn.symbol IS NULL OR n.symbol IS NULL THEN 'not safe' ELSE 'safe' END as cat,
		tx
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near_token_address n ON regexp_substr(logs[0], 'Swapped (\\d+) (.*) for', 1, 1, 'e', 2)=n.contract_address
	LEFT JOIN near_token_address nn ON regexp_substr(logs[array_size(logs)-1], '.*for (\\d+) (.*)', 1, 1, 'e', 2)=nn.contract_address
	 WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		AND logs[0] ILIKE 'Swapped%'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	  AND tx not ilike '%"status":{"Failure%'
	  ) , pre as (
	SELECT
	 COUNT
		(DISTINCT TX_HASH) as total,
		ddate,
		swap_from,
		cat
	from base
	GROUP BY ddate, swap_from, cat  ), pre_final as (
	SELECT
	
	total,
		ddate,
		cat,
		rank() over (PARTITION BY ddate ORDER BY total DESC) as rank,
		CASE WHEN rank>5 THEN 'OTHERS' ELSE swap_from END as swap_from
	from pre ) SELECT
	SUM(total) as total,
		ddate,
		swap_from from pre_final GROUP BY ddate, swap_from ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 216
QUERY_ID: 07e58c1d-30c8-4178-a959-9200897829c2
QUERY_TITLE: [FS] Shrooms & Existing Bounty Hunters

QUERY_STRING:

with shroom_mints as (
	SELECT
		MIN(date_trunc('hour', block_timestamp)) as min_time,
		NFT_TO_ADDRESS as minter
	from ethereum.core.ez_nft_mints
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
	GROUP by minter  ), hunters as (
	SELECT DISTINCT TO_ADDRESS as hunter,
	'1' as h
	FROM ethereum.core.ez_token_transfers
	WHERE 1=1
		AND ORIGIN_FROM_ADDRESS = '0xc2f41b3a1ff28fd2a6eee76ee12e51482fcfd11f' --flipside.eth
		AND ORIGIN_TO_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150' --Disperse app
		AND ORIGIN_FUNCTION_SIGNATURE = '0xc73a2d60' --disperseToken ) SELECT
	COUNT(minter) as totals,
	CASE WHEN h.h=1 THEN 'Existing Flipside Bounty Hunter' ELSE 'Not a Hunter' END as CAT from shroom_mints s  LEFT JOIN hunters h ON h.hunter=s.minter GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 217
QUERY_ID: 329e52e7-969b-4663-be59-b3c6a9897d27
QUERY_TITLE: [ENS][Q14] Expiry Clusters

QUERY_STRING:

with samples as (
	SELECT
	DATE(MAX(date_trunc('year', DATE(event_inputs:"expires")))) as expiry, 
			REPLACE(event_inputs:"name",'"','') as ens_name
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND (event_name = 'NameRenewed' OR event_name = 'NameRegistered')
	
	
	--AND block_timestamp >= '2021-11-01' 
	GROUP by ens_name
	) SELECT COUNT(ens_name) as total_renewals, expiry from samples WHERE
	expiry >= '2022-01-01' AND expiry <='2029-12-31' GROUP BY expiry



=======================================================================================
=======================================================================================
QUERY_NO: 218
QUERY_ID: 423c25ad-5598-4c86-b46d-353493c027cd
QUERY_TITLE: [NEAR][T2] Gov Stakes

QUERY_STRING:

with latest as (
	SELECT
	
	a.block_timestamp as dtime,
		method_name,
		coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) as line,
		TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance,
		
		tx_signer,
		tx_receiver,
		rank() OVER (PARTITION by tx_receiver ORDER BY dtime DESC) as rank
	FROM flipside_prod_db.mdao_near.actions_events_function_call a
	JOIN flipside_prod_db.mdao_near.transactions t ON a.txn_hash = t.txn_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
		AND coalesce(tx_receipt[0]:outcome:logs[2], tx_receipt[0]:outcome:logs[1]) LIKE ('Contract total staked%')
	qualify rank=1 ), refine as (
	SELECT
	
	balance,
		tx_receiver,
		SUM(balance) OVER() as total_balance,
		rank() OVER (ORDER BY balance DESC) as validator_rank,
		SUM(balance) OVER (ORDER BY balance DESC) as cum_balance,
		ROUND( (cum_balance/total_balance)*100, 2) as cum_bal_perc
	from latest
	WHERE balance>186284 --current min. stake requirement? https://near-staking.com/ ), nako as (
	SELECT MIN(validator_rank) as rank_limit
	from refine
	WHERE cum_bal_perc>=33 )
	 SELECT
	 *,
	CASE WHEN validator_rank <= rank_limit THEN 'majority' ELSE 'minority' END as cat from refine LEFT JOIN nako on 1=1 ORDER BY balance DESC



=======================================================================================
=======================================================================================
QUERY_NO: 219
QUERY_ID: 0e5c1990-d5d4-40f4-9472-f28f8af3a2ac
QUERY_TITLE: REPORT #6

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM : https://platform.arkhamintelligence.com/visualizer/entity/0x78d79D79397CC46A2A0a1cfB4d599d52B4A3cb64?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x78d79d79397cc46a2a0a1cfb4d599d52b4a3cb64')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 220
QUERY_ID: 33253128-162f-445a-9b74-43054ba5cada
QUERY_TITLE: [algo][118] FF liquidations Volume Over Time

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ), stats as (
	SELECT
	
	COUNT(*) as total_liqs,
		SUM(POS_VOLUME_USD) as positions_closed_volume,
		SUM(COL_VOLUME_USD) as col_liq_volume,
		SUM(INCOME) as liq_profits,
		SUM(treasury_deposit) as treasury_deposits,
		date_trunc('day', htime) as dtime,
		COL_NAME as collateral
	from refine
	GROUP BY dtime, collateral ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 180)) ), collats as (
	SELECT DISTINCT collateral, '0' as blank
	from stats ), sample_space as (
	SELECT
	
	ddate,
		collateral,
		MAX(blank) as blank
	from dates d
	CROSS JOIN collats c
	GROUP BY ddate, collateral ORDER BY ddate ) SELECT ddate,
	coalesce(col_liq_volume, blank) as col_liq_volume,
	SUM(col_liq_volume) OVER(PARTITION BY sp.collateral ORDER BY ddate ASC) as volume_cumulative,
	sp.collateral from sample_space sp LEFT JOIN stats s ON sp.ddate=s.dtime AND sp.collateral = s.collateral WHERE ddate>='2022-04-01' ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 221
QUERY_ID: a52b9eee-48dd-4fe9-9875-a01cfab95c1c
QUERY_TITLE: (my)NFT Markets Master Base --debug

QUERY_STRING:

-- forked from NFT Markets Master Base @ https://flipsidecrypto.xyz/edit/queries/8d9ec771-ae28-4d62-bee4-7fe34a2a7218 -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, marketplace from sales_mixer GROUP BY ddate, marketplace ORDER BY ddate ASC, marketplace ASC -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 222
QUERY_ID: 5c8fca1b-5bf9-42c3-9354-f88e4d927771
QUERY_TITLE: wormhole test

QUERY_STRING:

-- forked from SEI transfers Modded @ https://flipsidecrypto.xyz/edit/queries/841679fc-2a03-403d-8c66-6e72d9ac470a with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=150') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=150') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  (amount / pow(10, 6)) * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'day') = b.hourly and a.symbol_address = b.token_address ) SELECT * from all_bridges where user='sei1wmdf0aypjq77kclamthhxhp528zfnrp4l2k3gg'



=======================================================================================
=======================================================================================
QUERY_NO: 223
QUERY_ID: 0448b28f-678f-43ce-ba0c-dbb6f8d46a72
QUERY_TITLE: [algo] AB2 Refined Samples of Sales

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  * from filter_trades WHERE
	 (totals= 5 or totals= 4)
	 AND algo_amount IS NOT NULL LIMIT 40



=======================================================================================
=======================================================================================
QUERY_NO: 224
QUERY_ID: 4d5a76b7-5aad-481b-a808-4a257faa22e5
QUERY_TITLE: [NEAR][T3] Ref Base

QUERY_STRING:

with base as (
	SELECT
	
	max(a.tx_hash) as example,
		COUNT(DISTINCT a.tx_hash) as total,
		method_name
	from near.core.fact_actions_events_function_call a
	 LEFT JOIN near.core.fact_transactions t on a.tx_hash=t.tx_hash
	WHERE 1=1
		AND (tx_receiver = 'v2.ref-finance.near')
	group by method_name ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 225
QUERY_ID: 4d9b2b07-be44-44d7-9749-beda82b709b9
QUERY_TITLE: [NEAR] User Distribution Types

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as txns,
		MAX(CASE WHEN type='resolve_purchase' THEN 'nft purchased' ELSE 'nft minted' END) as type,
		tx_signer as wallet
	 FROM types
	WHERE
		type IN ('nft_mint', 'resolve_purchase')
	GROUP BY wallet ) SELECT
	CASE WHEN txns=1 THEN concat('Just 1', ' - ', type) ELSE 'Multiple Interactions' END as cat,
	COUNT(DISTINCT wallet) as users from refine GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 226
QUERY_ID: 7808b6d0-e42a-438f-8d47-46fec920f7bf
QUERY_TITLE: [AAVE] [Q19]  Flashloan Traffic over time.

QUERY_STRING:

with total_flash as (
	SELECT COUNT(tx_id) as total_count, date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
	block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	) , ds_data as (
		SELECT COUNT(tx_id) as ds_count, date_trunc('month', block_timestamp) as mdate
	from ethereum.events_emitted
	WHERE
	event_name='FlashLoan'
	--AND tx_id = '0x382cf7914c74aae37ab8e4dec4dfa7924125db0b42a09aeb8954bd35f136cdb3'
	AND tx_from_label = 'defi saver'
	--AND block_timestamp >= CURRENT_DATE - 7
	AND tx_id IN (SELECT
					tx_id
					from aave.flashloans
					WHERE 
					block_timestamp >= CURRENT_DATE - 720)
	AND block_timestamp >= CURRENT_DATE - 720
		GROUP BY mdate ) SELECT 
	total_count, 'Total AAVE Flashloans' as label, mdate FROM total_flash
	 UNION
	  SELECT 
	ds_count as total_count, 'DefiSaver Flashloans' as label, mdate FROM ds_data



=======================================================================================
=======================================================================================
QUERY_NO: 227
QUERY_ID: 53ade9d8-ffd8-4c6d-9e79-64d98867ebd6
QUERY_TITLE: [ENS][Q10] Historic Registration Trends Improved

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
		MAX(date_trunc('day', block_timestamp)) as max_date,
	MIN(date_trunc('day', block_timestamp)) as min_date
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered' GROUP BY owner ORDER BY domains DESC ),
	 steps as (
	SELECT
	date_trunc('month', max_date) as ddate,
		CASE
	WHEN domains=1 OR (domains>1 AND min_date=max_date) THEN 'new'
	
				ELSE 'multiple' END
					as trend,
		COUNT(trend) as total
	from totals
	GROUP BY ddate,trend ), step_totals as (
		SELECT	
		SUM(total) OVER(Partition  BY ddate) as totals_val,
			ddate,
			trend, total,
		(total/totals_val) * 100 as total_percs
	from steps ) SELECT * from step_totals



=======================================================================================
=======================================================================================
QUERY_NO: 228
QUERY_ID: 42151db0-dc24-449d-ab7a-fb2ab0414732
QUERY_TITLE: sei base

QUERY_STRING:

with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	--https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	--Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e') --Offchain EXchange Contract
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ) , oi_latest as (
	WITH api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  'https://archive.sei-prod.vertexprotocol.com/v2/contracts'
	
	
	
	 )
	
	
	) :data AS response
	)
	,
	market_stats AS (
	
	 SELECT
	
	
	  DATE_TRUNC('hour', SYSDATE()) AS HOUR,
	
	
	  f.value :base_currency :: STRING AS base_currency,
	
	
	  f.value :base_volume :: FLOAT AS base_volume,
	
	
	  f.value :contract_price :: FLOAT AS contract_price,
	
	
	  f.value :contract_price_currency :: STRING AS contract_price_currency,
	
	
	  f.value :funding_rate :: FLOAT AS funding_rate,
	
	
	  f.value :index_price :: FLOAT AS index_price,
	
	
	  f.value :last_price :: FLOAT AS last_price,
	
	
	  f.value :mark_price :: FLOAT AS mark_price,
	
	
	  TRY_TO_TIMESTAMP(
	
	
	
	
	f.value :next_funding_rate_timestamp :: STRING
	
	
	  ) AS next_funding_rate_timestamp,
	
	
	  f.value :open_interest :: FLOAT AS open_interest,
	
	
	  f.value :open_interest_usd :: FLOAT AS open_interest_usd,
	
	
	  f.value :price_change_percent_24h :: FLOAT AS price_change_percent_24h,
	
	
	  f.value :product_type :: STRING AS product_type,
	
	
	  f.value :quote_currency :: STRING AS quote_currency,
	
	
	  f.value :quote_volume :: FLOAT AS quote_volume,
	
	
	  f.key AS ticker_id,
	
	
	  SYSDATE() AS inserted_timestamp
	
	 FROM
	
	
	  api_pull A,
	
	
	  LATERAL FLATTEN(
	
	
	
	
	input => response
	
	
	  ) AS f
	)
	
	SELECT SUM(OPEN_INTEREST_USD) as oi_total from market_stats ) SELECT  --date_trunc('day', block_timestamp) AS day,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'spot' THEN trader END) AS distinct_spot_traders,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'perp' THEN trader END) AS distinct_perp_traders,
	
	
	COUNT(DISTINCT trader) AS distinct_total_traders,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'spot' THEN tx_hash END) AS distinct_spot_txns,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'perp' THEN digest END) AS distinct_perp_txns,
	
	
	COUNT(DISTINCT digest) AS distinct_total_txns,
	
	
	--SUM(CASE WHEN (label = 'spot' AND is_taker=TRUE) THEN amount_usd ELSE 0 END) AS total_amount_spot,
	
	
	SUM(CASE WHEN (is_taker=TRUE) THEN amount_usd ELSE 0 END) AS total_amount_perp,
	
	
	SUM(fee_amount) as total_fees,
	
	
	--SUM(CASE WHEN is_taker=TRUE THEN amount_usd ELSE 0 END) AS total_amount_both,
	
	
	MAX(oi_total) as oi_total FROM FINAL LEFT JOIN oi_latest on 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 229
QUERY_ID: eb4a8a38-4fde-4507-9d55-367e77d7c01c
QUERY_TITLE: [AAVE] [Q19] Overall Flashloan Traffic

QUERY_STRING:

with total_flash as (
	SELECT COUNT(tx_id) as total_count
	from aave.flashloans
	WHERE 
	block_timestamp >= CURRENT_DATE - 720
	) , ds_data as (
		SELECT COUNT(tx_id) as ds_count
	from ethereum.events_emitted
	WHERE
	event_name='FlashLoan'
	--AND tx_id = '0x382cf7914c74aae37ab8e4dec4dfa7924125db0b42a09aeb8954bd35f136cdb3'
	AND tx_from_label = 'defi saver'
	--AND block_timestamp >= CURRENT_DATE - 7
	AND tx_id IN (SELECT
					tx_id
					from aave.flashloans
					WHERE 
					block_timestamp >= CURRENT_DATE - 720)
	AND block_timestamp >= CURRENT_DATE - 720 ) SELECT 
	total_count, 'Total AAVE Flashloans' as label FROM total_flash
	 UNION
	  SELECT 
	ds_count as total_count, 'DefiSaver Flashloans' as label FROM ds_data



=======================================================================================
=======================================================================================
QUERY_NO: 230
QUERY_ID: a243be0c-68e7-4ee9-9508-c89e943f9fa6
QUERY_TITLE: IBC tests

QUERY_STRING:

with ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	  , transfer_type
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	  OR
	
	
	  (sender like 'axelar%' and receiver like 'sei%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT')
	  and tx_id= 'EBE25926123A54B5ECA7968813F1BE83E3E0579AD145162A65A0F56852329BEB'
	
	) , price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	 ) select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a LEFT join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address



=======================================================================================
=======================================================================================
QUERY_NO: 231
QUERY_ID: 2dfa02b8-ff8a-44cc-aefb-c41953718438
QUERY_TITLE: NFT Sales Sale Types

QUERY_STRING:

-- forked from NFT Sales Unique Users @ https://flipsidecrypto.xyz/edit/queries/50610d2d-9827-4b43-a947-efc4726c8b94 -- forked from NFT Sales Stats OverView @ https://flipsidecrypto.xyz/edit/queries/7794fa8c-b57f-4692-9e5a-191093ac06d9 -- forked from NFT Sales Vs Mercato Aggr @ https://flipsidecrypto.xyz/edit/queries/a0afb02e-a3a0-4150-8bba-47353e2132c6 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) , refine as (
	SELECT
	
	SUM(sale_amount) as volume
	  , sale_type
	from base
	group by sale_type )
	SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 232
QUERY_ID: 1bdf7a5e-0586-48f7-825c-28ec4752530b
QUERY_TITLE: [ENS][Q2] % Airdrop Not Moved

QUERY_STRING:

with wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND event_type = 'erc20_transfer'
	  GROUP BY origin_address ) SELECT
	SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END)/(25*1e6) * 100 as not_moved_per,
		SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END) as not_moved_tokens,
		COUNT(origin_address) as wallets from wallets WHERE
	tokens_in!=0 AND tokens_out=0



=======================================================================================
=======================================================================================
QUERY_NO: 233
QUERY_ID: 88460f36-d0eb-4df8-af26-ee739da14667
QUERY_TITLE: [ALGO] Tinyman1.1 Pools Chart

QUERY_STRING:

with base_txns as (
	SELECT tx_group_id
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), tiny_assets as (
	SELECT asset_id
		from algorand.asset_configuration_transaction
		WHERE
			tx_group_id IN ( select * from base_txns ) ), asset_details as (
	SELECT tiny_assets.asset_id, asset_name, created_at as block
		from tiny_assets
		LEFT JOIN algorand.asset t on tiny_assets.asset_id = t.asset_id ), pre_final as (
	  SELECT asset_details.asset_id, asset_name, block_timestamp
	  from asset_details
	  LEFT JOIN algorand.block t on asset_details.block = t.block_id ) SELECT
	COUNT(DISTINCT asset_id) as totals,
		date_trunc('day', block_timestamp) as ddate from pre_final
	GROUP by DDATE



=======================================================================================
=======================================================================================
QUERY_NO: 234
QUERY_ID: b192458b-b967-4f89-8829-172642ae1f71
QUERY_TITLE: FORGASH: Berachain Transfers (wETH

QUERY_STRING:

 wBERA // Monad Metrics Guild) copy,-- forked from forgash / Berachain Transfers (wETH, wBERA // Monad Metrics Guild) @ https://flipsidecrypto.xyz/forgash/q/vUP0OSB1Sprz/berachain-transfers-weth-wbera-monad-metrics-guild -- forked from nice-ivory @ https://flipsidecrypto.xyz/studio/queries/1d075237-14a1-41dd-a9b8-88c7deeaa477 with token_transfers AS (
	select
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  contract_name,
	  decoded_log,
	  COALESCE(
	
	 decoded_log:from :: STRING,
	
	 decoded_log:src :: STRING
	  ) AS from_address,
	  COALESCE(
	
	 decoded_log :to :: STRING,
	
	 decoded_log :dst :: STRING
	  ) AS to_address,
	  COALESCE(
	
	 decoded_log :value :: DOUBLE,
	
	  decoded_log :wad :: DOUBLE,
	
	 decoded_log :amount :: DOUBLE
	  ) AS transfer_value
	from
	 berachain.testnet.ez_decoded_event_logs l
	where l.block_timestamp >= sysdate() - interval '8 days'
	and event_name in ('Deposit', 'Transfer')
	and lower(contract_address) in (
	
	 lower('0x6e1e9896e93f7a71ecb33d4386b49deed67a231a'),
	
	 lower('0x767230a157d9a419d1bea97e0e37f9d2668f6b08'),
	
	 lower('0x7507c1dc16935B82698e4C63f2746A2fCf994dF8')
	) ) select
	date_trunc('day', block_timestamp) as _date,
	contract_address,
	contract_name,
	count(distinct tx_hash) as transfer_count,
	count(distinct from_address) as distinct_senders,
	count(distinct to_address) as distinct_recipients,
	sum(transfer_value) as gross_volume_raw,
	sum(transfer_value) / pow(10,18) as gross_volume from token_transfers group by 1,2,3 order by 1,2,3;



=======================================================================================
=======================================================================================
QUERY_NO: 235
QUERY_ID: 81ba1b23-1b41-4e60-a57e-750aac1f0072
QUERY_TITLE: bridge full tests

QUERY_STRING:

with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=150') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=150') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	  OR
	
	
	  (sender like 'axelar%' and receiver like 'sei%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  (amount / pow(10, 6)) * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'day') = b.hourly and a.symbol_address = b.token_address ) SELECT * from all_bridges  where user='sei1enzwck3mlr2m3l82yt9u0zd4kgn2taucdwmlug'



=======================================================================================
=======================================================================================
QUERY_NO: 236
QUERY_ID: ffa8239a-f464-4039-8d57-8dec3810aa31
QUERY_TITLE: NEAR - chain stats

QUERY_STRING:

with sweat_txns as (
	 select block_timestamp,
	 tx_signer as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where project_name ilike '%sweat%'
	  and project_name not ilike '%farand%'
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-06-01'
	UNION
	select block_timestamp,
	 tx_receiver as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where project_name ilike '%sweat%'
	  and project_name not ilike '%farand%'
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-06-01' ) , cosmose_txns as (
	 select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2022-06-01'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2022-06-01' ) , near_txns as (
	select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where NOT (project_name ilike '%sweat%' and project_name not ilike '%farand%')
	  AND NOT (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-06-01'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where NOT (project_name ilike '%sweat%' and project_name not ilike '%farand%')
	  AND NOT (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-06-01' ) , combo as (
	SELECT * , 'sweat' as cat from sweat_txns
	UNION
	 SELECT * , 'cosmose' as cat from cosmose_txns
	UNION
	 SELECT * , 'others' as cat from near_txns ) SELECT
	COUNT(DISTINCT user) as t_users
	, COUNT(DISTINCT tx_hash) as t_txns
	, block_timestamp::date as ddate
	, cat from combo GROUP BY ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 237
QUERY_ID: cff46ccd-3dd8-44f2-bcd5-4fe9de8fc366
QUERY_TITLE: [ALGO][Q34] P2 Voting Breakdown - By Commit amounts

QUERY_STRING:

with comms as (
	SELECT 
	sender,
		tx_id,
		block_id,
		TO_NUMBER(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1))/1e6 as num_value
		--TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), comms_refined as (
	SELECT
		DISTINCT sender,
		last_value(num_value) OVER (PARTITION BY sender order by block_id asc) as final_commit
	from comms ), valid_comms as (
	SELECT sender, final_commit, balance
	from comms_refined c
	LEFT JOIN algorand.account ac ON c.sender = ac.address
	WHERE
		balance>=final_commit ), p2_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			block_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,.*"(\\w)".*', 1, 1, 'e', 1) as opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		--AND (block_timestamp>='2022-01-31 21:29:00' AND block_timestamp<='2022-02-28')
			AND (block_timestamp>='2022-01-31 13:29:00' AND block_timestamp<'2022-02-28 15:59:00')
			--AND (block_timestamp >= '2022-01-31'AND block_timestamp <= '2022-02-27') ),
	 p2_vote_refine as (
	SELECT
		DISTINCT sender,
		last_value(prop) OVER (PARTITION BY sender order by block_id asc) as  prop,
		last_value(opt) OVER (PARTITION BY sender order by block_id asc) as  final_opt
	from p2_voters_debug ),
	 p2_vote as (
	SELECT  DISTINCT sender , final_opt, prop
	from p2_vote_refine
	WHERE prop = 5 ), mix as (
	SELECT
	
	p.sender ,
	
	final_opt,
	
	prop,
		final_commit
	from p2_vote p
	LEFT JOIN valid_comms c ON p.sender = c.sender ) SELECT
	SUM(final_commit) as totals,
		COUNT(DISTINCT sender) as voters,
	final_opt from mix GROUP BY final_opt



=======================================================================================
=======================================================================================
QUERY_NO: 238
QUERY_ID: e0016d11-b830-4664-845c-f645a55c9096
QUERY_TITLE: [Polygon] liquid staking withdraw overview copy

QUERY_STRING:

-- forked from phu / [Polygon] liquid staking withdraw overview @ https://flipsidecrypto.xyz/phu/q/1hUN2EpezdzH/polygon]-liquid-staking-withdraw-overview with
	lido_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0x9ee91f9f426fa633d227f7a9b000e28b9dfd8599' -- stMATIC
	and ORIGIN_FUNCTION_SIGNATURE = '0x745400c9' -- requestWithdraw
	)
	, claystack_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0x91730940dce63a7c0501cedfc31d9c28bcf5f905' -- ClayMatic
	and ORIGIN_FUNCTION_SIGNATURE = '0x2e1a7d4d' -- withdraw
	)
	, ankr_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, TO_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0xcfd4b4bc15c8bf0fd820b0d4558c725727b3ce89' -- PolygonPool
	and ORIGIN_FUNCTION_SIGNATURE = '0x93651269' -- serveClaims
	)
	, stader_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0xf03a7eb46d01d9ecaa104558c732cf82f6b6b645' -- MaticX
	and FROM_ADDRESS = '0x5e3ef299fddf15eaa0432e6e66473ace8c13d908' -- PoS Staking Contract
	and ORIGIN_FUNCTION_SIGNATURE = '0xf8444436' -- claimWithdrawal
	)
	, stader_polygon_cte as (
	-- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from polygon.core.ez_native_transfers
	where 1=1
	and ORIGIN_TO_ADDRESS = '0xfd225c9e6601c9d38d8f98d8731bf59efcf8c0e3' -- ChildPool
	and ORIGIN_FROM_ADDRESS = '0xfd225c9e6601c9d38d8f98d8731bf59efcf8c0e3' -- ChildPool
	and ORIGIN_FUNCTION_SIGNATURE = '0x77baf209' -- claimMaticXSwap
	)
	, union_cte as (
	select 'Lido' platform, * from lido_cte
	union all
	select 'Claystack', * from claystack_cte
	union all
	select 'Ankr', * from ankr_cte
	union all
	select 'Stader', * from stader_cte
	union all
	select 'Stader (Polygon)', * from stader_polygon_cte
	)
	select
	count(distinct ORIGIN_FROM_ADDRESS) depositor
	, sum(AMOUNT) AMOUNT
	, sum(ifnull(AMOUNT_USD,0)) AMOUNT_USD
	, count(TX_HASH) tx_count
	from union_cte



=======================================================================================
=======================================================================================
QUERY_NO: 239
QUERY_ID: 50610d2d-9827-4b43-a947-efc4726c8b94
QUERY_TITLE: NFT Sales Unique Users

QUERY_STRING:

-- forked from NFT Sales Stats OverView @ https://flipsidecrypto.xyz/edit/queries/7794fa8c-b57f-4692-9e5a-191093ac06d9 -- forked from NFT Sales Vs Mercato Aggr @ https://flipsidecrypto.xyz/edit/queries/a0afb02e-a3a0-4150-8bba-47353e2132c6 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) , refine as (
	SELECT
	
	min(block_timestamp) as dtime
	  , purchaser
	  , marketplace
	from base
	GROUP BY purchaser, marketplace ) SELECT
	 COUNT(DISTINCT purchaser) as unique_buyers
	, marketplace from refine GROUP BY marketplace



=======================================================================================
=======================================================================================
QUERY_NO: 240
QUERY_ID: 0bf3b820-aacc-48a9-a31c-2549d3478aec
QUERY_TITLE: [LilNouns] Votes & Voters by Proposal

QUERY_STRING:

select
	 COUNT(DISTINCT ORIGIN_FROM_ADDRESS) as voters,
	event_inputs:"proposalId" as prop from ethereum.core.fact_event_logs  where 1=1
	AND contract_address = '0x5d2c31ce16924c2a71d317e5bbfd5ce387854039'
	AND event_name = 'VoteCast' group by prop order by prop ASC



=======================================================================================
=======================================================================================
QUERY_NO: 241
QUERY_ID: 302689ab-57a7-4738-b8a4-c717c1c5aa7c
QUERY_TITLE: [ENS][Q1] Claims

QUERY_STRING:

SELECT COUNT(distinct origin_address) as "wallets claimed", COUNT(distinct origin_address)/137689 * 100 as "percent_wallets"
	FROM ethereum.udm_events  WHERE
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name='Claim'
	--AND function_signature = '0x76122903'



=======================================================================================
=======================================================================================
QUERY_NO: 242
QUERY_ID: 44d43b2a-fde1-4f5b-a818-5413c84f904b
QUERY_TITLE: Top 10 Delegates (Week 26th Nov-2nd Dec) by 'Delegations'

QUERY_STRING:

SELECT  REPLACE(event_inputs:"toDelegate",'"','') as delegate, COUNT(DISTINCT tx_from_address) as total_delegate_actions
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateChanged'
	 
	AND date_trunc('day', block_timestamp) >= '2021-11-26' 
		AND date_trunc('day', block_timestamp) < '2021-12-03'
	  GROUP BY delegate
	ORDER BY total_delegate_actions DESC
	LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 243
QUERY_ID: 888d6894-d241-4649-bb8c-2f321ebec4b2
QUERY_TITLE: [ALGO][Q19] Period 2 Stats

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address
	WHERE
		balance>=fcommit ) SELECT
	COUNT(DISTINCT sender) as total_wallets,
			SUM(fcommit) as algo_committed from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 244
QUERY_ID: c5e13340-632a-42bb-961f-8637f503fd9c
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP - goBTC

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (386192725)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 245
QUERY_ID: d06d20c7-34e0-4277-b6a3-9d0664ebc1e5
QUERY_TITLE: [avax] Block Times

QUERY_STRING:

with pre as (
	SELECT
		*,
		lag(block_timestamp,1) OVER (ORDER BY block_number) as ptime,
		DATEDIFF(milliseconds, ptime, block_timestamp) as block_time
	from avalanche.core.fact_blocks
	WHERE 1=1
	AND  block_timestamp >= '2022-06-20' ) SELECT
	AVG(block_time) as avg_block_time,
	MAX(block_time) as max_block_time,
	MIN(block_time) as min_block_time,
	date_trunc('hour', block_timestamp) as hdate from pre GROUP BY hdate



=======================================================================================
=======================================================================================
QUERY_NO: 246
QUERY_ID: f9803357-df02-43b9-a4e9-c05099517044
QUERY_TITLE: Top Collections

QUERY_STRING:

-- forked from NFT Sales Sale Types @ https://flipsidecrypto.xyz/edit/queries/2dfa02b8-ff8a-44cc-aefb-c41953718438 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) , refine as (
	SELECT
	
	SUM(sale_amount) as volume
	  , collection_name
	  , COUNT(DISTINCT version) as trades
	  , COUNT(DISTINCT purchaser) as traders
	from base
	group by collection_name ORDER BY volume DESC
	LIMIT 10 )
	SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 247
QUERY_ID: 7794fa8c-b57f-4692-9e5a-191093ac06d9
QUERY_TITLE: NFT Sales Stats OverView

QUERY_STRING:

-- forked from NFT Sales Vs Mercato Aggr @ https://flipsidecrypto.xyz/edit/queries/a0afb02e-a3a0-4150-8bba-47353e2132c6 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) SELECT
	 COUNT(DISTINCT version) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, SUM(sale_amount) as sale_amount
	, block_timestamp::date as ddate
	, marketplace from base GROUP BY ddate, marketplace ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 248
QUERY_ID: 1c35432b-df64-406e-99b4-8a1cce900517
QUERY_TITLE: [ENS][Q6] ENS premiums Paid

QUERY_STRING:

with valid_txns as (
	SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from ethereum.events_emitted
	WHERE
		tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
		AND block_timestamp >= CURRENT_DATE - 360
	GROUP BY tx_id, block_timestamp
	
	), samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('hour', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND tx_id IN (
			select tx_id from valid_txns
				WHERE
					burn_out = 1
					AND controller_in = 1
			)
		AND block_timestamp >= CURRENT_DATE - 360 ), daily_price as (
	SELECT AVG(price) as price, date_trunc('hour', hour) as days
		from ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 360
	GROUP BY days ), results as ( SELECT
	cost, expiry, years, name, tx_id, base_cost, price, samples.days,
	
	 ROUND((base_cost * years)/price, 4) as expected_cost,
		cost - expected_cost as delta,
		(delta/expected_cost)*100 as DELTA_PERC,
		delta * price as premium_paid,
		floor((premium_paid + 99) / 100) * 100 as rounded_premium from samples INNER JOIN daily_price 
	ON samples.days = daily_price.days WHERE
	price != 0
	AND expected_cost!=0 ORDER BY DELTA_PERC DESC ) SELECT
	CASE WHEN rounded_premium>2000 THEN 2000 ELSE rounded_premium END as levels,
		COUNT(rounded_premium) as totals from results WHERE
	rounded_premium>300 GROUP BY levels



=======================================================================================
=======================================================================================
QUERY_NO: 249
QUERY_ID: f9865c83-005c-4b46-a136-3beda607ad57
QUERY_TITLE: NFT Sales Stats Cumulative

QUERY_STRING:

-- forked from NFT Sales Stats OverView @ https://flipsidecrypto.xyz/edit/queries/7794fa8c-b57f-4692-9e5a-191093ac06d9 -- forked from NFT Sales Vs Mercato Aggr @ https://flipsidecrypto.xyz/edit/queries/a0afb02e-a3a0-4150-8bba-47353e2132c6 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) , refine as (
	SELECT
	
	COUNT(DISTINCT version) as sales
	  , COUNT(DISTINCT purchaser) as buyers
	  , SUM(sale_amount) as sale_amount
	  , block_timestamp::date as ddate
	  , marketplace
	from base
	GROUP BY ddate, marketplace ORDER BY ddate ASC  ) SELECT
	 *
	, SUM(sale_amount) OVER (PARTITION BY MARKETPLACE ORDER BY DDATE ASC) as volume from refine



=======================================================================================
=======================================================================================
QUERY_NO: 250
QUERY_ID: aff3ce07-2f59-4f52-a049-aae7b72270e9
QUERY_TITLE: [Wormhole][Q129] Wormhole Txn Sizes

QUERY_STRING:

with base_txns as (
	  SELECT	msg_value, tx_id,
	
	
		date_trunc('day', block_timestamp) as ddate,
	
	
		msg_value:execute_msg:initiate_transfer:asset:amount/1e6 as amount,
	
	
		replace(msg_value:execute_msg:initiate_transfer:asset:info:native_token:denom,'"','') as currency
	  from terra.msgs
	  WHERE
	 
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	 
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL							-- Ensure of transfer/bridge type
	
	
	AND msg_value:execute_msg:initiate_transfer:asset:info:native_token IS NOT NULL -- ENSURE LUNA/UST ONLY ), luna_daily as (
	SELECT
		date_trunc('day', block_timestamp) as ddate,
			AVG(price_usd) as price_usd
		from terra.oracle_prices
		WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		GROUP by ddate ), label_txns as (
	SELECT
	base_txns.ddate as dates, tx_id,
				CASE
	WHEN currency= 'uluna'	THEN (amount*price_usd)	ELSE amount END as usd_value,
				CASE	WHEN usd_value<1000		THEN 'minnow'
						WHEN usd_value<10000	THEN 'fish'
						WHEN usd_value<100000	THEN 'shark'
						WHEN usd_value<1000000	THEN 'whale'
	
					ELSE 'kingpin' END as category
	from base_txns
	LEFT JOIN luna_daily as ld
	ON base_txns.ddate = ld.ddate ) SELECT	COUNT(DISTINCT tx_id) as totals,
		category,
		dates from label_txns GROUP BY dates,category



=======================================================================================
=======================================================================================
QUERY_NO: 251
QUERY_ID: 9f252ff2-892c-4297-83d3-9a472fa77c60
QUERY_TITLE: AAVE Proposals and Votes

QUERY_STRING:

-- AAVE Governance Breakdown SELECT *  from aave.votes WHERE block_timestamp >= CURRENT_DATE - 7 LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 252
QUERY_ID: df2b493f-db33-4008-bfff-b8a340ab6fb5
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP - goETH

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (386195940)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 253
QUERY_ID: 15bb567f-b62b-4413-b745-389d9be8d171
QUERY_TITLE: [ARB] L2 Summer Mainnet Activity

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	COUNT(DISTINCT a.sender) as totals
	, ddate::date as dates
	, CASE	WHEN mdate IS NULL THEN 'Arbitrum Only'
				WHEN mdate>ddate THEN 'Both/Arbitrum First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	GROUP BY dates, cat ORDER BY dates ASC  ) SELECT 
	dates
		, cat
	
	, totals
	, SUM(totals) OVER (PARTITION BY CAT ORDER BY dates ASC) as totals_cumulative from refine



=======================================================================================
=======================================================================================
QUERY_NO: 254
QUERY_ID: ac7d1299-5229-4c77-b5b4-5d1c23a3a1b2
QUERY_TITLE: [ARB] L2 Summer Transaction Types

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	COUNT(DISTINCT a.sender) as totals
	, CASE	WHEN mdate IS NULL THEN 'Arbitrum Only'
				WHEN mdate>ddate THEN 'Both/Arbitrum First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	GROUP BY  cat  ) SELECT 
	* from refine ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 255
QUERY_ID: 534b3fce-0968-4a98-8ae3-38dcd0dd2e19
QUERY_TITLE: [algo] Tinyman1.1 Swaps

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		AVG(algo_amount) as avg_algo_swapped,
			SUM(algo_amount) as total_algo_volume,
	
	
		token_id,
	 
		asset_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.token_id = ass.asset_id
	  WHERE
	
		totals = 4 AND algo_amount IS NOT NULL
	  GROUP BY token_id,asset_name ORDER BY total_wallets DESC
	  LIMIT 10 ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 256
QUERY_ID: 8cb0fd5e-434d-441c-8849-63dacfd7b83f
QUERY_TITLE: [wormhole] Behavior After Adopting Wormhole

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, date(block_timestamp) as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, date(block_timestamp) as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), wh_txns as ( SELECT	
			date(block_timestamp) as wh_date,
			tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	date(block_timestamp) as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	date(block_timestamp) as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ), common_user as ( SELECT
	min_wh_user.address, wh_date, shuttle_date, 'test' as dummy,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.address = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ), total_txns as (
	SELECT shuttle_date as ddate, tx_id, cat, address from total_shuttle_txns
	UNION ALL
	SELECT wh_date as ddate, tx_id, cat, address from wh_txns ), post_txns as (
		SELECT ddate, tx_id, cat, total_txns.address, dummy, wh_date
		from total_txns
	LEFT JOIN common_user ON total_txns.address = common_user.address
	WHERE
	dummy IS NOT NULL
	AND ddate> wh_date ),
	 txns_formatted as (
	SELECT 
		CASE WHEN cat='wh' THEN 1 ELSE 0 END as wh_count,
		CASE WHEN cat='shuttle' THEN 1 ELSE 0 END as shuttle_count,
		tx_id, ddate, cat ,address
	from post_txns	 ) SELECT
	COUNT(DISTINCT address) as total_users,
		COUNT(DISTINCT tx_id) as txn_counts,
		cat,
		date_trunc('day', ddate) as ddate from txns_formatted GROUP BY CAT, ddate



=======================================================================================
=======================================================================================
QUERY_NO: 257
QUERY_ID: d5fe2029-ccc9-44ff-b87b-6fb9748222b0
QUERY_TITLE: Rune Upgrades - 2022 First Week Distinct Wallets & Summary Stats

QUERY_STRING:

SELECT
	
		COUNT(DISTINCT from_address) as distinct_wallets,
			SUM(RUNE_AMOUNT) as total_rune,
		SUM(RUNE_AMOUNT_USD) as total_usd from thorchain.upgrades WHERE block_timestamp >= '2022-01-01'



=======================================================================================
=======================================================================================
QUERY_NO: 258
QUERY_ID: 4b31720f-265e-4e72-8cf1-d7290a811ef5
QUERY_TITLE: [avax] Block Txns

QUERY_STRING:

with base as (
	SELECT
		round(AVG(tx_count), 2) as txns_per_block_avg,
		max(tx_count) as max_txn_per_block,
		min(tx_count) as min_txn_per_block,
	date_trunc('hour', block_timestamp) as htime
	from avalanche.core.fact_blocks
	WHERE 1=1
		AND  block_timestamp >= '2022-06-20'
	GROUP by htime ) SELECT
	* from base



=======================================================================================
=======================================================================================
QUERY_NO: 259
QUERY_ID: 8d9ec771-ae28-4d62-bee4-7fe34a2a7218
QUERY_TITLE: NFT Markets Master Base

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, date_trunc('week', block_timestamp) as ddate
	, marketplace from sales_mixer GROUP BY ddate, marketplace ORDER BY ddate ASC -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 260
QUERY_ID: 6b9c623d-7f10-4cb4-876d-750eb6ac7915
QUERY_TITLE: [NEAR][T3] Users Ref Finance 

QUERY_STRING:

with citizens as (
	SELECT
	
	parse_json(args) as json_args,
		json_args:new_account_id as citizen,
		block_timestamp as ddate
	from near.core.fact_actions_events_function_call
	where method_name = 'create_account' and args LIKE '%new_account_id%' ), txns as (
	SELECT
	
	MIN(a.block_timestamp) as mdate,
		
		tx_signer
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
		AND tx not ilike '%"status":{"Failure"%'
	GROUP BY tx_signer ) SELECT
	 COUNT(citizen) as totals from citizens LEFT JOIN txns ON citizen=tx_signer WHERE mdate IS NOT NULL



=======================================================================================
=======================================================================================
QUERY_NO: 261
QUERY_ID: 50a75367-b940-42a6-8e1e-12bbb96bdee9
QUERY_TITLE: [algo][118] FF Profits

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ), refine2 as (
	  SELECT
	
		COUNT(*) as total_liqs,
	 
	SUM(POS_VOLUME_USD) as positions_closed_volume,
	 
	SUM(COL_VOLUME_USD) as col_liq_volume,
	 
	SUM(INCOME) as liq_profits,
	 
	SUM(treasury_deposit) as treasury_deposits,
	 
	date_trunc('day', htime) as dtime
	 
	--COL_NAME as collateral
	  from refine
	  GROUP BY dtime ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 180)) ) SELECT 
	ddate, coalesce(liq_profits, 0) as liq_profits,
	SUM(liq_profits) OVER(ORDER BY ddate ASC) as profits_cumulative from dates d LEFT JOIN refine2 r ON r.dtime=d.ddate WHERE
	ddate>='2022-04-01'



=======================================================================================
=======================================================================================
QUERY_NO: 262
QUERY_ID: c958bad2-5800-4b8f-91c4-d6858f04b93b
QUERY_TITLE: [FF] TOP REKTs by Collateral Lost ( Volumes in USD ) 💣💣

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns,
	tx_group_id
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	htime,
		col_name,
		col_volume_usd,
		tx_group_id from refine ORDER BY col_volume_usd DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 263
QUERY_ID: 88ea5f39-264f-4730-a2d3-6fd33ebf2009
QUERY_TITLE: [FF] Rekt Stats by Collateral ( Volumes in USD )

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	--SUM(INCOME) as liq_profits,
	--SUM(treasury_deposit) as treasury_deposits,
	--date_trunc('day', htime) as dtime,
	COL_NAME as collateral,
		COUNT(*) as total_liqs,
	--SUM(POS_VOLUME_USD) as positions_closed_volume,
	SUM(COL_VOLUME_USD) as total_liq_volume,
		AVG(COL_VOLUME_USD) as avg_col_liq_volume from refine GROUP BY collateral ORDER BY total_liq_volume DESC



=======================================================================================
=======================================================================================
QUERY_NO: 264
QUERY_ID: d830e455-1cd9-4414-ac97-12a43a346bec
QUERY_TITLE: Folks Finance REKTs(Liquidations) Sample

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
	  tx_group_id,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns,
		liquidator
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	htime,
		tx_group_id,
		pos_liq_asset_id as borr_liq_asset_id,
		pos_liq_asset_name as borr_liq_asset_name,
		pos_price_usd as borr_price_usd,
	pos_net_paid,
		pos_volume_usd,
		col_asset_id_norm,
		col_name,
		col_asset_amt,
		col_price_usd,
		col_volume_usd,
		treasury_deposit,
		income as profit,
		perc_returns,
		liquidator from refine ORDER BY pos_volume_usd DESC LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 265
QUERY_ID: 7d779fa6-3c08-4729-b07d-b131a7ee248d
QUERY_TITLE: [ENS][Q15] Chance of Early/Just In-time Renewals

QUERY_STRING:

with events_regs as (
	  SELECT
			MAX(date_trunc('day', DATE(event_inputs:"expires"))) as reg_expiry,
	
		MAX(date_trunc('day', block_timestamp)) as reg_date,
		event_inputs:"name" as ens_name
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRegistered'
	
	
	--AND block_timestamp >= '2021-11-01'  NEED TO FIND All REG-RENEWAL PAIRS!
	GROUP by ens_name ), events_renewed as (
	  SELECT
	
	
	MAX(date_trunc('day', DATE(event_inputs:"expires"))) as ren_expiry,
	
		MAX(date_trunc('day', block_timestamp)) as ren_date,
			event_inputs:"name" as ens_name
		
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND event_name = 'NameRenewed'
	
	
	--AND block_timestamp >= '2021-11-01' 
	GROUP by ens_name ), ren_days as (
		SELECT
	events_renewed.ens_name, DATEDIFF('days', reg_expiry, ren_date) as days_from_expiry,
					ren_date, ren_expiry, reg_date, reg_expiry
		from events_renewed
		LEFT JOIN events_regs
		ON events_renewed.ens_name = events_regs.ens_name
		WHERE
			reg_date<ren_date ) /* WHERE date condition as I was getting REG dates > REN dates may be due to transfers/reselling? Not sure. Only acting on valid/sound results. */ SELECT
		COUNT(*) as totals,
		CASE
	WHEN DAYS_FROM_EXPIRY<0 THEN 'Early'
				WHEN DAYS_FROM_EXPIRY=0 THEN 'Expiry Date'
				ELSE 'Delayed' END	
		as types from ren_days GROUP BY types



=======================================================================================
=======================================================================================
QUERY_NO: 266
QUERY_ID: 0b38a2ad-0289-4fdf-8653-fca732bcf013
QUERY_TITLE: [ENS][Q6] ENS premiums details

QUERY_STRING:

with valid_txns as (
	SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from ethereum.events_emitted
	WHERE
		tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
		AND block_timestamp >= CURRENT_DATE - 360
	GROUP BY tx_id, block_timestamp
	
	), samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('hour', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND tx_id IN (
			select tx_id from valid_txns
				WHERE
					burn_out = 1
					AND controller_in = 1
			)
		AND block_timestamp >= CURRENT_DATE - 360 ), daily_price as (
	SELECT AVG(price) as price, date_trunc('hour', hour) as days
		from ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 360
	GROUP BY days ), results as ( SELECT
	cost, expiry, years, name, tx_id, base_cost, price, samples.days,
	
	 ROUND((base_cost * years)/price, 4) as expected_cost,
		cost - expected_cost as delta,
		(delta/expected_cost)*100 as DELTA_PERC,
		delta * price as premium_paid,
		floor((premium_paid + 99) / 100) * 100 as rounded_premium from samples INNER JOIN daily_price 
	ON samples.days = daily_price.days WHERE
	price != 0
	AND expected_cost!=0 ORDER BY DELTA_PERC DESC ), dummy_op as ( SELECT
	COUNT(rounded_premium) as premium_txns, NULL as re_registered_domains, NULL as total_premium , NULL as avg_premium, 'test' as dummy from results WHERE
	rounded_premium>300 UNION SELECT NULL as premium_txns, COUNT (DISTINCT tx_id) as re_registered_domains, NULL as total_premium, NULL as avg_premium, 'test' as dummy from samples UNION SELECT
	NULL as premium_txns ,NULL as re_registered_domains, SUM(CASE WHEN rounded_premium>2000 THEN 2000 ELSE rounded_premium END) as total_premium,
		AVG(CASE WHEN rounded_premium>2000 THEN 2000 ELSE rounded_premium END) as avg_premium,
		'test' as dummy from results WHERE
	rounded_premium>300 ), display as ( SELECT
	MAX(PREMIUM_TXNS) as premium_txns, 
		MAX(RE_REGISTERED_DOMAINS) as RE_REGISTERED_DOMAINS, 
		MAX(TOTAL_PREMIUM) as TOTAL_PREMIUM, MAX(avg_premium) as avg_premium,
		dummy from dummy_op GROUP BY dummy ) SELECT
	premium_txns,
			RE_REGISTERED_DOMAINS,
		(premium_txns/RE_REGISTERED_DOMAINS)*100 as txns_perc,
			TOTAL_PREMIUM,
		avg_premium from display



=======================================================================================
=======================================================================================
QUERY_NO: 267
QUERY_ID: 4f3f9007-f47b-44e8-927d-4ad50b89b242
QUERY_TITLE: ARB-Weekly Cohort

QUERY_STRING:

with filter as (
	SELECT
	
	*
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	from arbitrum.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from filter)
	  and block_timestamp>='2023-08-01' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_week_later
	
	 , case when difference = 2 then retention_pct else null end as two_week_later
	
	 , case when difference = 3 then retention_pct else null end as three_week_later
	
	 , case when difference = 4 then retention_pct else null end as four_week_later
	
	 , case when difference = 5 then retention_pct else null end as five_week_later
	
	 , case when difference = 6 then retention_pct else null end as six_week_later
	
	 , case when difference = 7 then retention_pct else null end as seven_week_later
	
	 , case when difference = 8 then retention_pct else null end as eight_week_later
	
	 , case when difference = 9 then retention_pct else null end as nine_week_later
	
	 , case when difference = 10 then retention_pct else null end as ten_week_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_week_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_week_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'MM-dd') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as new_users
	
	 , concat(max(one_week_later) * 100 ,'%') as one_week_later
	
	 , concat(max(two_week_later) * 100 ,'%') as two_week_later
	
	 , concat(max(three_week_later) * 100 ,'%') as three_week_later
	
	 , concat(max(four_week_later) * 100 ,'%') as four_week_later
	
	 , concat(max(five_week_later) * 100 ,'%') as five_week_later
	
	 , concat(max(six_week_later) * 100 ,'%') as six_week_later
	
	 , concat(max(seven_week_later) * 100 ,'%') as seven_week_later
	
	  , concat(max(eight_week_later) * 100 ,'%') as eight_week_later
	
	 , concat(max(nine_week_later) * 100 ,'%') as nine_week_later
	
	 , concat(max(ten_week_later) * 100 ,'%') as ten_week_later
	
	 , concat(max(eleven_week_later) * 100 ,'%') as eleven_week_later
	
	 , concat(max(twelve_week_later) * 100 ,'%') as twelve_week_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 268
QUERY_ID: 9bffba08-d66f-43e1-8585-72f1f8b45f7d
QUERY_TITLE: NEAR - Top Projects by Traffic stats ( May '23 onward )

QUERY_STRING:

with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , coalesce(l1.project_name, l2.project_name, 'other') as cat
	FROM near.core.fact_transactions b
	 LEFT JOIN near.core.dim_address_labels l1 on b.tx_signer = l1.address
	LEFT JOIN near.core.dim_address_labels l2 on b.tx_receiver = l2.address
	WHERE tx_status='Success'
	  AND block_timestamp >= '2023-05-01'
	GROUP BY cat ) SELECT * from base  WHERE cat!='other' ORDER BY t_users DESC  LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 269
QUERY_ID: 4ce66ca9-dbc6-4646-a2d1-1dfc9bfce119
QUERY_TITLE: [PoolT] USDC - Deposit Amounts Per Day

QUERY_STRING:

with base as (
	SELECT *
	 from ethereum.core.ez_token_transfers
	WHERE 1=1
		AND block_timestamp BETWEEN '2022-05-01' AND '2022-06-20'
		AND to_address = lower('0xd89a09084555a7D0ABe7B111b1f78DFEdDd638Be')
		AND symbol ='USDC'
		AND origin_function_signature = '0xd7a169eb' ), day_stats as (
	SELECT
	
	SUM(AMOUNT_USD) as amt_usd,
		date_trunc('day', block_timestamp) as ddate
	from base
	group by ddate order by ddate ASC ) SELECT
	*,
	SUM(amt_usd) OVER ( ORDER BY DDATE ASC) as usd_amt_cumulative from day_stats



=======================================================================================
=======================================================================================
QUERY_NO: 270
QUERY_ID: 1559bae4-4e36-4e60-8c8b-01a0c5b28a7f
QUERY_TITLE: REPORT 11 

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM https://platform.arkhamintelligence.com/visualizer/entity/0x6a75Ff3f2b2C0881bE795259C7650E7B71bAad6c?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x6a75ff3f2b2c0881be795259c7650e7b71baad6c')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 271
QUERY_ID: d0a12a65-9c92-4ed0-a07f-1e67a4faf740
QUERY_TITLE: [TC] Asset Stats Base

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token,':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ), pre as (
	SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
		coalesce(token_amounts, 0) as token_amounts,
		price,
		token_amounts*price as volume_usd,
	s.cat
	from sample_space s
	 LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat
	LEFT JOIN  (
	  SELECT
	
	avg(price) as price,
	
	CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	  date_trunc('day', HOUR) as pdate
	  FROM ethereum.core.fact_hourly_token_prices
	  WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(split(cat,':')[0])='eth' THEN 'weth' ELSE split(cat,':')[0] END as cat from refine WHERE cat IS NOT NULL)
	  GROUP BY pdate,symbol
	  ) p  ON s.ddate = pdate AND lower((split(s.cat,':')[0]))=p.symbol
	WHERE 1=1
		AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})
		AND s.cat ilike '%{{ASSET}}%'  ) SELECT 
	SUM(total_txns) as  total_txns,
	SUM(volume_usd) as total_volume from pre



=======================================================================================
=======================================================================================
QUERY_NO: 272
QUERY_ID: a3b06490-4871-4763-bdc3-077335401b86
QUERY_TITLE: [TC] Deposits Base USD

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ) SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
		coalesce(token_amounts, 0) as token_amounts,
		price,
		token_amounts*price as volume_usd,
	s.cat,
		SUM(total_txns) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_txns_cumu,
		SUM(volume_usd) OVER (PARTITION BY s.cat ORDER BY s.ddate ASC) as total_volume_cumu from sample_space s  LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat LEFT JOIN  (
	SELECT
	 avg(price) as price,
	 CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	date_trunc('day', HOUR) as pdate
	FROM ethereum.core.fact_hourly_token_prices
	WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(cat)='eth' THEN 'weth' ELSE lower(cat) END as cat from refine WHERE cat IS NOT NULL)
	GROUP BY pdate,symbol
	) p  ON s.ddate = pdate AND lower(s.cat)=p.symbol WHERE 1=1
	AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})



=======================================================================================
=======================================================================================
QUERY_NO: 273
QUERY_ID: 306d5ee7-609b-4592-8e0f-d43318cb7dbc
QUERY_TITLE: [BANKLESS][Q2]  Dex Swaps LPs

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT' ), base_groups as (
	SELECT *,
	row_number() OVER(Partition BY tx_id ORDER BY event_index ASC) as row_num
	from ethereum.dex_swaps
	WHERE
	tx_id IN (SELECT * from swap_outs) ), groups as (
	SELECT
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN pool_name ELSE NULL END) as final_pool,
	MAX(CASE WHEN row_num=1 AND direction='IN' THEN token_address ELSE NULL END) as swap_token,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN platform ELSE NULL END) as platform,
	tx_id
	from base_groups
	GROUP BY tx_id ) SELECT
	COUNT(tx_id) as totals,
	regexp_substr(final_pool,'^(\\w+-\\w+)', 1, 1, 'e', 1) as final_pool,
	platform from groups GROUP BY final_pool, platform



=======================================================================================
=======================================================================================
QUERY_NO: 274
QUERY_ID: f7b66329-4d21-4339-af56-86ec6c0f3a41
QUERY_TITLE: [FS] Shrooms Failed

QUERY_STRING:

with base as (
	SELECT
	
	COUNT(TX_HASH) as totals,
		STATUS as cat
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND to_address = '0xdfb57b6e16ddb97aeb8847386989f4dca7202146'
		AND origin_function_signature = '0x2b1ccc9a' --MINT function hash
	GROUP BY cat ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 275
QUERY_ID: 9872aad6-8d85-4235-8b0b-0bec0caa1da8
QUERY_TITLE: [FS] Shrooms & GodMode

QUERY_STRING:

with shroom_mints as (
	SELECT
		MIN(date_trunc('hour', block_timestamp)) as min_time,
		NFT_TO_ADDRESS as minter
	from ethereum.core.ez_nft_mints
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
	GROUP by minter  ), godm_mints as (
	SELECT
		MIN(date_trunc('hour', block_timestamp)) as min_time,
		NFT_TO_ADDRESS as gminter,
		'1' as gm
	from ethereum.core.ez_nft_mints
	WHERE 1=1
		AND NFT_ADDRESS = lower('0x903E2F5d42EE23156D548DD46bb84B7873789E44')
	GROUP by gminter  ), godm_holders as (
	SELECT
	
	NFT_TO_ADDRESS as gholder,
		dense_rank() over (PARTITION by TOKENID ORDER BY BLOCK_TIMESTAMP DESC, EVENT_INDEX DESC) as row_num, --EVENT-INDEX for the hops during mint...
		'1' as gh
	from ethereum.core.ez_nft_transfers
	WHERE 1=1
		AND NFT_ADDRESS = lower('0x903E2F5d42EE23156D548DD46bb84B7873789E44')
	qualify row_num=1 ) SELECT
	 COUNT(minter),
	CASE WHEN gh=1 OR gm=1 THEN 'GodMode Minter/Holder' ELSE 'Not GodMode Related' END as CAT from shroom_mints s  LEFT JOIN godm_mints gm ON s.minter = gm.gminter LEFT JOIN godm_holders gh ON s.minter = gh.gholder GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 276
QUERY_ID: 04c187c9-a9ea-495a-91d6-4323f825cd95
QUERY_TITLE:  [ALGO] NFT sales

QUERY_STRING:

with arc69_assets as (
	  SELECT asset_id from algorand.asset_configuration_transaction
	  WHERE
	 
	TRY_PARSE_JSON(try_base64_decode_string(tx_message:txn:note::string)):standard = 'arc69'
			AND tx_message:txn:snd IS NOT  NULL  ), arc69_asset_dets as (
	SELECT asset_id
		from algorand.asset
		WHERE
			asset_id IN (SELECT asset_id from arc69_assets)
			AND asset_deleted = FALSE
			AND total_supply = 1 ), arc69_asset_dets as (
	  SELECT  asset_id
	  from algorand.asset
	  WHERE
	
		asset_url like '%#arc3%'
	 
	AND total_supply = 1 ), arc69_tx_groups as (
	SELECT tx_group_id
		from algorand.transactions
		WHERE
		asset_id IN (SELECT * from arc69_asset_dets)
			AND tx_group_id IS NOT NULL ), arc69_app_trades as (
	  SELECT app_id, block_id, tx_id, tx_group_id
	  from algorand.application_call_transaction
	  WHERE
	 
	tx_group_id IN (SELECT * from arc69_tx_groups) ), arc3_asset_dets as (
	  SELECT  asset_id
	  from algorand.asset
	  WHERE
	
		asset_url like '%#arc3%'
	 
	AND total_supply = 1 ), arc3_tx_groups as (
	SELECT tx_group_id
		from algorand.transactions
		WHERE
		asset_id IN (SELECT * from arc3_asset_dets)
			AND tx_group_id IS NOT NULL ), arc3_app_trades as (
	  SELECT app_id, block_id, tx_id, tx_group_id
	  from algorand.application_call_transaction
	  WHERE
	 
	tx_group_id IN (SELECT * from arc3_tx_groups) ), combo as ( SELECT block_id, tx_group_id, 'arc3' as cat from arc3_app_trades UNION ALL SELECT block_id, tx_group_id, 'arc69' as cat  from arc69_app_trades ) SELECT
	COUNT(DISTINCT tx_group_id) as totals,
			date_trunc('day', block_timestamp) as ddate,
			SUM(totals) OVER (PARTITION BY cat ORDER BY ddate ASC) as sales_volume,
		cat from combo LEFT JOIN algorand.block ON combo.block_id = block.block_id GROUP BY ddate,cat



=======================================================================================
=======================================================================================
QUERY_NO: 277
QUERY_ID: e9f1b353-fa65-4a15-be45-b76bd9bcc50b
QUERY_TITLE: [Optmism] VELO - Base Weeks

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' ), refine as (
	SELECT
		tx_hash,
		date_trunc('hour',block_timestamp) as hdate,
		ORIGIN_FROM_ADDRESS,
		ORIGIN_TO_ADDRESS,
		contract_address,
		provider,
		locked_date,
		tokenID,
		weight,
		deposit_type,
		DATEDIFF(week, date_trunc('day',block_timestamp), locked_date)  as duration,
		test
	FROM base
	WHERE weight>0 )  SELECT
	 COUNT(*) as totals,
	hdate,
	duration as weeks from refine GROUP BY hdate, weeks



=======================================================================================
=======================================================================================
QUERY_NO: 278
QUERY_ID: 4cd55f41-c94d-464c-b569-968a7b3a7804
QUERY_TITLE: [NEAR][T2] Gov Stakes copy TEST

QUERY_STRING:

with latest as (
	SELECT
	
	SUM(CASE WHEN ACTION='!Stake' THEN (-1) * (STAKE_AMOUNT/1e24) ELSE (STAKE_AMOUNT/1e24) END) as current_stake
	  , pool_address
	from near.core.dim_staking_actions
	GROUP BY pool_address
	ORDER BY CURRENT_STAKE DESC ) SELECT * from latest



=======================================================================================
=======================================================================================
QUERY_NO: 279
QUERY_ID: 87f6783a-ba80-486e-891a-fdac9a819511
QUERY_TITLE: [NEAR] NFT Unique Users Over Time

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), pre_stats as (
	SELECT
		tx_signer,
		MIN(date_trunc('day', block_timestamp)) as ddate
	from types
	WHERE type IN ('nft_mint', 'resolve_purchase')
	GROUP BY tx_signer  ), stats as (
	SELECT
		COUNT(DISTINCT tx_signer) as users,
		ddate
	from pre_stats
	GROUP BY ddate ORDER BY ddate ASC ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 400)) ), collats as (
	SELECT DISTINCT ddate, '0' as blank
	from stats ), sample_space as (
	SELECT
	
	d.ddate,
		MAX(blank) as blank
	from dates d
	CROSS JOIN collats c
	GROUP BY d.ddate ORDER BY ddate ) SELECT sp.ddate,
	coalesce(users, blank) as users,
	SUM(users) OVER (ORDER BY sp.ddate ASC) as unique_users from sample_space sp LEFT JOIN stats s ON sp.ddate=s.ddate WHERE
	sp.ddate>='2021-09-07' ORDER BY sp.ddate



=======================================================================================
=======================================================================================
QUERY_NO: 280
QUERY_ID: b11bb11d-6acc-4471-91a7-070052a5d3cd
QUERY_TITLE: Honeypot Finance

QUERY_STRING:

-- forked from Ramen Finance  @ https://flipsidecrypto.xyz/edit/queries/54d08323-88fe-45d3-8fd9-7094537fd0de with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 281
QUERY_ID: e783a825-3e4d-4bc4-931c-fdfffc8e1cbc
QUERY_TITLE: primary-azure

QUERY_STRING:

SELECT
	 TO_NUMERIC('1601797344075403055539') as num



=======================================================================================
=======================================================================================
QUERY_NO: 282
QUERY_ID: 4ec704e5-b1a9-49f9-ba2e-cc589e674c67
QUERY_TITLE: friend - Top Traded Accounts copy

QUERY_STRING:

-- forked from friend - Top Traded Accounts @ https://flipsidecrypto.xyz/edit/queries/417a9798-3080-40a4-a172-7436949a7820  -- forked from friend - Trade Volume Cumulative @ https://flipsidecrypto.xyz/edit/queries/750c59f1-6860-4529-848a-037bee0c5393  -- forked from friend - Trade Volume @ https://flipsidecrypto.xyz/edit/queries/80af3f43-64c2-4ab5-a490-18bb57049f20  -- SELLS AND BUYS: with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  AND origin_from_address = lower('0x4e5f7e4a774bd30b9bdca7eb84ce3681a71676e1')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	COUNT(DISTINCT trader) as traders
	  , SUM(trade_value) as volume_eth
	  , account
	from base_wallet
	GROUP BY account ORDER BY volume_eth DESC
	LIMIT 20 ), account_funders as (
	SELECT
	
	t.tx_hash
	  , t.block_timestamp
	  , to_address as account
	  , from_address as funder
	  , eth_value
	  , ENS_NAME
	  , rank() OVER (PARTITION BY to_address ORDER BY t.block_timestamp ASC) as rank
	from base.core.fact_transactions t
	LEFT JOIN crosschain.core.ez_ens e ON t.from_address=e.owner
	WHERE 1=1
	  AND ETH_VALUE>0
	  AND ENS_SET!='N'
	  AND to_address IN (SELECT account as to_address from refine)
	qualify rank=1
	 ) select
	 volume_eth, traders as unique_traders, r.account, ens_name from refine r LEFT JOIN account_funders a ON r.account=a.account ORDER BY VOLUME_ETH DESC



=======================================================================================
=======================================================================================
QUERY_NO: 283
QUERY_ID: 9d5ad545-bcf7-400d-a1fb-311174ad694f
QUERY_TITLE: Near Transactions

QUERY_STRING:

-- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , date_trunc(day, BLOCK_TIMESTAMP) as ddate
	FROM near.core.fact_transactions
	WHERE tx_status='Success'
	  AND block_timestamp >= '2023-01-01'
	GROUP BY ddate ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 284
QUERY_ID: a58ba4ef-0c7f-4a3e-8fe0-946a0f7aa6b4
QUERY_TITLE: bluemove single buys cases copy copy

QUERY_STRING:

SELECT * from aptos.core.fact_events f WHERE 1=1
	AND version in ('303743818')
	AND event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')



=======================================================================================
=======================================================================================
QUERY_NO: 285
QUERY_ID: aa0cee2b-82be-4cc4-8373-61f3bfaddb44
QUERY_TITLE: [ALGO][Q78] Top Purchasers by NFTs Purchased

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), top10 as (
	SELECT
		buyer as wallet,
		SUM(algo_amount) as algo_spent,
		COUNT(tx_group_id) as NFT_purchases
	from filter_trades
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL
	GROUP BY wallet ORDER BY NFT_purchases DESC
	LIMIT 10 ) SELECT
	 *,
	concat(substr(wallet,0,4), '...', substr(wallet, len(wallet)-3, len(wallet))) as wallet_trunc from top10



=======================================================================================
=======================================================================================
QUERY_NO: 286
QUERY_ID: da6d5984-80ef-4390-a6e7-6c968a9ef38d
QUERY_TITLE: OP-Weekly Cohort

QUERY_STRING:

with filter as (
	SELECT
	
	*
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	from optimism.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from filter)
	  and block_timestamp>='2023-08-01' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_week_later
	
	 , case when difference = 2 then retention_pct else null end as two_week_later
	
	 , case when difference = 3 then retention_pct else null end as three_week_later
	
	 , case when difference = 4 then retention_pct else null end as four_week_later
	
	 , case when difference = 5 then retention_pct else null end as five_week_later
	
	 , case when difference = 6 then retention_pct else null end as six_week_later
	
	 , case when difference = 7 then retention_pct else null end as seven_week_later
	
	 , case when difference = 8 then retention_pct else null end as eight_week_later
	
	 , case when difference = 9 then retention_pct else null end as nine_week_later
	
	 , case when difference = 10 then retention_pct else null end as ten_week_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_week_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_week_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'MM-dd') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_week_later) * 100 ,'%') as one_week_later
	
	 , concat(max(two_week_later) * 100 ,'%') as two_week_later
	
	 , concat(max(three_week_later) * 100 ,'%') as three_week_later
	
	 , concat(max(four_week_later) * 100 ,'%') as four_week_later
	
	 , concat(max(five_week_later) * 100 ,'%') as five_week_later
	
	 , concat(max(six_week_later) * 100 ,'%') as six_week_later
	
	 , concat(max(seven_week_later) * 100 ,'%') as seven_week_later
	
	  , concat(max(eight_week_later) * 100 ,'%') as eight_week_later
	
	 , concat(max(nine_week_later) * 100 ,'%') as nine_week_later
	
	 , concat(max(ten_week_later) * 100 ,'%') as ten_week_later
	
	 , concat(max(eleven_week_later) * 100 ,'%') as eleven_week_later
	
	 , concat(max(twelve_week_later) * 100 ,'%') as twelve_week_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 287
QUERY_ID: 69613349-9850-443e-80c1-7e25c4a454e5
QUERY_TITLE: Top Active NEAR Projects copy

QUERY_STRING:

-- forked from MoDeFi / Top Active NEAR Projects @ https://flipsidecrypto.xyz/MoDeFi/q/h-AgFT67xwyn/top-active-near-projects -- forked from Top Active NEAR Projects @ https://flipsidecrypto.xyz/edit/queries/35d84233-d5ab-49c7-bda1-3fddca357855 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  round(100*count(distinct date_trunc(day, BLOCK_TIMESTAMP))/(current_date-'{{starting_date}}'::date+1),1)||' %'  as "Active Days %", count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by 3 desc  limit 1000



=======================================================================================
=======================================================================================
QUERY_NO: 288
QUERY_ID: 5f20863c-5f95-49b8-a1f0-225fa83032dc
QUERY_TITLE: Berachein 

QUERY_STRING:

-- forked from insrt finance (BongBear ShardVaults) @ https://flipsidecrypto.xyz/edit/queries/31b3cc87-cf5d-43c0-96ce-be1287156d90 -- forked from Beramoniom @ https://flipsidecrypto.xyz/edit/queries/96e90fdd-f479-40f8-a1b6-eeded959cc18 with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 289
QUERY_ID: ec349266-44c4-414b-8fe0-238f085a6ea4
QUERY_TITLE: Beradoge

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 290
QUERY_ID: e9bb7ad3-6609-44ea-a749-a29f27a94b10
QUERY_TITLE: MY tables MASTER NFTs

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, marketplace from sales_mixer GROUP BY ddate, marketplace ORDER BY ddate ASC -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 291
QUERY_ID: e6ac428c-f543-4fab-ac4d-683c77f76dc8
QUERY_TITLE: MY tables - Topaz Single Day

QUERY_STRING:

with topaz as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	  AND block_timestamp::date = '2022-10-19'
	  AND success = TRUE ) SELECT * from topaz ORDER BY block_timestamp ASC



=======================================================================================
=======================================================================================
QUERY_NO: 292
QUERY_ID: f1a63a66-98ff-4d39-87a9-e0914535f3bf
QUERY_TITLE: test events topaz

QUERY_STRING:

-- forked from 2023-12-08 08:22 PM @ https://flipsidecrypto.xyz/edit/queries/7efb9f34-7071-4dae-a78a-3fb53c37d4f8 SELECT
	 COUNT(*) as totals
	, CASE WHEN (coalesce(event_data:buyer, event_data:purchaser) IS NOT NULL)
	
	
	AND (event_data:price IS NOT NULL)
	
	
	AND (event_data:seller IS NOT NULL) THEN 'sales data' ELSE 'not sales' END as cat
	, max(version) as example
	, event_resource
	, event_module from aptos.core.fact_events where 1=1
	AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2' GROUP BY event_resource, event_module, cat



=======================================================================================
=======================================================================================
QUERY_NO: 293
QUERY_ID: 43362c65-f336-4884-8888-db792589f746
QUERY_TITLE: REPORT # 13

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM https://platform.arkhamintelligence.com/visualizer/entity/0xcad13B7977670D3D8e245257CFE027EE6b8680c8?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xcad13b7977670d3d8e245257cfe027ee6b8680c8')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 294
QUERY_ID: e3335b2b-a460-4092-aa35-6720c5c22266
QUERY_TITLE: BeraPlug

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	) , mirror_mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT SUM(cost_eth) from mints UNION  SELECT SUM(cost_eth) from mirror_mints



=======================================================================================
=======================================================================================
QUERY_NO: 295
QUERY_ID: 68aee05b-49ee-45e4-9557-4ae6572dfb65
QUERY_TITLE: VC Raises

QUERY_STRING:

select block_timestamp, raised_in_usd as usd_raised, project as label from( select 1710939960 as block_timestamp, 'https://twitter.com/0xoogabooga/status/1770436712684044707' as source,'Ooga Booga' as project, 1000000 as raised_in_usd union select 1688070600 as block_timestamp, 'https://twitter.com/stackingsalmon' as source,'Stacking Salmon' as project, 250000 union select 1706536800 as block_timestamp, 'https://twitter.com/InfraredFinance/status/1751968505682092241' as source,'Infrared',2500000 union select 1707138000 as block_timestamp, 'https://twitter.com/KodiakFi/status/1754490009368039481','Kodiak',2000000 union select 1712158200 as block_timestamp, 'https://twitter.com/NAVFinance_/status/1775543050217111704','Nav',3000000 union select 1715805000 as block_timestamp, 'https://twitter.com/shogunfi/status/1790842628591726730','Shogun',6900000) union  SELECT block_timestamp, raised_in_usd as usd_raised, project as label from
	 (
	  select
	
	  1714417200 as block_timestamp
	
	 , 'https://twitter.com/berabot_/status/1785022321838760443' as source
	
	 , 'Berabot' as project
	
	 , 60 as cost_eth
	
	 , cost_eth*price as raised_in_usd
	  from ethereum.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND symbol='WETH'
	
	 AND blockchain='ethereum'
	  ORDER BY HOUR DESC
	
	LIMIT 1
	)



=======================================================================================
=======================================================================================
QUERY_NO: 296
QUERY_ID: c4270135-a9d9-44e3-9677-f315101ecaab
QUERY_TITLE: BEAR ECO -  Holders w/ ALL NFTs

QUERY_STRING:

with hc_holders as(
	with thc_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	  qualify ranks=1
	
	  )
	select
	
	distinct holder as address
	from thc_holders ) , ser_holders as(
	with ramen_holders as (
	  select holder,tokenid,sum(cc) as balance from(
	
	 select
	
	
	 NFT_FROM_ADDRESS as holder ,tokenid,-count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2
	
	 union all
	
	 select
	
	
	 NFT_TO_ADDRESS as holder,tokenid,count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2) a
	  group by 1,2
	  having sum(cc) > 0
	)
	select
	
	distinct holder as address
	from ramen_holders t ) , beradrome_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x17798ba794ad94dad0b7d3f4b9bc2e9f6486d4b9'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , hiberanation_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , beramonium_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t
	) , -- holding all refine as (
	select hc.address from hc_holders hc
	inner join ser_holders ser on ser.address = hc.address
	inner join beradrome_holders bd on bd.address = hc.address
	inner join hiberanation_holders hb on hb.address = hc.address
	inner join beramonium_holders bm on bm.address = hc.address ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 297
QUERY_ID: 56c0b34e-cfb0-4a84-8a65-f1ac5986e7d0
QUERY_TITLE: SOL txns base

QUERY_STRING:

with base as (
	SELECT
	
	COUNT(DISTINCT TX_ID) as totals
	  , date_trunc('day',block_timestamp) as dday
	from solana.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday ) , wallets_100 as (
	SELECT
	  COUNT(DISTINCT TX_ID) as totals
	  , signers[0] as wallet
	  , date_trunc('day',block_timestamp) as dday
	from solana.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday, wallet
	QUALIFY row_number() OVER (PARTITION BY dday ORDER BY totals DESC)<={{No_Wallets}} ) , sums as (
	SELECT
	  SUM(w.totals) as wtotals
	  , w.dday as day
	  , b.totals as dtotals
	from wallets_100 w
	 LEFT JOIN base b ON w.dday=b.dday
	GROUP BY day, dtotals ) SELECT
	 day
	, wtotals
	, dtotals
	, ROUND((wtotals/dtotals)*100, 2) as top_wallets_perc from sums



=======================================================================================
=======================================================================================
QUERY_NO: 298
QUERY_ID: 25f32ade-63cb-4515-9e05-2cf0e02ba3a5
QUERY_TITLE: MY tables - Topaz AND BlueMove Daily

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, marketplace from sales_mixer WHERE 1=1
	AND marketplace IN ('topaz', 'bluemove_v1', 'bluemove_v2') GROUP BY ddate, marketplace ORDER BY ddate ASC, marketplace ASC



=======================================================================================
=======================================================================================
QUERY_NO: 299
QUERY_ID: 96e90fdd-f479-40f8-a1b6-eeded959cc18
QUERY_TITLE: Beramoniom

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	  --AND tx_hash = '0xbb665c180bacd3fe6d5a5f1c05d063d078232f4628e5dab4c2ce105b618ca470' ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 300
QUERY_ID: deb58603-a57e-4d39-a1b5-0886553c7981
QUERY_TITLE: 2023-10-23 05:40 PM

QUERY_STRING:





=======================================================================================
=======================================================================================
QUERY_NO: 301
QUERY_ID: 4746b545-379c-421a-870d-9eed6046c8ae
QUERY_TITLE: Top Active NEAR Projects copy

QUERY_STRING:

-- forked from MoDeFi / Top Active NEAR Projects @ https://flipsidecrypto.xyz/MoDeFi/q/h-AgFT67xwyn/top-active-near-projects -- forked from Top Active NEAR Projects @ https://flipsidecrypto.xyz/edit/queries/35d84233-d5ab-49c7-bda1-3fddca357855 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  round(100*count(distinct date_trunc(day, BLOCK_TIMESTAMP))/(current_date-'{{starting_date}}'::date+1),1)||' %'  as "Active Days %", count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by 3 desc  limit 1000



=======================================================================================
=======================================================================================
QUERY_NO: 302
QUERY_ID: b5c2fff8-935f-403d-aae0-79772434bc0e
QUERY_TITLE: Top Active NEAR Projects copy copy

QUERY_STRING:

-- forked from Top Active NEAR Projects copy @ https://flipsidecrypto.xyz/studio/queries/aeff9edc-bef5-4a9f-8cf5-0d0dc04d2edb -- forked from MoDeFi / Top Active NEAR Projects @ https://flipsidecrypto.xyz/MoDeFi/q/h-AgFT67xwyn/top-active-near-projects -- forked from Top Active NEAR Projects @ https://flipsidecrypto.xyz/edit/queries/35d84233-d5ab-49c7-bda1-3fddca357855 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  round(100*count(distinct date_trunc(day, BLOCK_TIMESTAMP))/(current_date-'{{starting_date}}'::date+1),1)||' %'  as "Active Days %", count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by 3 desc  limit 1000



=======================================================================================
=======================================================================================
QUERY_NO: 303
QUERY_ID: 869aba2b-c9c5-4d0d-b2bd-2101c46b6733
QUERY_TITLE: Top Active NEAR Projects copy

QUERY_STRING:

-- forked from MoDeFi / Top Active NEAR Projects @ https://flipsidecrypto.xyz/MoDeFi/q/h-AgFT67xwyn/top-active-near-projects -- forked from Top Active NEAR Projects @ https://flipsidecrypto.xyz/edit/queries/35d84233-d5ab-49c7-bda1-3fddca357855 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  round(100*count(distinct date_trunc(day, BLOCK_TIMESTAMP))/(current_date-'{{starting_date}}'::date+1),1)||' %'  as "Active Days %", count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by 3 desc  limit 1000



=======================================================================================
=======================================================================================
QUERY_NO: 304
QUERY_ID: aeff9edc-bef5-4a9f-8cf5-0d0dc04d2edb
QUERY_TITLE: Top Active NEAR Projects copy

QUERY_STRING:

-- forked from MoDeFi / Top Active NEAR Projects @ https://flipsidecrypto.xyz/MoDeFi/q/h-AgFT67xwyn/top-active-near-projects -- forked from Top Active NEAR Projects @ https://flipsidecrypto.xyz/edit/queries/35d84233-d5ab-49c7-bda1-3fddca357855 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  round(100*count(distinct date_trunc(day, BLOCK_TIMESTAMP))/(current_date-'{{starting_date}}'::date+1),1)||' %'  as "Active Days %", count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by 3 desc  limit 1000



=======================================================================================
=======================================================================================
QUERY_NO: 305
QUERY_ID: 514e4c14-afe5-42d1-9e3d-70b320577b23
QUERY_TITLE: sei EDGE maker volumes

QUERY_STRING:

with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ), stats as (
	SELECT
	  block_timestamp::date as ddate
	
	, CASE
	
	
	 WHEN trader = '0x0000000000000000000000000000000000000000' and subaccount='0x0000000000000000000000000000000000000000000000000000000000000001' THEN 'EDGE'
	
	
	 ELSE 'Normal'
	
	  END as label
	  , SUM(amount_usd) as total_volume
	
	 from FINAL
	WHERE 1=1
	  AND block_timestamp>='2024-08-14'
	  AND is_taker='false'
	GROUP BY ddate, label ) SELECT  * from stats ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 306
QUERY_ID: b444db76-74e0-494a-90ad-7734bf275ee5
QUERY_TITLE: [TERRA][Q166] Luna to IBC

QUERY_STRING:

--1-Osmosis, 16-Secret, 19- AXELAR, 17-INJECTIVE  SELECT
	 COUNT(tx_id)  as totals,
	MIN(block_timestamp) as min_date,
	CASE
		WHEN msg_value:source_channel='channel-16' THEN 'SECRET'
		WHEN msg_value:source_channel='channel-17' THEN 'INJECTIVE'
		WHEN msg_value:source_channel='channel-19' THEN 'AXELAR'
		ELSE 'OSMOSIS' END as cat,
	SUM(msg_value:token:amount/1e6) as amt,
	date_trunc('day', block_timestamp) as ddate
	--msg_value:token:denom as token from  terra.msgs WHERE
	(block_timestamp>='2021-10-21' AND block_timestamp<='2022-03-10')
	--block_timestamp>='2022-02-01'
	AND msg_value:"@type" = '/ibc.applications.transfer.v1.MsgTransfer'
	AND msg_value:source_channel IN ('channel-1','channel-16', 'channel-17','channel-19')
	AND msg_value:token:denom = 'uluna' --('uluna', 'uusd')
	AND msg_value:sender LIKE 'terra%%'
	AND tx_status = 'SUCCEEDED' GROUP BY ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 307
QUERY_ID: 894f28f4-3b45-4ab2-8633-49789ae03902
QUERY_TITLE: bluemove batch examples

QUERY_STRING:

select
	 COUNT(*) as total
	, version
	, event_resource from aptos.core.fact_events where 1=1
	AND event_resource IN ('BuyEvent', 'AcceptOfferCollectionEvent', 'AcceptOfferEvent')
	AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e' GROUP BY version, event_resource having total>1



=======================================================================================
=======================================================================================
QUERY_NO: 308
QUERY_ID: 5459e5bf-b502-4b54-8b46-bf824d2b9ebf
QUERY_TITLE: bluemovev2_events

QUERY_STRING:

SELECT
	 COUNT(*) as total
	, max(version) as example
	, event_resource
	 , event_module from aptos.core.fact_events where 1=1  AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' group by event_resource, event_module --TokenOfferFilledEvent, ListingFilledEvent, CollectionOfferFilledEvent



=======================================================================================
=======================================================================================
QUERY_NO: 309
QUERY_ID: 6ba44329-4667-49cb-8455-67aff73f2af5
QUERY_TITLE: [ENS][Q8] ENS users' domain distribution (chart)

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered' GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>=10 THEN 10  ELSE domains END as ndomains,
		COUNT(OWNER) as wallets from totals WHERE
	domains!=0 GROUP BY ndomains ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 310
QUERY_ID: 98ad5fb8-322c-4c2d-8be6-cf029660d805
QUERY_TITLE: airdrop claims sus

QUERY_STRING:

-- forked from airdrop claims @ https://flipsidecrypto.xyz/edit/queries/ff0bc89c-3b93-4ba8-9205-5b1eabee8510 with claimers as (
	SELECT
	
	min(block_timestamp) as min_dtime
	  , max(block_timestamp) as max_dtime
	  , SUM(events[0]:data:amount/1e8) as amount
	  , COUNT(version) as txns
	  , sender as wallet
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	
	--AND version = 3996983
	GROUP BY sender ) SELECT
	  COUNT(DISTINCT wallet) as claimers
	, txns
	, amount
	, MAX(wallet) as example_wallet from claimers where
	min_dtime>TO_TIMESTAMP(1666133400) GROUP BY amount, txns



=======================================================================================
=======================================================================================
QUERY_NO: 311
QUERY_ID: 1678a85b-566e-4187-b25c-5d07d45c8ab3
QUERY_TITLE: REPORT # 4

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM: https://platform.arkhamintelligence.com/visualizer/entity/0x62eE77BD57D4b5D148edDFa9C72B0DAcB655360c?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, 'OKX' as CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x62ee77bd57d4b5d148eddfa9c72b0dacb655360c')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 312
QUERY_ID: 7453ffd5-7166-4358-9468-cbf8bc72e67a
QUERY_TITLE: REPORT #2 Cluster Detail

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM : https://platform.arkhamintelligence.com/visualizer/entity/0x8317D071497dcAe0D2DA1D84dDae03F7AEdAa4B0?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x8317d071497dcae0d2da1d84ddae03f7aedaa4b0')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 313
QUERY_ID: c883062d-006a-457b-8db1-7f707c5677db
QUERY_TITLE: [Terra][Q169] Failed Transactions

QUERY_STRING:

with terra_txns as (
	SELECT
		COUNT(CASE WHEN tx_status='SUCCEEDED' THEN tx_id ELSE NULL END) as stotals,
		COUNT(CASE WHEN tx_status!='SUCCEEDED' THEN tx_id ELSE NULL END) as ftotals,
		COUNT(tx_id) as totals,
		---tx_status,
		date_trunc('month', block_timestamp) as ddate
	from  terra.transactions
	WHERE
		block_timestamp>='2020-10-01'
	GROUP BY ddate ORDER BY ddate ASC ) SELECT
	 ddate,
	(ftotals/totals)*100 as failure_rate,
	stotals as successful_txns,
	ftotals as failed_txns from terra_txns



=======================================================================================
=======================================================================================
QUERY_NO: 314
QUERY_ID: 5967917b-9154-4de6-805b-2c644457ee6a
QUERY_TITLE: airdrop claims sus details

QUERY_STRING:

-- forked from airdrop claims sus @ https://flipsidecrypto.xyz/edit/queries/98ad5fb8-322c-4c2d-8be6-cf029660d805 -- forked from airdrop claims @ https://flipsidecrypto.xyz/edit/queries/ff0bc89c-3b93-4ba8-9205-5b1eabee8510 with claimers as (
	SELECT
	
	block_timestamp
	  , events[0]:data:amount/1e8 as amount
	  , version as txn_id
	  , sender as wallet
	  , lead(amount) OVER (PARTITION BY wallet ORDER BY version ASC) as amount2
	  , lead(txn_id) OVER (PARTITION BY wallet ORDER BY version ASC) as txn_id2
	from aptos.core.fact_transactions
	where 1=1
	  AND payload_function = '0xcf8a27bb49491e65ad2ce1c48c098473e3340f45ed5a267a0d3ad8ee3eee5e35::claim::claim'
	  AND SUCCESS = TRUE
	
	--AND version = 3996983 ) SELECT
	  amount + amount2 as total
	, ARRAY_CONSTRUCT(amount , amount2) as claim_amounts
	, ARRAY_CONSTRUCT(txn_id , txn_id2) as tx_ids
	, wallet from claimers where 1=1
	AND block_timestamp>TO_TIMESTAMP(1666133400)
	AND amount2 IS NOT NULL order by total DESC



=======================================================================================
=======================================================================================
QUERY_NO: 315
QUERY_ID: b4939d7b-4a7a-4e18-a5db-ea8501b09205
QUERY_TITLE: [algo][118] FF liquidations Positions

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	COUNT(*) as total_liqs,
	SUM(POS_VOLUME_USD) as positions_closed_volume,
	SUM(COL_VOLUME_USD) as col_liq_volume,
	SUM(INCOME) as liq_profits,
	SUM(treasury_deposit) as treasury_deposits,
	POS_LIQ_ASSET_NAME as closed_position,
	date_trunc('day', htime) as dtime
	--COL_NAME as collateral from refine GROUP BY dtime, closed_position



=======================================================================================
=======================================================================================
QUERY_NO: 316
QUERY_ID: ff96b2ac-bda9-43e5-b091-3918764f44d1
QUERY_TITLE: SEI Transfers Abuse Filters

QUERY_STRING:

-- forked from Get data from previous query @ https://flipsidecrypto.xyz/edit/queries/d2676227-3299-41a8-bc56-6425d16fac64  /* The query id can be taken from the browser address bar when editing your target query */ with get_base_query AS ( -- Get data from target query SELECT
	value[0]::numeric as VOL_IN
	, value[1]::numeric as VOL_OUT
	, value[2]::numeric as VOL_DROP
	, value[3]::numeric as AMT_DROP
	, value[4]::numeric as TXNS
	, TO_TIMESTAMP(value[5]) as T_MIN
	, TO_TIMESTAMP(value[6]) as T_MAX
	, TO_TIMESTAMP(value[7]) as T_DROP
	, value[8]::string as USER
	 FROM (
	SELECT
	  livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1/latest-run') as response
	), lateral FLATTEN (input => response:data:data) ) , base_set as (
	SELECT
	  *
	FROM get_base_query
	 where 1=1
	  AND VOL_IN IS NOT NULL AND VOL_OUT IS NOT NULL
	  AND abs(vol_in-vol_out)<= 0.1*vol_in
	  AND vol_in>9000 ) SELECT * from base_set



=======================================================================================
=======================================================================================
QUERY_NO: 317
QUERY_ID: d662ead8-1422-4804-87f7-df68c6d07d98
QUERY_TITLE: quixotic-white copy

QUERY_STRING:

-- forked from tkvresearch / quixotic-white @ https://flipsidecrypto.xyz/tkvresearch/q/uOPQto1XMfYW/quixotic-white with list_nft as  (select * from
	
	 (values
	
	 ('The Bond Bears','0xf17bb82b6e9cc0075ae308e406e5198ba7320545'),
	
	 ('The Boo Bears','0x2c889a24af0d0ec6337db8feb589fa6368491146'),
	
	 ('The Baby Bears','0x9e629d779be89783263d4c4a765c38eb3f18671c'),
	
	 ('The Band Bears','0xb4e570232d3e55d2ee850047639dc74da83c7067'),
	
	 ('Bit Bears by Berachain','0x32bb5a147b5371fd901aa4a72b7f82c58a87e36d'),
	
	 ('Honey Comb','0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244'),
	
	 ('Yeetard NFTs','0x2e660787BcECCd39f67b8190A5bc4fc3Ad3B64F7'), --ARB
	
	 ('Smilee Beras','0x136798606E85fb4086001AB065e5298fa0c37904'), --ARB
	
	 ('HoneyGenesis','0x7c2f99C405fa3102519F2637f186C5A06C074a0F'), --ARB
	
	 ('The Proof of Junkie','0x84D4b330D4Cf092C783C7D18e94f67249d998fd0'), --ARB
	
	 ('BeraTone Founders Sailcloth','0x89B2249D7fBb30765d94C163929cd04b5Afa77E3'),
	
	 ('Tour de Berance','0x17798ba794AD94daD0b7d3f4b9BC2e9F6486d4b9'), --ARB
	
	 ('Hungrybera','0xaC59F7E7e5da0dC4f416A7aEfF7a49aC284f10Ca'), --ARB
	
	 ('Big Fat Beras','0xAF2A7Da72eb8bFC1c6A0B6b0217037E1C7eA8548'), --ARB
	
	 ('Beramonium Chronicles: Genesis','0xb44AdddBf9B19BCdd12F978Df8b36723488b9b8b'),
	
	 ('Beradelic','0x89562210581F9c60B73de7A512801513E13708ee'), --ARB
	
	 ('Beradeluna','0xe3244AE72c5cF9c06774AcC2ca836A01cb5d6f57'), --ARB
	
	 ('Bera Horses','0xf4DEd30B6ca5a6A40f56D9Fe066A9951571C6E3C'),
	
	 ('Beracid','0x67c7dCf406134688d1ffDd2EB761435E4A9A73BD'), --ARB
	
	 ('Bruvvprint','0x26A3C7BFE8C1a6deF5f70006e6a89a9f503fa362'), --ARB
	
	 ('The Bearet Yellens','0x6A19Fc5b5028eD2b33Fd254282b61B112B8D35d3'), --ARB
	
	 ('Printing BurrBeras','0x73f6409e5C919B6473fe6f3654de8fC79011b386'), --ARB
	
	 ('Fable Beras','0x06D7ce587bD94583070192caBc5AE3FC06D43A90'), --ARB
	
	 ('BeraPong Genesis','0xe5CA7a7E0510EF314172a7C22bA6fC128A2568e6'), --ARB
	
	 ('CubHub','0x648cc6AbCf7fe24afb76E6c15CDd9DfB41e9BcdB'), --ARB
	
	 ('Onikuma Genesis NFT','0x72f34929c2e92a722A133Ae3C8c5965355d03D8b'), --ARB
	
	 ('KUMAMON','0x06c3747B35f5C94EA99Be2dF6FD4704D6D7e4070'), --ARB
	
	 ('Berac','0x1C1Ac640ac1Cbe79fa9CF7cfaE9bF673fd3F1E87'), --ARB
	
	 ('BeracPoL','0x62C034992494Dccf11DBba8DFe0243DA24215157'), --ARB
	
	 ('BeracPOL2','0x2A2D56802ECB44EAC0110F76731981131219667c'), --ARB
	
	 ('BERABOYZ','0xe6F67000eCC765CB51d9a63D47Be94B0cBcBA8E2'), --ARB
	
	 ('Bera Punks','0xC46233dd3775c858A926B2B2d398BeA7CA69499c'), --ARB
	
	
	
	  ('NPC Beras','0x75D94aa8Ab3E433e2083E20023F51603028493a5'), --ARB
	
	 ('NarraZAI','0x48402E846260Da20607e94B3AffA339Efd0E1e4A'), --ARB
	
	 ('Chrono-Wizard Bear','0x3e27Dc6c103644E3df51BcfeFff40AFef137e277'), --ARB
	
	 ('Booga Beras','0x6Ba79f573EdFE305e7Dbd79902BC69436e197834'), --ARB
	
	 ('Happee Beras','0xebA343f241217eaBe4704ec6Ae85d2aB8Cf4c32a'), --ARB
	
	 ('PumpBera','0xA860e5dec1991E8AC5eE5B667BB861cE022be89F'), --ARB
	
	 ('OasisOpus','0x8DBBFD3B8aD320aB899a3f5c46b0b9231641C3Db'), --ARB
	
	
	
	  ('WagmiBera','0x762ad02A981562A591314d7a8a06CED6bE6ae271'), --ARB
	
	 ('Blue Beras','0xd3556DCC9f480C143af95EAdb90Ab6bd88122C08'), --ARB
	
	 ('Satori','0x1f8B07F995D4c8c9Ff8e45259f0cE5D4F7DB8Df6'), --ARB
	
	 ('Prets Bera','0x5554Cd9E90106d3bfab1454Bb138D45E828adeF0'), --ARB
	
	 ('Berautistics','0x3F979DDe509D2aedC99E9159f40e0D0D3E9DdB56'), --ARB
	
	 ('ROCKBERA NFT','0x1004b643edd6E4B95401B2eF222E27710b24f93f'), --arb
	
	 ('Jungle_Party','0x4fc0eC830DEFe185da6F9C621cc00C7832D6b72c'),
	
	 ('AZEx Bear NFT','0x29A751D2413d034500daB9a641EED841E365AB99'), --arb
	
	 ('Mantis Origins','0x372F820E2a401f946F629d9713886D88b66570F4'), --arb
	
	 ('Sumerian Beras by SumerMoney','0x071363D4cdf58d19b1D2c161631766dAF9c1FfFb'), --arb
	
	 ('Arebbies','0x0d935A27a16c35635e13aEe18E99BFE7ab5c1fc5'), --arb
	
	 ('The BeraVote Senate','0x350a8459297095E5be318a070C29787bd0B89B35') --arb
	
	 ) as l (collection_name,address) ), full_table as  (select * from ethereum.nft.ez_nft_sales where nft_address in (select lower(address) from list_nft) union all  select * from arbitrum.nft.ez_nft_sales where nft_address in (select lower(address) from list_nft)), max_date as  (select max(date(block_timestamp)) as datetime,
	
	  project_name from full_table group by 2) select count(distinct project_name) as collect_count,
	
	  round(min(avg_price),6) as min_price,
	
	  round(max(avg_price),1) as max_price from
	
	(select date(a.block_timestamp) as datetime,
	
	
	
	a.project_name,
	
	
	
	avg(a.PRICE) as avg_price
	  from full_table a join max_date b
	
	
	  on date(a.block_timestamp) = b.datetime
	
	
	
	and
	
	
	
	  a.project_name = b.project_name
	  group by 1,2)



=======================================================================================
=======================================================================================
QUERY_NO: 318
QUERY_ID: ca700132-43ec-4ce6-8914-67e04041987c
QUERY_TITLE: [Terra][Q166] IBC Txns Base

QUERY_STRING:

--1-Osmosis, 16-Secret, 19- AXELAR, 17-INJECTIVE  with luna_prices as (
	SELECT
	  date_trunc('day', block_timestamp) as ddate,
	  AVG(price_usd) as price_usd
	from terra.oracle_prices
	WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		AND block_timestamp>='2021-10-21'
	 GROUP by ddate ), daily_stats as (
	SELECT
	
	COUNT(tx_id)  as totals,
	  CASE
	 
	WHEN msg_value:source_channel='channel-16' THEN 'SECRET'
	 
	WHEN msg_value:source_channel='channel-17' THEN 'INJECTIVE'
	 
	WHEN msg_value:source_channel='channel-19' THEN 'AXELAR'
	 
	ELSE 'OSMOSIS' END as cat,
	  SUM(msg_value:token:amount/1e6) as amt,
	CASE
			WHEN msg_value:token:denom = 'uluna' THEN 'uluna' ELSE 'uusd' END as token,
	  date_trunc('day', block_timestamp) as ddate
	  --msg_value:token:denom as token
	from  terra.msgs
	WHERE
	  (block_timestamp>='2021-10-21' AND block_timestamp<='2022-03-10')
	  --block_timestamp>='2022-02-01'
	  AND msg_value:"@type" = '/ibc.applications.transfer.v1.MsgTransfer'
	  AND msg_value:source_channel IN ('channel-1','channel-16', 'channel-17','channel-19')
	  AND msg_value:token:denom IN ('uluna', 'uusd')
	  AND msg_value:sender LIKE 'terra%%'
	  AND tx_status = 'SUCCEEDED'
	GROUP BY ddate, cat, token ), combo as (
	SELECT
		ds.ddate as dday,
		SUM(totals) as txn_totals,
		SUM (CASE
	
			WHEN token='uluna' THEN amt * p.price_usd
				ELSE amt END ) as usd_amount,
		cat
	from daily_stats ds LEFT JOIN luna_prices p
	ON ds.ddate=p.ddate
	GROUP BY dday, cat ), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	from table (generator(rowcount => 764)) ), samples as (
	SELECT 
	DISTINCT CAT
	from combo
	LIMIT 4 ), base as (
	  select ddate, CAT, 0 as backup
	  from dates
	  CROSS JOIN (
	 
	SELECT CAT from samples
	  ) ), running as (
	SELECT
		ddate,
		b.cat as chain,
		backup, usd_amount,
		coalesce(txn_totals, backup) as txn_totals,
		coalesce(usd_amount, backup) as usd_amounts,
	CASE WHEN txn_totals!=0 THEN round(usd_amounts/txn_totals, 2) ELSE NULL END  as avg_usd_txn,
		ROUND(SUM(usd_amounts) OVER (PARTITION by chain ORDER BY  ddate ASC), 2) as usd_amount_running,
		ROUND(AVG(avg_usd_txn) OVER (PARTITION by chain ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW), 2) as avg_usd_7D_MA
	 from base b LEFT JOIN combo
	ON b.ddate = combo.dday AND b.cat = combo.cat
	WHERE
		(ddate>='2022-01-20' AND ddate<'2022-03-10') ) SELECT * from running



=======================================================================================
=======================================================================================
QUERY_NO: 319
QUERY_ID: 736a80bb-345c-4aa0-b6af-aadc933182a0
QUERY_TITLE: [Terra] 52 Pickup counts

QUERY_STRING:

with prices as (
	SELECT
		date_trunc('day', block_timestamp) as ddate,
		price_usd as price,
			CASE
			WHEN price>52 THEN 'Above $52'
			ELSE 'Below/= $52' END as status
	from terra.oracle_prices
	WHERE
		block_timestamp>='2021-11-04'
		AND symbol = 'LUNA' AND date_part(hour,block_timestamp) = 23
		ORDER BY ddate ASC ) SELECT
	COUNT(*) as totals,
	status from prices GROUP BY status



=======================================================================================
=======================================================================================
QUERY_NO: 320
QUERY_ID: 64b4dc9d-89a5-43ba-9101-5a0b404aea46
QUERY_TITLE: SEI Transfers Claimers Actions

QUERY_STRING:

-- forked from SEI Transfers Abuse @ https://flipsidecrypto.xyz/edit/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1 -- forked from SEI transfers/bridging of claimers FIXED @ https://flipsidecrypto.xyz/edit/queries/8f764723-2027-4da8-a983-b44379113127 with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where hourly >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address ) ,  merge_txns as (
	SELECT
	
	SUM(CASE WHEN cat='in' THEN volume ELSE null END) as vol_in
	  , SUM(CASE WHEN cat='out' THEN volume ELSE null END) as vol_out
	  , SUM(CASE WHEN cat='drop' THEN volume ELSE NULL END) as vol_drop
	  , SUM(CASE WHEN cat='drop' THEN amount ELSE NULL END) as amt_drop
	  , COUNT(DISTINCT tx_id) as txns
	  , MIN(block_timestamp) as t_min
	  , MAX(block_timestamp) as t_max
	  , MIN(CASE WHEN cat='drop' THEN block_timestamp ELSE NULL END) as t_drop
	  , user
	from all_bridges
	GROUP BY user ) SELECT
	  CASE WHEN VOL_IN IS NOT NULL AND VOL_OUT IS NULL THEN 'still deployed'
	
	  WHEN VOL_IN IS NULL AND VOL_OUT IS NULL THEN 'data insufficient'
	
	  WHEN abs(vol_in-vol_out)<= 0.1*vol_in THEN 'bridged out entirely'
	
	  ELSE 'partially still deployed' END as cat
	, COUNT(distinct user) as users
	
	  from merge_txns where 1=1
	AND vol_drop IS NOT NULL
	 GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 321
QUERY_ID: 328c0b59-6002-425b-9a22-a6272e226a83
QUERY_TITLE: [Terra] 52 pickup

QUERY_STRING:

-- https://stackoverflow.com/questions/17839015/finding-the-longest-streak-of-wins with prices as (
	SELECT
		date_trunc('day', block_timestamp) as ddate,
		price_usd as price,
			CASE
			WHEN price>52 THEN TRUE
			ELSE FALSE END as status
	from terra.oracle_prices
	WHERE
		block_timestamp>='2021-11-04'
		AND symbol = 'LUNA' AND date_part(hour,block_timestamp) = 23
		ORDER BY ddate ASC ), new_streaks as (
	select
		ddate,
		status,
		case
			when status = TRUE and lag(status) over (order by ddate) = FALSE then 1 
			else 0 end new_streak
	from prices ), streak_no as (
	select
		ddate,
		sum(new_streak) over (order by ddate) streak_no
	from new_streaks 
	where
		status = TRUE ), refine as (
	SELECT
		*,
		row_number() over (PARTITION BY streak_no ORDER BY ddate) as days
	from streak_no ) SELECT 
	coalesce(days, 0) as streak_days,
	p.ddate,
	p.price as closing_price,
		52 as "$52 Level",
	p.status from prices p LEFT JOIN refine r ON r.ddate=p.ddate ORDER BY p.ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 322
QUERY_ID: 5dd7df9c-7a8d-4cfc-bcdb-9207cc7f89e6
QUERY_TITLE: dist  Active NEAR Projects Over Time copy

QUERY_STRING:

-- forked from MoDeFi / dist  Active NEAR Projects Over Time @ https://flipsidecrypto.xyz/MoDeFi/q/LCi6nEmIJamS/dist-active-near-projects-over-time -- forked from dist  Active NEAR Projects Over Time copy @ https://flipsidecrypto.xyz/edit/queries/65c3d994-da5c-4366-9ee9-c34043ba02e7 with near_projects as
	
	(select ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	  from near.core.dim_address_labels
	  where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null
	
	), projects_events as (
	  select BLOCK_TIMESTAMP, SIGNER_ID, METHOD_NAME, RECEIVER_ID, ADDRESS_NAME, PROJECT_NAME, LABEL_TYPE, TX_HASH, DEPOSIT/1e24 as Volume
	  from near.core.fact_actions_events_function_call
	  join near_projects
	  on RECEIVER_ID=ADDRESS
	  where RECEIPT_SUCCEEDED=true
	  ) select PROJECT_NAME as "Project",  count(*) as "Contract Calls",  count(distinct tx_hash) as "Transaction",
	count(distinct SIGNER_ID) as "Users", sum(volume) as "Volume ($NEAR)",  avg(volume) as "Average Volume ($NEAR)" from projects_events where BLOCK_TIMESTAMP>='{{starting_date}}' group by 1 order by "Users" desc  limit 10



=======================================================================================
=======================================================================================
QUERY_NO: 323
QUERY_ID: 1cc742f1-7c91-4921-b204-3ffaffd6043d
QUERY_TITLE: [NEAR][2023] Active Stakers over Time

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
	  , 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  datediff('day', min_dtime, coalesce(max_dtime, CURRENT_DATE)) as tstake
	  , staker
	  , min_dtime
	  , CASE WHEN cur_stake<=0.001 THEN 'inactive' ELSE 'active' END as CAT
	from stakers ) SELECT
	 COUNT(DISTINCT staker) as stakers
	, trunc(min_dtime, 'day') as dtime from refine WHERE CAT = 'active' GROUP BY dtime



=======================================================================================
=======================================================================================
QUERY_NO: 324
QUERY_ID: 0a5d8ff7-d6f9-49a7-8963-ca0fd074d277
QUERY_TITLE: blitz EDGE maker volumes

QUERY_STRING:

with stats as (
	SELECT
	  block_timestamp::date as ddate
	
	, CASE
	
	
	 WHEN trader = '0x0000000000000000000000000000000000000000' and subaccount='0x0000000000000000000000000000000000000000000000000000000000000001' THEN 'EDGE'
	
	
	 ELSE 'Normal'
	
	  END as label
	  , SUM(amount_usd) as total_volume
	
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-08-14'
	  AND is_taker='false'
	GROUP BY ddate, label ) SELECT  * from stats ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 325
QUERY_ID: 98a86d5e-6822-4a2d-8f35-cbe7b50b9c67
QUERY_TITLE: sei base dailies

QUERY_STRING:

-- forked from sei base @ https://flipsidecrypto.xyz/studio/queries/42151db0-dc24-449d-ab7a-fb2ab0414732 with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	--https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	--Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e') --Offchain EXchange Contract
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ) , oi_latest as (
	WITH api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  'https://archive.sei-prod.vertexprotocol.com/v2/contracts'
	
	
	
	 )
	
	
	) :data AS response
	)
	,
	market_stats AS (
	
	 SELECT
	
	
	  DATE_TRUNC('hour', SYSDATE()) AS HOUR,
	
	
	  f.value :base_currency :: STRING AS base_currency,
	
	
	  f.value :base_volume :: FLOAT AS base_volume,
	
	
	  f.value :contract_price :: FLOAT AS contract_price,
	
	
	  f.value :contract_price_currency :: STRING AS contract_price_currency,
	
	
	  f.value :funding_rate :: FLOAT AS funding_rate,
	
	
	  f.value :index_price :: FLOAT AS index_price,
	
	
	  f.value :last_price :: FLOAT AS last_price,
	
	
	  f.value :mark_price :: FLOAT AS mark_price,
	
	
	  TRY_TO_TIMESTAMP(
	
	
	
	
	f.value :next_funding_rate_timestamp :: STRING
	
	
	  ) AS next_funding_rate_timestamp,
	
	
	  f.value :open_interest :: FLOAT AS open_interest,
	
	
	  f.value :open_interest_usd :: FLOAT AS open_interest_usd,
	
	
	  f.value :price_change_percent_24h :: FLOAT AS price_change_percent_24h,
	
	
	  f.value :product_type :: STRING AS product_type,
	
	
	  f.value :quote_currency :: STRING AS quote_currency,
	
	
	  f.value :quote_volume :: FLOAT AS quote_volume,
	
	
	  f.key AS ticker_id,
	
	
	  SYSDATE() AS inserted_timestamp
	
	 FROM
	
	
	  api_pull A,
	
	
	  LATERAL FLATTEN(
	
	
	
	
	input => response
	
	
	  ) AS f
	)
	
	SELECT SUM(OPEN_INTEREST_USD) as oi_total from market_stats ) SELECT  date_trunc('day', block_timestamp) AS day,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'spot' THEN trader END) AS distinct_spot_traders,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'perp' THEN trader END) AS distinct_perp_traders,
	
	
	COUNT(DISTINCT trader) AS distinct_total_traders,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'spot' THEN tx_hash END) AS distinct_spot_txns,
	
	
	--COUNT(DISTINCT CASE WHEN label = 'perp' THEN digest END) AS distinct_perp_txns,
	
	
	COUNT(DISTINCT digest) AS distinct_total_trades,
	
	
	--SUM(CASE WHEN (label = 'spot' AND is_taker=TRUE) THEN amount_usd ELSE 0 END) AS total_amount_spot,
	
	
	SUM(CASE WHEN (is_taker=TRUE) THEN amount_usd ELSE 0 END) AS total_amount_perp,
	
	
	--SUM(CASE WHEN is_taker=TRUE THEN amount_usd ELSE 0 END) AS total_amount_both,
	
	
	--MAX(oi_total) as oi_total FROM FINAL LEFT JOIN oi_latest on 1=1  GROUP BY day ORDER BY day ASC



=======================================================================================
=======================================================================================
QUERY_NO: 326
QUERY_ID: a59b97ee-aac8-49c1-b744-1016642fee19
QUERY_TITLE: [Algo] Tinyman1.1 Popular Pools FAIL

QUERY_STRING:

with tinyman_users as (
	  SELECT
	address, asset_name, asset_id,
	
			amount
	
	from algorand.account_asset
	
	WHERE
	
		asset_name LIKE '%TinymanPool1.1%' ), tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), combo_groups as (
	SELECT tx_group_id, tx_id, tx_type
		from algorand.payment_transactions
		WHERE
			AND tx_group_id IN ( SELECT tx_group_id  from tinyman_txns )
		UNION ALL
	SELECT tx_group_id, tx_id, tx_type
		from algorand.application_call_transaction
		WHERE
			AND tx_group_id IN ( SELECT tx_group_id  from tinyman_txns )
		UNION ALL
	SELECT tx_group_id, tx_id, tx_type
		from algorand.asset_transfer_transaction
		WHERE
			AND tx_group_id IN ( SELECT tx_group_id  from tinyman_txns )
	 ), /* SELECT
	tx_id,
			tx_group_id,
			asset_id,
		sender,
			asset_receiver as receiver,
			TX_MESSAGE:txn:aamt/1e6 as asset_amount from algorand.asset_transfer_transaction WHERE
		asset_receiver IN (	SELECT address as asset_receiver from tinyman_users )
		AND asset_id IN ( SELECT asset_id  from tinyman_users  )
		AND tx_group_id IN ( SELECT tx_group_id  from tinyman_txns )
	AND TX_MESSAGE:lsig IS NOT NULL LIMIT 10 */



=======================================================================================
=======================================================================================
QUERY_NO: 327
QUERY_ID: 7906c642-7d7c-4112-9c77-98e8f5f44cb7
QUERY_TITLE: [algo] Tinyman Swaps ( By TXN counts)

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
				COUNT(DISTINCT tx_group_id) as total_txns,
	
	
		token_id,
	 
		asset_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.token_id = ass.asset_id
	  WHERE
	
		totals = 4 AND algo_amount IS NOT NULL
	  GROUP BY token_id,asset_name ORDER BY total_txns DESC
	  LIMIT 10 ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 328
QUERY_ID: 91182756-d094-4e41-bf24-570339231032
QUERY_TITLE: [ALGO][Q35] DEXs - Top 10 Popular ASAs

QUERY_STRING:

with base as (
	SELECT
		COUNT(DISTINCT tx_group_id) as total_swaps,
		COUNT(DISTINCT swapper) as unique_wallets,
		swap_to_asset_id as swap_to,
		swap_program as app
	from algorand.swaps
	WHERE
		(block_timestamp>='2022-01-01' AND block_timestamp<='2022-03-20')
		AND swap_to_asset_id!=0
		AND swap_from_amount>0
	AND swap_to_amount>0
	GROUP BY swap_to, app ), refine as (
	SELECT
	  asset_name,
	  total_swaps,
	  unique_wallets,
	  app,
	  sum(total_swaps) OVER (Partition by asset_name) as swaps_overall
	from base b LEFT JOIN algorand.asset a ON b.swap_to = a.asset_id
	ORDER BY swaps_overall DESC ) SELECT
	*,
	dense_rank() OVER ( ORDER BY swaps_overall DESC) as rno from refine qualify rno<=10



=======================================================================================
=======================================================================================
QUERY_NO: 329
QUERY_ID: f0f762e4-e88d-4077-80ff-62c94a506c95
QUERY_TITLE: [Algo][Q1] Top ASAs List

QUERY_STRING:

with top_txns as (
	  SELECT
	 
	COUNT(TX_ID) as totals,
	 
	asset_id
	  from algorand.transactions
	WHERE
		asset_id!=0 AND asset_id IS NOT NULL
	  GROUP BY asset_id ORDER BY totals DESC
	  LIMIT 20 ), top_txns_final as (
	SELECT totals, t1.asset_id, t2.asset_name
	  from top_txns as t1
	  LEFT JOIN algorand.asset as t2
	  ON t1.asset_id = t2.asset_id
	  ORDER BY totals DESC ), top_holders as (
	SELECT
	COUNT(DISTINCT address) as holders,
	asset_id, asset_name
	  from algorand.account_asset
	  WHERE
	 
	asset_closed = FALSE
	 
	AND frozen = FALSE
	  GROUP BY asset_id, asset_name ORDER BY holders DESC
	  LIMIT 20 ), mix as (
	  SELECT asset_id, asset_name, '1' as holders, NULL as txns
	  from top_holders
	
	
	 UNION
	
	
	 SELECT asset_id, asset_name, NULL as holders, '1' as txns
	  from top_txns_final
	  ),
	
	
	 top_asa as (
	  SELECT asset_name, MAX(ASSET_ID) as asset_id, MAX(holders) as holders, MAX(txns) as txns from mix
	  GROUP BY asset_name ) SELECT
	asset_name,
			asset_id,
		CASE
	WHEN holders=1 AND txns =1 THEN 'Both Top Holders & TXNs'
				WHEN holders=1 THEN 'Top Holders'
				ELSE 'Top TXNs'
					END as CRITERIA
		from top_asa



=======================================================================================
=======================================================================================
QUERY_NO: 330
QUERY_ID: ab82f35d-704e-4ce9-9f20-f7d7b72c5732
QUERY_TITLE: nft_sales_bluemove_v1_buyevents

QUERY_STRING:

with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , --getting the exact count of sales in a batch/txn base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , --maintaining the sales count as well as the total event count aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , -- depending on the counts, we can deduce the type of NFT being traded -- 8-> implies NFT has a cost + royalty + platform fee -- 6-> cost+platform fee only, no royalty -- 4-> negligible cost/almost zero with no royalty/platform fee labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , -- split up the events of the transactions using the anchor groups -- get accurate info that is lacking in the BuyEvent for each group/sale, using relative index position within the group sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) SELECT  * from sales limit 100



=======================================================================================
=======================================================================================
QUERY_NO: 331
QUERY_ID: 00a51ac5-18ea-4924-8055-3b0b96de933e
QUERY_TITLE: odd-case dex_swaps w/ Hippo Aggregator

QUERY_STRING:

with base as (
	SELECT * from  aptos.defi.ez_dex_swaps
	WHERE version = 228615582
	ORDER BY event_index ASC  ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 332
QUERY_ID: e3a20124-448b-4538-83e4-09e33a37ea31
QUERY_TITLE: [ALGO][Q77] Top Purchasers by NFTs Purchased

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	coalesce(amount,0) as amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), top10 as (
	SELECT
		buyer as wallet,
		SUM(amount) as algo_spent,
		COUNT(tx_group_id) as NFT_purchases
	from all_purchases
	GROUP BY wallet ORDER BY NFT_purchases DESC
	LIMIT 10 ) SELECT
	 *,
	concat(substr(wallet,0,4), '...', substr(wallet, len(wallet)-3, len(wallet))) as wallet_trunc from top10



=======================================================================================
=======================================================================================
QUERY_NO: 333
QUERY_ID: d7f55cd1-eef3-4779-afd4-f9f9c7a505fb
QUERY_TITLE: Contracts base

QUERY_STRING:

with base as (
	SELECT tx_receiver as contract, a.block_timestamp, tx
	from near.core.fact_actions_events a
	
	LEFT JOIN near.core.fact_transactions t ON t.tx_hash = a.tx_hash
	where action_name = 'DeployContract' ), refine as(
	SELECT
	COUNT(DISTINCT contract) as totals,
		COUNT(contract) as total_deployments
	from base ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 334
QUERY_ID: 2692a88b-7545-4653-91c6-f74eb382d9a8
QUERY_TITLE: GMX V2 Orders

QUERY_STRING:

-- forked from GMX V1 @ https://flipsidecrypto.xyz/edit/queries/7d948c82-5528-4201-949d-7bfee959f183 with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp>'2024-04-01'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS' ) , orders_created as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG
	  , DECODED_LOG:"eventData"[0][0][0][1] as account
	  , DECODED_LOG:"eventData"[0][0][4][1] as market
	  , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	  , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	  , DECODED_LOG:"eventData"[1][0][2][1] as size_delta_usd  --div by 1e30
	  , DECODED_LOG:"eventData"[4][0][0][1] as key
	  , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	  , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as side
	  , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	from arbitrum.core.ez_decoded_event_logs
	 WHERE 1=1
	
	AND block_timestamp>'2024-04-01'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderCreated'
	  AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS' ) SELECT
	 c.block_timestamp
	, account
	, market
	, order_type
	, side
	, size_delta_usd/1e30 as size_delta_usd
	, SYMBOL as collateral_token
	, init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	, execution_fee_eth
	, ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	, c.DECODED_LOG from orders_created c  LEFT JOIN orders_exec e ON c.key=e.ex_key LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address WHERE 1=1
	AND exec=1 LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 335
QUERY_ID: 70771449-6a97-4e3e-be51-6315eff8ec83
QUERY_TITLE: kwenta - accounts

QUERY_STRING:

SELECT
	 DECODED_LOG:creator as user
	, DECODED_LOG:account as sub_account from optimism.core.fact_decoded_event_logs WHERE 1=1
	AND contract_address = lower('0x8234F990b149Ae59416dc260305E565e5DAfEb54')
	AND event_name = 'NewAccount' LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 336
QUERY_ID: dea66515-1dd5-4bd5-98f8-d93ddaf0c0b0
QUERY_TITLE: [algo] Tinyman Top LP mints

QUERY_STRING:

with base as (
	SELECT
		CASE
			WHEN tx_message:txn:apaa[0] = 'bWludA==' THEN 'mint'
			ELSE 'burn' END as types,
		get(tx_message:txn:apas, array_size(tx_message:txn:apas)-1) as lp_token,
			block_timestamp as bt,
			tx_id, tx_group_id
	FROM algorand.application_call_transaction 
	WHERE
		tx_message:txn:apaa[0] IN ('bWludA==', 'YnVybg==') -- mint, burn
		AND app_id = 552635992 ) SELECT
	COUNT(DISTINCT tx_group_id) as totals,
		lp_token, replace(asset_name,'TinymanPool1.1 ') as asset_name from base b LEFT JOIN algorand.asset ass ON b.lp_token = ass.asset_id WHERE
	types = 'mint' GROUP BY lp_token, asset_name ORDER BY totals DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 337
QUERY_ID: eecf7a33-1b07-4979-b2f9-afd8475e791f
QUERY_TITLE: [algo] Tinyman1.1 Top LP Pools by Number of Burns

QUERY_STRING:

with base as (
	SELECT
		CASE
			WHEN tx_message:txn:apaa[0] = 'bWludA==' THEN 'mint'
			ELSE 'burn' END as types,
		get(tx_message:txn:apas, array_size(tx_message:txn:apas)-1) as lp_token,
			block_timestamp as bt,
			tx_id, tx_group_id
	FROM algorand.application_call_transaction 
	WHERE
		tx_message:txn:apaa[0] IN ('bWludA==', 'YnVybg==') -- mint, burn
		AND app_id = 552635992 ) SELECT
	COUNT(DISTINCT tx_group_id) as totals,
		lp_token, replace(asset_name,'TinymanPool1.1 ') as asset_name from base b LEFT JOIN algorand.asset ass ON b.lp_token = ass.asset_id WHERE
	types = 'burn' GROUP BY lp_token, asset_name ORDER BY totals DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 338
QUERY_ID: 7d948c82-5528-4201-949d-7bfee959f183
QUERY_TITLE: GMX V1 Orders

QUERY_STRING:

SELECT
	 block_timestamp
	, DECODED_LOG:account as account
	, DECODED_LOG:index as market
	, event_name as order_type
	, CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as side
	, DECODED_LOG:"sizeDelta"/1e30 as size_delta_usd
	, SYMBOL as collateral_token
	, COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	, DECODED_LOG:"collateralDelta"/pow(10, decimals) as test
	, DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	, ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	, DECODED_LOG
	--, DECODED_LOG:path from arbitrum.core.ez_decoded_event_logs l LEFT JOIN arbitrum.core.dim_contracts con  ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address WHERE 1=1
	 --AND tx_hash='0xab7c9a211d7d705144b19ed43c95ee3b0a2b1ded81ea801bc8830857c4ccd544'
	AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	AND EVENT_NAME ILIKE 'Create%'
	AND tx_status = 'SUCCESS' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 339
QUERY_ID: f14deb38-8f95-4a63-83e8-d8966900bd5a
QUERY_TITLE: [ALGO][Q19] Commit %age breaakdown by Wallet Size

QUERY_STRING:

with base as (
	SELECT
	
			sender,
		tx_id,
			block_timestamp,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender order by block_id asc))/1e6 as final_commit,
			last_value(block_timestamp) OVER (PARTITION BY sender order by block_id asc) as final_bs,
			CASE WHEN num_value IS NULL THEN msg ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER ='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY'
		AND (block_timestamp>='2021-12-24' AND block_timestamp<'2022-01-08') ), refine as (
	SELECT
	MAX(date_trunc('day', final_bs)) as ddate,
			MAX(final_commit)  as fcommit, sender from base GROUP BY sender ), pre_final as (
	SELECT
	sender,
				ddate,
			fcommit,
				balance,
				CASE
	WHEN balance<1
			THEN '<1'
	
					WHEN balance>=1
		AND balance<10
			THEN '1-10'
	
						WHEN balance>=10
		AND balance<100
		THEN '10-100'
	
						WHEN balance>=100
		AND balance<1000
		THEN '100-1K'
	
					WHEN balance>=1000
		AND balance<10000
		THEN '1K-10k'
	
						WHEN balance>=10000
	AND balance<100000
		THEN '10K-100k'
	
					WHEN balance>=100000
	AND balance<1000000
	THEN '100K-1M'
	
						WHEN balance>=1000000
	AND balance<10000000
	THEN '1M-10M'
	
					WHEN balance>=10000000
	AND balance<100000000
	THEN '10M-100M'
	
					WHEN balance>=100000000 AND balance<1000000000
	THEN '100M-1B'
	
						WHEN balance>=1000000000
	
					THEN '>=1B'
	
						END as category
	from refine
		LEFT JOIN algorand.account acc ON refine.sender = acc.address
	WHERE
		balance>=fcommit ) SELECT  AVG((fcommit/balance) * 100) as avg_pct,
		COUNT(DISTINCT sender) as wallets,
			category from pre_final WHERE
	balance!=0 GROUP BY category



=======================================================================================
=======================================================================================
QUERY_NO: 340
QUERY_ID: 170b1806-c7e2-4972-b535-8ad6edc3b5f7
QUERY_TITLE: Pika

QUERY_STRING:

with tuples as (
	 SELECT
		ARRAY_CONSTRUCT(398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 331, 329, 326, 324, 321, 319, 317, 315, 313, 311, 309, 307, 305, 303, 302, 300, 298, 296, 294, 292, 290, 288, 287, 285, 283, 281, 280, 278, 276, 275, 273, 272, 270, 269, 267, 266, 265, 263, 262, 260, 259, 258, 256, 255, 254, 252, 251, 250, 248, 247, 121, 117, 114, 112, 110, 107, 105, 104, 102, 100, 98, 96, 95, 93, 91, 89, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0, 51, 51,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,247.0,248.0,250.0,251.0,252.0,253.0,254.0,256.0,257.0,258.0,260.0,261.0,262.0,264.0,265.0,267.0,268.0,270.0,271.0,273.0,275.0,276.0,278.0,280.0, 281, 283,285.0,287.0,288.0,290.0,292.0,294.0,296.0,298.0,300.0,302.0,303.0,305.0,306.0,308.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0, 398, 398,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0,398.0, 398) as span0
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,6.0,9.0,11.0,14.0,16.0,18.0,20.0,21.0,23.0,25.0,26.0,28.0,30.0,30.0,32.0,33.0,35.0,36.0,38.0,39.0,41.0,41.0,43.0,44.0,30.0,19.0,16.0,14.0,12.0,11.0,9.0,9.0,8.0,8.0,7.0,5.0,5.0,5.0,5.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,3.0,19.0,30.0,6.0,4.0,4.0,4.0,4.0,3.0,3.0,3.0,4.0,4.0,3.0,3.0,4.0,4.0,2.0,5.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0, 2, 2,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0, 2, 2,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0, 2, 2,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22, 12, 4,4.0,5.0,6.0,6.0,7.0,8.0,8.0,10.0,11.0,12.0,14.0,17.0,18.0,20.0,22.0,28.0,39.0,38.0,37.0,35.0,34.0,32.0,31.0,30.0,28.0,26.0,24.0,24.0,22.0,20.0,18.0,16.0,14.0,13.0,11.0,10.0,8.0,7.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span1
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,64.0,63.0,63.0,63.0,63.0,63.0,63.0,63.0,64.0,64.0,64.0,65.0,65.0,65.0,66.0,66.0,67.0,67.0,68.0,68.0,69.0,69.0,70.0,70.0,71.0,5.0,25.0,30.0,34.0,36.0,39.0,41.0,43.0,44.0,46.0,48.0,50.0,52.0,52.0,54.0,55.0,56.0,58.0,58.0,59.0,60.0,61.0, 61, 63,64.0,106.0,98.0,22.0,33.0,40.0,47.0,52.0,58.0,32.0,32.0,31.0,32.0,33.0,34.0,34.0,35.0,35.0,30.0,1.0,3.0,8.0,12.0,19.0,72.0,72.0,72.0,71.0,72.0,72.0,73.0,72.0,72.0,72.0,72.0,72.0,73.0,73.0,74.0,74.0,75.0,76.0,77.0,78.0,79.0,81.0,84.0,234.0,233.0,233.0,231.0,231.0,230.0,131.0,127.0,125.0,124.0,123.0,121.0,121.0,120.0,119.0,119.0,119.0,118.0,118.0,118.0,118.0,119.0,119.0,119.0,120.0,120.0,121.0,122.0,123.0,125.0,126.0,130.0,206.0,206.0,206.0,206.0,206.0,206.0,207.0,207.0,207.0,207.0,207.0,207.0,207.0,207.0,208.0,208.0,208.0,207.0,209.0,69.0,65.0,61.0,59.0,58.0,57.0,56.0,55.0,54.0,53.0,53.0,52.0,51.0,50.0,50.0,49.0,49.0,49.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,47.0,48.0,48.0,48.0,48.0,48.0, 49, 49,50.0,50.0,51.0,52.0,53.0,54.0,55.0,57.0,209.0,209.0,209.0,209.0,208.0,208.0,208.0,208.0,208.0,208.0,208.0,208.0,209.0,209.0,209.0,209.0,208.0,208.0,208.0,207.0,207.0,207.0,128.0,125.0,124.0,122.0,122.0,121.0,121.0,120.0,120.0,120.0,119.0,119.0,119.0,118.0,118.0,119.0,119.0,120.0,120.0,121.0,122.0,123.0,125.0,126.0,129.0,78.0,77.0,76.0,74.0,73.0,72.0,72.0,71.0,71.0,70.0,70.0,69.0,69.0,70.0,70.0,70.0,69.0,69.0,69.0,69.0,69.0,69.0,69.0,69.0,69.0,70.0,69.0,69.0,69.0,70.0,70.0,71.0,72.0, 72, 73,74.0,75.0,77.0,78.0,81.0,159.0,157.0,156.0,154.0,152.0,150.0,148.0,146.0,143.0,141.0,138.0,136.0,133.0,130.0,126.0,123.0,120.0,116.0,112.0,108.0,103.0,99.0,95.0,90.0,86.0,82.0,79.0,75.0,72.0,67.0,63.0,60.0,56.0,52.0,47.0,42.0,36.0,31.0,23.0,14.0,172.0,183.0,51.0,50.0,48.0,46.0,45.0,44.0,42.0,40.0,38.0,36.0,34.0,31.0,27.0,24.0,22.0,18.0,11.0,89.0,89.0,88.0,88.0,88.0,88.0,87.0,87.0,87.0,87.0,87.0,86.0,86.0,86.0,86.0,86.0,86.0,85.0,85.0,85.0,85.0,85.0,85.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span2
		, ARRAY_CONSTRUCT(0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,11.0,2.0,2.0,1.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,1.0,2.0,1.0,2.0,2.0,2.0,3.0,2.0,10.0,7.0,6.0,6.0,7.0,7.0,6.0,11.0,15.0,17.0,19.0,21.0,23.0,24.0,3.0,3.0,6.0,8.0,8.0,17.0,5.0,30.0,30.0,30.0,31.0,31.0, 31, 30,30.0,30.0,30.0,29.0,29.0,28.0,27.0,26.0,25.0,24.0,22.0,20.0,18.0,16.0,12.0,6.0,2.0,2.0,2.0,3.0,2.0,2.0,5.0,14.0,18.0,11.0,11.0,12.0,11.0,12.0,13.0,13.0,13.0,14.0,14.0,15.0,16.0,16.0,19.0,29.0,28.0,27.0,25.0, 23, 21,18.0,15.0,8.0,1.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,6.0,11.0,5.0,4.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,1.0,2.0,2.0,1.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,5.0,20.0,14.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,2.0,2.0,2.0,12.0,17.0,13.0,13.0,13.0,14.0,13.0,14.0,14.0,13.0,14.0,15.0,15.0,16.0,17.0,17.0,29.0,28.0,27.0,25.0,23.0,21.0,18.0,15.0,9.0,12.0,15.0,17.0,21.0,23.0,25.0,26.0,28.0,29.0,30.0,31.0,32.0,33.0,33.0,33.0,33.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,33.0,33.0,32.0,32.0,30.0,30.0,28.0,27.0,26.0,24.0,23.0,20.0,17.0,15.0,10.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,4.0,5.0,4.0,5.0,5.0,5.0,5.0,6.0,6.0,6.0,7.0,7.0,7.0,8.0,7.0,7.0,7.0,7.0,7.0,6.0,6.0,6.0,7.0,7.0,7.0,6.0,7.0,8.0,8.0,10.0,9.0,11.0,14.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,1.0,1.0,2.0,2.0,1.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span3
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,71.0,72.0,72.0,73.0,73.0,74.0,74.0,74.0,75.0,75.0,76.0,76.0,76.0,77.0,77.0,78.0,78.0,79.0,79.0,80.0,80.0,81.0,81.0,81.0,82.0,65.0,66.0,91.0,86.0,81.0,76.0,71.0,66.0,26.0,27.0,29.0,31.0,32.0,34.0,36.0,40.0,36.0,38.0,24.0,18.0,10.0,43.0,48.0,58.0,60.0,62.0,63.0,65.0,66.0,67.0,68.0,69.0,70.0,72.0,73.0,74.0,76.0,77.0,140.0,140.0,140.0,140.0,141.0,141.0,142.0,145.0,109.0,110.0,111.0,111.0,112.0,113.0,93.0,87.0,84.0,6.0,9.0,11.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,12.0,10.0,8.0,3.0,66.0,65.0,64.0,64.0,64.0,64.0,63.0,65.0,68.0,138.0,137.0,137.0,137.0,137.0,137.0,137.0,137.0,137.0,137.0,137.0,137.0,136.0,136.0,136.0,136.0,136.0,136.0,136.0,134.0,133.0,8.0,13.0,16.0,19.0,20.0,22.0,24.0,25.0,26.0,27.0,29.0,29.0,30.0,30.0,31.0,32.0,32.0,32.0,32.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,31.0,31.0,31.0,30.0,30.0,28.0,27.0,25.0,21.0,17.0,8.0,134.0,138.0,135.0,135.0,135.0,135.0,135.0,135.0,135.0, 135, 135,135.0,135.0,135.0,135.0,135.0,135.0,135.0,135.0,136.0,136.0,136.0,136.0,136.0,67.0,65.0,4.0,8.0,10.0,11.0,13.0,13.0,13.0,14.0,14.0,13.0,12.0,10.0,8.0,5.0,63.0,64.0,65.0,67.0,68.0,70.0,71.0,73.0,77.0,125.0,124.0,123.0,122.0,121.0,121.0,120.0,120.0,119.0,120.0,119.0,119.0,119.0,119.0,120.0,120.0,121.0,121.0,121.0,122.0,122.0,123.0,123.0,124.0,124.0,124.0,125.0,126.0,127.0,128.0,128.0,69.0,68.0,68.0,69.0,68.0,68.0,68.0,68.0,69.0,70.0,73.0,74.0,3.0,4.0,7.0,9.0,12.0,15.0,18.0,21.0,23.0,27.0,31.0,35.0,38.0,42.0,46.0,51.0,55.0,60.0,66.0,71.0,77.0,82.0,87.0,92.0,97.0,101.0,106.0,111.0,115.0,121.0,125.0,131.0,137.0,142.0,149.0,156.0,163.0,53.0,53.0,94.0,94.0,93.0,93.0,93.0,92.0,92.0,92.0,92.0,91.0,91.0,91.0,90.0,90.0,90.0,89.0,89.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span4
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 2, 2,3.0,3.0,3.0,2.0,2.0,2.0,6.0,6.0,4.0,5.0,6.0,6.0,6.0,4.0,26.0,26.0,3.0,4.0,5.0,30.0,30.0,4.0,3.0,5.0,3.0,2.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,1.0,3.0,2.0,2.0,3.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,4.0,5.0,6.0,8.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0,4.0,3.0,3.0,3.0,3.0,3.0,2.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,3.0,3.0,4.0,6.0,11.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,3.0,2.0,2.0,2.0,1.0,2.0,2.0,3.0,3.0,3.0,4.0,5.0,6.0,8.0,2.0,1.0,2.0,1.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,3.0,2.0,2.0, 3, 3,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,2.0,3.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span5
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,82.0,83.0,67.0,67.0,68.0,69.0,70.0,70.0,62.0,57.0,54.0,48.0,44.0,40.0,36.0,33.0,42.0,45.0,39.0,40.0,42.0,54.0,56.0,5.0,3.0,79.0,79.0,78.0,75.0,73.0,72.0,70.0,68.0,67.0,65.0,63.0,62.0,62.0,103.0,104.0,105.0,105.0,106.0,107.0,108.0,108.0,0.0,0.0,0.0,0.0,0.0,0.0,114.0,115.0,116.0,82.0,81.0,79.0,77.0,75.0,74.0,73.0,71.0,70.0,69.0,68.0,68.0,67.0,66.0,129.0,130.0,131.0,132.0,133.0,134.0,136.0, 137, 138,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,136.0,135.0,131.0,130.0,129.0,29.0,27.0,25.0,25.0,23.0,23.0,23.0,22.0,22.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,22.0,125.0,125.0,125.0,125.0,125.0,126.0,126.0,126.0,126.0,126.0,126.0,126.0,126.0,127.0,127.0,127.0,128.0,129.0,130.0,131.0,135.0,135.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,136.0,136.0,63.0,62.0,61.0,60.0,59.0,58.0,59.0,58.0,59.0,59.0,60.0,61.0,61.0,62.0,132.0,132.0,131.0,131.0,130.0,130.0,129.0,129.0,128.0,128.0,127.0,127.0,126.0,126.0,125.0,125.0,124.0,124.0,124.0,123.0,123.0,122.0,122.0,121.0,121.0,121.0,120.0,120.0,119.0,119.0,118.0, 118, 118,117.0,117.0,116.0,116.0,116.0,115.0,115.0,59.0,60.0,61.0,62.0,63.0,65.0,66.0,68.0,69.0,111.0,110.0,110.0,72.0,72.0,72.0,72.0,71.0,72.0,71.0,71.0,71.0,70.0,70.0,69.0,70.0,69.0,68.0,68.0,67.0,67.0,66.0,66.0,65.0,65.0,65.0,63.0,63.0,62.0,61.0,61.0,60.0,59.0,59.0,58.0,58.0,57.0,56.0,56.0,54.0,95.0,94.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span6
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,5.0,5.0,28.0,28.0,29.0,4.0,4.0,2.0,2.0,1.0,2.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,1.0,4.0,6.0,6.0,7.0, 7, 7,7.0,7.0,8.0,8.0,8.0,7.0,6.0,6.0,6.0,5.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,1.0,1.0,1.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,0.0,0.0,0.0,1.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,1.0,2.0,2.0,1.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,1.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span7
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,83.0, 84, 84,85.0,85.0,86.0,71.0,71.0,72.0,72.0,73.0,73.0,73.0,74.0,28.0,24.0,47.0,49.0,51.0,10.0,8.0,78.0,78.0,96.0,96.0,97.0,97.0,98.0,98.0,99.0,100.0,100.0,101.0,101.0,102.0,103.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,116.0,117.0,118.0,119.0,120.0,121.0,122.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,135.0,135.0,135.0,98.0,97.0,96.0,96.0,97.0,97.0,97.0,97.0,97.0,97.0,97.0,97.0,98.0,98.0,98.0,98.0,99.0,100.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,135.0,135.0,135.0,135.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,136.0,137.0,137.0,137.0,137.0,137.0,137.0,136.0,135.0,135.0,134.0,134.0,133.0,133.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,114.0,114.0,114.0,113.0,113.0,112.0,112.0,112.0, 111, 0,0.0,0.0,110.0,109.0,109.0,108.0,108.0,107.0,107.0,107.0,106.0,106.0,105.0,105.0,105.0,104.0,104.0,103.0,103.0,103.0,102.0,102.0,101.0,101.0,101.0,100.0,100.0,99.0,99.0,99.0,98.0,98.0,97.0,97.0,97.0,96.0,96.0,96.0,95.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span8
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,1.0,2.0,2.0,2.0,3.0,3.0,5.0,5.0,5.0,3.0,2.0,1.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span9
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,86.0,87.0,87.0,88.0,89.0,89.0,90.0,90.0,75.0,75.0,20.0,17.0,13.0,77.0,77.0,95.0,95.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,135.0,135.0,135.0,135.0,135.0,135.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,134.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span10
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0,3.0,3.0,3.0,1.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span11
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,91.0,91.0,75.0,76.0,76.0,94.0,94.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span12
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span13
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,92.0,92.0,93.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span14 ) , row0 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span0 FROM tuples))),  row1 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span1 FROM tuples))),  row2 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span2 FROM tuples))),  row3 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span3 FROM tuples))),  row4 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span4 FROM tuples))),  row5 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span5 FROM tuples))),  row6 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span6 FROM tuples))),  row7 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span7 FROM tuples))),  row8 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span8 FROM tuples))),  row9 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span9 FROM tuples))),  row10 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span10 FROM tuples))),  row11 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span11 FROM tuples))),  row12 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span12 FROM tuples))),  row13 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span13 FROM tuples))),  row14 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span14 FROM tuples))) SELECT row0.index,
	row0.value as value_0, 
	row1.value as value_1, 
	row2.value as value_2, 
	row3.value as value_3, 
	row4.value as value_4, 
	row5.value as value_5, 
	row6.value as value_6, 
	row7.value as value_7, 
	row8.value as value_8, 
	row9.value as value_9, 
	row10.value as value_10, 
	row11.value as value_11, 
	row12.value as value_12, 
	row13.value as value_13, 
	row14.value as value_14 from row0 LEFT JOIN row1 ON row0.index = row1.index LEFT JOIN row2 ON row0.index = row2.index LEFT JOIN row3 ON row0.index = row3.index LEFT JOIN row4 ON row0.index = row4.index LEFT JOIN row5 ON row0.index = row5.index LEFT JOIN row6 ON row0.index = row6.index LEFT JOIN row7 ON row0.index = row7.index LEFT JOIN row8 ON row0.index = row8.index LEFT JOIN row9 ON row0.index = row9.index LEFT JOIN row10 ON row0.index = row10.index LEFT JOIN row11 ON row0.index = row11.index LEFT JOIN row12 ON row0.index = row12.index LEFT JOIN row13 ON row0.index = row13.index LEFT JOIN row14 ON row0.index = row14.index



=======================================================================================
=======================================================================================
QUERY_NO: 341
QUERY_ID: b24a3abc-e42e-4259-a32f-0f346fa79e4c
QUERY_TITLE: [ALGO] Algofi ALGO Alternate

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	'465814065' --ALGO market
						--'465814103', --USDC
						--'465814149', --goBTC
						--'465814222', --goETH
						--'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14' AND block_timestamp<'2022-02-01')
		 ), refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE 
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 51)) ), mock_types as (
	SELECT DISTINCT types
		from refine
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_amount, backup) as total_amount,
		SUM(total_amount) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as amount_over_time from base_data b LEFT JOIN refine c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 342
QUERY_ID: 60eff66c-818d-4b17-b5cd-9e6a50fe2842
QUERY_TITLE: Optimism txns base

QUERY_STRING:

-- forked from ARB txns base @ https://flipsidecrypto.xyz/edit/queries/8529fd1c-ff9b-4ef2-9be8-d58d29eeadac -- forked from SOL txns base @ https://flipsidecrypto.xyz/edit/queries/56c0b34e-cfb0-4a84-8a65-f1ac5986e7d0  with base as (
	SELECT
	
	COUNT(DISTINCT TX_HASH) as totals
	  , date_trunc('day',block_timestamp) as dday
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday ) , wallets_100 as (
	SELECT
	  COUNT(DISTINCT TX_HASH) as totals
	  , FROM_ADDRESS as wallet
	  , date_trunc('day',block_timestamp) as dday
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND (block_timestamp>=CURRENT_DATE-5 AND block_timestamp<CURRENT_DATE)
	GROUP BY dday, wallet
	QUALIFY row_number() OVER (PARTITION BY dday ORDER BY totals DESC)<={{No_Wallets}} ) , sums as (
	SELECT
	  SUM(w.totals) as wtotals
	  , w.dday as day
	  , b.totals as dtotals
	from wallets_100 w
	 LEFT JOIN base b ON w.dday=b.dday
	GROUP BY day, dtotals ) SELECT
	 day
	, wtotals
	, dtotals
	, ROUND((wtotals/dtotals)*100, 2) as top_wallets_perc from sums



=======================================================================================
=======================================================================================
QUERY_NO: 343
QUERY_ID: d6e2227a-52a9-4139-aa55-d7e7dbeac776
QUERY_TITLE: bluemove batch test

QUERY_STRING:

-- forked from bluemove batch examples @ https://flipsidecrypto.xyz/edit/queries/894f28f4-3b45-4ab2-8633-49789ae03902 select
	* from aptos.core.fact_events where 1=1
	AND version=183076032



=======================================================================================
=======================================================================================
QUERY_NO: 344
QUERY_ID: 2a06185b-24c3-4359-8494-54ebcea8cb02
QUERY_TITLE: Summary Totals for Each List

QUERY_STRING:

-- forked from C - Traders meeting both staking/trading requirements @ https://flipsidecrypto.xyz/edit/queries/cfd5f1f1-5270-435a-ab61-678030e9d341 -- forked from B - Traders meeting volume/trades requirements @ https://flipsidecrypto.xyz/edit/queries/09400cde-46bd-492e-91cf-66173e1ade64 with traders as (
	with base as (
	  SELECT
	
	  trader as user
	
	 , SUM(amount_usd) as volume
	
	 , COUNT(DISTINCT DIGEST) as trades
	  from arbitrum.vertex.ez_spot_trades
	  GROUP BY user
	
	  UNION
	
	
	SELECT
	
	  trader as user
	
	 , SUM(amount_usd) as volume
	
	 , COUNT(DISTINCT DIGEST) as trades
	  from arbitrum.vertex.ez_perp_trades
	  GROUP BY user
	)
	
	SELECT
	
	user
	  , SUM(volume) as total_volume
	  , SUM(trades) as total_trades
	from base
	GROUP BY USER
	  HAVING ( total_volume>={{volume_usd}} AND total_trades>={{trade_count}} ) ) , stakers as (
	SELECT
	
	origin_from_address as user
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END) as vertex_staked
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND symbol = 'VRTX'
	GROUP BY user
	 HAVING vertex_staked>={{stake_amount}} ) , filtered as (
	SELECT
	
	t.user
	  , total_volume
	  , total_trades
	  , vertex_staked
	from traders t
	LEFT JOIN stakers s on t.user=s.user
	WHERE 1=1
	  AND vertex_staked IS NOT NULL
	ORDER BY total_volume DESC
	) , stats as (
	SELECT  COUNT (USER) as users, 'A' as list from traders GROUP BY list
	UNION
	 SELECT  COUNT (USER) as users, 'B' as list from stakers GROUP BY list
	UNION
	 SELECT  COUNT (USER) as users, 'C' as list from filtered GROUP BY list ) SELECT
	 MAX(CASE WHEN list='A' THEN users ELSE NULL END) as a_users
	, MAX(CASE WHEN list='B' THEN users ELSE NULL END) as b_users
	, MAX(CASE WHEN list='C' THEN users ELSE NULL END) as c_users from stats



=======================================================================================
=======================================================================================
QUERY_NO: 345
QUERY_ID: f91762bb-c498-4a7e-8533-ff0bcc51aa2c
QUERY_TITLE: [TERRA] Gasless Terra Scavenger Hunt

QUERY_STRING:

SELECT *  FROM terra.staking  WHERE delegator_address='terra1rz9qk8yptpfeth7h8wjq28m2hsajl3zj22lplc'



=======================================================================================
=======================================================================================
QUERY_NO: 346
QUERY_ID: 7080a446-2b77-41b7-b465-19f528826f63
QUERY_TITLE: [Terra] Shuttle Events

QUERY_STRING:

SELECT * from terra.msgs WHERE
	--tx_id = 'A54D4EC178B950ACB6038E0B7053D58CCEC3C9443B29768C9A15C1720202D508'
	msg_value:"@type" = '/cosmos.bank.v1beta1.MsgSend'
		AND msg_value:amount[0]:denom IN ('uusd', 'uluna') LIMIT 10 --ETH /cosmos.bank.v1beta1.MsgSend
		terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc --BSC terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2 --ONE terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk



=======================================================================================
=======================================================================================
QUERY_NO: 347
QUERY_ID: 79c97fa4-ad09-48c8-ab7c-0cbefbe3be91
QUERY_TITLE: [ARB] L2 Summer Base

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), refine as (
	SELECT
	
	COUNT(DISTINCT sender) as new_users,
		ddate
	from new_arb
	GROUP BY ddate  ) SELECT
	 *,
	SUM(new_users) OVER (ORDER BY ddate ASC) as new_users_total from refine ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 348
QUERY_ID: 7efb9f34-7071-4dae-a78a-3fb53c37d4f8
QUERY_TITLE: bluemovev1_events

QUERY_STRING:

SELECT
	 COUNT(*) as total
	, max(version) as example
	, event_resource
	 , event_module from aptos.core.fact_events where 1=1  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e' group by event_resource, event_module AcceptOfferEvent, AcceptOfferCollectionEvent



=======================================================================================
=======================================================================================
QUERY_NO: 349
QUERY_ID: fc91fc51-c512-4532-ac0e-8e408fdf2deb
QUERY_TITLE: bluemove sale cases

QUERY_STRING:

with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as total
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent', 'AcceptOfferCollectionEvent', 'AcceptOfferEvent')
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource
	--having total=1 ) SELECT
	 COUNT(*) as total_events
	, version from aptos.core.fact_events WHERE 1=1
	AND version in (select version from base where event_resource='AcceptOfferCollectionEvent')
	AND event_resource IN ('AcceptOfferCollectionEvent', 'DepositEvent', 'WithdrawEvent') GROUP BY version



=======================================================================================
=======================================================================================
QUERY_NO: 350
QUERY_ID: 9b946a2b-0ba5-48a6-b5b7-37aaee47746d
QUERY_TITLE: [Optimism][Q10] Swaps Preference: Velodrome vs Uniswap

QUERY_STRING:

with swaps as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'velodrome'  as type from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT
		origin_from_address as sender,
		tx_hash,
		block_timestamp,
		'uniswap' as type
	 from optimism.core.fact_event_logs
	WHERE 1=1
		AND ORIGIN_TO_ADDRESS IN ('0xe592427a0aece92de3edee1f18e0157c05861564',	--Uniswap V3: Router
							 '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45') --V3 Router 2
		AND event_name ='Swap' ) , pre as (
	SELECT
	
	type,
		COUNT(DISTINCT tx_hash) as counts,
		sender
	from swaps
	 GROUP by sender, type
	 ), final as (
	SELECT
	
	MAX(CASE WHEN type='uniswap' THEN counts ELSE NULL END ) as uni_counts,
		MAX(CASE WHEN type!='uniswap' THEN counts ELSE NULL END ) as velo_counts,
		sender
	from pre
	 GROUP BY sender ) SELECT
	 COUNT(DISTINCT sender) as totals,
	CASE	WHEN velo_counts IS NULL THEN 'uniswap only'
			WHEN uni_counts IS NULL THEN 'velodrome only'	
			ELSE 'both' end as cat from final GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 351
QUERY_ID: eb99bc4f-82a9-467f-8099-b62bed7084cf
QUERY_TITLE: signature

QUERY_STRING:

with tuples as (
	 SELECT
		ARRAY_CONSTRUCT(471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 220, 208, 200, 194, 190, 186, 182, 178, 175, 171, 168, 165, 162, 160, 158, 155, 152, 150, 148, 145, 144, 142, 140, 138, 136, 134, 133, 130, 129, 128, 126, 125, 123, 121, 120, 118, 117, 116, 114, 113, 111, 110, 109, 107, 106, 105, 104, 103, 102, 100, 99, 98, 97, 96, 95, 94, 93, 92, 90, 89, 89, 88, 87, 86, 85, 84, 83, 82, 81, 81, 80, 79, 78, 77, 76, 75, 74, 74, 73, 72, 72, 71, 70, 69, 69, 68, 67, 66, 66, 65, 64, 64, 63, 63, 62, 62, 61, 60, 59, 59, 58, 58, 57, 57, 56, 56, 55, 55, 54, 54, 53, 53, 52, 51, 51, 50, 50, 50, 49, 49, 48, 48, 47, 47, 47, 46, 46, 46, 45, 45, 44, 44, 43, 43, 43, 42, 42, 42, 41, 41, 41, 41, 40, 40, 40, 39, 39, 39, 39, 38, 38, 38, 38, 37, 37, 37, 37, 37, 36, 36, 36, 35, 35, 35, 35, 35, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 49, 50, 50, 51, 51, 52, 53, 53, 54, 54, 54, 55, 55, 56, 56, 57, 58, 58, 58, 59, 60, 61, 61, 62, 63, 63, 64, 64, 65, 65, 66, 67, 68, 69,69.0,70.0,71.0,71.0,72.0,73.0,74.0,74.0,75.0,76.0,77.0,78.0,78.0,79.0,80.0,81.0,81.0,82.0,83.0,85.0,86.0,87.0,88.0,88.0,89.0,90.0,91.0,92.0,94.0,95.0,96.0,96.0,97.0,98.0,100.0,101.0,102.0,103.0,105.0,105.0,107.0,108.0,110.0,111.0,112.0,114.0,115.0,116.0, 118, 119,120.0,122.0,124.0,126.0,127.0,128.0,130.0,132.0,134.0,135.0,137.0,139.0,142.0,143.0,144.0,147.0,149.0,152.0,154.0,157.0,159.0,161.0,163.0,167.0,170.0,173.0,177.0,181.0,185.0,188.0,189.0,189.0,189.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0, 471, 471,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0,471.0, 471) as span0
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,22.0,46.0,62.0,75.0,83.0,90.0,98.0,107.0,113.0,121.0,127.0,133.0,138.0,62.0,52.0,47.0,44.0,41.0,38.0,38.0,36.0,35.0,34.0,33.0,32.0,31.0,29.0,30.0,29.0,28.0,28.0,26.0,26.0,26.0,25.0,25.0,25.0,24.0,24.0,24.0,24.0,23.0,22.0,23.0,22.0,22.0,22.0,22.0,21.0,21.0,21.0,21.0,21.0,21.0,20.0,20.0,19.0,19.0,20.0,20.0,19.0,19.0,19.0,19.0, 19, 19,19.0,18.0,19.0,18.0,18.0, 18, 18,18.0,18.0,18.0,18.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,16.0,16.0,17.0,16.0,17.0,16.0,16.0,16.0,16.0,16.0,16.0,15.0,16.0,16.0,16.0,15.0,16.0,15.0,15.0,15.0,16.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,14.0,15.0,15.0,14.0,15.0,14.0,15.0,14.0,15.0,15.0,14.0,15.0,14.0,14.0,15.0,14.0, 14, 14,15.0,14.0,14.0,15.0,14.0,14.0,14.0,15.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,14.0,14.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,14.0,14.0,14.0,14.0,14.0,13.0,14.0,14.0,14.0,14.0,13.0,14.0,14.0,14.0,13.0,13.0,14.0,14.0,13.0,14.0,14.0,15.0,15.0,14.0,14.0,14.0,14.0,14.0,14.0,15.0,14.0,14.0,15.0,14.0,14.0,15.0,14.0,14.0,15.0,14.0,14.0,14.0,15.0,15.0, 15, 15,14.0,15.0,15.0,15.0,15.0,14.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,16.0,15.0,16.0,15.0,16.0,16.0,15.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,17.0,17.0,17.0,17.0,16.0,17.0,17.0,16.0,17.0,17.0,17.0,17.0,18.0,18.0,18.0,17.0,17.0,18.0,18.0,18.0,18.0,19.0,19.0,19.0,18.0,18.0,18.0,18.0,20.0,20.0,20.0,20.0,20.0,19.0,20.0,20.0,21.0,21.0,21.0,21.0,21.0,22.0,22.0,22.0,23.0,22.0,23.0,23.0,23.0,24.0,24.0,25.0,25.0,24.0, 25, 26,27.0,27.0,27.0,28.0,29.0,29.0,29.0,30.0,32.0,33.0,34.0,34.0,36.0,38.0,38.0,63.0,60.0,58.0,55.0,53.0,51.0,49.0,45.0,42.0,39.0,35.0,31.0,27.0,24.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span1
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0.0,0.0,0.0,0.0,229.0,217.0,209.0,202.0,198.0,195.0,191.0,186.0,183.0,179.0,176.0,173.0,171.0,19.0,43.0,59.0,71.0,81.0,91.0,97.0,76.0,79.0,81.0,54.0,54.0,39.0,40.0,41.0,31.0,30.0,30.0,32.0,13.0,12.0,14.0,17.0,18.0,20.0,22.0,14.0,14.0,15.0,18.0,19.0,21.0,22.0,9.0,9.0,10.0,11.0,12.0,13.0,15.0,16.0,18.0,19.0,21.0,25.0,26.0,15.0,15.0,15.0,15.0,15.0,15.0,16.0,17.0,19.0,19.0,21.0,22.0,24.0,26.0,27.0,29.0,31.0,33.0,14.0,13.0,13.0,12.0,13.0,13.0,14.0,13.0,14.0,15.0,17.0,19.0,20.0,21.0,12.0,11.0,11.0,12.0, 12, 13,12.0,12.0,12.0,12.0,11.0,12.0,14.0,15.0,18.0,20.0,22.0,23.0,13.0,12.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,12.0,12.0,14.0,14.0,16.0,18.0,20.0,21.0,23.0,26.0,28.0,44.0,44.0,44.0,44.0,12.0,11.0,10.0,10.0,10.0,9.0,10.0,10.0,10.0,10.0,11.0,11.0,12.0,15.0,19.0,25.0,25.0,26.0,11.0,10.0,10.0,10.0,10.0,10.0,10.0,9.0,9.0,10.0,11.0,11.0,12.0,12.0,14.0,22.0,23.0, 26, 9,9.0,10.0,10.0,10.0,10.0,14.0,18.0,9.0,9.0,10.0,10.0,10.0,10.0,12.0,16.0,20.0,9.0,9.0,9.0,9.0,9.0,9.0,40.0,40.0,40.0,41.0,41.0,41.0,41.0,41.0,41.0,24.0,5.0,5.0,5.0,4.0,4.0,4.0,4.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,41.0,31.0,25.0,20.0,16.0,8.0,4.0,4.0,4.0,4.0,5.0,5.0,5.0,9.0,9.0,9.0,9.0,9.0,10.0,10.0,30.0,26.0,22.0,19.0,14.0,12.0,11.0,11.0,10.0,9.0,10.0,10.0,10.0,11.0,9.0,9.0,10.0,10.0,10.0,10.0,10.0,22.0,18.0,17.0,16.0,13.0,13.0,12.0,11.0,11.0,11.0,10.0,10.0,11.0,10.0,10.0,11.0,11.0,26.0,24.0,22.0,20.0,13.0,11.0,12.0,10.0,8.0,7.0,8.0,7.0,8.0,7.0,17.0,16.0,14.0,14.0,13.0,12.0,12.0,12.0,11.0,11.0,12.0,11.0,12.0,12.0,28.0,19.0,18.0,16.0,14.0,13.0,11.0,15.0,14.0,12.0,12.0,12.0,12.0,13.0,19.0,17.0,16.0,15.0, 14, 13,13.0,12.0,13.0,15.0,14.0,14.0,14.0,14.0,30.0,29.0,27.0,25.0,24.0,22.0,20.0,18.0,16.0,14.0,12.0,10.0,9.0,8.0,8.0,7.0,8.0,32.0,22.0,20.0,17.0,15.0,13.0,11.0,9.0,9.0,10.0,13.0,11.0,10.0,10.0,10.0,30.0,29.0,28.0,27.0,27.0,25.0,26.0,36.0,34.0,32.0,30.0,28.0,25.0,22.0,19.0,16.0,13.0,10.0,7.0,4.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span2
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,61.0,52.0,47.0,43.0,40.0,38.0,37.0,2.0,6.0,7.0,5.0,10.0,9.0,12.0,14.0,3.0,8.0,11.0,13.0,4.0,7.0,7.0,7.0,17.0,17.0,17.0,3.0,6.0,10.0,9.0,9.0,8.0,9.0,3.0,5.0,5.0,5.0, 9, 10,9.0,8.0,9.0,9.0,10.0,8.0,8.0,7.0,9.0,11.0,13.0,15.0,6.0,6.0,7.0,7.0,8.0,8.0,8.0,8.0,8.0,9.0,9.0,9.0,14.0,5.0,9.0,11.0,13.0,15.0,4.0,5.0,6.0,7.0,13.0,11.0,9.0,10.0,10.0,4.0,6.0,8.0,10.0,12.0,13.0,16.0,5.0,6.0,7.0,9.0,11.0,11.0,11.0,11.0,12.0,11.0,11.0,3.0,8.0,10.0,14.0,17.0,18.0,4.0,5.0,6.0,8.0,10.0,10.0,12.0,13.0,18.0,17.0,15.0,13.0,10.0,7.0,30.0,30.0,30.0,29.0,3.0,7.0,7.0,8.0,8.0,5.0,4.0,5.0,6.0,23.0,14.0,13.0,11.0,7.0,1.0,9.0,8.0,7.0,7.0,12.0,17.0,21.0,24.0,24.0,4.0,4.0,5.0,9.0,8.0,8.0,6.0,6.0,4.0,11.0,10.0,6.0,5.0,9.0,14.0,17.0,20.0,22.0,18.0,14.0,23.0,23.0,23.0,23.0,14.0,15.0,17.0,16.0,12.0,23.0,23.0,23.0,23.0,23.0,22.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,8.0,27.0,27.0,27.0,27.0,28.0,28.0,20.0,24.0,24.0,24.0,24.0,24.0,24.0,25.0,24.0,1.0,7.0,12.0,17.0,24.0,28.0,28.0,27.0,19.0,12.0,9.0,2.0,4.0,23.0,23.0,22.0,20.0,13.0,7.0,2.0,7.0,11.0,14.0,18.0,21.0,19.0,17.0,15.0,11.0,7.0,4.0,3.0,22.0,23.0,21.0,17.0,14.0,10.0,5.0,1.0,1.0,4.0,5.0,7.0,9.0,10.0,11.0,11.0,6.0,4.0,4.0,4.0,19.0,17.0,13.0, 10, 6,9.0, 11, 12,13.0,2.0,18.0,15.0,14.0,14.0,13.0,10.0,8.0,8.0,3.0,7.0,9.0,11.0,11.0,12.0,8.0,5.0,4.0,5.0,16.0,13.0,12.0,10.0,7.0,11.0,1.0,3.0,17.0,17.0,17.0,17.0,11.0,10.0,10.0,8.0,5.0,3.0,1.0,9.0,9.0,9.0,8.0,7.0,6.0,5.0,16.0,13.0,9.0,9.0,7.0,5.0,3.0,8.0,8.0,8.0,9.0,8.0,8.0,8.0,8.0,8.0,8.0,9.0,20.0,19.0,7.0,6.0,4.0,1.0,8.0,2.0,5.0,5.0,6.0,5.0,6.0,5.0,4.0,2.0,8.0,7.0,7.0,4.0,2.0,6.0,6.0,6.0,13.0,11.0,9.0,4.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,63.0,61.0,59.0,56.0,53.0,51.0,49.0,46.0,43.0,39.0,36.0,32.0,28.0,25.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span3
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,169.0,166.0,163.0,161.0,159.0,156.0,154.0,25.0,24.0,27.0,25.0,16.0,8.0,6.0,5.0,9.0,7.0,6.0,5.0,16.0,16.0,3.0,1.0,5.0,5.0,5.0,7.0,6.0,4.0,4.0,4.0,6.0,5.0,11.0,11.0,14.0,15.0,12.0,11.0,11.0,13.0,12.0,13.0,13.0,12.0,13.0,6.0,5.0,5.0,4.0,4.0,2.0,3.0,2.0,3.0,3.0,2.0,3.0,3.0,3.0,3.0,3.0,2.0,14.0,16.0,14.0,14.0,14.0,29.0,3.0,3.0,4.0,3.0,2.0,2.0,4.0,4.0,4.0,7.0,7.0,7.0,6.0,5.0,6.0,6.0,3.0,4.0,4.0,4.0,4.0,4.0,5.0,4.0,3.0,4.0,13.0,9.0,7.0,8.0,6.0,6.0,6.0,4.0,4.0,4.0,4.0,4.0,5.0,5.0,3.0,8.0,8.0,8.0,8.0,8.0,9.0,18.0,17.0,17.0,17.0,28.0,26.0,26.0,5.0,4.0,1.0,6.0,4.0,2.0,9.0,5.0,6.0,2.0,4.0,5.0,8.0,8.0,9.0,24.0,19.0,15.0,11.0,8.0,8.0,2.0,6.0,5.0,1.0,1.0,2.0,3.0,3.0,3.0,8.0,8.0,9.0,26.0,22.0,17.0,14.0,11.0,9.0,8.0,8.0,8.0,8.0,8.0,8.0,17.0,15.0,11.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,9.0,14.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,9.0,9.0,9.0,9.0,9.0,8.0,8.0,16.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,14.0,9.0,9.0,9.0,8.0,8.0,8.0,9.0,10.0,6.0,12.0,12.0,4.0,1.0, 9, 9,10.0,12.0,19.0,24.0,9.0,8.0,9.0,9.0,9.0,9.0,12.0,15.0,18.0,9.0,9.0,8.0,4.0,10.0,10.0,12.0,16.0,19.0,23.0,12.0,14.0,1.0,2.0,2.0,2.0,2.0,8.0,6.0,3.0,2.0,5.0,4.0,2.0,4.0,4.0,8.0,9.0,11.0,11.0,11.0,12.0,14.0,2.0,18.0,21.0,8.0,8.0,8.0,8.0,11.0,6.0,2.0,2.0,6.0,4.0,3.0,1.0,1.0,4.0,4.0,1.0,10.0,11.0,11.0,11.0,11.0,14.0,6.0,4.0,5.0,4.0,4.0,5.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,4.0,4.0,3.0,3.0,3.0,3.0,2.0,13.0,14.0,14.0,14.0,14.0,15.0,15.0,3.0,2.0,3.0,2.0,3.0,3.0,3.0,3.0,4.0,3.0,3.0,13.0,13.0,2.0,2.0,4.0,8.0,14.0,7.0,5.0,5.0,4.0,4.0,4.0,4.0,4.0,4.0,24.0,26.0,20.0,20.0,20.0,2.0,2.0,2.0,5.0,4.0,5.0,7.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0, 38, 38,38.0,38.0,38.0,38.0,158.0,160.0,162.0,165.0,168.0,170.0,172.0,175.0,178.0,182.0,185.0,189.0,193.0,196.0,198.0,198.0,198.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span4
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,36.0,34.0,33.0,7.0,4.0,11.0,13.0,6.0,14.0,6.0,6.0,6.0,15.0,6.0,6.0,8.0,7.0,7.0,7.0,7.0,8.0,7.0,7.0,8.0,7.0,7.0,9.0,9.0,7.0,8.0,7.0,8.0,8.0,7.0,8.0,7.0,7.0,8.0,10.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,9.0,9.0,8.0,9.0,9.0,8.0,7.0,6.0,5.0,5.0,86.0,13.0,12.0,10.0,7.0,67.0,9.0,6.0,5.0,4.0,6.0,8.0,7.0,6.0,5.0,10.0,10.0,10.0,14.0,12.0,9.0,7.0,11.0,11.0,12.0,12.0,11.0,10.0,8.0,6.0,4.0,2.0,36.0,11.0,11.0,9.0,7.0,4.0,2.0,13.0,12.0,12.0,10.0,9.0,7.0,5.0,4.0,32.0,31.0,31.0,31.0,31.0,30.0,61.0,62.0,63.0,39.0,29.0,29.0,29.0,4.0,8.0,2.0,13.0,14.0,15.0,28.0,4.0,4.0,3.0,8.0,9.0,27.0,27.0,27.0,26.0,27.0,26.0,26.0,27.0,26.0,17.0,14.0,3.0,3.0,4.0,7.0,12.0,12.0,12.0,26.0,25.0,25.0,26.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,24.0,24.0,25.0,25.0,25.0, 25, 25,24.0,24.0,24.0,24.0,24.0,26.0,27.0,27.0,27.0,27.0,27.0,26.0,26.0,26.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,26.0,26.0,26.0,26.0,26.0,26.0,27.0,26.0,24.0,24.0,24.0,24.0,24.0,25.0,24.0,24.0,3.0,4.0,7.0,3.0,18.0,24.0,24.0,25.0,25.0,24.0,25.0,25.0,25.0,25.0,25.0,26.0,25.0,25.0,25.0,25.0,4.0,8.0,12.0,16.0,25.0,25.0,26.0,25.0,26.0,26.0,5.0,9.0,11.0,10.0,11.0,10.0,3.0,4.0,6.0,9.0,15.0,13.0,14.0,15.0,2.0,4.0,4.0,5.0,7.0,28.0,29.0,28.0,28.0,14.0,29.0,29.0,2.0,7.0,9.0,12.0,12.0,2.0,1.0,2.0,6.0,7.0,8.0,9.0,14.0,12.0,12.0,12.0,2.0,4.0,6.0,7.0,10.0,36.0,10.0,10.0,3.0,7.0,8.0,9.0,10.0,11.0,9.0,9.0,10.0,10.0,10.0,9.0,9.0,10.0,10.0,10.0,10.0,10.0,6.0,7.0,8.0,13.0,15.0,8.0,8.0,7.0,8.0,8.0,8.0,8.0,8.0,8.0,9.0,8.0,8.0,8.0,7.0,8.0,9.0,8.0,7.0,2.0,1.0,8.0,7.0,8.0,8.0,8.0,8.0,8.0,8.0,7.0,7.0,7.0,2.0,6.0,6.0,7.0,7.0,6.0,23.0,24.0,24.0,24.0,26.0,25.0,24.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span5
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,152.0,151.0,149.0,31.0,3.0,15.0,13.0,2.0,5.0,2.0,2.0,2.0,4.0,2.0,7.0,6.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,6.0,5.0,6.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,1.0,1.0,12.0,13.0,12.0,13.0,32.0,5.0,5.0,5.0,4.0,5.0,4.0,4.0,4.0,20.0,18.0,16.0,14.0,10.0,13.0,12.0,12.0,12.0,37.0,28.0,3.0,2.0,2.0,19.0,17.0,16.0,14.0,13.0,4.0,3.0,1.0,10.0,10.0,10.0,10.0,20.0,18.0,15.0,13.0,11.0,10.0,9.0,10.0,10.0,9.0,23.0,12.0,10.0,9.0,9.0,9.0,10.0,15.0,14.0,13.0,12.0,10.0,10.0,9.0,9.0,19.0,18.0,18.0,18.0,18.0,18.0,13.0,14.0,14.0,2.0,17.0,16.0,17.0,17.0,13.0,3.0,10.0, 10, 9,16.0,8.0,8.0,1.0,8.0,8.0,15.0,16.0,15.0,16.0,15.0,16.0,15.0,15.0,15.0,9.0,8.0,2.0,6.0,6.0,1.0,8.0,7.0,7.0,14.0,15.0,14.0,14.0,15.0,14.0,14.0,14.0,14.0,15.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,14.0,14.0,14.0,14.0,14.0,39.0,39.0,39.0,39.0,39.0,39.0,40.0,40.0,40.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,39.0,39.0,39.0,39.0,39.0,39.0,38.0,38.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,9.0,8.0,8.0,8.0,9.0,14.0,15.0,14.0,14.0,15.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,15.0,14.0,15.0,9.0,9.0,9.0,9.0,15.0,15.0,15.0,15.0,15.0,15.0,11.0,9.0,9.0,9.0,8.0,9.0,3.0,9.0,10.0,10.0,11.0,12.0,13.0,14.0,10.0,10.0,10.0,10.0,10.0,17.0,17.0,18.0,18.0,15.0,18.0,18.0,13.0,11.0,11.0,10.0,10.0,3.0,7.0,5.0,12.0,13.0,14.0,14.0,15.0,17.0,19.0,22.0,12.0,12.0,12.0,13.0,13.0,29.0,17.0,19.0,13.0,12.0,13.0,13.0,3.0,1.0,1.0,3.0,3.0,3.0,3.0,18.0,20.0,23.0,26.0,28.0,13.0,13.0,17.0,17.0,19.0,17.0,18.0,2.0,3.0,23.0,25.0,27.0,31.0,33.0,12.0,12.0,11.0,12.0,12.0,12.0,10.0,10.0,13.0,14.0,13.0,15.0,3.0,17.0,18.0,18.0,18.0,19.0,19.0,21.0,21.0,23.0,6.0,5.0,4.0,2.0,3.0,4.0,4.0,5.0, 38, 38,38.0,38.0,13.0,14.0,15.0,31.0,29.0,26.0,23.0,21.0,17.0,14.0,12.0,9.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span6
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,32.0,7.0,7.0,16.0,5.0,6.0,6.0,6.0,5.0,6.0,7.0,6.0,6.0,7.0,7.0,7.0,8.0,7.0,6.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,8.0,7.0,7.0,8.0,7.0,7.0,7.0,1.0,2.0,10.0,9.0,7.0,3.0,60.0,8.0,8.0,8.0,8.0,8.0,7.0,5.0,3.0,79.0,81.0,83.0,85.0,59.0,87.0,89.0,90.0,74.0,66.0,62.0,1.0,3.0,5.0,53.0,51.0,49.0, 49, 47,4.0,4.0,5.0,44.0, 43, 42,41.0,40.0,40.0,39.0,39.0,39.0,38.0,38.0,37.0,36.0,36.0,36.0,35.0,35.0,35.0,34.0,34.0,33.0,33.0,33.0,32.0,32.0,33.0,32.0,32.0,31.0,55.0,57.0,58.0,58.0,59.0,60.0,9.0,9.0,10.0,23.0,39.0,38.0,37.0,28.0,29.0,11.0,28.0,28.0,29.0,34.0,28.0,28.0,5.0,27.0,27.0,32.0,31.0,31.0,30.0,31.0,30.0,30.0,29.0,30.0,26.0,27.0,9.0,4.0,2.0,3.0,26.0,26.0,26.0,28.0,28.0,28.0,28.0,27.0,28.0,27.0,27.0,27.0,26.0,27.0,27.0,26.0,26.0,27.0,27.0,27.0,26.0,26.0,26.0,27.0,26.0,26.0,26.0,26.0,26.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,26.0,26.0,26.0,26.0,27.0,27.0,27.0,27.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,26.0,26.0,26.0,27.0,27.0,26.0,26.0,27.0,24.0,24.0,25.0,11.0,24.0,28.0,27.0,28.0,28.0,28.0,28.0,28.0,29.0,28.0,29.0,28.0,29.0,29.0,29.0,29.0,25.0,25.0,25.0,25.0,30.0,31.0,31.0,31.0,31.0,32.0,26.0,26.0,26.0,27.0,27.0,26.0,4.0,27.0,26.0,27.0,26.0,27.0,27.0,27.0,27.0,28.0,28.0,28.0,28.0,60.0,59.0,58.0,57.0,29.0,55.0,54.0,30.0,30.0,29.0,30.0,30.0,11.0,4.0,4.0,32.0,32.0,32.0,32.0,33.0,33.0,33.0,34.0,34.0,35.0,35.0,35.0,35.0,18.0,37.0,37.0,38.0,39.0,40.0,40.0,2.0,5.0,9.0,9.0,10.0,10.0,10.0,49.0,52.0,54.0,57.0, 61, 2,4.0,56.0,55.0,53.0,51.0,49.0,6.0,6.0,43.0,41.0,39.0,36.0,34.0,2.0,5.0,8.0,8.0,8.0,8.0,5.0,4.0,8.0,8.0,8.0,8.0,11.0,13.0,14.0,6.0,7.0,6.0,7.0,7.0,7.0,7.0,23.0,23.0,7.0,7.0,6.0,23.0,23.0,23.0,25.0,25.0,26.0,26.0,7.0,5.0,3.0,29.0,29.0,30.0,31.0,31.0,33.0,34.0,35.0,36.0,38.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span7
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,146.0,33.0,1.0,39.0,13.0,3.0,4.0,4.0,5.0,12.0,4.0,2.0,3.0,5.0,6.0,9.0,4.0,5.0,5.0,4.0,3.0,4.0,4.0,3.0,3.0,2.0,3.0, 2, 2,3.0,2.0,2.0,3.0,28.0,2.0,24.0,23.0,20.0,20.0,20.0,10.0,28.0,25.0,21.0,19.0,16.0,16.0,15.0,14.0,10.0,10.0,10.0,10.0,15.0,10.0,10.0,10.0,28.0,14.0,44.0,25.0,23.0,21.0,58.0,61.0,64.0,66.0,69.0,12.0,11.0,10.0,76.0,38.0,35.0,33.0,32.0,29.0,29.0,28.0,27.0,27.0,25.0,24.0,24.0,23.0,38.0,23.0,22.0,21.0,22.0,21.0,21.0,21.0,21.0,21.0,20.0,19.0,19.0,19.0,20.0,10.0,10.0,11.0,11.0,12.0,13.0,16.0,15.0,14.0,15.0,3.0,5.0,6.0,17.0,16.0,11.0,17.0,16.0,16.0,14.0,16.0,16.0,8.0,16.0,15.0,20.0,21.0,22.0,23.0,23.0,24.0,25.0,26.0,26.0,15.0,14.0,8.0,8.0,9.0,9.0,14.0,15.0,14.0,32.0,32.0,33.0,33.0,34.0,34.0,35.0,35.0,35.0,36.0,36.0,36.0,37.0,37.0,37.0,37.0,37.0,38.0,38.0,38.0,38.0,39.0,39.0,39.0,39.0,39.0,38.0, 38, 38,38.0,38.0,38.0,38.0,38.0,38.0,40.0,40.0,40.0,40.0,39.0,39.0,39.0,39.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,37.0,37.0,37.0,37.0,36.0,14.0,14.0,14.0,8.0,14.0,34.0,34.0,33.0,33.0,32.0,32.0,32.0,31.0,31.0,30.0,30.0,29.0,28.0,28.0,27.0,15.0,14.0,15.0,15.0,24.0,23.0,22.0,22.0,21.0,20.0,15.0,15.0,15.0,15.0,16.0,16.0,9.0,16.0,16.0,16.0,17.0,16.0,16.0,17.0,17.0,17.0,17.0,18.0,17.0,11.0, 10, 10,9.0,18.0,7.0,38.0,19.0,19.0,19.0,19.0,20.0,11.0,3.0,12.0,20.0,21.0,21.0,23.0,22.0,23.0,24.0,24.0,25.0,25.0,25.0,27.0,28.0,38.0,30.0,32.0,34.0,36.0,76.0,75.0,9.0,9.0,10.0,10.0,12.0,14.0,16.0,56.0,52.0,48.0,43.0,38.0,16.0,16.0,38.0,38.0,38.0,38.0,38.0,19.0,21.0,38.0,38.0,38.0,38.0,38.0,23.0,24.0,25.0,27.0,28.0,11.0,14.0,15.0,10.0,10.0,10.0,11.0,3.0,2.0,1.0,2.0,2.0,3.0,2.0,2.0,5.0,7.0,38.0,38.0,5.0,4.0,4.0,38.0,38.0,38.0,12.0,13.0,12.0,12.0,14.0,14.0,14.0,138.0,140.0,142.0,144.0,146.0,148.0,150.0,151.0,153.0,155.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span8
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,7.0,29.0,16.0,5.0,7.0,7.0,7.0,15.0,8.0,7.0,7.0,13.0,12.0,10.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,8.0,7.0,7.0,8.0,7.0,7.0,6.0,2.0,36.0,6.0,45.0,49.0,52.0,54.0,57.0,32.0,63.0,65.0,68.0,70.0,72.0,73.0,75.0,78.0,52.0,54.0,55.0,57.0,5.0,60.0,61.0,63.0,64.0,7.0,67.0,58.0,56.0,54.0,71.0,73.0,74.0,23.0,23.0,46.0,45.0,45.0,23.0,2.0,7.0,11.0,14.0,18.0,20.0,22.0,24.0,26.0,29.0,31.0,33.0,35.0,23.0,37.0,39.0,41.0,42.0,44.0,45.0,46.0,47.0,48.0,50.0,51.0,52.0,53.0,54.0,7.0,8.0,8.0,9.0,8.0,8.0,23.0,23.0,23.0,10.0,23.0,23.0,23.0,36.0,36.0,29.0,34.0,34.0,34.0,23.0,34.0,33.0,27.0,32.0,32.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,29.0,29.0,26.0,27.0,27.0,26.0,29.0,28.0,29.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,27.0,27.0,27.0,25.0,27.0, 23, 23,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,29.0,30.0,30.0,31.0,23.0,23.0,23.0,23.0,23.0,23.0,32.0,33.0,33.0,33.0,33.0,34.0,27.0,34.0,35.0,36.0,36.0,37.0,38.0,38.0,38.0,39.0,62.0,61.0,61.0,7.0,7.0,6.0,5.0,56.0,2.0,23.0,52.0,51.0,51.0,50.0,48.0,30.0,4.0,30.0,43.0,41.0,40.0,38.0,37.0,35.0,33.0,31.0, 29, 27,26.0,23.0,21.0,23.0,15.0,12.0,8.0,4.0,23.0,23.0,41.0,42.0,43.0,44.0,45.0,47.0,48.0,65.0,64.0,62.0,61.0,59.0,59.0,58.0,54.0,53.0,51.0,50.0,47.0,47.0,45.0,41.0,39.0,37.0,35.0,32.0,31.0,28.0,25.0,23.0,23.0,3.0,23.0,23.0,5.0,5.0,5.0,4.0,23.0,23.0,23.0,6.0,6.0,6.0,6.0,5.0,1.0,23.0,23.0,23.0,23.0,23.0,23.0,25.0,25.0,25.0,7.0,7.0,7.0,8.0,27.0,27.0,28.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span9
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,145.0,36.0,141.0,42.0,12.0,3.0,3.0,2.0,11.0,10.0,4.0,4.0,4.0,4.0,3.0,3.0,2.0,2.0,2.0,3.0,2.0,2.0,3.0,3.0,3.0,3.0,4.0,6.0,97.0,97.0,37.0,30.0,10.0,24.0,10.0,10.0,10.0,10.0,10.0,38.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,16.0,19.0,17.0,15.0,4.0,15.0,15.0,17.0,15.0,4.0,14.0,49.0,52.0,55.0,16.0,14.0,13.0,3.0,6.0,71.0,73.0,74.0,13.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,34.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,7.0,8.0,9.0,21.0,20.0,19.0,18.0,18.0,17.0,54.0,54.0,55.0,13.0,15.0,16.0,17.0,8.0,9.0,16.0,12.0,13.0,13.0,19.0,15.0,16.0,16.0,19.0,20.0,19.0,19.0,19.0,19.0,18.0,18.0,18.0,17.0,17.0,27.0,28.0,15.0,14.0,14.0,14.0,30.0,31.0,31.0,12.0,11.0,11.0,10.0,9.0,8.0,7.0,7.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0, 38, 38,38.0,38.0,38.0,38.0,38.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,77.0,77.0,77.0,77.0,77.0,76.0,76.0,76.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,36.0,36.0,35.0,14.0,35.0,10.0,11.0,11.0,12.0,13.0,13.0,14.0,14.0,15.0,15.0,16.0,17.0,17.0,17.0,18.0,27.0,26.0,25.0,24.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,18.0,17.0,16.0,15.0,14.0,16.0,12.0,11.0,9.0,8.0,7.0,5.0,4.0,3.0,1.0,13.0,12.0,11.0,20.0,21.0,22.0,24.0,8.0,29.0,47.0,38.0,38.0,38.0,38.0,38.0,20.0,3.0,21.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,22.0,38.0,38.0,38.0,38.0,13.0,12.0,73.0,71.0,68.0,66.0,63.0,60.0,58.0,17.0,18.0,18.0,17.0,18.0,38.0,38.0,23.0,24.0,20.0,19.0,21.0,38.0,38.0,26.0,31.0,34.0,36.0,24.0,38.0,38.0,38.0,38.0,38.0,14.0,38.0,38.0,15.0,15.0,4.0,2.0,38.0,38.0,38.0,1.0,1.0,1.0,1.0,1.0,2.0,38.0,11.0,12.0,38.0,38.0,38.0,11.0,12.0,12.0,25.0,22.0,20.0,16.0,134.0,136.0,137.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span10
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0,0.0,28.0,15.0,5.0,5.0,6.0,7.0,15.0,11.0,13.0,6.0,6.0,6.0,7.0,7.0,7.0,7.0,6.0,7.0,7.0,7.0,8.0,13.0,13.0,10.0,3.0,6.0,15.0,20.0,30.0,8.0,41.0,18.0,21.0,24.0,27.0,30.0,8.0,35.0,38.0,40.0,43.0,44.0,46.0,48.0,50.0,3.0,8.0,8.0,8.0,8.0,4.0,2.0,8.0,8.0,10.0,4.0,68.0,69.0,70.0,8.0,7.0,6.0,49.0,47.0,23.0,23.0,23.0,44.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,36.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,3.0,4.0,6.0,23.0,23.0,23.0,23.0,23.0,23.0,30.0,31.0,30.0,23.0,10.0,9.0,9.0,23.0,23.0,35.0,23.0, 23, 23,9.0,23.0,23.0,32.0,23.0,23.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,10.0,9.0,23.0,23.0,29.0,29.0,29.0,29.0,23.0,23.0,23.0,8.0,8.0,7.0,7.0,6.0,5.0,4.0,2.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,32.0,25.0,24.0,24.0,24.0,25.0,25.0,25.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,27.0,23.0,7.0,8.0,9.0,8.0,8.0,9.0,9.0,10.0,9.0,10.0,9.0,9.0,9.0,10.0,9.0,23.0,23.0,23.0,23.0,9.0,9.0,9.0,9.0,9.0,9.0,23.0,23.0,23.0,23.0,23.0,23.0,34.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,7.0,8.0,8.0,23.0,23.0,23.0,23.0,4.0,23.0,30.0,23.0,23.0,23.0,23.0,23.0,47.0,4.0,44.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,37.0,23.0,23.0,23.0,23.0,40.0,40.0,23.0,23.0,23.0,23.0,69.0,68.0,67.0,9.0,10.0,1.0,6.0,6.0,58.0,56.0,9.0,9.0,2.0,6.0,8.0,45.0,43.0,11.0,8.0,8.0,9.0,4.0,29.0,26.0,24.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,5.0,10.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,8.0,7.0,24.0,24.0,24.0,14.0,13.0,7.0, 25, 25,26.0,27.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span11
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,143.0,0.0,139.0,9.0,11.0,11.0,11.0,2.0,11.0,7.0,4.0,19.0,3.0,3.0,10.0,7.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,66.0,67.0,71.0,79.0,2.0,4.0,42.0,11.0,30.0,10.0,25.0,26.0,23.0,21.0,21.0,3.0,34.0,30.0,27.0,24.0,22.0,19.0,17.0,17.0,3.0,4.0,4.0,3.0,5.0,3.0,3.0,5.0,5.0,3.0,4.0,14.0,18.0,17.0,3.0,3.0,3.0,12.0,13.0,8.0,9.0,11.0,13.0, 15, 17,19.0,21.0,22.0,23.0,24.0,26.0,28.0,29.0,30.0,32.0,33.0,14.0,35.0,36.0,37.0,38.0,39.0,41.0,42.0,43.0,43.0,44.0,45.0,28.0,26.0,23.0,49.0,50.0,51.0,51.0,52.0,53.0,10.0,10.0,11.0,56.0,13.0,13.0,12.0,17.0,17.0,11.0,18.0,18.0,18.0,10.0,19.0,19.0,18.0,19.0,19.0,10.0,10.0,10.0,10.0,11.0,11.0,11.0,11.0,12.0,17.0,16.0,28.0,29.0,29.0,30.0,13.0,13.0,13.0,18.0,19.0,20.0,21.0,23.0,25.0,27.0,29.0,74.0,75.0,75.0,75.0,75.0,75.0,75.0,76.0,76.0,76.0,76.0,76.0,76.0,76.0,77.0,77.0,77.0,77.0,36.0,36.0,6.0,4.0,4.0,3.0,3.0,3.0,3.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,35.0,42.0,14.0,11.0,11.0,10.0,10.0,10.0,76.0,76.0,76.0,76.0,76.0,75.0,75.0,75.0,38.0,7.0,8.0,35.0,9.0,21.0,19.0,18.0,18.0,17.0,16.0,15.0,14.0,14.0,13.0,13.0,12.0,12.0,11.0,11.0,18.0,18.0,18.0,19.0,10.0,10.0,10.0,10.0,10.0,10.0,19.0,19.0,19.0,18.0,18.0,18.0,13.0,17.0,17.0,16.0,16.0,15.0,15.0,14.0,14.0,13.0,18.0,18.0,19.0,52.0,51.0,51.0,50.0,26.0,48.0,34.0,46.0,45.0,44.0,44.0,43.0,38.0,11.0,38.0,38.0,37.0,36.0,35.0,34.0,33.0,31.0,30.0,29.0,27.0,26.0,25.0,23.0,14.0,20.0,19.0,16.0,15.0,16.0,16.0,10.0,7.0,5.0,3.0,16.0,16.0,16.0,4.0,4.0,1.0,1.0, 3, 18,20.0,2.0,2.0,5.0,4.0,4.0,21.0,23.0,5.0,6.0,5.0,5.0,12.0,25.0,27.0,29.0,31.0,31.0,38.0,32.0,16.0,38.0,38.0,7.0,4.0,7.0,7.0,8.0,38.0,38.0,38.0,38.0,38.0,38.0,11.0,2.0,2.0,11.0,11.0,12.0,8.0,8.0,27.0,127.0,129.0,130.0,132.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span12
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,7.0,7.0,7.0,7.0,7.0,15.0,7.0,6.0,5.0,5.0,8.0,2.0,6.0,6.0,7.0,14.0,13.0,6.0,6.0,13.0,12.0, 9, 1,8.0,8.0,14.0,1.0,7.0,13.0,1.0,7.0,7.0,6.0,2.0,13.0,8.0,8.0,8.0,8.0,8.0,8.0,7.0,5.0,8.0,8.0,8.0,8.0,10.0,8.0,8.0,10.0,10.0,9.0,10.0,2.0,10.0,9.0,10.0,10.0,10.0,6.0,14.0,46.0,46.0,45.0,7.0,44.0,43.0,42.0,41.0,40.0,40.0,40.0,39.0,38.0,38.0,38.0,37.0,37.0,9.0,36.0,35.0,35.0,35.0,35.0, 34, 34,33.0,34.0,33.0,33.0,23.0,23.0,23.0,32.0,31.0,31.0,32.0,31.0,31.0,14.0,12.0,11.0,30.0,23.0,23.0,23.0,9.0,10.0,23.0,9.0,9.0,10.0,23.0,9.0,9.0,23.0,9.0,9.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,9.0,9.0,23.0,23.0,23.0,23.0,9.0,8.0,7.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,26.0,25.0,25.0,25.0,26.0,26.0,26.0,25.0,25.0,25.0,25.0,25.0,25.0,26.0,25.0,25.0,25.0,25.0,13.0,13.0,17.0,20.0,21.0,22.0,23.0,6.0,4.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,14.0,14.0,1.0,11.0,19.0,23.0,23.0,23.0,25.0,25.0,25.0,24.0,24.0,25.0,25.0,25.0,23.0,3.0,4.0,23.0,7.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,9.0,9.0,10.0,9.0,23.0,23.0,23.0,23.0,23.0,23.0,9.0,9.0,9.0,9.0,9.0,9.0,23.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,8.0,8.0,23.0,23.0,23.0,28.0, 29, 28,29.0,23.0,30.0,8.0,30.0,30.0,31.0,30.0,30.0,23.0,30.0,23.0,32.0,32.0,33.0,33.0,33.0,33.0,34.0,34.0,34.0,35.0,35.0,36.0,37.0,7.0,37.0,37.0,39.0,39.0,4.0,6.0,41.0,43.0,43.0,44.0,3.0,6.0,7.0,10.0,11.0,11.0,8.0,7.0,8.0,9.0,4.0,4.0,13.0,12.0,10.0,10.0,11.0,9.0,9.0,14.0,13.0,9.0,6.0,8.0,8.0,8.0,8.0,23.0,8.0,6.0,23.0,23.0,23.0,23.0,8.0,8.0,7.0,23.0,23.0,23.0,23.0,23.0,23.0,7.0,7.0,7.0,7.0,8.0,15.0,4.0,3.0,24.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span13
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,2.0,2.0,2.0,4.0,2.0,11.0,19.0,3.0,10.0,10.0,3.0,2.0,3.0,3.0,2.0,5.0,7.0,5.0,7.0,3.0,3.0,4.0,8.0,4.0,3.0,4.0,31.0,3.0,27.0,3.0,10.0,12.0,17.0,17.0,15.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,3.0,3.0,6.0,6.0,6.0,16.0,5.0,5.0,3.0,3.0,13.0,3.0,4.0,3.0,3.0,5.0,5.0,6.0,2.0,7.0,15.0,14.0,13.0,6.0,12.0,12.0,17.0,15.0,15.0,14.0,13.0,12.0,12.0,12.0,11.0,11.0,14.0,2.0,13.0,13.0,12.0,12.0,11.0,11.0,10.0,11.0,11.0,13.0,25.0,46.0,47.0,48.0,13.0,12.0,11.0,10.0,11.0,10.0,23.0,25.0,25.0,10.0,56.0,57.0,58.0,12.0,11.0,18.0,11.0,11.0,10.0,62.0,10.0,10.0,19.0,10.0,10.0,65.0,65.0,66.0,67.0,67.0,68.0,68.0,68.0,69.0,12.0,13.0,16.0,15.0,15.0,14.0,16.0,17.0,18.0,72.0,72.0,72.0,73.0,73.0,73.0,74.0,74.0,21.0,12.0,10.0,10.0,10.0,10.0,10.0,10.0,29.0,21.0,12.0,10.0,10.0,10.0,10.0,10.0,10.0,42.0,40.0,40.0,13.0,12.0,11.0,11.0,10.0,1.0,15.0,3.0,3.0,3.0,3.0,4.0,5.0,6.0,35.0,40.0,40.0,28.0,21.0,13.0,10.0,10.0,10.0,10.0, 10, 11,11.0,11.0,10.0,10.0,10.0,75.0,28.0,26.0,8.0,22.0, 73, 73,73.0,72.0,72.0,72.0,72.0,71.0,71.0,71.0,70.0,70.0,70.0,69.0,69.0,11.0,11.0,10.0,10.0,67.0,67.0,66.0,66.0,65.0,64.0,10.0,10.0,10.0,11.0,11.0,11.0,18.0,12.0,12.0,13.0,13.0,14.0,14.0,15.0,16.0,17.0,54.0,54.0,53.0,23.0,24.0,28.0,30.0,49.0,33.0,8.0,13.0,13.0,12.0,13.0,13.0,42.0,21.0,39.0,18.0,14.0,13.0,13.0,14.0,14.0,14.0,16.0,19.0,21.0,15.0,14.0,14.0,7.0,15.0,17.0,19.0,15.0,3.0,3.0,16.0,16.0,19.0,21.0,4.0,4.0,4.0,3.0,1.0,5.0,6.0,7.0,3.0,3.0,3.0,2.0,2.0,1.0,2.0,5.0,5.0,2.0,1.0,15.0,14.0,5.0,13.0,13.0,14.0,13.0,14.0,32.0,14.0,11.0,15.0,12.0,38.0,38.0,2.0,2.0,3.0,8.0,9.0,9.0,10.0,10.0,11.0,3.0,4.0,5.0,3.0,2.0,6.0,12.0,11.0,126.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span14
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,29.0,7.0,7.0,7.0,8.0,7.0,7.0,6.0,6.0,7.0,7.0,6.0,7.0,6.0,6.0,6.0,10.0,9.0,11.0,7.0,7.0,7.0,6.0,6.0,7.0,1.0,7.0,12.0,8.0,5.0,8.0,4.0,2.0,8.0,8.0,19.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,6.0,8.0,10.0,17.0,10.0,10.0,5.0,7.0,17.0,9.0,10.0,10.0,10.0,7.0,9.0,10.0,10.0,11.0,10.0,9.0,9.0,10.0,5.0,3.0,11.0,11.0,9.0,8.0,8.0,6.0,5.0,4.0,4.0,1.0,23.0,12.0,8.0,7.0,5.0,4.0,11.0,11.0,12.0,10.0,8.0,4.0,13.0,33.0,32.0,32.0,7.0,8.0,7.0,6.0,4.0,5.0,14.0,13.0,14.0,9.0,30.0,30.0,29.0,23.0,23.0,9.0,23.0,23.0,23.0,29.0,23.0,23.0,9.0,23.0,23.0,28.0,28.0,28.0,27.0,27.0,27.0,27.0,27.0,26.0,23.0,23.0,9.0,9.0,9.0,9.0,23.0,23.0,23.0,26.0,27.0,27.0,26.0,26.0,27.0,26.0,26.0,17.0,26.0,28.0,29.0,28.0,22.0,16.0,8.0,4.0,12.0,21.0, 23, 23,21.0,21.0,17.0,8.0,14.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,16.0,4.0,4.0,23.0,23.0,22.0,21.0,19.0,17.0,14.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,23.0,4.0,2.0,4.0,11.0,20.0,23.0,23.0,25.0,23.0,23.0,6.0,23.0,26.0,25.0,25.0,26.0,26.0,25.0,25.0,26.0,25.0,25.0,26.0,25.0,25.0,26.0,26.0,23.0,23.0,23.0,23.0,26.0,25.0,26.0,26.0,26.0,27.0,23.0,23.0,23.0,23.0,23.0,23.0,9.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,29.0,28.0,28.0,15.0,16.0,14.0,11.0,29.0,8.0,14.0,2.0,5.0,8.0,9.0,12.0,30.0,45.0,32.0,19.0,3.0,5.0,8.0,10.0,20.0,22.0,22.0,21.0,9.0,2.0,3.0,5.0,9.0,10.0,10.0,10.0,3.0,10.0,10.0,8.0,10.0,10.0,10.0,10.0,9.0,10.0,11.0,11.0,21.0,11.0,10.0,6.0, 5, 2,4.0,6.0,7.0,8.0,9.0,9.0,5.0,5.0,18.0,18.0,10.0,8.0,8.0,8.0,10.0,10.0,8.0,9.0,8.0,7.0,1.0,23.0,23.0,7.0,7.0,7.0,8.0,7.0,7.0,7.0,7.0,7.0,7.0,5.0,5.0,7.0,7.0,5.0,24.0,24.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span15
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,137.0,7.0,6.0,5.0,1.0,4.0,2.0,3.0,4.0,3.0,2.0,3.0,3.0,3.0,4.0,4.0,12.0,12.0,10.0,35.0,3.0,2.0,3.0,3.0,20.0,15.0,4.0,4.0,4.0,3.0,8.0,4.0,4.0,4.0,4.0,94.0,2.0,3.0,4.0,3.0,3.0,3.0,3.0,3.0,7.0,14.0,14.0,14.0,83.0,18.0,3.0,14.0,14.0,79.0,15.0,3.0,7.0,7.0,9.0,9.0,9.0,6.0,11.0,7.0,7.0,6.0,1.0,5.0,5.0,25.0,8.0,8.0,8.0,7.0,7.0,5.0,4.0,3.0,4.0,13.0,14.0,4.0,5.0,5.0,3.0,3.0,2.0,8.0,7.0,7.0,9.0,10.0,18.0,16.0,14.0,1.0,1.0,2.0,3.0,4.0,1.0,53.0,53.0,52.0,27.0,11.0,12.0,46.0,59.0,59.0,11.0,60.0, 61, 61,35.0,62.0,63.0,10.0,64.0,64.0,14.0,11.0,10.0,10.0,10.0,10.0,10.0,10.0,45.0,69.0,69.0,13.0,14.0,14.0,15.0,71.0,71.0,72.0,11.0,10.0,10.0,10.0,10.0,9.0,10.0,10.0,5.0,5.0,5.0,4.0,4.0,11.0,3.0,11.0,10.0,10.0,10.0,10.0,10.0,11.0,11.0,15.0,24.0,40.0,0.0,0.0,40.0,40.0,40.0,40.0,40.0,10.0,10.0,15.0,10.0,10.0,11.0,11.0,12.0,13.0,40.0,0.0,0.0,41.0,41.0,41.0,41.0,41.0,41.0,10.0,5.0,12.0,29.0,21.0,13.0,10.0,10.0,10.0,75.0,74.0,24.0,74.0,8.0,7.0,7.0,6.0,6.0,7.0,7.0,6.0,7.0,7.0,7.0,9.0,9.0,10.0,11.0,69.0,68.0,68.0,67.0,11.0,11.0,11.0,11.0,12.0,14.0,64.0,63.0,63.0,62.0,62.0,61.0,11.0,60.0,60.0,59.0,58.0,58.0,57.0,56.0,56.0,55.0,12.0,12.0,15.0,11.0,9.0,7.0,8.0,33.0,8.0,57.0,22.0,33.0,30.0,29.0,26.0,14.0,38.0,16.0,15.0,3.0,3.0,2.0,1.0,3.0,4.0,16.0,14.0,1.0,6.0,7.0,7.0,4.0,6.0,6.0,7.0,4.0,7.0,7.0,3.0,3.0,3.0,4.0,4.0,4.0,4.0,8.0,7.0,7.0,2.0,4.0,8.0,9.0,6.0,23.0,21.0,20.0,18.0,3.0,3.0,16.0,15.0,90.0,91.0,15.0,6.0,7.0,25.0,22.0,20.0,14.0,17.0,14.0,12.0,1.0,9.0,7.0,12.0,12.0,12.0,2.0,3.0,3.0,3.0,3.0,2.0,4.0,4.0,4.0,4.0,4.0,13.0,123.0,125.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span16
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,11.0,13.0,6.0,7.0,7.0,7.0,7.0,6.0,7.0,5.0,6.0,6.0,6.0,12.0,15.0,15.0,5.0,1.0,7.0,8.0,7.0,7.0,1.0,3.0,3.0,7.0,8.0,7.0,6.0,8.0,8.0,6.0,8.0,0.0,5.0,6.0,6.0,7.0,8.0,8.0,8.0,8.0,4.0,17.0,17.0,17.0,0.0,17.0,3.0,16.0,16.0,0.0,16.0,9.0,1.0,3.0,16.0,16.0,16.0,11.0,16.0,11.0,12.0,13.0,2.0, 11, 11,15.0,6.0,9.0,11.0,13.0,15.0,18.0,12.0,12.0,13.0,15.0,14.0,10.0,9.0,1.0,4.0,3.0,1.0,7.0,10.0,11.0,12.0,15.0,2.0,5.0,6.0,6.0,6.0,6.0,6.0,6.0,8.0,0.0,0.0,0.0,14.0,7.0,2.0,14.0,29.0,29.0,23.0,29.0,29.0,29.0,4.0,29.0,28.0,23.0,28.0,29.0,23.0,23.0,20.0,16.0,13.0,9.0,5.0,2.0,13.0,27.0,27.0,23.0,23.0,23.0,23.0,27.0,27.0,26.0,25.0,23.0,17.0,12.0,7.0,4.0,3.0,3.0,13.0,13.0,13.0,14.0,14.0,13.0,3.0,3.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,4.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,14.0,8.0,13.0,14.0,14.0,13.0,13.0,23.0,24.0,25.0,23.0,25.0,4.0,5.0,5.0,6.0,6.0,5.0,4.0,5.0,6.0,12.0,15.0,18.0,24.0,23.0,23.0,25.0,26.0,26.0,26.0,7.0,11.0,13.0,15.0,18.0,19.0,27.0,27.0,27.0,27.0,27.0,27.0,23.0,27.0,27.0,27.0,28.0,27.0,28.0,28.0,28.0,28.0,17.0,20.0,1.0,14.0,14.0,15.0,14.0,9.0,14.0,0.0,1.0,14.0,15.0,14.0,15.0,14.0,23.0,17.0,14.0,20.0,6.0,6.0,7.0,5.0,2.0,15.0,16.0,11.0,9.0,8.0,9.0,2.0,9.0,9.0,8.0,9.0,6.0,4.0,10.0,10.0,11.0,10.0,10.0,10.0,10.0,16.0,17.0,16.0,6.0, 3, 9,7.0,5.0,17.0,17.0,17.0,17.0,7.0,5.0,17.0,18.0,0.0,0.0,18.0,8.0,4.0,18.0,18.0,18.0,9.0,20.0,8.0,8.0,9.0,14.0,17.0,8.0,8.0,8.0,7.0,7.0,7.0,7.0,7.0,7.0,4.0,8.0,5.0,5.0,6.0,24.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span17
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,32.0,33.0,34.0,2.0,4.0, 4, 3, 4, 4, 10, 3, 3, 1, 11, 4, 4, 15, 3, 5, 4, 5, 4, 17, 18, 12, 4, 7, 6, 4, 3, 3, 18, 18, 0, 15, 16, 17, 18, 19, 20, 22, 7, 14, 86, 85, 84, 0, 82, 14, 81, 80,0.0,79.0,17.0,10.0,9.0,76.0,75.0,74.0,10.0,73.0,13.0,14.0,14.0,16.0,21.0,22.0,69.0,13.0,13.0,12.0,12.0,12.0,12.0,3.0,3.0,2.0,63.0,63.0,15.0,17.0,2.0,2.0,22.0,8.0,12.0,11.0,11.0,11.0,57.0,3.0,2.0,2.0,1.0,2.0,2.0,3.0,3.0,23.0,0.0,0.0,0.0,52.0,29.0,32.0,51.0,46.0,46.0,60.0,46.0,45.0,39.0,6.0,32.0,28.0,63.0,20.0,16.0,7.0,11.0,14.0,19.0,22.0,25.0,29.0,33.0,45.0,44.0,44.0,70.0,70.0,70.0,71.0,18.0,14.0,12.0,8.0,10.0,2.0,7.0,26.0,30.0,24.0,18.0,42.0,42.0,42.0,41.0,41.0,41.0,11.0,11.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,40.0,40.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,40.0,10.0,40.0,40.0,40.0,40.0,40.0,40.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,41.0,10.0,10.0,41.0,41.0,41.0,42.0,42.0,10.0,12.0,18.0,74.0,10.0,31.0,3.0,2.0,1.0,1.0,2.0,3.0,3.0,2.0,8.0,8.0,4.0,12.0,12.0,11.0,15.0,20.0,11.0,11.0,15.0,24.0,22.0,19.0,16.0,13.0,17.0,11.0,11.0,12.0,11.0,12.0,61.0,14.0,16.0,20.0,23.0,12.0,12.0,12.0,12.0,12.0,19.0,1.0,4.0,55.0, 55, 55,56.0,8.0,57.0,0.0,3.0,58.0,58.0,59.0,59.0,24.0,40.0,19.0,62.0,12.0,2.0,3.0,3.0,11.0,12.0,65.0,65.0,13.0,1.0,3.0,3.0,13.0,17.0,15.0,13.0,7.0,12.0,12.0,7.0,20.0,17.0,15.0,14.0,12.0,10.0,78.0,78.0,79.0,7.0,7.0,5.0,13.0,14.0,83.0,84.0,85.0,86.0,17.0,17.0,89.0,89.0,0.0,0.0,92.0,15.0,16.0,95.0,96.0,97.0,19.0,98.0,16.0,12.0,12.0,12.0,12.0,15.0,15.0,26.0,13.0,12.0,13.0,12.0,13.0,7.0,5.0,10.0,11.0,5.0,15.0,122.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span18
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,28.0,26.0,26.0,26.0,6.0,7.0,6.0,6.0,16.0,16.0,7.0,5.0,5.0,6.0,7.0,6.0,6.0,14.0,7.0,7.0,8.0,7.0,8.0,21.0,20.0,6.0,6.0,8.0,8.0,15.0,6.0,6.0,19.0,19.0,0.0,18.0,18.0,18.0,18.0,17.0,17.0,17.0,2.0,18.0,0.0,0.0,0.0,0.0,0.0,16.0,0.0,0.0,0.0,0.0,16.0,16.0,16.0,0.0,0.0,0.0,15.0,0.0,16.0,15.0,16.0,15.0,15.0,16.0,0.0,15.0,15.0,15.0,15.0,15.0,15.0,5.0,6.0,7.0,0.0,0.0,15.0,14.0,7.0,5.0,14.0,3.0,14.0,15.0,15.0,14.0,0.0,7.0,6.0,6.0,7.0,6.0,6.0,5.0,3.0,13.0,0.0,0.0,0.0,0.0,13.0,14.0,0.0,13.0,14.0,29.0,14.0,14.0,1.0,13.0,8.0,12.0,29.0,20.0,23.0,14.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,13.0,13.0,26.0,27.0,27.0,26.0,18.0,22.0,24.0,13.0,13.0,3.0,2.0,14.0,13.0,1.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,13.0,22.0,16.0,25.0,1.0, 14, 6,11.0,16.0,18.0,19.0,20.0,20.0,3.0,8.0,4.0,3.0,13.0,13.0,13.0,20.0,14.0,1.0,5.0,1.0,13.0,13.0,14.0,14.0,13.0,19.0,3.0,6.0,8.0,12.0,14.0,27.0,22.0,20.0,17.0,14.0,5.0,7.0,9.0,12.0,15.0,13.0,2.0,17.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,14.0,32.0,14.0,0.0,15.0,12.0,9.0,6.0,15.0,15.0,0.0,0.0,15.0,10.0,7.0,5.0,15.0,15.0,15.0,16.0,7.0,15.0,16.0,2.0,16.0,16.0,16.0,16.0,16.0,16.0,0.0,0.0,0.0,16.0,17.0,1.0,17.0,16.0,0.0,0.0,0.0,0.0,17.0,17.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,0.0,0.0,0.0,19.0,0.0,20.0,10.0,8.0,8.0,8.0,2.0,1.0,20.0,8.0,8.0,8.0,8.0,8.0,2.0,8.0,23.0,22.0,2.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span19
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,136.0,135.0,133.0,131.0,36.0,2.0,3.0,6.0,5.0,5.0,2.0,10.0,10.0,10.0,1.0,3.0,3.0,4.0,4.0,31.0,33.0,35.0,36.0,105.0,104.0,17.0,10.0,19.0,5.0,16.0,16.0,17.0,96.0,95.0,0.0,94.0,92.0,91.0,90.0,90.0,89.0,88.0,14.0,86.0,0.0,0.0,0.0,0.0,0.0,82.0,0.0,0.0,0.0,0.0,78.0,77.0,77.0,0.0,0.0,0.0,74.0,0.0,72.0,72.0,71.0,71.0,70.0,69.0,0.0,68.0,67.0,67.0,66.0,66.0,65.0,11.0,12.0,13.0,0.0,0.0,62.0,62.0,19.0,20.0,60.0,13.0,59.0,58.0,58.0,58.0,0.0,3.0,4.0,3.0,12.0,13.0,13.0,14.0,16.0,54.0,0.0,0.0,0.0,0.0,52.0,51.0,0.0,51.0,50.0,45.0,49.0,49.0,5.0,49.0,5.0,5.0,24.0,5.0,5.0,47.0,47.0,47.0,46.0,46.0,46.0,46.0,45.0,0.0,45.0,45.0,44.0,29.0,29.0,24.0,7.0,7.0,8.0,43.0,43.0,11.0,12.0,42.0,42.0,5.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,41.0,41.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,41.0,41.0,0.0,0.0,0.0,0.0,0.0,42.0,10.0,10.0,25.0,33.0,42.0,23.0,19.0,15.0,13.0,11.0,10.0,10.0,5.0,10.0,10.0,11.0,45.0,45.0,45.0,10.0,11.0,12.0,13.0,11.0,47.0,47.0,47.0,47.0,48.0,9.0,7.0,7.0,7.0,6.0,6.0,12.0,3.0,11.0,10.0,10.0,10.0,10.0,11.0,24.0,21.0,54.0,13.0,12.0,0.0,0.0,0.0,0.0,56.0,0.0,0.0,8.0,0.0,0.0,0.0,0.0,60.0,14.0,61.0,0.0,62.0,11.0,11.0,12.0,64.0,64.0,0.0,0.0,66.0,12.0,13.0,12.0,68.0,69.0,70.0,70.0,12.0,72.0,72.0,13.0,73.0,74.0,75.0,75.0,76.0,77.0,0.0,0.0,0.0,80.0,80.0,7.0,82.0,83.0,0.0,0.0,0.0,0.0,87.0,88.0,0.0,0.0,0.0,0.0,0.0,93.0,94.0,0.0,0.0,0.0,97.0,0.0,99.0,14.0,11.0,12.0,14.0,12.0,12.0,107.0,23.0,22.0,20.0,18.0,15.0,4.0,12.0,116.0,118.0,11.0,121.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span20
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.0,6.0,6.0,11.0,13.0,7.0,7.0,7.0,7.0,6.0,8.0,7.0,6.0,6.0,6.0,21.0,20.0,21.0,21.0,0.0,0.0,20.0,7.0,19.0,12.0,19.0,19.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,15.0,14.0,0.0,0.0,0.0,0.0,14.0,15.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,4.0,4.0,5.0,15.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,0.0, 0, 14,0.0,14.0,14.0,15.0,13.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,4.0,8.0,13.0,14.0,14.0,13.0,0.0,0.0,13.0,14.0,0.0,0.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,9.0,13.0,0.0,13.0,13.0,13.0,13.0,14.0,14.0,14.0,12.0,13.0,14.0,14.0,0.0,0.0,0.0,13.0,13.0,10.0,6.0,13.0,0.0,0.0,0.0,0.0,0.0,14.0,19.0,17.0,14.0,12.0,9.0,17.0,2.0,14.0,14.0,14.0,10.0,7.0,4.0,14.0,14.0,0.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0,0.0,0.0,0.0,16.0,0.0,0.0,0.0,15.0,15.0,15.0,0.0,0.0,0.0,0.0,0.0,15.0,15.0,15.0,0.0,0.0,0.0,0.0,16.0,0.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,17.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.0,10.0,8.0,4.0,20.0,20.0,0.0,21.0,20.0,20.0,21.0,22.0,8.0,22.0,0.0,0.0,23.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span21
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,130.0,8.0,6.0,24.0,10.0,1.0,4.0,2.0,2.0,3.0,3.0,4.0,4.0,2.0,2.0,110.0,109.0,107.0,106.0,0.0,0.0,103.0,17.0,101.0,17.0,99.0,98.0,97.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,87.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,65.0,64.0,64.0,0.0,0.0,0.0,0.0,61.0,60.0,0.0,59.0,0.0,0.0,0.0,0.0,0.0,11.0,11.0,12.0,55.0,55.0,55.0,54.0,54.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,50.0,0.0,0.0,49.0,0.0,48.0,48.0,6.0,48.0,47.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,44.0,2.0,7.0,7.0,43.0,43.0,43.0,0.0,0.0,43.0,42.0,0.0,0.0,42.0,42.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,42.0,42.0,10.0,42.0,0.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,10.0,44.0,44.0,44.0,0.0,0.0,0.0,46.0,46.0,11.0,11.0,47.0,0.0,0.0,0.0,0.0,0.0,48.0,6.0,5.0,5.0,5.0,6.0,3.0,6.0,50.0,51.0,51.0,11.0,11.0,12.0,52.0,53.0,0.0,54.0,54.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,58.0,0.0,0.0,0.0,0.0,0.0,21.0,0.0,0.0,0.0,62.0,63.0,63.0,0.0,0.0,0.0,0.0,0.0,67.0,67.0,68.0,0.0,0.0,0.0,0.0,71.0,0.0,0.0,73.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 81,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,101.0,13.0,13.0,12.0,105.0,106.0,0.0,108.0,110.0,111.0,112.0,113.0,14.0,115.0,0.0,0.0,119.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span22
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.0,10.0,24.0,3.0,6.0,16.0,7.0,7.0,7.0,7.0,16.0,16.0,7.0,7.0,0.0,0.0, 0, 0,0.0,0.0,0.0,20.0,0.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,15.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,13.0,14.0,14.0,14.0,9.0,14.0,0.0,0.0,0.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.0,19.0,20.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span23
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.0,24.0,126.0,12.0,8.0,4.0,3.0,3.0,3.0,2.0,4.0,5.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,102.0,0.0,100.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,57.0,56.0,56.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,48.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,44.0,44.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,42.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,44.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,46.0,46.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,48.0,49.0,49.0,49.0,49.0,5.0,50.0,0.0,0.0,0.0,51.0,52.0,52.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,60.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,102.0,103.0,104.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,114.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span24
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.0,24.0,0.0,24.0,6.0,7.0,7.0,7.0,7.0,6.0,10.0,9.0,17.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span25
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,128.0,127.0,0.0,124.0,12.0,2.0,2.0,7.0,3.0,11.0,22.0,24.0,5.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,44.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,50.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span26
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,6.0,8.0,2.0,1.0,10.0,22.0,21.0,9.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span27
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,123.0,7.0,4.0,7.0,18.0,4.0,114.0,114.0,25.0,5.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span28
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 6, 4, 7, 8, 0, 0, 22, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span29
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.0,3.0,3.0,4.0,22.0,0.0,0.0,112.0,29.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span30
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,7.0,7.0,7.0,22.0,0.0,0.0,0.0,21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span31
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,121.0,4.0,3.0,22.0,116.0,0.0,0.0,0.0,111.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span32
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,11.0,8.0,22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span33
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,1.0,117.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span34
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span35
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,120.0,16.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span36
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span37
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,119.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span38 ) , row0 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span0 FROM tuples))),  row1 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span1 FROM tuples))),  row2 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span2 FROM tuples))),  row3 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span3 FROM tuples))),  row4 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span4 FROM tuples))),  row5 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span5 FROM tuples))),  row6 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span6 FROM tuples))),  row7 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span7 FROM tuples))),  row8 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span8 FROM tuples))),  row9 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span9 FROM tuples))),  row10 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span10 FROM tuples))),  row11 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span11 FROM tuples))),  row12 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span12 FROM tuples))),  row13 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span13 FROM tuples))),  row14 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span14 FROM tuples))),  row15 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span15 FROM tuples))),  row16 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span16 FROM tuples))),  row17 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span17 FROM tuples))),  row18 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span18 FROM tuples))),  row19 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span19 FROM tuples))),  row20 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span20 FROM tuples))),  row21 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span21 FROM tuples))),  row22 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span22 FROM tuples))),  row23 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span23 FROM tuples))),  row24 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span24 FROM tuples))),  row25 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span25 FROM tuples))),  row26 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span26 FROM tuples))),  row27 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span27 FROM tuples))),  row28 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span28 FROM tuples))),  row29 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span29 FROM tuples))),  row30 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span30 FROM tuples))),  row31 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span31 FROM tuples))),  row32 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span32 FROM tuples))),  row33 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span33 FROM tuples))),  row34 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span34 FROM tuples))),  row35 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span35 FROM tuples))),  row36 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span36 FROM tuples))),  row37 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span37 FROM tuples))),  row38 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span38 FROM tuples))) SELECT row0.index,
	row0.value as value_0, 
	row1.value as value_1, 
	row2.value as value_2, 
	row3.value as value_3, 
	row4.value as value_4, 
	row5.value as value_5, 
	row6.value as value_6, 
	row7.value as value_7, 
	row8.value as value_8, 
	row9.value as value_9, 
	row10.value as value_10, 
	row11.value as value_11, 
	row12.value as value_12, 
	row13.value as value_13, 
	row14.value as value_14, 
	row15.value as value_15, 
	row16.value as value_16, 
	row17.value as value_17, 
	row18.value as value_18, 
	row19.value as value_19, 
	row20.value as value_20, 
	row21.value as value_21, 
	row22.value as value_22, 
	row23.value as value_23, 
	row24.value as value_24, 
	row25.value as value_25, 
	row26.value as value_26, 
	row27.value as value_27, 
	row28.value as value_28, 
	row29.value as value_29, 
	row30.value as value_30, 
	row31.value as value_31, 
	row32.value as value_32, 
	row33.value as value_33, 
	row34.value as value_34, 
	row35.value as value_35, 
	row36.value as value_36, 
	row37.value as value_37, 
	row38.value as value_38 from row0 LEFT JOIN row1 ON row0.index = row1.index LEFT JOIN row2 ON row0.index = row2.index LEFT JOIN row3 ON row0.index = row3.index LEFT JOIN row4 ON row0.index = row4.index LEFT JOIN row5 ON row0.index = row5.index LEFT JOIN row6 ON row0.index = row6.index LEFT JOIN row7 ON row0.index = row7.index LEFT JOIN row8 ON row0.index = row8.index LEFT JOIN row9 ON row0.index = row9.index LEFT JOIN row10 ON row0.index = row10.index LEFT JOIN row11 ON row0.index = row11.index LEFT JOIN row12 ON row0.index = row12.index LEFT JOIN row13 ON row0.index = row13.index LEFT JOIN row14 ON row0.index = row14.index LEFT JOIN row15 ON row0.index = row15.index LEFT JOIN row16 ON row0.index = row16.index LEFT JOIN row17 ON row0.index = row17.index LEFT JOIN row18 ON row0.index = row18.index LEFT JOIN row19 ON row0.index = row19.index LEFT JOIN row20 ON row0.index = row20.index LEFT JOIN row21 ON row0.index = row21.index LEFT JOIN row22 ON row0.index = row22.index LEFT JOIN row23 ON row0.index = row23.index LEFT JOIN row24 ON row0.index = row24.index LEFT JOIN row25 ON row0.index = row25.index LEFT JOIN row26 ON row0.index = row26.index LEFT JOIN row27 ON row0.index = row27.index LEFT JOIN row28 ON row0.index = row28.index LEFT JOIN row29 ON row0.index = row29.index LEFT JOIN row30 ON row0.index = row30.index LEFT JOIN row31 ON row0.index = row31.index LEFT JOIN row32 ON row0.index = row32.index LEFT JOIN row33 ON row0.index = row33.index LEFT JOIN row34 ON row0.index = row34.index LEFT JOIN row35 ON row0.index = row35.index LEFT JOIN row36 ON row0.index = row36.index LEFT JOIN row37 ON row0.index = row37.index LEFT JOIN row38 ON row0.index = row38.index



=======================================================================================
=======================================================================================
QUERY_NO: 352
QUERY_ID: e74373c3-5410-42fd-a44c-612268144c0e
QUERY_TITLE: string regex

QUERY_STRING:

SELECT
	 (REGEXP_SUBSTR( 'binance', '\\s?(\\w+)\\s?\\d+', 1, 1, 'e', 1) ) as substr



=======================================================================================
=======================================================================================
QUERY_NO: 353
QUERY_ID: a0afb02e-a3a0-4150-8bba-47353e2132c6
QUERY_TITLE: NFT Sales Vs Mercato Aggr

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	 SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent') ) , contracts as (
	SELECT
	
	DISTINCT version
	  , split(payload_function, '::')[0] as contract
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp> current_date - INTERVAL '30 day'
	  AND version IN (SELECT DISTINCT version from base)
	
	
	
	 ) , refine as (
	SELECT
	
	block_timestamp
	  , block_number
	  , b.version
	  , purchaser
	  , seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , CASE WHEN marketplace='topaz' AND contract!='0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2' THEN 'Mercato(Topaz)'
	
	
	
	WHEN marketplace='wapal' AND contract!='0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'Mercato(Wapal)'
	
	
	
	ELSE marketplace END as marketplace
	from base b
	 LEFT JOIN contracts c on c.version=b.version ) SELECT
	 COUNT(DISTINCT version) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, SUM(sale_amount) as sale_amount
	, block_timestamp::date as ddate
	, marketplace from refine GROUP BY ddate, marketplace ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 354
QUERY_ID: 9ba0c369-8f05-4f8f-9506-94f62f2f2811
QUERY_TITLE: [ALGO] NFT minting over time

QUERY_STRING:

with arc69_assets as (
	  SELECT asset_id from algorand.asset_configuration_transaction
	  WHERE
	 
	TRY_PARSE_JSON(try_base64_decode_string(tx_message:txn:note::string)):standard = 'arc69'
			AND tx_message:txn:snd IS NOT NULL  ), arc69_asset_dets as (
	SELECT asset_id, created_at, 'arc69' as cat
		from algorand.asset
		WHERE
			asset_id IN (SELECT asset_id from arc69_assets)
			AND asset_deleted = FALSE
			AND total_supply = 1 ), arc3_asset_dets as (
	  SELECT  asset_id, created_at, 'arc3' as cat
	  from algorand.asset
	  WHERE
	
		asset_url like '%#arc3%'
	 
	AND total_supply = 1 ), combo as (
	SELECT * from arc69_asset_dets
		UNION ALL
	SELECT * from arc3_asset_dets ) SELECT
	COUNT(DISTINCT asset_id) as totals,
			date_trunc('day', block_timestamp) as ddate,
			SUM(totals) OVER (PARTITION BY cat ORDER BY ddate ASC) as adopted,
		cat from combo LEFT JOIN algorand.block ON combo.created_at = block.block_id GROUP BY ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 355
QUERY_ID: c850f5e6-6225-41a2-8d0b-99ba7cbbd43a
QUERY_TITLE: [ALGO] AlgoDex Volume (Algo)

QUERY_STRING:

with tgroups as (
	SELECT
		DISTINCT tx_group_id
	from algorand.transactions
	WHERE
			(block_timestamp>='2022-02-10' AND block_timestamp<'2022-02-11')
			AND tx_type_name = 'application call'
			AND tx_message:txn:apid IN ('354073834', '354073718' )
			AND REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '(\\[.*\\])', 1, 1, 'e', 1) like any ('%partial%', '%full%') ), base as (
	SELECT
	
		DISTINCT tx_id, 
		tx_group_id,
		tx_type_name,
		intra,
		tx_message
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
				SELECT tx_group_id from tgroups
			) ), refine as (
	SELECT
		row_number() OVER (PARTITION by tx_group_id ORDER BY intra) as row_num,
			tx_message:txn:amt/1e6 as amt,
		tx_group_id
	from base ) SELECT
	SUM(amt) as algo_volume from refine WHERE
	row_num=2



=======================================================================================
=======================================================================================
QUERY_NO: 356
QUERY_ID: 8a21330b-2da2-4377-a07b-b7fa315111d2
QUERY_TITLE: [ALGO] AlgoDex Trades

QUERY_STRING:

with tgroups as (
	SELECT
		DISTINCT tx_group_id
	from algorand.transactions
	WHERE
			(block_timestamp>='2022-02-10' AND block_timestamp<'2022-02-11')
			AND tx_type_name = 'application call'
			AND tx_message:txn:apid IN ('354073834', '354073718' )
	 ), samples as (
	  SELECT
	
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '(\\[.*\\])', 1, 1, 'e', 1) as substr_note_l,
		CASE
			WHEN substr_note_l like any ('%partial%', '%full%') THEN 1 ELSE 0 END as trades,
			CASE
			WHEN substr_note_l like '%close%' THEN 'fclose'
			WHEN substr_note_l like '%full%' THEN 'filled'
			ELSE NULL END as status,
			CASE
			WHEN substr_note_l like '%open%' THEN 1 ELSE 0 END as opened,
			CASE
			WHEN substr_note_l like '%asa%' THEN TRUE ELSE FALSE END as is_asa,
		REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.* ":(.*)', 1, 1, 'e', 1) as substr_note_r,
		TRY_PARSE_JSON(SUBSTRING( substr_note_r, 0, LEN(substr_note_r) -1 )) as json_note,
		json_note:escrowAddr as escrow_wallet,
		json_note:escrowOrderType as otype,
			json_note:txnNum as tnum,
			tx_group_id
	  from algorand.transactions
	  WHERE
		tx_group_id in (SELECT * from tgroups) ), dedups as (
	  SELECT	DISTINCT escrow_wallet, tx_group_id, trades, status, opened, otype, is_asa
	  from samples ), combo as (
	SELECT
		SUM(trades) as trades,
		MAX(opened) as opened,
		MAX(status) as status,
		MAX(is_asa) as is_asa,
		MAX(TX_GROUP_ID) as eg_txn,
		escrow_wallet
	from dedups
	GROUP BY escrow_wallet ) SELECT
	SUM(trades) as totals,
		CASE WHEN IS_ASA=TRUE THEN 'buy'  ELSE 'sell'  END as txn_type from combo WHERE
	opened=1 --CHECK if opened within time range! GROUP BY txn_type



=======================================================================================
=======================================================================================
QUERY_NO: 357
QUERY_ID: 9ae372aa-f98d-4db4-ab71-5262ad7ab698
QUERY_TITLE: [ALGO][Q16] Opulous Distribution

QUERY_STRING:

with base as (
	  SELECT
	address, amount/1e10 as abs_amount,
	
			CASE
	WHEN abs_amount<1
			THEN '<1'
	
					WHEN abs_amount>=1
			AND abs_amount<10
			THEN '1-10'
	
						WHEN abs_amount>=10
		AND abs_amount<100
			THEN '10-100'
	
						WHEN abs_amount>=100
		AND abs_amount<1000
		THEN '100-1K'
	
					WHEN abs_amount>=1000
		AND abs_amount<10000
		THEN '1K-10k'
	
						WHEN abs_amount>=10000
		AND abs_amount<100000
		THEN '10K-100k'
	
					WHEN abs_amount>=100000
	AND abs_amount<1000000
		THEN '100K-1M'
	
						WHEN abs_amount>=1000000
	AND abs_amount<10000000
	THEN '1M-10M'
	
					WHEN abs_amount>=10000000
	AND abs_amount<100000000
	THEN '10M-100M'
	
					WHEN abs_amount>=100000000
	AND abs_amount<1000000000
	THEN '100M-1B'
	
						WHEN abs_amount>=1000000000
	
						THEN '>=1B'
	
						END as category
	  from algorand.account_asset
	  WHERE
	 
	asset_id = '287867876'
	 
	AND asset_closed = FALSE
	
	
	AND frozen = FALSE
	 
	AND amount!=0
	 
	AND address!= 'V537CZUKQJH2ETEJRXHAQI6OUHL54MZU5OIBCAU4J6OE3557ODF74WVQCA' ) SELECT
	COUNT(*) as total_wallets,
			SUM(abs_amount) as total_tokens,
		category from base GROUP BY category ORDER BY total_wallets



=======================================================================================
=======================================================================================
QUERY_NO: 358
QUERY_ID: d065c7ef-b08b-4d38-b9f0-34a8d626055f
QUERY_TITLE: [algo][118] FF liquidations Collateral

QUERY_STRING:

with app_calls as (
	SELECT DISTINCT tx_group_id from flipside_prod_db.algorand.application_call_transaction
	WHERE 1=1
	AND app_id IN (
			686498781, --ALGO
		686500029, --USDC
	
	
	686500844, --USDt
	
	
	686501760, --goBTC
	
	
	694405065, --goETH
	
	
	794055220, --gALGO
	
	
	694464549, --gALGO3
	
	
	751285119 --Planet
	)
		AND TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'l' ), groups as (
	SELECT
	  row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank,
	  *
	from flipside_prod_db.algorand.transactions
	WHERE
	
	tx_group_id IN (SELECT * from app_calls)
	ORDER BY rank ), extracts as (
	SELECT
		COUNT(tx_id) as total_txns,
		MAX(date_trunc('hour', block_timestamp)) as htime,
		MAX(CASE WHEN rank=4 THEN asset_id ELSE NULL END) as pos_liq_asset_id,
		MAX(CASE	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as treasury_deposit,		--Always very small amount going to that specific address, assuming treasury
		MAX(CASE	WHEN rank=5 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=5 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=5 AND asset_id in (31566704,312769,27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as liq_discount,		--liquidator seems to get small a waiver off the total payment needed to settle here
	
		--fasset collateral being transfered to liquidator
		MAX(CASE	WHEN rank=7 AND asset_id= 686505742 THEN 0
					WHEN rank=7 AND asset_id= 686508050 THEN 31566704
					WHEN rank=7 AND asset_id= 686509463 THEN 312769
					WHEN rank=7 AND asset_id= 686510134 THEN 386192725
					WHEN rank=7 AND asset_id= 694408528 THEN 386195940
					WHEN rank=7 AND asset_id= 694474015 THEN 694432641
					WHEN rank=7 AND asset_id= 751289888 THEN 27165954
					ELSE NULL END) as  col_asset_id_norm,		
		MAX(CASE
	WHEN rank=7 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
					WHEN rank=7 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
					WHEN rank=7 AND asset_id in (686508050, 686509463, 694474015, 751289888) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as col_asset_amt,
		--liquidator paying the settlement for open position
		MAX(CASE	WHEN rank=8 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=8 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=8 AND asset_id in (31566704,312769, 27165954) THEN tx_message:txn:aamt/1e6
					ELSE NULL END) as pos_liq_paid,		--pos settlement paid by liquidator
		MAX(CASE	WHEN rank=8 THEN sender ELSE null END) as liquidator,
		tx_group_id
	from groups
	GROUP BY tx_group_id ), refine as (
	SELECT
	
	htime,
		pos_liq_asset_id,
		a.asset_name as pos_liq_asset_name,
	pos_liq_paid - liq_discount as pos_net_paid,
		pp.price_usd as pos_price_usd,
		pos_net_paid*pos_price_usd as pos_volume_usd,
		col_asset_id_norm,
		aa.asset_name as col_name,
		col_asset_amt, p.price_usd as col_price_usd,
		col_asset_amt*col_price_usd as col_volume_usd,
		coalesce(treasury_deposit*pos_price_usd, 0) as treasury_deposit,
		(col_volume_usd - pos_volume_usd) as income,
		round((income/pos_volume_usd) * 100, 2) as perc_returns
	from extracts e
	LEFT JOIN flipside_prod_db.algorand.asset a ON e.pos_liq_asset_id = a.asset_id
	LEFT JOIN flipside_prod_db.algorand.asset aa ON e.col_asset_id_norm = aa.asset_id
	LEFT JOIN flipside_prod_db.algorand.prices_swap p ON (e.col_asset_id_norm = p.asset_id AND e.htime=p.block_hour)
	LEFT JOIN flipside_prod_db.algorand.prices_swap pp ON (e.pos_liq_asset_id = pp.asset_id AND e.htime=pp.block_hour)
	WHERE total_txns = 8
	 ) SELECT 
	COUNT(*) as total_liqs,
	SUM(POS_VOLUME_USD) as positions_closed_volume,
	SUM(COL_VOLUME_USD) as col_liq_volume,
	SUM(INCOME) as liq_profits,
	SUM(treasury_deposit) as treasury_deposits,
	date_trunc('day', htime) as dtime,
	COL_NAME as collateral from refine GROUP BY dtime, collateral



=======================================================================================
=======================================================================================
QUERY_NO: 359
QUERY_ID: 34f48fe4-5a58-421f-af7b-7aee1675ab87
QUERY_TITLE: [ThorChain][38] Rune Upgrades - 2022 First Week Charts

QUERY_STRING:

SELECT
	date_trunc('day', block_timestamp) as wdate,
		COUNT(DISTINCT from_address) as wallets,
			SUM(RUNE_AMOUNT) as total_rune,
		SUM(RUNE_AMOUNT_USD) as total_usd,
			AVG(wallets) OVER (ORDER BY wdate ASC) as avg_daily_wallets,
			AVG(total_rune) OVER (ORDER BY wdate ASC) as avg_daily_rune
		 from thorchain.upgrades WHERE block_timestamp >= '2022-01-01' AND  block_timestamp <= '2022-01-07' GROUP BY wdate ORDER BY wdate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 360
QUERY_ID: c03f37ae-0649-4073-85c4-2f35a3c2891b
QUERY_TITLE: [TERRA][Q166] UST to IBC

QUERY_STRING:

--1-Osmosis, 16-Secret, 19- AXELAR, 17-INJECTIVE  SELECT
	 COUNT(tx_id)  as totals,
	CASE
		WHEN msg_value:source_channel='channel-16' THEN 'SECRET'
		WHEN msg_value:source_channel='channel-17' THEN 'INJECTIVE'
		WHEN msg_value:source_channel='channel-19' THEN 'AXELAR'
		ELSE 'OSMOSIS' END as cat,
	SUM(msg_value:token:amount/1e6) as OUTBOUND_UST,
	date_trunc('day', block_timestamp) as ddate
	--msg_value:token:denom as token from  terra.msgs WHERE
	(block_timestamp>='2021-10-21' AND block_timestamp<='2022-03-10')
	--block_timestamp>='2022-02-01'
	AND msg_value:"@type" = '/ibc.applications.transfer.v1.MsgTransfer'
	AND msg_value:source_channel IN ('channel-1','channel-16', 'channel-17','channel-19')
	AND msg_value:token:denom = 'uusd' --('uluna', 'uusd')
	AND msg_value:sender LIKE 'terra%%'
	AND tx_status = 'SUCCEEDED' GROUP BY ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 361
QUERY_ID: 4198febb-443c-44af-a3fb-d4d4cdf3976c
QUERY_TITLE: nft_sales_bluemove_v1_offers

QUERY_STRING:

with offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) SELECT * from offer_sales LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 362
QUERY_ID: 9c113b6b-02ba-4147-ab35-26eb72a2931a
QUERY_TITLE: [algo] Top Algo Swap txns

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT 'buy' as side, * from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT 'sell' as side, * from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), final as ( SELECT  token_id, algo_amount, side, wallet, tx_group_id from filter ORDER BY algo_amount DESC LIMIT 10 ) SELECT ASSET_NAME, algo_amount , side, wallet, tx_group_id  from final LEFT JOIN algorand.asset ass ON final.token_id = ass.asset_id ORDER BY algo_amount DESC



=======================================================================================
=======================================================================================
QUERY_NO: 363
QUERY_ID: 1f7ce668-fdd0-4d29-9ea3-65858a5d54c8
QUERY_TITLE: kwenta debug

QUERY_STRING:

SELECT *  from optimism.core.fact_decoded_event_logs where tx_hash = '0xe5e584c0c788ea9ca20b52337465fc52bef693f344660c8032f328d4479267ce'



=======================================================================================
=======================================================================================
QUERY_NO: 364
QUERY_ID: 587fd2e4-d10e-49d4-9d9b-b25eae43353b
QUERY_TITLE: nft_sales_topaz

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	LIMIT 100 ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 365
QUERY_ID: a1d70b0b-3109-429b-b5af-071eb77f5ac4
QUERY_TITLE: test events mercato

QUERY_STRING:

--mercato contract='0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26' SELECT
	 COUNT(*) as totals
	, CASE WHEN (coalesce(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) IS NOT NULL)
	
	
	AND (event_data:price IS NOT NULL)
	
	
	AND (COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) IS NOT NULL) THEN 'sales data' ELSE 'not sales' END as cat
	, max(version) as example1
	, min(version) as example2
	, event_resource from aptos.core.fact_events where 1=1
	AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26' GROUP BY event_resource, cat



=======================================================================================
=======================================================================================
QUERY_NO: 366
QUERY_ID: 1beb6a31-f456-46a4-8d59-69682f44d310
QUERY_TITLE: NFT Markets User Behavior - NFT Trading Active Days

QUERY_STRING:

-- forked from NFT Markets User Behavior - Marketplace Pref @ https://flipsidecrypto.xyz/edit/queries/9c1b91db-d9e0-4dee-82e9-10e65de6ec1e -- forked from NFT Markets User Behavior Detailed -Types @ https://flipsidecrypto.xyz/edit/queries/4821d8dc-1bce-4eae-be6a-9e67c57cb82f -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users_dupe as (
	SELECT
	  TO_VARCHAR(purchaser) as user
	  , block_timestamp
	  , block_number
	  , version
	from sales_mixer
	
	UNION ALL
	
	 SELECT
	  TO_VARCHAR(seller) as user
	  , block_timestamp
	  , block_number
	  , version
	from sales_mixer ) , refine as (
	SELECT
	
	user
	  , COUNT(DISTINCT date_trunc('day',block_timestamp)) as active_days
	from users_dupe
	GROUP BY user )
	SELECT
	COUNT(DISTINCT user) as users
	, CASE WHEN active_days=1 THEN '1 day'
	
	
	 WHEN active_days>1 and active_days<=7 THEN '2-7 days'
	
	
	 ELSE '8 or more days' END as cat from refine GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 367
QUERY_ID: 9c1b91db-d9e0-4dee-82e9-10e65de6ec1e
QUERY_TITLE: NFT Markets User Behavior - Marketplace Pref

QUERY_STRING:

-- forked from NFT Markets User Behavior Detailed -Types @ https://flipsidecrypto.xyz/edit/queries/4821d8dc-1bce-4eae-be6a-9e67c57cb82f -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users_dupe as (
	SELECT
	  TO_VARCHAR(purchaser) as user
	  , MAX(NULL) as sales
	  , COUNT(*) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user
	
	UNION ALL
	
	 SELECT
	  TO_VARCHAR(seller) as user
	  , COUNT(*) as sales
	  , MAX(NULL) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user ) , refine_users as (
	SELECT
	
	user
	  , coalesce(SUM(sales), 0) as sales
	  , coalesce(SUM(purchases),0) as purchases
	  , SUM(c_wapal) as c_wapal
	  , SUM(c_topaz) as c_topaz
	  , SUM(c_bluemove) as c_bluemove
	from users_dupe
	GROUP BY user ) SELECT
	  CASE WHEN c_wapal=0 AND c_topaz=0 THEN 'bluemove_only'
	
	  WHEN c_wapal=0 AND c_bluemove=0 THEN 'topaz only'
	
	  WHEN c_bluemove=0 AND c_topaz=0 THEN 'wapal only'
	
	  ELSE '2 or more' END as cat
	, COUNT(DISTINCT user) as users from refine_users  GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 368
QUERY_ID: 946fd860-3b74-4e86-b958-14bbbde98a3c
QUERY_TITLE: NFT Markets Master Total Stats

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplaces from sales_mixer GROUP BY marketplaces -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 369
QUERY_ID: 9c602550-792f-4236-a656-3131840f8f39
QUERY_TITLE: [THOR][48] Withdrawers

QUERY_STRING:

with all_addresses as (
	  SELECT from_address from thorchain.liquidity_actions
	  WHERE
	 
	pool_name LIKE '%DOGE%'
	 
	AND LP_action = 'add_liquidity' ), all_from_txns as (
	SELECT
	 
	MIN(block_timestamp) as t_from,
	
	
	from_address as address
		from thorchain.transfers
	WHERE
			from_address IN (SELECT * from all_addresses)
		GROUP by address ), all_to_txns as (
		SELECT
	 
	MIN(block_timestamp) as t_to,
	
	
	to_address as address
		from thorchain.transfers
	WHERE
			to_address IN (SELECT from_address as to_address from all_addresses)
		GROUP by address ), combo as (
	SELECT t_to, NULL as t_from, address from all_to_txns
		UNION ALL
		SELECT NULL as t_to, t_from, address  from all_from_txns ), merge as (
		SELECT
		MIN(t_from) as t_from,
			MIN(t_to) as t_to,
			address
	from combo
		GROUP BY address ), cats as (
		SELECT
	CASE WHEN t_from<t_to THEN t_from ELSE t_to END as min_date,
		CASE WHEN min_date<'2022-01-15' THEN 'existing' ELSE 'new' END as category,
		address
		from merge ), lp_actions as (
	SELECT	
				CASE WHEN lp_action = 'add_liquidity' AND pool_name LIKE '%DOGE%' THEN block_timestamp ELSE NULL END as doge_add,
				CASE WHEN lp_action = 'remove_liquidity' THEN block_timestamp ELSE NULL END as remove,
			from_address as address
	from thorchain.liquidity_actions
	WHERE
		from_address in (
				SELECT address as from_address
				from cats
			WHERE
				category = 'existing'
	
	
	)
			AND ( (lp_action = 'remove_liquidity' AND pool_name NOT LIKE '%DOGE%') OR (lp_action = 'add_liquidity' AND pool_name LIKE '%DOGE%'))
		AND block_timestamp>='2022-01-10' ), filter as (
	SELECT
			MIN(remove) as min_remove,
			MAX(remove) as max_remove,
			MIN(doge_add) as min_doge_add,
			MAX(doge_add) as max_doge_add,
			address
		from lp_actions
	GROUP BY address ), prefinal as (
	  SELECT  address, 'liquidity_withdrawn' as liq from filter
	  WHERE
	 
	MIN_REMOVE IS NOT NULL
	 
	AND ((MIN_REMOVE<MIN_DOGE_ADD OR MIN_REMOVE<MAX_DOGE_ADD) OR (MAX_REMOVE<MIN_DOGE_ADD OR MAX_REMOVE<MAX_DOGE_ADD))
	  UNION ALL
	  SELECT address, NULL as liq from cats
	  WHERE
	 
	category = 'existing' ), final as (
	SELECT
		MIN(liq) as liq,
		address
	from prefinal
	GROUP BY address ) SELECT
	COUNT(DISTINCT address) as total_wallets,
		CASE WHEN liq IS NOT NULL THEN liq ELSE 'no_withdrawal' END as cat from final GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 370
QUERY_ID: 0aa75946-eb7d-470f-970b-be207c3da92e
QUERY_TITLE: test events wapal

QUERY_STRING:

-- forked from test events topaz @ https://flipsidecrypto.xyz/edit/queries/f1a63a66-98ff-4d39-87a9-e0914535f3bf -- forked from 2023-12-08 08:22 PM @ https://flipsidecrypto.xyz/edit/queries/7efb9f34-7071-4dae-a78a-3fb53c37d4f8 SELECT
	 COUNT(*) as totals
	, CASE WHEN (coalesce(event_data:buyer, event_data:purchaser) IS NOT NULL)
	
	
	AND (event_data:price IS NOT NULL)
	
	
	AND (event_data:seller IS NOT NULL) THEN 'sales data' ELSE 'not sales' END as cat
	, max(version) as example
	, event_resource from aptos.core.fact_events where 1=1
	AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' GROUP BY event_resource, cat



=======================================================================================
=======================================================================================
QUERY_NO: 371
QUERY_ID: f08d1e02-9c03-45e2-a7c2-f809b1a965b4
QUERY_TITLE: withdraw wallet change case in dep vs withdraw

QUERY_STRING:

SELECT
	
	  pubkey
	
	 , 'deposits' as labelz
	
	 , WITHDRAWAL_ADDRESS as wallet
	
	 , PLATFORM as label
	
	 , PLATFORM_CATEGORY as sub_label
	  FROM ethereum.beacon_chain.ez_deposits
	  WHERE pubkey = '0x98e774a6a6b36418844daceb90f6e0ac3d6fe46ece1b52640c9f53bd2bd6c980e8bf093c148fcb5187160dad2092e397'
	  qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1
	
	 --AND WITHDRAWAL_ADDRESS = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96'
	  UNION ALL
	
	SELECT
	
	  t.pubkey
	
	 , 'withdraws' as labelz
	
	 , w.withdrawal_address  as wallet
	
	 , WITHDRAWAL_ADDRESS_NAME as label
	
	 , WITHDRAWAL_ADDRESS_CATEGORY as sub_label
	  from (
	
	 SELECT
	
	
	 *
	
	  from ethereum.beacon_chain.ez_withdrawals
	
	 qualify row_number() OVER (PARTITION BY validator_index ORDER BY block_timestamp DESC) =1
	  )  w
	  LEFT JOIN (
	
	 SELECT
	
	
	 *
	
	
	, row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks
	
	 from ethereum.beacon_chain.fact_validators
	
	 QUALIFY ranks=1
	  ) t on w.validator_index = t.index
	
	 WHERE pubkey = '0x98e774a6a6b36418844daceb90f6e0ac3d6fe46ece1b52640c9f53bd2bd6c980e8bf093c148fcb5187160dad2092e397'



=======================================================================================
=======================================================================================
QUERY_NO: 372
QUERY_ID: 4ac866ff-56c4-4a1b-b6df-3f08ef3d8dce
QUERY_TITLE: nft_sales_mercato

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	LIMIT 100 ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 373
QUERY_ID: 8e7fa11e-02c5-481c-8217-e6c67ea713f9
QUERY_TITLE: ETH Stake - Closure/Shutdown

QUERY_STRING:

-- forked from ETH Stake - Base @ https://flipsidecrypto.xyz/studio/queries/58e6caf5-11a5-4d4b-827f-64925d32b719 -- with base as ( --
	SELECT * from ethereum.beacon_chain.ez_withdrawals --
	WHERE 1=1 --
	  AND withdrawal_amount>=28 --
	LIMIT 10 -- ) -- SELECT * from base  with base as (
	SELECT * from ethereum.beacon_chain.ez_withdrawals
	WHERE 1=1
	  AND withdrawal_address='0x15dace490e3bee63ba9c2695ea6d29a78360dd96' ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 374
QUERY_ID: 62bf07c9-2b1e-4bd2-a3ff-bf9716c1dfc4
QUERY_TITLE: ETH Stake - tests on fact_validators

QUERY_STRING:

with validator_stamps as (
	SELECT
	
	pubkey
	  , MIN(CASE
	
	
	 WHEN validator_status IN ('active_ongoing', 'active_slashed')
	
	
	 THEN slot_number ELSE NULL END) as min_active
	  , MAX(CASE
	
	
	 WHEN validator_status IN ('active_ongoing', 'active_slashed')
	
	
	 THEN slot_number ELSE NULL END) as max_active
	  , MIN(CASE
	
	
	WHEN validator_status IN ('exited_unslashed', 'exited_slashed')
	
	
	 THEN slot_number ELSE NULL END) as min_exit
	  , MAX(CASE
	
	
	 WHEN validator_status = 'exited_slashed'
	
	
	 THEN 1 ELSE 0 END) as slashed
	from ethereum.beacon_chain.fact_validators
	WHERE 1=1
	  AND validator_status in ('active_ongoing', 'active_slashed', 'exited_unslashed', 'exited_slashed')
	GROUP BY pubkey ) SELECT
	validator_status
	 , COUNT(*) as totals from ethereum.beacon_chain.fact_validators WHERE 1=1
	--AND max_active>min_exit  --sanity test: so far has never happened  -> validator once exited has never restarted/became active again GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 375
QUERY_ID: 6c56e8fc-fd2a-4ed6-8949-d7e20ad862d9
QUERY_TITLE: snapshot comparison MoM - Wallets

QUERY_STRING:

---------------------------- GENERATE SAMPLE SPACE --------------------------------- with wallets as (
	SELECT
	
	DISTINCT wallet
	from (
	  SELECT DISTINCT COALESCE(WITHDRAWAL_ADDRESS, 'empty') as wallet
	  FROM ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	 --AND WITHDRAWAL_ADDRESS = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96'
	  UNION ALL
	
	SELECT DISTINCT COALESCE(WITHDRAWAL_ADDRESS, 'empty') as wallet
	  FROM ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	)
	 ) , dates as (
	SELECT
	
	DISTINCT date_trunc('month', date_day) as dmonth
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '2020-11-01' AND CURRENT_DATE ) , sample_space as (
	SELECT
	
	dmonth
	  , wallet
	
	, NULL as eth_staked
	from dates
	 LEFT JOIN wallets on 1=1 ) , ----------------------------END OF SAMPLE SPACE ----------------------------- sums as (
	with stats as (
	  SELECT
	
	  date_trunc('month', block_timestamp) as dmonth
	
	 , COALESCE(WITHDRAWAL_ADDRESS, 'empty') as WITHDRAWAL_ADDRESS
	
	 , SUM(deposit_amount) as eth_staked --NOT always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	  GROUP BY dmonth, WITHDRAWAL_ADDRESS
	  UNION ALL
	
	
	  SELECT
	
	  date_trunc('month', block_timestamp) as dmonth
	
	 , COALESCE(WITHDRAWAL_ADDRESS, 'empty') as WITHDRAWAL_ADDRESS
	
	 , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END ---ignoring summing/taking into account other values - > staking reward withdrawals
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	  GROUP BY dmonth, WITHDRAWAL_ADDRESS
	)
	SELECT
	
	dmonth
	  , WITHDRAWAL_ADDRESS as wallet
	  , SUM(eth_staked) as eth_staked
	from stats
	WHERE 1=1
	  -- AND WITHDRAWAL_ADDRESS = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96'
	GROUP BY dmonth, wallet ) , map as (
	SELECT
	  d.dmonth
	  , d.wallet
	  , coalesce(s.eth_staked, d.eth_staked) as total_stake
	  , SUM(total_stake) OVER (PARTITION BY d.wallet ORDER BY d.dmonth ASC) as eth_staked_total
	from sample_space d
	LEFT JOIN sums s ON (d.dmonth=s.dmonth AND d.wallet=s.wallet)
	WHERE 1=1
	  -- AND d.wallet = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96' ) -- SELECT * from map ORDER BY dmonth ASC  SELECT
	 dmonth
	, SUM(eth_staked_total) as eth_totals
	, ROUND(eth_totals/32, 0) as validators
	, COUNT(CASE WHEN eth_staked_total >= 19 THEN wallet ELSE NULL END ) as wallets from map  WHERE 1=1
	--AND eth_staked_total >= 19 --(count only active's/ignore nulls/deactivations for that month) GROUP BY dmonth ORDER BY dmonth ASC  --SELECT * from sums



=======================================================================================
=======================================================================================
QUERY_NO: 376
QUERY_ID: 66fdc7d1-6ebb-466a-bcf3-aed8badf52d5
QUERY_TITLE: nft_sales_bluemove_v2_allsales

QUERY_STRING:

-- forked from bluemovev2_events @ https://flipsidecrypto.xyz/edit/queries/5459e5bf-b502-4b54-8b46-bf824d2b9ebf with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sales_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , 'bluemove_v2' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5'
	 AND event_resource IN ('TokenOfferFilledEvent', 'ListingFilledEvent', 'CollectionOfferFilledEvent') ) SELECT * from base LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 377
QUERY_ID: cb1f6dd8-e5c8-4bac-b921-4209bebce331
QUERY_TITLE: fact_validator samples

QUERY_STRING:

SELECT * from ethereum.beacon_chain.fact_validators WHERE pubkey = '0x98a35b860c64c1d43bd93ef161464be1e0412f681dc19e01555f71145dd02aaf0e00604ae69f4f3785e534049f2ad83b' ORDER BY slot_number DESC



=======================================================================================
=======================================================================================
QUERY_NO: 378
QUERY_ID: 2c0c1f0d-56a0-427f-b375-fa1a2bd338ba
QUERY_TITLE: latest time

QUERY_STRING:

-- forked from initial_time @ https://flipsidecrypto.xyz/edit/queries/f798b07b-1cc7-4859-85bd-0f3ec27f3fb8 with prev as (  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/f798b07b-1cc7-4859-85bd-0f3ec27f3fb8/latest-run') as resp ) , flattened as (
	select
	value[0] as prev_time
	from prev, lateral FLATTEN (input=> resp:data:result:rows) ) SELECT
	 prev_time
	, CURRENT_TIMESTAMP as cur_time from flattened



=======================================================================================
=======================================================================================
QUERY_NO: 379
QUERY_ID: 76f18931-e552-47d0-9b43-17766856cf87
QUERY_TITLE: Collections - Sale History 30D

QUERY_STRING:

with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferCollectionEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	 ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	  AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	  AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}'
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, round(SUM(sale_amount), 2) as volume
	, round(AVG(sale_amount), 2) as price
	, date_trunc('day', block_timestamp) as ddate
	, marketplace from sales_mixer WHERE block_timestamp>=current_date - INTERVAL '30 day' GROUP BY ddate, marketplace ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 380
QUERY_ID: 99ba4598-9ab8-4e29-9f51-fdb460779c0a
QUERY_TITLE: nft_listings_topaz

QUERY_STRING:

with listings_topaz as (
	SELECT
	
	event_data:listing_id as offer_id
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , MIN(CASE WHEN event_resource='ListEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListEvent' THEN TO_TIMESTAMP(event_data:timestamp) END) as start_time
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='DelistEvent' THEN 1 ELSE 0 END) as closed
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ('ListEvent', 'BuyEvent', 'DelistEvent')
	  AND event_data:listing_id in ('1378096', '1379788', '1379725', '549916')
	GROUP BY offer_id, collection_name, token_id, creator ) SELECT * from listings_topaz LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 381
QUERY_ID: 5966041f-becf-4478-99fe-17d6a306aa01
QUERY_TITLE: nft_listings_bluemove_v2

QUERY_STRING:

-- forked from nft_listings_wapal @ https://flipsidecrypto.xyz/edit/queries/836ba7e6-bcd9-47d3-92a8-dbe20576b37f -- forked from nft_listings_topaz @ https://flipsidecrypto.xyz/edit/queries/99ba4598-9ab8-4e29-9f51-fdb460779c0a with listings as (
	SELECT
	
	event_data:listing as offer_id
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN block_timestamp END) as start_time
	  , MAX(CASE WHEN event_resource='ListingFilledEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='ListingCanceledEvent' THEN 1 ELSE 0 END) as closed
	
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5'
	  AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent', 'ListingPlacedEvent')
	  --AND event_data:listing in ('0x18a6356f3fb47aafd042569f413d9ac76c318bd23078626fcfda8045dd73995')
	GROUP BY offer_id, collection_name, token_id, creator ) , updates as (
	SELECT
	
	event_data:listing as offer_id
	  , event_data:new_price/1e8 as new_price
	  , row_number() OVER (PARTITION BY offer_id ORDER BY version DESC) as rank
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5'
	  AND event_resource IN ('ListingEditedEvent')
	  AND event_data:listing in (SELECT offer_id from listings)
	qualify rank=1 ) , listings_bluemove as (
	SELECT
	
	l.offer_id
	  , collection_name
	  , token_id
	  , coalesce(new_price, price) as price
	  , start_time
	  , bought
	  , closed
	  , 'bluemove' as marketplace
	from listings l
	 LEFT JOIN updates u ON l.offer_id = u.offer_id ) SELECT * from listings_bluemove  LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 382
QUERY_ID: 5a51c163-059a-4ad1-9fe6-a7d59c7c2733
QUERY_TITLE: REPORT # 8

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM : https://platform.arkhamintelligence.com/visualizer/entity/0xF6e37E9ecCd9Dc93ec27f07b761a6018ce950274?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xf6e37e9eccd9dc93ec27f07b761a6018ce950274')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 383
QUERY_ID: 9ca290e0-e981-4484-b061-73a001219378
QUERY_TITLE: [ALGO] NFTs Debug

QUERY_STRING:

select
	parse_json(try_base64_decode_string(tx_message:txn:note)) as json,
			json:standard as derp,
			parse_json(try_base64_decode_string(tx_message:txn:note)):standard as def from algorand.transactions where tx_id = '6Z5R47GSIMQC4JDCTRAPLPC5BTNCC5K5DJ2QKSACW4KV5RZFZDQQ' limit 10



=======================================================================================
=======================================================================================
QUERY_NO: 384
QUERY_ID: 550fc841-5fc7-4e64-9732-ca5664bfde53
QUERY_TITLE: Individual Projects Summaries

QUERY_STRING:

with new_wallets as (
	SELECT
	
	from_address as wallet
	  , 1 as new
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT wallet) as total_new_users
	from new_wallets )  , base as (
	SELECT
	
	COALESCE(INITCAP(LABEL), 'Other') as PROJECT
	  , LABEL_TYPE as TYPE
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT from_address) as users
	  , COUNT(DISTINCT CASE WHEN new=1 THEN from_address ELSE NULL END) as new_ethereum_users
	  , MAX(total_new_users) as total_new_users
	from ethereum.core.fact_transactions t
	 LEFT JOIN ethereum.core.dim_labels l on t.to_address = l.address
	LEFT JOIN new_wallets n on t.from_address=n.wallet
	LEFT JOIN stats s on 1=1
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND STATUS = 'SUCCESS'  GROUP BY PROJECT, TYPE
	 ) SELECT
	 PROJECT
	, TYPE
	, txns as "Transaction Counts"
	, users as "Total Users"
	, new_ethereum_users as "New Ethereum Users"
	, round((new_ethereum_users/total_new_users)*100, 2) as "% of Total New Ethereum Users" from base  ORDER BY USERS DESC LIMIT 50



=======================================================================================
=======================================================================================
QUERY_NO: 385
QUERY_ID: 09400cde-46bd-492e-91cf-66173e1ade64
QUERY_TITLE: A - Users meeting volume/trades requirements

QUERY_STRING:

with base as (
	SELECT
	
	trader as user
	  , SUM(amount_usd) as volume
	  , COUNT(DISTINCT DIGEST) as trades
	from arbitrum.vertex.ez_spot_trades
	GROUP BY user
	UNION
	 SELECT
	
	trader as user
	  , SUM(amount_usd) as volume
	  , COUNT(DISTINCT DIGEST) as trades
	from arbitrum.vertex.ez_perp_trades
	GROUP BY user ) SELECT
	 user
	, SUM(volume) as total_volume
	, SUM(trades) as total_trades from base GROUP BY USER
	HAVING ( total_volume>={{volume_usd}} AND total_trades>={{trade_count}} ) ORDER BY total_volume DESC



=======================================================================================
=======================================================================================
QUERY_NO: 386
QUERY_ID: 836ba7e6-bcd9-47d3-92a8-dbe20576b37f
QUERY_TITLE: nft_listings_wapal

QUERY_STRING:

-- forked from nft_listings_topaz @ https://flipsidecrypto.xyz/edit/queries/99ba4598-9ab8-4e29-9f51-fdb460779c0a with base_wapal as (
	--wapal doesn't have updates/cancel events on editing,
	 --it just creates a new ListingPlacedEvent for the same offerid with updates
	--so dedup listings and take latest entry for the same offer_id
	--then combine with the other events
	SELECT
	
	*
	  , row_number() OVER (partition by event_data:listing ORDER BY version DESC) as rank
	from aptos.core.fact_events
	WHERE 1=1
	
	 AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	
	 AND event_resource IN ('ListingPlacedEvent')
	
	
	 qualify rank=1
	
	UNION ALL
	
	 SELECT
	
	*
	  , '__' as rank
	from aptos.core.fact_events
	WHERE 1=1
	
	 AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	
	 AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent') ) , listings_wapal as (
	--group together the latest events for an offer
	SELECT
	
	event_data:listing as offer_id
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN block_timestamp END) as start_time
	  , MAX(CASE WHEN event_resource='ListingFilledEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='ListingCanceledEvent' THEN 1 ELSE 0 END) as closed
	  , 'wapal' as marketplace
	from base_wapal
	where 1=1
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent', 'ListingPlacedEvent')
	  --AND event_data:listing in ('0xe8a25560e3259a711281b2ec7d31ce6dffe8b4ae72bbc8de3cfb76938f4647c2')
	GROUP BY offer_id, collection_name, token_id, creator ) -- NOTE: if either bought/closed =1 then the listing is NOT ACTIVE or simply closed/fulfilled! SELECT * from listings_wapal  LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 387
QUERY_ID: c5ce9a10-8ed9-4dc8-a89b-43c190a9a198
QUERY_TITLE: Report #12

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM: https://platform.arkhamintelligence.com/visualizer/entity/0x6766C42210FB6612B370eDaA6676241463EA0862?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x6766c42210fb6612b370edaa6676241463ea0862')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 388
QUERY_ID: 5286d7a8-8c0a-43e5-8512-fda7f895964d
QUERY_TITLE: REPORT #9

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM https://platform.arkhamintelligence.com/visualizer/entity/0x2b2D77558673B799748762F90B556E1a30b0E46B?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x2b2d77558673b799748762f90b556e1a30b0e46b')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 389
QUERY_ID: d9608dae-7d0b-44b4-9b2e-44b10e940614
QUERY_TITLE: nft_sales_wapal

QUERY_STRING:

-- forked from test events wapal @ https://flipsidecrypto.xyz/edit/queries/0aa75946-eb7d-470f-970b-be207c3da92e with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , event_data:seller as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , 'wapal' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- wapal contract and sale-specific event_resource names
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	 ) SELECT * from base LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 390
QUERY_ID: eb6e5be8-f19d-4856-8bf3-5cd5c58db930
QUERY_TITLE: Report #10

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM LINK: https://platform.arkhamintelligence.com/visualizer/entity/0xE508ca5989483a8C3DC6b8F75Ed178B04630F70D?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xe508ca5989483a8c3dc6b8f75ed178b04630f70d')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 391
QUERY_ID: 9ddc9dbe-4d65-4215-8ea7-d1f8d827ac8a
QUERY_TITLE: [AAVE] [Q19] Master Search

QUERY_STRING:

 percents,with total_flash as (
	SELECT
	
		SUM(FLASHLOAN_AMOUNT_USD) as total_sum,
	
		COUNT(tx_id) as total_counts,
			date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
		block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	 ) , ds_data as (
		SELECT
	
		SUM(FLASHLOAN_AMOUNT_USD) as total_sum,
	
		COUNT(tx_id) as total_counts,
			date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
		block_timestamp >= CURRENT_DATE - 720
	 
	AND initiator_address in (	'0x46aafdbc76a8b412909985d0a2c51073ff33c02e', '0xaed662abcc4fa3314985e67ea993cad064a7f5cf',
										'0xa5d330f6619d6bf892a5b87d80272e1607b3e34d' )
		GROUP BY mdate  ) SELECT 
	(CAST(ds.total_counts AS DECIMAL)/tf.total_counts * 100) as Defi_Saver_Contribution,
	
	(CAST(ds.total_sum AS DECIMAL)/tf.total_sum * 100) as Defi_Saver_Contribution_usd,
	
	tf.mdate, ds.total_sum, tf.total_sum as tf_sum FROM total_flash as tf,  ds_data as ds WHERE tf.mdate = ds.mdate



=======================================================================================
=======================================================================================
QUERY_NO: 392
QUERY_ID: 417a9798-3080-40a4-a172-7436949a7820
QUERY_TITLE: friend - Top Traded Accounts

QUERY_STRING:

-- forked from friend - Trade Volume Cumulative @ https://flipsidecrypto.xyz/edit/queries/750c59f1-6860-4529-848a-037bee0c5393  -- forked from friend - Trade Volume @ https://flipsidecrypto.xyz/edit/queries/80af3f43-64c2-4ab5-a490-18bb57049f20  -- SELLS AND BUYS: with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	COUNT(DISTINCT trader) as traders
	  , SUM(trade_value) as volume_eth
	  , account
	from base_wallet
	GROUP BY account ORDER BY volume_eth DESC
	LIMIT 20 ), account_funders as (
	SELECT
	
	t.tx_hash
	  , t.block_timestamp
	  , to_address as account
	  , from_address as funder
	  , value
	  , ENS_DOMAIN
	  , rank() OVER (PARTITION BY to_address ORDER BY t.block_timestamp ASC) as rank
	from base.core.fact_transactions t
	LEFT JOIN crosschain.ens.ez_ens_domains e ON t.from_address=e.owner
	WHERE 1=1
	  AND VALUE>0
	  AND ENS_SET!=false
	  AND to_address IN (SELECT account as to_address from refine)
	qualify rank=1
	 ) select
	 volume_eth, traders as unique_traders, r.account, ENS_DOMAIN from refine r LEFT JOIN account_funders a ON r.account=a.account ORDER BY VOLUME_ETH DESC



=======================================================================================
=======================================================================================
QUERY_NO: 393
QUERY_ID: 2ff2ffa1-6a45-490d-b7be-1df770389bbc
QUERY_TITLE: [Terra] Mirror Hunt -swap & short farm

QUERY_STRING:

SELECT * from terra.transactions WHERE
	tx_id IN
	(	'F667033D2963360C6A13F3638FEBC9DD14D2F019A6252A2C2DA9C7179EC63BB3',
						'74867D6F4D1EF3514B94FFA9CB9B25B2D2BD7E80EFBDB6206BFCA3642C4F7EBD'
					)
	AND block_timestamp> '2021-12-25' AND block_timestamp <'2021-12-28'



=======================================================================================
=======================================================================================
QUERY_NO: 394
QUERY_ID: c5ae9f69-d84b-4d09-8dd7-64e9598e5460
QUERY_TITLE: [Terra][Q166] IBC Cumulatives

QUERY_STRING:

--1-Osmosis, 16-Secret, 19- AXELAR, 17-INJECTIVE  with luna_prices as (
	SELECT
	  date_trunc('day', block_timestamp) as ddate,
	  AVG(price_usd) as price_usd
	from terra.oracle_prices
	WHERE
		SYMBOL= 'LUNA' AND currency= 'uluna'
		AND block_timestamp>='2021-10-21'
	 GROUP by ddate ), daily_stats as (
	SELECT
	
	COUNT(tx_id)  as totals,
	  CASE
	 
	WHEN msg_value:source_channel='channel-16' THEN 'SECRET'
	 
	WHEN msg_value:source_channel='channel-17' THEN 'INJECTIVE'
	 
	WHEN msg_value:source_channel='channel-19' THEN 'AXELAR'
	 
	ELSE 'OSMOSIS' END as cat,
	  SUM(msg_value:token:amount/1e6) as amt,
	CASE
			WHEN msg_value:token:denom = 'uluna' THEN 'uluna' ELSE 'uusd' END as token,
	  date_trunc('day', block_timestamp) as ddate
	  --msg_value:token:denom as token
	from  terra.msgs
	WHERE
	  (block_timestamp>='2021-10-21' AND block_timestamp<='2022-03-10')
	  --block_timestamp>='2022-02-01'
	  AND msg_value:"@type" = '/ibc.applications.transfer.v1.MsgTransfer'
	  AND msg_value:source_channel IN ('channel-1','channel-16', 'channel-17','channel-19')
	  AND msg_value:token:denom IN ('uluna', 'uusd')
	  AND msg_value:sender LIKE 'terra%%'
	  AND tx_status = 'SUCCEEDED'
	GROUP BY ddate, cat, token ), combo as (
	SELECT
		ds.ddate as dday,
		SUM (CASE
	
			WHEN token='uluna' THEN amt * p.price_usd
				ELSE amt END ) as usd_amount,
		cat
	from daily_stats ds LEFT JOIN luna_prices p
	ON ds.ddate=p.ddate
	GROUP BY dday, cat ), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	from table (generator(rowcount => 764)) ), samples as (
	SELECT 
	DISTINCT CAT
	from combo
	LIMIT 4 ), base as (
	  select ddate, CAT, 0 as backup
	  from dates
	  CROSS JOIN (
	 
	SELECT CAT from samples
	  ) ), running as (
	SELECT
		ddate,
		b.cat as chain,
		backup, usd_amount,
		coalesce(usd_amount, backup) as usd_amounts,
		SUM(usd_amounts) OVER (PARTITION by chain ORDER BY  ddate ASC) as usd_amount_running
	from base b LEFT JOIN combo
	ON b.ddate = combo.dday AND b.cat = combo.cat
	WHERE
		(ddate>='2021-10-21' AND ddate<'2022-03-10') ) SELECT * from running



=======================================================================================
=======================================================================================
QUERY_NO: 395
QUERY_ID: 7b449cdc-ce21-48a8-a5a3-52899727ebed
QUERY_TITLE: Sybils: CEX Deposit Clusters - A - Overview (W/ FEEDBACK)

QUERY_STRING:

with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , filter as ( --ALREADY REPORTED feedback loop
	with raw as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/418bc24a-71c9-4fd2-8db9-fbb7eb09e38d/latest-run') as resp
	  )
	select
	  value[0] as address
	from raw, lateral FLATTEN (input=> resp:data:result:rows) ) , deposit_clusters as (
	(
	  SELECT
	
	  to_address as deposit_wallet
	
	 , project_name as cex
	
	 , COUNT(DISTINCT from_address) as cluster_count
	
	 , MAX('arbitrum') as cluster_src
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	  GROUP BY deposit_wallet, cex ORDER BY cluster_count DESC
	
	LIMIT 100
	)
	UNION ALL
	
	 (
	  SELECT
	
	  to_address as deposit_wallet
	
	 , project_name as cex
	
	 , COUNT(DISTINCT from_address) as cluster_count
	
	 , MAX('base') as cluster_src
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	  GROUP BY deposit_wallet, cex ORDER BY cluster_count DESC
	
	LIMIT 100
	)
	
	UNION ALL
	
	 (
	  SELECT
	
	  to_address as deposit_wallet
	
	 , NULL as cex
	
	 , COUNT(DISTINCT from_address) as cluster_count
	
	 , MAX('ethereum') as cluster_src
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	  GROUP BY deposit_wallet, cex ORDER BY cluster_count DESC
	
	LIMIT 100
	)
	
	UNION ALL
	 (
	  SELECT
	
	  to_address as deposit_wallet
	
	 , project_name as cex
	
	 , COUNT(DISTINCT from_address) as cluster_count
	
	 , MAX('optimism') as cluster_src
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	  GROUP BY deposit_wallet, cex ORDER BY cluster_count DESC
	
	LIMIT 100
	)
	UNION ALL
	 (
	  SELECT
	
	  to_address as deposit_wallet
	
	 , project_name as cex
	
	 , COUNT(DISTINCT from_address) as cluster_count
	
	 , MAX('polygon') as cluster_src
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	  GROUP BY deposit_wallet, cex ORDER BY cluster_count DESC
	
	LIMIT 100
	) ) SELECT
	 *  from deposit_clusters ORDER BY cluster_count DESC



=======================================================================================
=======================================================================================
QUERY_NO: 396
QUERY_ID: eb7cf3da-5d77-4570-832a-c401f4d73bfa
QUERY_TITLE: Beramonium

QUERY_STRING:

-- forked from BeraDoge Gen1 @ https://flipsidecrypto.xyz/edit/queries/1fbd8e0e-a737-4615-8676-e1c82aad5a84 -- forked from HiBeraNation @ https://flipsidecrypto.xyz/edit/queries/d247e0d6-8502-4843-928d-141e3132bd1f -- forked from Ramen HungryBera - Holders @ https://flipsidecrypto.xyz/edit/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	 qualify ranks=1
	
	) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , count(1) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select 'Beramonium' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 397
QUERY_ID: bb23cb1d-c639-4cd2-8aa2-476c0ae639c1
QUERY_TITLE: $ER Articles - erc1155

QUERY_STRING:

-- forked from BeraDoge Gen1 copy @ https://flipsidecrypto.xyz/edit/queries/eb7cf3da-5d77-4570-832a-c401f4d73bfa -- forked from BeraDoge Gen1 @ https://flipsidecrypto.xyz/edit/queries/1fbd8e0e-a737-4615-8676-e1c82aad5a84 -- forked from HiBeraNation @ https://flipsidecrypto.xyz/edit/queries/d247e0d6-8502-4843-928d-141e3132bd1f -- forked from Ramen HungryBera - Holders @ https://flipsidecrypto.xyz/edit/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	select holder,tokenid,sum(cc) as balance from(
	  select
	
	  NFT_FROM_ADDRESS as holder ,tokenid,-count(1) as cc from ethereum.nft.ez_nft_transfers
	  where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	  group by 1,2
	  union all
	  select
	
	  NFT_TO_ADDRESS as holder,tokenid,count(1) as cc from ethereum.nft.ez_nft_transfers
	  where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	  group by 1,2) a
	group by 1,2
	having sum(cc) > 0 ) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , SUM(balance) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select '$ER Articles' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 398
QUERY_ID: d247e0d6-8502-4843-928d-141e3132bd1f
QUERY_TITLE: HiBeraNation

QUERY_STRING:

-- forked from Ramen HungryBera - Holders @ https://flipsidecrypto.xyz/edit/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from arbitrum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	 qualify ranks=1
	
	) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , count(1) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select 'HiBeranation Dream Masks' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 399
QUERY_ID: b22e4742-2d2c-40b6-b60c-ee305c58d18e
QUERY_TITLE: Ramen HungryBera - Holders

QUERY_STRING:

with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from arbitrum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	 qualify ranks=1
	
	) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , count(1) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select 'Ramen HungryBera' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 400
QUERY_ID: 34e98d60-6414-4f41-b98c-261885bad19e
QUERY_TITLE: Paras Base 2023

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ) SELECT
	COUNT(DISTINCT tx_hash) as total_txs,
	SUM(price) as near_volume,
		COUNT(DISTINCT tx_signer) as daily_users,
		date_trunc('day', block_timestamp) as ddate,
	CASE WHEN type='nft_mint' THEN 'NFT Mints' ELSE 'NFT Secondary Sales' END as type from types WHERE type IN ('nft_mint', 'resolve_purchase') GROUP BY ddate, type ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 401
QUERY_ID: bf3376cd-4720-4717-be2d-c0a1a0963b7f
QUERY_TITLE: Post Airdrop Timeline (Days) 

QUERY_STRING:

-- forked from Post Airdrop Timeline (hours) @ https://flipsidecrypto.xyz/edit/queries/17f86f74-58d2-413a-921d-b943874fd058 with claims_base as (  SELECT
	  max(block_timestamp) as claim_time
	  , receiver as user
	
	
	, SUM(amount/pow(10,6))  as amount
	from sei.core.fact_transfers
	 where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18'
	GROUP BY user ) , txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , COUNT( DISTINCT block_timestamp::date) as unique_days
	  , MAX(claim_time) as ctime
	  , COUNT(DISTINCT tx_id) as txns
	  , ATTRIBUTE_VALUE as user
	from sei.core.fact_msg_attributes f
	LEFT JOIN claims_base c on c.user=f.attribute_value
	WHERE 1=1
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18'
	  AND claim_time<block_timestamp
	  AND ATTRIBUTE_KEY in ('recipient', 'sender')
	  AND ATTRIBUTE_VALUE IN (SELECT DISTINCT user from claims_base)
	GROUP BY ATTRIBUTE_VALUE ) , refine as (
	SELECT
	  *
	  , CASE
	
	
	
	WHEN unique_days=1 THEN 'Single Day'
	
	
	  WHEN unique_days between 2 and 7 THEN '2-7 Days'
	
	
	  ELSE '>7 days' END as cat
	from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 402
QUERY_ID: 748a211c-ecc6-47a2-a57c-f7805fe14f61
QUERY_TITLE: The Honey Jar - Articles

QUERY_STRING:

-- forked from BeraPlug @ https://flipsidecrypto.xyz/edit/queries/e3335b2b-a460-4092-aa35-6720c5c22266 with thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , mirror_mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mirror_mints



=======================================================================================
=======================================================================================
QUERY_NO: 403
QUERY_ID: 8b226625-ef67-4b13-96c5-70cdbd427797
QUERY_TITLE: top pairs - error

QUERY_STRING:

-- forked from top pairs @ https://flipsidecrypto.xyz/studio/queries/a1a642ef-ed24-4203-ba8e-957d06fe4579 -- forked from summary stats @ https://flipsidecrypto.xyz/studio/queries/f4083419-d81f-46fd-b33f-ca8e75860447 -- forked from summary stats test (no edge) @ https://flipsidecrypto.xyz/studio/queries/164ece5b-50d0-4186-b27d-2866887d8a47 ----SEI Orderfill events----- with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	
	
	NULL as EZ_PERP_TRADES_ID,
	
	
	NULL as INSERTED_TIMESTAMP,
	
	
	NULL as MODIFIED_TIMESTAMP
	  FROM
	
	
	order_fill_format ) ------ END OF SEI ORDERFILLS------------------ , base_perp_trades as (
	with base_products as (
	  with base as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from base, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	base_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	base_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  base_logs l
	),
	base_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	 base_order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 base_order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- , merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base_perp_trades
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from FINAL
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , refine as (
	SELECT
	  symbol
	  , SUM(amount_usd) AS volume
	  , row_number() OVER (ORDER BY volume DESC) as ranks
	from merge
	WHERE 1=1 AND is_taker=FALSE
	GROUP BY 1 ) SELECT
	 CASE WHEN ranks<=5 THEN symbol ELSE 'Others' END as label
	, SUM(volume) as volume from refine GROUP BY label ORDER BY VOLUME DESC



=======================================================================================
=======================================================================================
QUERY_NO: 404
QUERY_ID: b06a0370-77b8-494a-a8e3-ff7d1031d4ab
QUERY_TITLE: [NEAR][2023] Gov Stakes Stats

QUERY_STRING:

with latest as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , coalesce(logs[2], logs[1]) as line
		, TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance
		, t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	qualify rank=1 ), refine as (
	SELECT
	
	SUM(balance) as stake
	  , COUNT(DISTINCT receiver_id) as stake_pools
	from latest
	WHERE balance>20378 --current min. stake requirement? https://near-staking.com/ ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 405
QUERY_ID: 620fd4b7-68e6-4058-969b-bec649e19417
QUERY_TITLE: [NEAR] Validator Tool - Top 20 Stakers

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, (TO_NUMBER(regexp_substr(line, 'unstaking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) as amt_un
		, (TO_NUMBER(regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1))/1e24) as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  AND r.receiver_id = '{{validator}}'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer as staker
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  cur_stake
	  , staker
	  , CASE WHEN min_dtime=max_dtime THEN CURRENT_DATE ELSE max_dtime END as corrected_max
	  , datediff('day', min_dtime, corrected_max) as staked_since_days
	  , CASE WHEN cur_stake<=0.001 THEN 'inactive' ELSE 'active' END as CAT
	from stakers ) SELECT
	 * from refine WHERE CAT = 'active' ORDER BY cur_stake DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 406
QUERY_ID: 772f5e97-7d5d-4e4c-b612-6a1e77e61140
QUERY_TITLE: [NEAR] Validator Tool - Latest Balance

QUERY_STRING:

with latest as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , coalesce(logs[2], logs[1]) as line
		, TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance
		, t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  AND r.receiver_id = '{{validator}}'
	qualify rank=1 ) SELECT * from latest



=======================================================================================
=======================================================================================
QUERY_NO: 407
QUERY_ID: 44edaf2c-310e-49cb-8088-e084c037b44a
QUERY_TITLE: [NEAR][2023] Gov Stakes Majority & Minority

QUERY_STRING:

with latest as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , coalesce(logs[2], logs[1]) as line
		, TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance
		, t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	qualify rank=1 ), refine as (
	SELECT
	
	balance
		, receiver_id
		, SUM(balance) OVER() as total_balance
		, rank() OVER (ORDER BY balance DESC) as validator_rank
		, SUM(balance) OVER (ORDER BY balance DESC) as cum_balance
		, ROUND( (cum_balance/total_balance)*100, 2) as cum_bal_perc
	from latest
	WHERE balance>20378 --current min. stake requirement? https://near-staking.com/ ),
	 nako as (
	SELECT
	
	MIN(validator_rank) as rank_limit
	from refine
	WHERE cum_bal_perc>=33 )
	 SELECT
	 *
	, CASE WHEN validator_rank <= rank_limit THEN 'majority' ELSE 'minority' END as cat from refine LEFT JOIN nako on 1=1 ORDER BY balance DESC



=======================================================================================
=======================================================================================
QUERY_NO: 408
QUERY_ID: fe007944-79d8-4c91-9fa3-2e77ec31b613
QUERY_TITLE: [NEAR][2023] Staking User Stats 1

QUERY_STRING:

with base as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , logs[0] as line
		, 0 as amt_un
	  , CASE  WHEN method_name in ('stake', 'deposit_and_stake')
	
	
	
	  THEN (TO_NUMBER(coalesce(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1), regexp_substr(line, 'deposited\\s(\\d+)', 1, 1, 'e', 1)))/1e24)
	
	
	
	  ELSE (TO_NUMBER(regexp_substr(line, 'staking\\s(\\d+)', 1, 1, 'e', 1))/1e24)*(-1) END as amt
	  , t.tx_signer
		, r.receiver_id
		, rank() OVER (PARTITION by t.tx_signer, r.receiver_id ORDER BY dtime DESC) as rank
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  --AND t.tx_signer = 'xixihaha.near' ) , stakers as (
	SELECT
	
	SUM(coalesce(amt,amt_un)) as cur_stake
	  , MIN(dtime) as min_dtime
	  , MAX(dtime) as max_dtime
	  , tx_signer
	from base
	GROUP BY tx_signer ) , refine as (
	SELECT
	  COUNT(DISTINCT tx_signer) as stakers
	  , CASE WHEN cur_stake<=0.001 THEN 'Ex-Staker' ELSE 'active' END as CAT
	from stakers
	GROUP BY CAT ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 409
QUERY_ID: ec49e7d3-4233-44c9-a706-37c3eaf7d658
QUERY_TITLE: [NEAR] Validator Tool - Latest Balance copy

QUERY_STRING:

with latest as (
	SELECT
	
	DISTINCT t.tx_hash
		, t.block_timestamp as dtime
		, method_name
	  , t.tx_status
	  , logs
	  , outcome
	  , coalesce(logs[2], logs[1]) as line
		, TO_NUMBER(regexp_substr(line, 'Contract total staked balance is (\\d+)', 1, 1, 'e', 1))/1e24 as balance
		, t.tx_signer
		, r.receiver_id
		
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	JOIN near.core.fact_receipts r ON a.tx_hash = r.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all', 'stake', 'unstake')
		AND coalesce(logs[2], logs[1]) LIKE ('Contract total staked%')
	  AND t.tx_status = 'Success'
	  AND r.receiver_id = '{{validator}}'
	 ) SELECT * from latest ORDER BY dtime asc



=======================================================================================
=======================================================================================
QUERY_NO: 410
QUERY_ID: e8dbb341-cbaf-448b-82cf-d38cb5987c7b
QUERY_TITLE: sei_oi snippet

QUERY_STRING:

WITH api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  'https://archive.sei-prod.vertexprotocol.com/v2/contracts'
	
	
	
	 )
	
	
	) :data AS response ), market_stats AS (
	  SELECT
	
	
	DATE_TRUNC('hour', SYSDATE()) AS HOUR,
	
	
	f.value :base_currency :: STRING AS base_currency,
	
	
	f.value :base_volume :: FLOAT AS base_volume,
	
	
	f.value :contract_price :: FLOAT AS contract_price,
	
	
	f.value :contract_price_currency :: STRING AS contract_price_currency,
	
	
	f.value :funding_rate :: FLOAT AS funding_rate,
	
	
	f.value :index_price :: FLOAT AS index_price,
	
	
	f.value :last_price :: FLOAT AS last_price,
	
	
	f.value :mark_price :: FLOAT AS mark_price,
	
	
	TRY_TO_TIMESTAMP(
	
	
	
	 f.value :next_funding_rate_timestamp :: STRING
	
	
	) AS next_funding_rate_timestamp,
	
	
	f.value :open_interest :: FLOAT AS open_interest,
	
	
	f.value :open_interest_usd :: FLOAT AS open_interest_usd,
	
	
	f.value :price_change_percent_24h :: FLOAT AS price_change_percent_24h,
	
	
	f.value :product_type :: STRING AS product_type,
	
	
	f.value :quote_currency :: STRING AS quote_currency,
	
	
	f.value :quote_volume :: FLOAT AS quote_volume,
	
	
	f.key AS ticker_id,
	
	
	SYSDATE() AS inserted_timestamp
	  FROM
	
	
	api_pull A,
	
	
	LATERAL FLATTEN(
	
	
	
	 input => response
	
	
	) AS f ) SELECT SUM(OPEN_INTEREST_USD) as volume_oi from market_stats



=======================================================================================
=======================================================================================
QUERY_NO: 411
QUERY_ID: cceac05e-1fce-4be6-a9dc-628ba9ab7167
QUERY_TITLE: all time stake - By Withdrawal Address

QUERY_STRING:

with base as (
	  SELECT
	
	  COALESCE(WITHDRAWAL_ADDRESS, 'empty') as WITHDRAWAL_ADDRESS
	
	 , SUM(deposit_amount) as eth_staked --NOT always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	  GROUP by WITHDRAWAL_ADDRESS
	  UNION ALL
	
	
	  SELECT
	
	  COALESCE(WITHDRAWAL_ADDRESS, 'empty') as WITHDRAWAL_ADDRESS
	
	 , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	  GROUP BY WITHDRAWAL_ADDRESS ) SELECT
	 SUM(eth_staked) as total_eth
	, ROUND(total_eth/32,0) as validators from base



=======================================================================================
=======================================================================================
QUERY_NO: 412
QUERY_ID: e47136d0-2252-4849-b505-3d2b76a5ea2d
QUERY_TITLE: summary stats copy

QUERY_STRING:

-- forked from summary stats @ https://flipsidecrypto.xyz/studio/queries/f4083419-d81f-46fd-b33f-ca8e75860447 -- forked from summary stats test (no edge) @ https://flipsidecrypto.xyz/studio/queries/164ece5b-50d0-4186-b27d-2866887d8a47 ----SEI Orderfill events----- with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	
	
	NULL as EZ_PERP_TRADES_ID,
	
	
	NULL as INSERTED_TIMESTAMP,
	
	
	NULL as MODIFIED_TIMESTAMP
	  FROM
	
	
	order_fill_format ) ------ END OF SEI ORDERFILLS------------------ , base_perp_trades as (
	with base_products as (
	  with base as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from base, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	base_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	base_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  base_logs l
	),
	base_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	 base_order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 base_order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- , merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base_perp_trades
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from FINAL
	WHERE 1=1
	  AND block_timestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees from merge -- SELECT * from merge WHERE label = 'arbitrum' -- LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 413
QUERY_ID: f14a5dfd-9cdf-4b45-85d3-bc573c09cea3
QUERY_TITLE: respectable-turquoise

QUERY_STRING:

SELECT
	 *
	, row_number() OVER (order by HOUR DESC) as rank  from arbitrum.vertex.ez_market_stats WHERE symbol = 'BTC-PERP' AND hour>CURRENT_DATE-1 qualify rank<=2 UNION ALL SELECT
	 *
	, row_number() OVER (order by HOUR DESC) as rank  from blast.blitz.ez_market_stats WHERE symbol = 'BTC-PERP' AND hour>CURRENT_DATE-1 qualify rank<=2



=======================================================================================
=======================================================================================
QUERY_NO: 414
QUERY_ID: 6cd83106-0d46-474e-ad44-5026449d1e1a
QUERY_TITLE: Selected Wallet's Trades Data

QUERY_STRING:

-- forked from Random Sampler (Vertex + GMX Traders) @ https://flipsidecrypto.xyz/edit/queries/e00fcb9f-ef7f-40c7-8b5f-d4f5640a9578 with v1 as (
	SELECT
	
	block_timestamp
	  , 'GMX V1' as platform
	  , TO_VARCHAR(DECODED_LOG:account) as account
	  , TO_VARCHAR(DECODED_LOG:index) as market
	  , event_name as order_type
	  , CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as trade_type
	  , DECODED_LOG:"sizeDelta"/1e30 as volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	  , DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	  , ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	  , DECODED_LOG
	  , tx_hash
	  -- , DECODED_LOG:path
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN arbitrum.core.dim_contracts con
	 ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	  AND EVENT_NAME ILIKE 'Create%'
	  AND DECODED_LOG:account = lower('{{account}}')
	  AND DECODED_LOG:"collateralDelta" IS NOT NULL
	  AND tx_status = 'SUCCESS' ) , v2 as (
	with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	  AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS'
	)
	,
	orders_created as (
	  SELECT
	
	  tx_hash
	
	 , block_timestamp
	
	 , DECODED_LOG
	
	 , DECODED_LOG:"eventData"[0][0][0][1] as account
	
	 , DECODED_LOG:"eventData"[0][0][4][1] as market
	
	 , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	
	 , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	
	 , DECODED_LOG:"eventData"[1][0][2][1]/1e30 as volume  --div by 1e30
	
	 , DECODED_LOG:"eventData"[4][0][0][1] as key
	
	 , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	
	 , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as trade_type
	
	 , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	  from arbitrum.core.ez_decoded_event_logs
	
	WHERE 1=1
	
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	
	 AND decoded_log:"eventName"='OrderCreated'
	
	 AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	
	 AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	
	 AND event_name='EventLog2'
	
	 AND tx_status = 'SUCCESS'
	)
	SELECT
	
	c.block_timestamp
	  , 'GMX V2' as platform
	  , TO_VARCHAR(account) as account
	  , TO_VARCHAR(market) as market
	  , order_type
	  , trade_type
	  , volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	  , execution_fee_eth
	  , ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	  , c.DECODED_LOG
	  , c.tx_hash
	from orders_created c
	 LEFT JOIN orders_exec e ON c.key=e.ex_key
	LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address
	WHERE 1=1
	  AND exec=1 ) , vertex as (
	SELECT
	  block_timestamp
	  , TO_VARCHAR('Vertex ' || version) as platform
	  , trader as account
	  , SYMBOL as market
	  , order_type
	  , trade_type
	
	, amount_usd as volume
	  , fee_amount
	  , NULL as collateral_token
	  , NULL as init_collateral_delta_amount
	  , NULL as execution_fee_eth
	  , ARRAY_CONSTRUCT('orderExecuted:' || tx_hash) as tx_hashes
	  , NULL as DECODED_LOG
	  , tx_hash
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND trader = lower('{{account}}') ) , combo as (
	SELECT * from v1
	UNION
	 SELECT * from v2
	UNION
	 SELECT * from vertex ) SELECT * from combo ORDER BY block_timestamp DESC -- SELECT * from combo



=======================================================================================
=======================================================================================
QUERY_NO: 415
QUERY_ID: 018f2b37-5ec4-4bd5-9d48-aa57e8d4a7f9
QUERY_TITLE: Top 10 Delegates (First Week 9th-15th Nov) by 'Delegations'

QUERY_STRING:

SELECT  REPLACE(event_inputs:"toDelegate",'"','') as delegate, COUNT(DISTINCT tx_from_address) as total_delegate_actions
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateChanged'
	 
	AND date_trunc('day', block_timestamp) >= '2021-11-09' 
		AND date_trunc('day', block_timestamp) < '2021-11-16'
	  GROUP BY delegate
	ORDER BY total_delegate_actions DESC
	LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 416
QUERY_ID: 758d5314-58f1-4086-b5af-03d95f82ae40
QUERY_TITLE: TVL over Time (PARAM)

QUERY_STRING:

-- forked from TVL over Time @ https://flipsidecrypto.xyz/studio/queries/ff626170-6d30-4bfa-aec7-141f01f1cdd0 with base as (
	SELECT
	
	*
	 from  $query('2909d4af-9255-4be4-bb5e-5bb421990a3a')
	WHERE 1=1
	  and chain = lower('{{instance}}') ) SELECT * from base ORDER BY DDATE DESC, CHAIN ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 417
QUERY_ID: 00d28c72-77d0-4544-9bb2-12ac23edeb58
QUERY_TITLE: Cubhub

QUERY_STRING:

-- forked from $ER @ https://flipsidecrypto.xyz/edit/queries/628128b8-9006-4fb4-8067-47fe244e3290 with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 418
QUERY_ID: 48a11f07-5257-4aee-aeb1-5f42a5f8b73d
QUERY_TITLE: [ALGO][Q42] Arbs: Total Events

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ) SELECT
	 COUNT(*) as total_arb_events
	 from refine r left JOIN algorand.asset a ON r.swap_from_asset_id = a.asset_id WHERE
	time_delta_seconds <= 600
	AND profit_perc> 0



=======================================================================================
=======================================================================================
QUERY_NO: 419
QUERY_ID: f1123929-9395-424b-a20f-8d89ec4d1ecf
QUERY_TITLE: NEAR - CosmoseAI Retention 

QUERY_STRING:

-- forked from NEAR - Sweat Users Retention @ https://flipsidecrypto.xyz/edit/queries/decc0189-3c79-423c-90cb-e46ce3a49cb3  -- forked from NEAR - Base retention @ https://flipsidecrypto.xyz/edit/queries/0a584012-0f8a-440d-96fc-d7421fdf1955  with cosm_users as  (
	  select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2023-08-14'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2023-08-14' ) , base_table as (
	select
	
	user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	from cosm_users
	where 1=1 ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_week_later
	
	 , case when difference = 2 then retention_pct else null end as two_week_later
	
	 , case when difference = 3 then retention_pct else null end as three_week_later
	
	 , case when difference = 4 then retention_pct else null end as four_week_later
	
	 , case when difference = 5 then retention_pct else null end as five_week_later
	
	 , case when difference = 6 then retention_pct else null end as six_week_later
	
	 , case when difference = 7 then retention_pct else null end as seven_week_later
	
	 , case when difference = 8 then retention_pct else null end as eight_week_later
	
	 , case when difference = 9 then retention_pct else null end as nine_week_later
	
	 , case when difference = 10 then retention_pct else null end as ten_week_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_week_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_week_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM-DD') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_week_later) * 100 ,'%') as one_week_later
	
	 , concat(max(two_week_later) * 100 ,'%') as two_week_later
	
	 , concat(max(three_week_later) * 100 ,'%') as three_week_later
	
	 , concat(max(four_week_later) * 100 ,'%') as four_week_later
	
	 , concat(max(five_week_later) * 100 ,'%') as five_week_later
	
	 , concat(max(six_week_later) * 100 ,'%') as six_week_later
	
	 , concat(max(seven_week_later) * 100 ,'%') as seven_week_later
	
	  , concat(max(eight_week_later) * 100 ,'%') as eight_week_later
	
	 , concat(max(nine_week_later) * 100 ,'%') as nine_week_later
	
	 , concat(max(ten_week_later) * 100 ,'%') as ten_week_later
	
	 , concat(max(eleven_week_later) * 100 ,'%') as eleven_week_later
	
	 , concat(max(twelve_week_later) * 100 ,'%') as twelve_week_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 420
QUERY_ID: 8f764723-2027-4da8-a983-b44379113127
QUERY_TITLE: SEI transfers/bridging of claimers FIXED

QUERY_STRING:

-- forked from SEI transfers Modded @ https://flipsidecrypto.xyz/edit/queries/841679fc-2a03-403d-8c66-6e72d9ac470a with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=150') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=150') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  (amount / pow(10, 6)) * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'day') = b.hourly and a.symbol_address = b.token_address ) ,  merge_txns as (
	SELECT
	
	SUM(CASE WHEN cat='in' THEN volume ELSE null END) as vol_in
	  , SUM(CASE WHEN cat='out' THEN volume ELSE null END) as vol_out
	  , SUM(CASE WHEN cat='drop' THEN volume ELSE NULL END) as vol_drop
	  , COUNT(DISTINCT tx_id) as txns
	  , MIN(block_timestamp) as t_min
	  , MAX(block_timestamp) as t_max
	  , MIN(CASE WHEN cat='drop' THEN block_timestamp ELSE NULL END) as t_drop
	  , user
	from all_bridges
	GROUP BY user ) -- , -- stats as  (  --
	select  --
	  trunc(block_timestamp,'day') as ddate,  --
	  CASE WHEN cat='in' THEN '🟩' ELSE '🟥' END as status,  --
	  bridge, --
	  count(DISTINCT(user)) as users, --
	  count(DISTINCT(tx_id)) as count_tx, sum(volume) as usd_volume, avg(volume) as avg_volume, --
	  max(volume) as max_volume, median(volume) as median_volume , min(volume) as min_volume --
	from all_bridges --
	group by 1,2,3 -- ) -- SELECT * from stats SELECT * from merge_txns where vol_drop>700 -- AND user = 'sei15ksmnwvyy2s9rcrgl36hg5uefqegsx7ruwt6u5'



=======================================================================================
=======================================================================================
QUERY_NO: 421
QUERY_ID: 7b4a155a-85a2-494f-ab55-3311eb1ef3fd
QUERY_TITLE: friend - Top Traders

QUERY_STRING:

-- forked from friend - Top Traded Accounts @ https://flipsidecrypto.xyz/edit/queries/417a9798-3080-40a4-a172-7436949a7820  -- forked from friend - Trade Volume Cumulative @ https://flipsidecrypto.xyz/edit/queries/750c59f1-6860-4529-848a-037bee0c5393  -- forked from friend - Trade Volume @ https://flipsidecrypto.xyz/edit/queries/80af3f43-64c2-4ab5-a490-18bb57049f20  -- SELLS AND BUYS: with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	trader
	  , SUM(trade_value) as volume_eth
	  , COUNT(DISTINCT account) as accounts_traded
	from base_wallet
	GROUP BY trader ORDER BY volume_eth DESC
	LIMIT 20 ) , account_funders as (
	SELECT
	
	t.tx_hash
	  , t.block_timestamp
	  , to_address as account
	  , from_address as funder
	  , value
	  , ENS_DOMAIN
	  , rank() OVER (PARTITION BY to_address ORDER BY t.block_timestamp ASC) as rank
	from base.core.fact_transactions t
	LEFT JOIN crosschain.ens.ez_ens_domains e ON t.from_address=e.owner
	WHERE 1=1
	  AND VALUE>0
	  AND ENS_SET!=false
	  AND to_address IN (SELECT trader as to_address from refine)
	qualify rank=1
	 ) select
	 volume_eth, trader, ENS_DOMAIN, accounts_traded from refine r LEFT JOIN account_funders a ON r.trader=a.account ORDER BY volume_ETH DESC



=======================================================================================
=======================================================================================
QUERY_NO: 422
QUERY_ID: a1135c24-b32b-4f74-8746-ab83d767db05
QUERY_TITLE: [ALGO][Q69] Folks Borrows Over Time

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as bor_asset_amt,
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), pre_final as ( SELECT
	 COUNT(tx_group_id) as totals,
	asset_name,
	date_trunc('day', ddate) as dddate from borrows b LEFT JOIN flipside_prod_db.algorand.asset a ON b.bor_asset=a.asset_id WHERE
	bor_asset IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) GROUP BY dddate, asset_name ) SELECT
	DISTINCT dddate,
		sum(totals) as daily_borrows, 
	sum(daily_borrows) over ( order by dddate ASC) as cumulative_borrows from pre_final GROUP BY dddate ORDER BY dddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 423
QUERY_ID: a0ffeb77-0aee-4349-9648-4e83914dc668
QUERY_TITLE: [ALGO][Q15] AB 8-9 Nov CHARTs

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery'
			AND (block_timestamp>='2021-11-08' AND block_timestamp<'2021-11-10') ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  COUNT(DISTINCT ASSET_ID) as unique_assets,
			COUNT(DISTINCT buyer) as unique_buyers,
			SUM(algo_amount) as algo_amount,
			SUM(asset_amount) as asset_amount,
		date_trunc('hour', trade_close_date) as ddate from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL GROUP BY ddate ORDER BY algo_amount DESC



=======================================================================================
=======================================================================================
QUERY_NO: 424
QUERY_ID: 0b93ad7d-8a62-4ee5-8e15-ca9d08afcc19
QUERY_TITLE: [TC] Asset Stats Base Tiers

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token,':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY ddate,cat ), sample_space as (
	SELECT
	
	date_day as ddate,
		cat
	from ethereum.core.dim_dates
	OUTER JOIN (SELECT DISTINCT cat from refine WHERE cat IS NOT NULL) ON 1=1
	WHERE
		date_day BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1 ), pre as (
	SELECT 
	s.ddate,
	coalesce(total_txns, 0) as total_txns,
		coalesce(token_amounts, 0) as token_amounts,
		price,
		token_amounts*price as volume_usd,
	s.cat
	from sample_space s
	 LEFT JOIN  refine r ON s.ddate=r.ddate AND s.cat = r.cat
	LEFT JOIN  (
	  SELECT
	
	avg(price) as price,
	
	CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	  date_trunc('day', HOUR) as pdate
	  FROM ethereum.core.fact_hourly_token_prices
	  WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(split(cat,':')[0])='eth' THEN 'weth' ELSE split(cat,':')[0] END as cat from refine WHERE cat IS NOT NULL)
	  GROUP BY pdate,symbol
	  ) p  ON s.ddate = pdate AND lower((split(s.cat,':')[0]))=p.symbol
	WHERE 1=1
		AND s.ddate>=CURRENT_DATE -(30*{{Months_Ago}})
		AND s.cat ilike '%{{ASSET}}%'  ) SELECT 
	SUM(total_txns) as  total_txns,
	SUM(volume_usd) as total_volume,
	cat from pre group by cat



=======================================================================================
=======================================================================================
QUERY_NO: 425
QUERY_ID: a1493d2b-c0a6-487e-9256-8e980b3cf29e
QUERY_TITLE: [OP] L2 Summer Preferences

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp as adate
	from optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender as wallet
		, adate
	, CASE	WHEN mdate IS NULL THEN 'optimism Only'
				WHEN mdate>adate THEN 'Both/optimism First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , arb_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from optimism.core.fact_transactions
	WHERE 1=1
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , main_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from ethereum.core.fact_transactions t
	LEFT JOIN refine r ON  t.from_address=r.wallet
	WHERE 1=1
		AND block_timestamp>adate
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , combo as (
	SELECT *, 'arb' as CAT from arb_counts
	UNION ALL
	SELECT *, 'main' as CAT from main_counts ) , pre as (
	SELECT
		MAX(CASE	WHEN CAT='arb' THEN totals ELSE 0 END) as arb_counts
		, MAX(CASE	WHEN CAT='main' THEN totals ELSE 0 END ) as main_counts
		, sender
	from combo
	GROUP BY sender ) , pre_final as (
	SELECT
		*
		, arb_counts+main_counts as total_txns
		, round(arb_counts/(total_txns) * 100, 2) as arb_pref
		, CASE
	WHEN arb_pref>=70 THEN 'optimism Preferred'
				WHEN arb_pref<=30 THEN 'Mainnet Preferred'
				ELSE 'Both Balanced Usage' END as CAT
	from pre
	WHERE 1=1
		AND arb_counts+main_counts>=5 ) SELECT
	
	COUNT(sender) as totals
	, CAT from pre_final GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 426
QUERY_ID: 206980e9-d50e-463c-89c5-5548c3f8f976
QUERY_TITLE: SEI Bridging Daily Stats

QUERY_STRING:

-- forked from SEI Transfers Abuse @ https://flipsidecrypto.xyz/edit/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1 -- forked from SEI transfers/bridging of claimers FIXED @ https://flipsidecrypto.xyz/edit/queries/8f764723-2027-4da8-a983-b44379113127 with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where hourly >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	 ) ,  merge_txns as (
	SELECT
	
	SUM(volume) as vol
	  , block_timestamp::date as ddate
	  , cat
	from all_bridges
	GROUP BY ddate, cat ) SELECT
	 CASE WHEN cat='in' THEN vol ELSE vol*(-1) END as vol
	, vol as net_flow
	, ddate
	, cat from merge_txns WHERE ddate!='2023-08-21' --ignoring this date as data for inflows bugged due to pipeline...inflows shown as 242Bn.... ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 427
QUERY_ID: 479cc96d-b483-4832-8696-b5038956ec4c
QUERY_TITLE: [BANKLESS][Q1]Members & Roles

QUERY_STRING:

with holders as ( 
	SELECT
		CASE
			WHEN balance>=150000 THEN 'whale'
			WHEN balance>=35000 THEN 'member'
			ELSE NULL END as role_type,
		balance_date as ddate,
		COUNT(DISTINCT user_address) as wallets
	from ethereum.erc20_balances
	WHERE
		balance_date>= '2021-05-01'
		AND contract_address = lower('0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198')
		AND balance>= 35000
	GROUP BY ddate, role_type ) SELECT * from holders ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 428
QUERY_ID: a14e2c69-cb00-4984-ac2b-721b7f726f37
QUERY_TITLE: [ALGO] PactFi LP Tokens

QUERY_STRING:

with base as (
	SELECT
		DISTINCT app_id,
		tx_message:dt:itx[0]:txn:apar:an::STRING as pool
	from algorand.application_call_transaction
	WHERE
		inner_tx = 'FALSE'
	
	AND tx_message:dt:itx[0]:txn:type::STRING = 'acfg'
	
	AND tx_message:dt:itx[0]:txn:apar:an::STRING LIKE '%PACT LP Token'
	
	AND tx_message:dt:itx[0]:txn:apar:au::STRING = 'https://pact.fi/'
	
	--AND (TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'ADDLIQ' OR TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'REMLIQ') ), filter as (
	SELECT
	
	TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) as type,
		block_timestamp,
		a.app_id,
		pool
	from algorand.application_call_transaction a
	LEFT JOIN base b on b.app_id = a.app_id
	WHERE
	a.app_id IN (select app_id from base)
	AND (TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'ADDLIQ' OR TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'REMLIQ') ) SELECT
	date_trunc('day', block_timestamp) as ddate,
	type,
	count(*) as total from filter GROUP BY ddate,type



=======================================================================================
=======================================================================================
QUERY_NO: 429
QUERY_ID: 0c592f37-a0d8-4d6f-9ae8-caf50f21f7a3
QUERY_TITLE: [ALGO] Total NFT usage

QUERY_STRING:

with arc69_assets as (
	  SELECT asset_id from algorand.asset_configuration_transaction
	  WHERE
	 
	TRY_PARSE_JSON(try_base64_decode_string(tx_message:txn:note::string)):standard = 'arc69'
			AND tx_message:txn:snd IS NOT  NULL  ), arc69_asset_dets as (
	SELECT asset_id
		from algorand.asset
		WHERE
			asset_id IN (SELECT asset_id from arc69_assets)
			AND asset_deleted = FALSE
			AND total_supply = 1 ), combo as ( SELECT COUNT(DISTINCT asset_id) as totals, 'arc69' as cat from arc69_asset_dets UNION ALL
	 SELECT  COUNT(DISTINCT asset_id) as totals, 'arc3' as cat from algorand.asset WHERE 
	asset_url like '%#arc3%'
	AND total_supply = 1 ) SELECT SUM(totals) as totals, cat from COMBO GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 430
QUERY_ID: d0f32d5c-ad91-4b2d-93cd-ea7a7297274e
QUERY_TITLE: Hiberanation Dream Masks

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b' ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 431
QUERY_ID: 4169ff72-96f8-4ab7-8a4c-4fb2582b6e88
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP - USDC

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (31566704)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 432
QUERY_ID: d2c21ba9-1b70-4f6f-9c6c-7920dc14a22c
QUERY_TITLE: volume by SYMBOL

QUERY_STRING:

-- forked from daily stats @ https://flipsidecrypto.xyz/studio/queries/1559bf8f-7fd2-4743-b905-eaeafe88ee95 -- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/e3ee9fde-7c78-4a72-add7-9a9d880f215d -- forked from base sales search @ https://flipsidecrypto.xyz/studio/queries/a0f255cb-4118-4ac1-80ef-5e0cfaa05aaa with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) , listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) , bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing-bulk' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) , merge as (
	--ignore fields with type conflict due to bulk logic like seller/qty/token_ids...for sanity
	SELECT
	
	block_timestamp
	  , tx_hash
	
	, label
	  , buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from offer_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from bulk_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from listing_sales ) , aggr as (
	SELECT
	symbol
	, COUNT(DISTINCT tx_hash) as total_trades
	, SUM(quantity) as total_items
	, SUM(amount_usd) as total_volume_usd
	, COUNT(DISTINCT buyer) as buyers
	 , MAX (tx_hash) as sample1
	, MIN( tx_hash) as sample2
	, row_number() OVER (ORDER BY total_volume_usd DESC) as rank
	from merge
	WHERE symbol IS NOT NULL AND amount_usd IS NOT NULL
	 GROUP BY 1 ) select
	 CASE WHEN rank<7 THEN symbol ELSE 'Others' END as category
	, SUM(total_volume_usd) as volume_usd
	, MAX(sample1) as sample1
	, MAX(sample2) as sample2 from aggr GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 433
QUERY_ID: a1f1ad37-3c43-4c2b-add4-579603eaccce
QUERY_TITLE: [wormhole] Wormhole Adoption By Existing Shuttle Users

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ), common_user as ( SELECT
	min_wh_user.address, wh_date, shuttle_date, 'test' as dummy,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.address = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ), pre_output as ( SELECT
	COUNT(DISTINCT address) as total_wh_adopters,
		AVG(w_diff) as avg_adoption_weeks,
		AVG(d_diff) as avg_adoption_days from common_user ) SELECT * from  pre_output



=======================================================================================
=======================================================================================
QUERY_NO: 434
QUERY_ID: ba3663f6-189a-4166-a925-912d7c2ef444
QUERY_TITLE: Sector Summaries (labels)

QUERY_STRING:

-- forked from Sector Summaries (labels)  @ https://flipsidecrypto.xyz/edit/queries/23d2e624-5333-4719-a2e1-c6bcd7b1a73b with new_wallets as (
	SELECT
	
	from_address as wallet
	  , 1 as new
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT wallet) as total_new_users
	from new_wallets )  , base as (
	SELECT
	
	COALESCE(INITCAP(LABEL_TYPE), 'Other') as SECTOR
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT origin_from_address) as users
	  , COUNT(DISTINCT CASE WHEN new=1 THEN origin_from_address ELSE NULL END) as new_ethereum_users
	  , MAX(total_new_users) as total_new_users
	from ethereum.core.fact_event_logs t
	 LEFT JOIN ethereum.core.dim_labels l on t.contract_address = l.address
	LEFT JOIN new_wallets n on t.origin_from_address=n.wallet
	LEFT JOIN stats s on 1=1
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND TX_STATUS = 'SUCCESS'  GROUP BY SECTOR
	 ) SELECT
	 SECTOR
	, txns as "Transaction Counts"
	, users as "Total Users"
	, new_ethereum_users as "New Ethereum Users"
	, round((new_ethereum_users/total_new_users)*100, 2) as "% of Total New Ethereum Users" from base  ORDER BY USERS DESC



=======================================================================================
=======================================================================================
QUERY_NO: 435
QUERY_ID: f09fb4e7-d43c-4e68-9ce7-8999131409d8
QUERY_TITLE: sample llama data

QUERY_STRING:

SELECT
	 * from external.defillama.fact_dex_volume WHERE 1=1
	AND protocol ilike 'gmx' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 436
QUERY_ID: 31b3cc87-cf5d-43c0-96ce-be1287156d90
QUERY_TITLE: insrt finance (BongBear ShardVaults)

QUERY_STRING:

-- forked from Beramoniom @ https://flipsidecrypto.xyz/edit/queries/96e90fdd-f479-40f8-a1b6-eeded959cc18 with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 437
QUERY_ID: b23d725f-5137-4ac0-83cf-44dc01ac64d4
QUERY_TITLE: [Algo][Q1] Top 20 ASAs ( Transactions counts )

QUERY_STRING:

with top_txns as (
	  SELECT
	 
	COUNT(TX_ID) as totals,
	 
	asset_id
	  from algorand.transactions
	WHERE
		asset_id!=0 AND asset_id IS NOT NULL
	  GROUP BY asset_id ORDER BY totals DESC
	  LIMIT 20 ) SELECT totals, t1.asset_id, t2.asset_name from top_txns as t1 LEFT JOIN algorand.asset as t2 ON t1.asset_id = t2.asset_id ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 438
QUERY_ID: 21770e41-36c8-4f42-a5aa-d60f5db4586e
QUERY_TITLE: find this wallet's incoming 0.05 mon gas

QUERY_STRING:

-- gas/faucet claim was roughly 5-7 AM UTC 24th Feb -- fresh phantom wallet w/ no existing EVM history ~ thereforce only 0.05 mon gas SELECT * from monad.testnet.fact_traces where 1=1
	--AND block_timestamp between '2025-02-24 04:00' AND '2025-02-24 08:00'
	--AND to_address = lower('0xf778e0929e99f1df14e94fb1a8089a8968c420e3c275b97033e6fd7224acd987')
	AND tx_hash = '0xf778e0929e99f1df14e94fb1a8089a8968c420e3c275b97033e6fd7224acd987'
	-- AND origin_function_signature = '0x7bfc2741'
	-- AND origin_to_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	-- AND from_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	-- faucet wallet: 0x09fb6a39471eb9dcee30fb91d8830195b1380e0f LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 439
QUERY_ID: 1ada8fe4-b809-4a05-b61b-bb3b606f79ea
QUERY_TITLE: [ALGO][Q2] Governance Base Stats

QUERY_STRING:

with comms as (
	SELECT
	
		CASE WHEN RECEIVER='GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' THEN 1 ELSE 0 END as p1,
			CASE WHEN RECEIVER='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY' THEN 1 ELSE 0 END as p2,
			sender,
		tx_id,
			block_id,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			--TRY_TO_NUMBER(LTRIM(substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ))) as num_value,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender,p1, p2 order by block_id asc))/1e6 as final_commit,
			CASE WHEN num_value IS NULL THEN substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ) ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER IN('GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U', '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY') 
		AND ( (block_id>=16528779 AND block_id<=16824818) OR  (block_id>=18204612 AND block_id<=18502160) )
			--AND RECEIVER IN( 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U')
		--AND sender = '6NTP2VYDYVNYJECH5KTWHX43CRNMAMDFHUEJNQDTTSPKHVB6P6J6MKKOTE'
			--AND NOT (TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE  ANY ('%:0}', '%: 0}')) ), p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			AND (block_id>=17139424 AND block_id<=17434687)
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ), grouper as (
	  SELECT
	MAX(p1) as p1,
	 
		MAX(p2) as p2,
	 
		sender
		from comms
		WHERE
			(p1=1 )
		OR p2=1
		GROUP BY SENDER ), total_across as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 OR P2 committed' as label,
		'test' as dummy
		from grouper ), total_p1 as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 committed' as label,
		'test' as dummy
		from grouper
		WHERE p1=1 ), total_p2 as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P2 committed' as label,
		'test' as dummy
		from grouper
		WHERE p2=1 ), total_both as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 & P2 committed' as label,
		'test' as dummy
		from grouper
		WHERE p2=1 AND p1=1 ), combo as (
	  SELECT * from total_both
	  UNION
	
	SELECT * from total_p2
	  UNION
	
	SELECT * from total_p1
	  UNION
	
	SELECT * from total_across ), active_wallets as (
	SELECT COUNT(DISTINCT address) as total_wallets,
		'test' as dummy
		from algorand.account
	WHERE
		account_closed = FALSE ) SELECT label, totals, total_wallets, (totals/total_wallets)*100 as wallet_percentage from combo LEFT JOIN active_wallets ON combo.dummy = active_wallets.dummy



=======================================================================================
=======================================================================================
QUERY_NO: 440
QUERY_ID: aff547c6-6895-4620-af8b-b79453aede6c
QUERY_TITLE: [ALGO][Q16] Yieldly Distribution

QUERY_STRING:

with base as (
	  SELECT
	address, amount/1e6 as abs_amount,
	
			CASE
	WHEN abs_amount<1
			THEN '<1'
	
					WHEN abs_amount>=1
			AND abs_amount<10
			THEN '1-10'
	
						WHEN abs_amount>=10
		AND abs_amount<100
			THEN '10-100'
	
						WHEN abs_amount>=100
		AND abs_amount<1000
		THEN '100-1K'
	
					WHEN abs_amount>=1000
		AND abs_amount<10000
		THEN '1K-10k'
	
						WHEN abs_amount>=10000
		AND abs_amount<100000
		THEN '10K-100k'
	
					WHEN abs_amount>=100000
	AND abs_amount<1000000
		THEN '100K-1M'
	
						WHEN abs_amount>=1000000
	AND abs_amount<10000000
	THEN '1M-10M'
	
					WHEN abs_amount>=10000000
	AND abs_amount<100000000
	THEN '10M-100M'
	
					WHEN abs_amount>=100000000
	AND abs_amount<1000000000
	THEN '100M-1B'
	
						WHEN abs_amount>=1000000000
	
						THEN '>=1B'
	
						END as category
	  from algorand.account_asset
	  WHERE
	 
	asset_id = '226701642'
	 
	AND asset_closed = FALSE
	
	
	AND frozen = FALSE
	 
	AND amount!=0
	
	) SELECT
	COUNT(*) as total_wallets,
			SUM(abs_amount) as total_tokens,
		category from base GROUP BY category ORDER BY total_wallets



=======================================================================================
=======================================================================================
QUERY_NO: 441
QUERY_ID: 3ed7d7d5-1aec-48fe-bb31-1d2baa55e785
QUERY_TITLE: [ALGO][Q16] Holders over time  --- DATE HACK

QUERY_STRING:

--THANKS TO AD/ANT for the running sum gap solution :O with dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	from table (generator(rowcount => 764)) ), top10 as (
	  SELECT	COUNT(DISTINCT address) as total_holders,
	 
		asset_id,
	 
		asset_name
	  from algorand.account_asset
	  WHERE
	 
	asset_closed = FALSE
		AND amount!=0
	 
	AND asset_name NOT LIKE '%Pending Props%'
	  GROUP BY asset_id, asset_name ORDER BY total_holders DESC
	  LIMIT 10 ), raw_data as (
	SELECT asset_id, asset_name, asset_closed, amount, block_timestamp, address
		from algorand.account_asset acc
	LEFT JOIN algorand.block b ON acc.asset_added_at = b.block_id
		WHERE
			ASSET_ID IN (SELECT asset_id from top10)
			AND asset_closed = FALSE
			AND amount!=0 ), clean_data as (
	SELECT
	COUNT(DISTINCT address) as total_users,
		asset_name,
		date_trunc('day', block_timestamp) as ddate
	  from raw_data
	  GROUP BY ddate, asset_name ), base as (
	  select ddate, asset_name, 0 as backup
	  from dates
	  CROSS JOIN (
	 
	SELECT asset_name from top10
	  ) ) SELECT
	TO_TIMESTAMP_NTZ(b.ddate)  as ndate, b.ddate, b.asset_name , backup, total_users,
		coalesce(total_users, backup) as users,
		SUM(users) OVER (PARTITION BY b.asset_name ORDER BY b.ddate ) as users_over_time from base b LEFT JOIN  clean_data c ON b.ddate = c.ddate AND b.asset_name=c.asset_name WHERE
	ndate > '2020-02-04'



=======================================================================================
=======================================================================================
QUERY_NO: 442
QUERY_ID: cfa26183-6619-4886-b79b-7af87b148306
QUERY_TITLE: negative fee trades

QUERY_STRING:

SELECT
	 * from arbitrum.vertex.ez_perp_trades WHERE fee_amount<0 AND symbol ilike 'btc%' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 443
QUERY_ID: 203f56ad-9528-4790-a0f5-de956273ea43
QUERY_TITLE: NFTs Overview - Marketplaces

QUERY_STRING:

-- forked from NFTs Overview - Summaries @ https://flipsidecrypto.xyz/edit/queries/de09d687-4bf4-438e-a9af-666b34105c77 -- forked from NFTs Overview @ https://flipsidecrypto.xyz/edit/queries/b5f1a806-1264-46a5-be65-bd112d6aee94 with stats as (
	SELECT
	
	COUNT(*) as sales
	  , COUNT(DISTINCT buyer_address) as buyers
	  , COUNT(DISTINCT seller_address) as sellers
	  , SUM(total_price_usd) as volume_usd
	  , PLATFORM_NAME as marketplace
	  , block_timestamp::date as ddate
	from aptos.nft.ez_nft_sales
	WHERE 1=1
	GROUP BY ddate, marketplace ORDER BY ddate ASC, marketplace ASC ) SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 444
QUERY_ID: 1c733cdc-e02a-472e-a806-a335b3b90b2b
QUERY_TITLE: validator csv creator

QUERY_STRING:

with res AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	  {
	
	
	 'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	 'tab_name' : 'Sheet1'
	
	 }
	  ) as response
	from DUAL ) , list as (
	SELECT
	
	value:address as validator
	  , value:label as label
	  , value:status as active
	  , TO_NUMBER(value:total_amount_snapshot) as amount_ats
	  from res, lateral flatten (input=>response:data) ) -- SELECT * from list , delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  SELECT
	m.validator
	, MAX(label) as label
	, MAX(active) as active
	, MAX(amount_ats) as amount_all_time
	, ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as total_q
	, amount_all_time - total_q as amount_adjusted
	, MAX(CURRENT_TIMESTAMP) as snapshot_time from merge m  LEFT JOIN list l on m.validator=l.validator WHERE 1=1
	AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	AND label IS NOT NULL GROUP BY 1 ORDER BY 4 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 445
QUERY_ID: 646b5400-a64e-424f-9ea4-47c64329abcd
QUERY_TITLE: GMX V2 OrderVault Transfers

QUERY_STRING:

-- forked from GMX V2 Orders @ https://flipsidecrypto.xyz/edit/queries/2692a88b-7545-4653-91c6-f74eb382d9a8 SELECT
	 tx_hash
	, 'orderCreated' as label
	, ORIGIN_FROM_ADDRESS
	, ORIGIN_TO_ADDRESS
	, FROM_ADDRESS
	, TO_ADDRESS
	, SYMBOL
	, RAW_AMOUNT_PRECISE/pow(10,decimals) as amount from arbitrum.core.fact_token_transfers t LEFT JOIN arbitrum.core.dim_contracts con on t.contract_address=con.address where 1=1
	AND tx_hash = '0xf541506a4463de1e223bdad983630034d1d07b1815a00122481acaedc869e9f3' UNION SELECT
	 tx_hash
	, 'orderExecuted' as label
	, ORIGIN_FROM_ADDRESS
	, ORIGIN_TO_ADDRESS
	, FROM_ADDRESS
	, TO_ADDRESS
	, SYMBOL
	, RAW_AMOUNT_PRECISE/pow(10,decimals) as amount from arbitrum.core.fact_token_transfers t LEFT JOIN arbitrum.core.dim_contracts con on t.contract_address=con.address where 1=1
	AND tx_hash = '0x43d876fe2e01100d2e1872f550a4e274bfb78b2d56b61369b49a772ef9557da6'



=======================================================================================
=======================================================================================
QUERY_NO: 446
QUERY_ID: c6e5a7cc-9d82-4b14-8207-9982370f5589
QUERY_TITLE: Near KAIKAI Transfers/Transactions Dive

QUERY_STRING:

-- forked from Near Transactions vs KAIKAI copy @ https://flipsidecrypto.xyz/edit/queries/a56ea0b9-fdd4-49fe-a14f-ad411c6705ee with succeeded_txs as (
	select
	  tx_hash as tx
	from near.core.fact_transactions
	where TX_STATUS='Success'
	  AND block_timestamp>='2023-08-17' ) , kaic_events as (
	select
	
	BLOCK_TIMESTAMP
	  , TRY_PARSE_JSON(REPLACE(l.value::STRING, 'EVENT_JSON:', '')) AS event_json
	  , event_json:event as event
	  , CASE WHEN l.value::STRING ILIKE 'Claiming%' THEN 'claim' ELSE NULL END as cat
	  , tx_hash
	from near.core.fact_receipts a, LATERAL FLATTEN(INPUT => a.logs) l
	where 1=1
	
	AND ( --DEFAULT, all token transfers are transfers duh
	
	
	  (event_json:standard='nep141' AND RECEIVER_ID='wallet.kaiching' AND event_json:event='ft_transfer')
	
	
	
	 OR
	
	
	  --CLAIM CASE, some transfers are specifically triggered by claim func
	
	
	  (cat IS NOT NULL AND receiver_ID ilike '%kaiching')
	
	
	)
	
	AND block_timestamp>='2023-08-17' ) , kaic_transfers as (
	select
	
	MAX(BLOCK_TIMESTAMP) as BLOCK_TIMESTAMP
	
	, MAX(event_json:data[0]:old_owner_id)::STRING as sender
	  , MAX(event_json:data[0]:new_owner_id)::STRING as receiver
	  , MAX(event_json:data[0]:amount/1e8) as amount
	  , MAX(cat) as cat
	  , tx_hash
	from kaic_events
	 join succeeded_txs on tx_hash=tx
	GROUP BY tx_hash ) , refine_transfers as (
	select
	
	BLOCK_TIMESTAMP
	  , tx_hash
	  , sender
	  , receiver
	  , amount
	  , CASE WHEN cat IS NULL then 'Non-Claim Transfer' ELSE 'Claim Transfer' END as cat
	from kaic_transfers  ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer::STRING as sender
	  , tx_receiver::STRING as receiver
	  , (tx:actions[0]:Transfer:deposit)/1e24 as amount
	  , 'Gas Transfers' as cat
	from near.core.fact_transactions
	WHERE TX_STATUS='Success'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005 ) , combo as (
	SELECT * from refine_transfers
	UNION ALL
	SELECT * from gas_transfers ) SELECT
	 COUNT(DISTINCT tx_hash) as txn_counts
	, cat
	, date_trunc('day', block_timestamp) as ddate from combo group by ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 447
QUERY_ID: 864bb43f-0b6f-44e8-84d9-81a6417923d8
QUERY_TITLE: NFT Sales Master - Summaries Users

QUERY_STRING:

-- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , COUNT(*) as totals
	from sales_mixer
	group by 1, 2
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , COUNT(*) as totals
	from sales_mixer
	group by 1, 2 ) SELECT
	 COUNT(DISTINCT user) as totals
	, marketplace from users group by 2



=======================================================================================
=======================================================================================
QUERY_NO: 448
QUERY_ID: 1bfe7d53-0d5c-4040-ae9f-6ce6125b497e
QUERY_TITLE: [ENS][Q13] Claims - Failures and Success

QUERY_STRING:

SELECT	COUNT(DISTINCT tx_id) as total_counts, SUM(FEE_USD) as total_amounts,
			CASE WHEN success=TRUE THEN 'Success' ELSE 'Failed' END as types FROM ethereum.transactions  WHERE
	to_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND function_signature = '0x76122903' GROUP BY types



=======================================================================================
=======================================================================================
QUERY_NO: 449
QUERY_ID: 3837e0bd-1a8c-4ca5-b665-3c1164ef2a42
QUERY_TITLE: New User Totals

QUERY_STRING:

-- forked from ETH - Projects - New Users and their First 3 Interactions - LABEL_TYPES @ https://flipsidecrypto.xyz/edit/queries/22f188eb-022c-41fd-8e72-16e8b465e8ae with new_wallets as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT wallet) as total_new_users
	from new_wallets )  SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 450
QUERY_ID: 4a090036-9be3-4132-a494-2022a98499e8
QUERY_TITLE: deposit-transfer

QUERY_STRING:

-- forked from earn-claim @ https://flipsidecrypto.xyz/studio/queries/54a2d98c-ea7a-4b4d-9201-c64a69ad57f1 SELECT
	*
	, 'deposit-transfers' as cat
	from near.core.ez_token_transfers WHERE 1=1
	AND contract_address = 'wallet.kaiching'
	--AND to_address= 'earn.kaiching'
	AND from_address = 'hotwallet.kaiching'
	AND to_address ilike '%users.kaiching' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 451
QUERY_ID: 6cdcf1bc-e0d7-45de-a5d8-8466b3f9ed7c
QUERY_TITLE: New Users & First 3 Interactions - Exact Projects

QUERY_STRING:

with new_wallets as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , txns as (
	SELECT
	
	from_address as wallet
	  , CONCAT(label, '-', label_type) as label
	  --,label
	  , min(block_timestamp) as min_dtime
	
	
	from ethereum.core.fact_transactions t
	 LEFT JOIN ethereum.core.dim_labels l on t.to_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND from_address IN (SELECT wallet from new_wallets)
	  AND LABEL_TYPE IS NOT NULL
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator','flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND STATUS = 'SUCCESS'
	GROUP BY wallet, label, label_type ) , refine as (
	SELECT
	
	*
	  , row_number() OVER(PARTITION BY wallet ORDER BY min_dtime ASC) as num
	 from txns
	qualify num <=3 ) SELECT
	 num as nth_project
	, COUNT(DISTINCT wallet) as totals
	, label from refine GROUP BY label, nth_project having totals>=1000 ORDER BY nth_project, totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 452
QUERY_ID: 19b74a26-91fa-43c6-bdf6-2cbc7928080d
QUERY_TITLE: Sector Activity Overview (labels)

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate
	  , COALESCE((LABEL_TYPE), 'other') as cat
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT from_address) as users
	from ethereum.core.fact_transactions t
	 LEFT JOIN ethereum.core.dim_labels l on t.to_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND cat NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam', 'other')
	  AND STATUS = 'SUCCESS'
	GROUP BY ddate, cat ) SELECT * from base ORDER BY ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 453
QUERY_ID: 7629aeed-a602-4a05-8074-738236ef90f2
QUERY_TITLE: earn-lockups

QUERY_STRING:

SELECT
	 *
	, 'earn-lockups' as cat  from near.core.ez_token_transfers WHERE 1=1
	AND contract_address = 'wallet.kaiching'
	AND to_address= 'earn.kaiching'
	AND from_address= 'hotwallet.kaiching' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 454
QUERY_ID: 8594900c-f926-4024-9ab3-1e4752ac0eaa
QUERY_TITLE: Sector Activity Overview (labels) 

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate
	  , COALESCE((LABEL_TYPE), 'other') as cat
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT origin_from_address) as users
	from ethereum.core.fact_event_logs t
	 LEFT JOIN ethereum.core.dim_labels l on t.contract_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND TX_STATUS = 'SUCCESS'
	GROUP BY ddate, cat ) SELECT * from base ORDER BY ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 455
QUERY_ID: 49746807-d52e-46b1-ba55-081b4288225f
QUERY_TITLE: New Users & First 3 Interactions - LABEL_TYPES

QUERY_STRING:

-- forked from New Users & their First 3 Interactions - LABEL_TYPES @ https://flipsidecrypto.xyz/edit/queries/22f188eb-022c-41fd-8e72-16e8b465e8ae with new_wallets as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , txns as (
	SELECT
	
	origin_from_address as wallet
	  , label_type
	
	--,label
	  , min(block_timestamp) as min_dtime
	
	
	from ethereum.core.fact_event_logs t
	 LEFT JOIN ethereum.core.dim_labels l on t.contract_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_from_address IN (SELECT wallet from new_wallets)
	  AND LABEL_TYPE IS NOT NULL
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator','flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND TX_STATUS = 'SUCCESS'
	GROUP BY wallet, label_type ) , refine as (
	SELECT
	
	*
	  , row_number() OVER(PARTITION BY wallet ORDER BY min_dtime ASC) as num
	 from txns
	qualify num <=3 ) SELECT
	 label_type
	, num as nth_sector
	, COUNT(DISTINCT wallet) as totals from refine GROUP BY label_type, nth_sector ORDER BY nth_sector, label_type



=======================================================================================
=======================================================================================
QUERY_NO: 456
QUERY_ID: 056d7959-9056-4dc1-b63c-67ac254e02b4
QUERY_TITLE: latest time copy

QUERY_STRING:

-- forked from latest time @ https://flipsidecrypto.xyz/edit/queries/2c0c1f0d-56a0-427f-b375-fa1a2bd338ba -- forked from initial_time @ https://flipsidecrypto.xyz/edit/queries/f798b07b-1cc7-4859-85bd-0f3ec27f3fb8 with prev as (  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/8839cf03-0350-4906-be09-f50ba3fee967/latest-run') as resp ) -- flattened as ( --
	select --
	value[0] as prev_time --
	from prev, lateral FLATTEN (input=> resp:data:result:rows) -- ) -- SELECT  --
	prev_time --
	, CURRENT_TIMESTAMP as cur_time -- from flattened
	
	SELECT * from prev



=======================================================================================
=======================================================================================
QUERY_NO: 457
QUERY_ID: 1fbe66a8-db2f-4b92-a8a9-9f01a478bdcd
QUERY_TITLE: Sectors and their $USD Volume

QUERY_STRING:

-- forked from Sector Summaries (labels)  @ https://flipsidecrypto.xyz/edit/queries/23d2e624-5333-4719-a2e1-c6bcd7b1a73b with nft_sales as (
	SELECT
	  block_timestamp::date as ddate
	  , SUM(PRICE_USD) as usd_volume
	  , 'nft sales' as label
	from ethereum.nft.ez_nft_sales
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE ) , bridge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , SUM(AMOUNT_USD) as usd_volume
	  , 'bridging' as label
	from ethereum.defi.ez_bridge_activity
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE ) , dex_swap_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , SUM(AMOUNT_IN_USD) as usd_volume
	  , 'dex swaps' as label
	from ethereum.defi.ez_dex_swaps
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE ) , lending_volumes as (
	--only taking into account loan/borrow/repay based activity NOT collateral-related events
	SELECT
	  block_timestamp::date as ddate
	  , SUM(AMOUNT_USD) as usd_volume
	  , 'defi/lending' as label
	from ethereum.defi.ez_lending_borrows
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE
	UNION
	SELECT
	  block_timestamp::date as ddate
	  , SUM(AMOUNT_USD) as usd_volume
	  , 'defi/lending' as label
	from ethereum.defi.ez_lending_repayments
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE
	UNION
	 SELECT
	  block_timestamp::date as ddate
	  , SUM(FLASHLOAN_AMOUNT_USD) as usd_volume
	  , 'defi/lending' as label
	from ethereum.defi.ez_lending_flashloans
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE
	
	UNION
	
	SELECT
	  block_timestamp::date as ddate
	  , SUM(AMOUNT_USD) as usd_volume
	  , 'defi/lending' as label
	from ethereum.defi.ez_lending_liquidations
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	GROUP BY DDATE ) , merge as (
	SELECT * from nft_sales
	UNION
	 SELECT * from dex_swap_vols
	UNION
	 SELECT * from lending_volumes
	UNION
	 SELECT * from bridge_vols ) SELECT
	ddate
	, label
	, SUM(USD_VOLUME) as USD_VOLUME from merge GROUP BY ddate, label ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 458
QUERY_ID: 22f188eb-022c-41fd-8e72-16e8b465e8ae
QUERY_TITLE: New Users & their First 3 Interactions - LABEL_TYPES

QUERY_STRING:

with new_wallets as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , txns as (
	SELECT
	
	from_address as wallet
	  , label_type
	
	--,label
	  , min(block_timestamp) as min_dtime
	
	
	from ethereum.core.fact_transactions t
	 LEFT JOIN ethereum.core.dim_labels l on t.to_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND from_address IN (SELECT wallet from new_wallets)
	  AND LABEL_TYPE IS NOT NULL
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator','flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND STATUS = 'SUCCESS'
	GROUP BY wallet, label_type ) , refine as (
	SELECT
	
	*
	  , row_number() OVER(PARTITION BY wallet ORDER BY min_dtime ASC) as num
	 from txns
	qualify num <=3 ) SELECT
	 label_type
	, num as nth_sector
	, COUNT(DISTINCT wallet) as totals from refine GROUP BY label_type, nth_sector ORDER BY nth_sector, label_type



=======================================================================================
=======================================================================================
QUERY_NO: 459
QUERY_ID: 760ede96-78e0-4c30-8258-ed53014b6975
QUERY_TITLE: Individual Projects Summaries

QUERY_STRING:

-- forked from Individual Projects Summaries @ https://flipsidecrypto.xyz/edit/queries/550fc841-5fc7-4e64-9732-ca5664bfde53 with new_wallets as (
	SELECT
	
	from_address as wallet
	  , 1 as new
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT wallet) as total_new_users
	from new_wallets )  , base as (
	SELECT
	
	COALESCE(INITCAP(LABEL), 'Other') as PROJECT
	  , LABEL_TYPE as TYPE
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT origin_from_address) as users
	  , COUNT(DISTINCT CASE WHEN new=1 THEN origin_from_address ELSE NULL END) as new_ethereum_users
	  , MAX(total_new_users) as total_new_users
	from ethereum.core.fact_event_logs t
	 LEFT JOIN ethereum.core.dim_labels l on t.contract_address = l.address
	LEFT JOIN new_wallets n on t.origin_from_address=n.wallet
	LEFT JOIN stats s on 1=1
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator', 'flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND TX_STATUS = 'SUCCESS'  GROUP BY PROJECT, TYPE
	 ) SELECT
	 PROJECT
	, TYPE
	, txns as "Transaction Counts"
	, users as "Total Users"
	, new_ethereum_users as "New Ethereum Users"
	, round((new_ethereum_users/total_new_users)*100, 2) as "% of Total New Ethereum Users" from base  ORDER BY USERS DESC LIMIT 50



=======================================================================================
=======================================================================================
QUERY_NO: 460
QUERY_ID: 1ca3f40e-48c9-4741-b145-14095abe6ea2
QUERY_TITLE: [Nouns] Proposal Voting Outcomes

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime,
		substr(event_inputs:description, 0, 70) as short_desc
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		coalesce(fb2.block_timestamp, DATEADD(day,3,start_date)) as end_date, --Handling shit that ENDS IN FUTURE ie no block data yet!
		short_desc
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), votes as (
	SELECT
	
	event_inputs:proposalId as prop_id,
	  event_inputs:votes as votes,
		event_inputs:voter as voter,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
	from ethereum.core.fact_event_logs f
	CROSS JOIN merge m
	 WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
		AND m.prop_id = event_inputs:proposalId
		AND m.end_date> f.block_timestamp
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	--GROUP BY prop_id, cat ORDER BY prop_id ASC ) SELECT
	 COUNT(DISTINCT voter) as voters,
	SUM(votes) as total_votes,
	cat,
	prop_id from votes group by prop_id, cat



=======================================================================================
=======================================================================================
QUERY_NO: 461
QUERY_ID: c2f819a7-df43-4fbd-b534-e6d900653427
QUERY_TITLE: hexadecimal to unicode?

QUERY_STRING:

--https://docs.snowflake.com/en/sql-reference/functions/try_hex_decode_string SELECT
	 TRY_HEX_DECODE_STRING('f09f9499f09f949a') as decode1
	, TRY_HEX_DECODE_STRING('f09faa82') as decode2



=======================================================================================
=======================================================================================
QUERY_NO: 462
QUERY_ID: 1cecbf0c-3cd1-4b47-9eaa-b2ea97578acd
QUERY_TITLE: [Optimism][Q10] Velodrome Daily Users

QUERY_STRING:

with base as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'staking action' as activity from optimism.velodrome.ez_staking_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'LP action' as activity from optimism.velodrome.ez_lp_actions
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'claim rewards' as activity from optimism.velodrome.ez_claimed_rewards
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'swaps'  as activity from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO locks' as activity from optimism.velodrome.ez_velo_locks
	UNION ALL
	 SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'VELO votes' as activity from optimism.velodrome.ez_votes ) SELECT 
	block_timestamp::date as ddate,
	COUNT(DISTINCT tx_hash) as total_txns,
		COUNT(DISTINCT sender) as total_users,
		activity from base group by ddate, activity ORDER BY ddate asc



=======================================================================================
=======================================================================================
QUERY_NO: 463
QUERY_ID: 55c34f10-7f04-45bb-839f-7052e4fb26a6
QUERY_TITLE: total/net stakes realtime

QUERY_STRING:

with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  , refine as (
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , event_index
	  , action
	  , wallet
	  , validator
	  , amount
	from merge ) , pre_sums as (
	SELECT
	  ddate
	  , SUM(amount_adjusted) as net_stake
	from list
	WHERE 1=1
	  AND amount_adjusted>=5
	GROUP BY 1 ) , post_sums as (
	SELECT
	  block_timestamp::date as ddate
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	from refine
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1 ) , merge2 as (
	SELECT * from pre_sums
	UNION ALL
	SELECT * from post_sums ) , aggr as (
	SELECT
	  *
	  , ROUND(SUM(net_stake) OVER (ORDER BY ddate ASC)/1e6, 3) as cumulative_stake
	from merge2
	  ) SELECT * from aggr WHERE 1=1
	AND ddate>='2024-10-01' ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 464
QUERY_ID: b682e2b9-ee8b-42d1-b63d-a58f1ff5d745
QUERY_TITLE: [Worm] Hunt - Terra to Wormhole

QUERY_STRING:

SELECT  * from terra.msgs WHERE tx_id ='70301E7403DC73D0BC17F7C1ABBB0121359652529641CEE3B3B3B3617F2B4227'



=======================================================================================
=======================================================================================
QUERY_NO: 465
QUERY_ID: 7463326d-c7c1-4ee8-ae4c-17838e204060
QUERY_TITLE: Sell-Side: DEX Summaries Dailies

QUERY_STRING:

-- forked from Sell-Side: DEX Summaries @ https://flipsidecrypto.xyz/edit/queries/a3a38387-c48c-4750-a7f6-db6cd8e65d6e -- forked from Vertex Protocol - VRTX Spot Activity @ https://flipsidecrypto.xyz/edit/queries/9b7878c9-5311-4068-9184-ecf1250dc069 with base as (
	SELECT
	
	SUM(abs(BASE_DELTA_AMOUNT)) as amount_token --ABS necessary
	  , SUM(AMOUNT_USD) as amount_usd
	  , MAX('Vertex') as platform
	  , block_timestamp::date as ddate
	from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND symbol = 'VRTX'
	  and is_taker= true
	GROUP BY ddate
	 UNION
	
	 SELECT
	
	SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') THEN AMOUNT_OUT ELSE AMOUNT_IN END ) as amount_token
	  , SUM(AMOUNT_IN_USD ) as amount_usd
	  , platform
	  , block_timestamp::date as ddate
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY ddate, platform
	 ) SELECT
	 SUM(amount_usd) as volume_usd
	, SUM(amount_token) as volume_token
	, platform
	, ddate from base GROUP BY ddate, platform ORDER BY platform ASC



=======================================================================================
=======================================================================================
QUERY_NO: 466
QUERY_ID: 8e6d0ae7-69d3-460b-81d6-04d5ddddedd0
QUERY_TITLE: Sell-Side: CEX Summaries

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME
	  , t.to_address as cex_address
	  , from_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , ROUND( sum(amount_usd), 0) as amount_usd
	  , ROUND( SUM(AMOUNT_PRECISE), 2) as amount_token
	  , 'inflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  and l.label_subtype='deposit_wallet'
	group by ddate, PROJECT_NAME, CEX_address, wallet,  side ) SELECT
	 project_name as cex
	, SUM(amount_usd) as vol_usd
	, SUM(amount_token) as vol_token from base  GROUP BY cex



=======================================================================================
=======================================================================================
QUERY_NO: 467
QUERY_ID: dcaca6bf-8767-46ed-af57-61696da307a9
QUERY_TITLE: All NET Buyers/Flat Flow

QUERY_STRING:

-- forked from Top 100 Sellers @ https://flipsidecrypto.xyz/edit/queries/67fb898d-5702-4c68-8646-996f8275b84e -- forked from SS Param Overview @ https://flipsidecrypto.xyz/edit/queries/17ff4a7c-ca47-4bf5-aec1-95df92890d7a with cex_flows as (
	with transfers as (
	  SELECT
	
	  -- block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.to_address as cex_address
	
	 from_address as wallet
	
	 --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'inflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 and l.label_subtype='deposit_wallet'
	  group by wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	  UNION
	
	
	SELECT
	
	  -- block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.from_address as cex_address
	
	 to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'outflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	  group by wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	)
	SELECT
	  -- ddate
	  --, side
	  wallet
	  , 'cex_flow' as label
	  , SUM(CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END) as amount_token
	  , SUM(CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END) as amount_usd
	  from transfers
	GROUP BY wallet, label --, side ) , master as (
	SELECT
	
	trader as wallet
	  -- block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	
	  from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND symbol = 'VRTX'
	  AND is_taker = true
	  GROUP BY wallet, label
	UNION
	
	 SELECT
	
	sender as wallet
	  -- block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END ) as amount_token
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END ) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY wallet, label --wallet
	
	UNION
	
	 SELECT
	  -- block_timestamp::date as ddate
	  TO_ADDRESS as wallet
	  , 'vesting' as label
	  , SUM(amount) as amount_token
	  , SUM(AMOUNT_USD) as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	 from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	  and contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	GROUP BY wallet, label
	UNION
	SELECT * from cex_flows ) ,  stats as (
	SELECT
	
	wallet
	  , COALESCE( SUM(CASE WHEN label='dex_volume' THEN amount_token ELSE NULL END), 0) as volume_t_dex
	  , COALESCE( SUM(CASE WHEN label='cex_flow' THEN amount_token ELSE NULL END), 0) as volume_t_cex
	  , COALESCE( SUM(CASE WHEN label='vesting' THEN amount_token ELSE NULL END), 0) as volume_t_vesting
	  , volume_t_cex + volume_t_dex as net_flow
	from master
	GROUP BY wallet
	having net_flow>=0
	ORDER BY net_flow DESC
	
	) SELECT
	 ROUND(net_flow, 2) as net_flow
	, wallet
	 , ROUND(volume_t_cex, 2) as cex_flow
	, ROUND(volume_t_dex, 2) as dex_flow
	, ROUND(volume_t_vesting, 2) as volume_vested from stats  ORDER BY net_flow DESC



=======================================================================================
=======================================================================================
QUERY_NO: 468
QUERY_ID: 7c87d9ac-4c4a-4ada-a3da-7b3cad5585c7
QUERY_TITLE: Wallet Inspector Daily Summary

QUERY_STRING:

-- forked from All NET Sellers @ https://flipsidecrypto.xyz/edit/queries/67fb898d-5702-4c68-8646-996f8275b84e -- forked from SS Param Overview @ https://flipsidecrypto.xyz/edit/queries/17ff4a7c-ca47-4bf5-aec1-95df92890d7a with cex_flows as (
	with transfers as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.to_address as cex_address
	
	 , from_address as wallet
	
	 --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'inflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 and from_address = lower('{{wallet}}')
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 and l.label_subtype='deposit_wallet'
	  group by ddate, wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	  UNION
	
	
	SELECT
	
	  block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.from_address as cex_address
	
	 , to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'outflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 and to_address = lower('{{wallet}}')
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	  group by ddate, wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	)
	SELECT
	  --, side
	  wallet
	  , ddate
	  , 'cex_flow' as label
	  , SUM(CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END) as amount_token
	  , SUM(CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END) as amount_usd
	  from transfers
	GROUP BY ddate, wallet, label --, side ) , master as (
	SELECT
	
	trader as wallet
	  , block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	
	  from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  and trader = lower('{{wallet}}')
	  AND symbol = 'VRTX'
	  AND is_taker = true
	  GROUP BY ddate, wallet, label
	UNION
	
	 SELECT
	
	sender as wallet
	  , block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END ) as amount_token
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END ) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  and sender = lower('{{wallet}}')
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY ddate, wallet, label --wallet
	
	UNION
	
	 SELECT
	  TO_ADDRESS as wallet
	  , block_timestamp::date as ddate
	  , 'vesting' as label
	  , SUM(amount) as amount_token
	  , SUM(AMOUNT_USD) as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	 from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  and to_address = lower('{{wallet}}')
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	GROUP BY ddate, wallet, label
	UNION
	SELECT * from cex_flows ) SELECT * from master



=======================================================================================
=======================================================================================
QUERY_NO: 469
QUERY_ID: 17ff4a7c-ca47-4bf5-aec1-95df92890d7a
QUERY_TITLE: SS Param Overview

QUERY_STRING:

with cex_flows as (
	with transfers as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'inflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 and l.label_subtype='deposit_wallet'
	
	
	
	
	
	 group by ddate, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	  UNION
	
	
	SELECT
	
	  block_timestamp::date as ddate
	
	
	
	  -- , PROJECT_NAME
	
	 -- , t.from_address as cex_address
	
	 -- , to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'outflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	  group by ddate, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	)
	SELECT
	  ddate
	  --, side
	  , 'cex_flow' as label
	  , SUM(CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END) as amount_token
	  , SUM(CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END) as amount_usd
	from transfers
	GROUP BY ddate, label --, side ) , master as (
	SELECT
	
	block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	  -- , trader as wallet
	
	  from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND symbol = 'VRTX'
	  AND is_taker = true
	  GROUP BY ddate, label -- wallet
	UNION
	
	 SELECT
	
	block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END ) as amount_token
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END ) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	  -- , sender as wallet
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY ddate, label --wallet
	
	UNION
	
	 SELECT
	  block_timestamp::date as ddate
	  , 'vesting' as label
	  , SUM(amount) as amount_token
	  , SUM(AMOUNT_USD) as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	 from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	  and contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	GROUP BY ddate, label
	UNION
	SELECT * from cex_flows ) SELECT * from master ORDER BY ddate, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 470
QUERY_ID: faa0911c-c58f-49a4-8c33-9b380f50e1e2
QUERY_TITLE: Sell-Side: Daily CEX Inflows

QUERY_STRING:

-- forked from Sell-Side: CEX Summaries @ https://flipsidecrypto.xyz/edit/queries/8e6d0ae7-69d3-460b-81d6-04d5ddddedd0 with base as (
	SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME as cex
	  --sum(eth.amount) as eth_amount,
	  , ROUND( sum(amount_usd), 0) as amount_usd
	  , ROUND( SUM(AMOUNT_PRECISE), 2) as amount_token
	
	  from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  --and dl.label_subtype='hot_wallet'
	group by ddate, cex ) SELECT  * from base



=======================================================================================
=======================================================================================
QUERY_NO: 471
QUERY_ID: a3a38387-c48c-4750-a7f6-db6cd8e65d6e
QUERY_TITLE: Sell-Side: DEX Summaries

QUERY_STRING:

-- forked from Vertex Protocol - VRTX Spot Activity @ https://flipsidecrypto.xyz/edit/queries/9b7878c9-5311-4068-9184-ecf1250dc069 with base as (
	SELECT
	
	SUM(abs(BASE_DELTA_AMOUNT)) as amount_token --ABS necessary
	  , SUM(AMOUNT_USD) as amount_usd
	  , MAX('Vertex') as platform
	from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND symbol = 'VRTX'
	  and is_taker= true
	UNION
	
	 SELECT
	
	SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') THEN AMOUNT_OUT ELSE AMOUNT_IN END ) as amount_token
	  , SUM(AMOUNT_IN_USD ) as amount_usd
	  , platform
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY platform
	 ) SELECT
	 SUM(amount_usd) as volume_usd
	, SUM(amount_token) as volume_token
	, platform from base GROUP BY platform ORDER BY platform ASC



=======================================================================================
=======================================================================================
QUERY_NO: 472
QUERY_ID: 77c354dc-0c3d-4b53-8161-37327b7f5739
QUERY_TITLE: DEX Flow

QUERY_STRING:

with swaps as (
	SELECT
	
	CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') THEN 'buy' ELSE 'sell' END as side
	  , SUM(CASE WHEN side='buy' THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END) as volume
	  , block_timestamp::date as ddate
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY ddate, side ) SELECT
	 s.*
	, net_flow/2 as net_flow from swaps s LEFT JOIN (
	SELECT
	
	SUM(volume) as net_flow
	  , ddate
	from swaps
	GROUP BY ddate ) n ON s.ddate=n.ddate WHERE 1=1
	AND volume IS NOT NULL ORDER BY ddate ASC, side ASC



=======================================================================================
=======================================================================================
QUERY_NO: 473
QUERY_ID: 8c395882-da48-4522-a6e5-7b0795dbd9c4
QUERY_TITLE: VRTX Vesting/Hedgey Claims

QUERY_STRING:

SELECT
	block_timestamp::date as ddate
	, SUM(amount) as token_amount
	, SUM(AMOUNT_USD) as token_usd
	, COUNT(DISTINCT TO_ADDRESS) as claimers  from arbitrum.core.ez_token_transfers WHERE 1=1
	--and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	AND origin_function_signature = '0x968b3e59'
	and contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 474
QUERY_ID: f8a2a5c3-d71b-4fef-b660-a88dd3a3d1e7
QUERY_TITLE: Sell-Side: Top 20 Significant NET Inflows TEST

QUERY_STRING:

-- forked from Sell-Side: Top 20 Significant NET Inflows @ https://flipsidecrypto.xyz/edit/queries/086a3a89-6d26-4fe6-8d59-7a4c7204e0ad -- forked from Sell-Side: CEX Summaries @ https://flipsidecrypto.xyz/edit/queries/8e6d0ae7-69d3-460b-81d6-04d5ddddedd0 with base as (
	SELECT
	
	from_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , ROUND( sum(amount_usd), 0) as amount_usd
	  , ROUND( SUM(AMOUNT_PRECISE), 2) as amount_token
	  , MAX(block_timestamp::date) as last_activity_date
	  , 'inflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  --and dl.label_subtype='hot_wallet'
	group by wallet, side ) SELECT
	 wallet
	, SUM(CASE WHEN side='inflow' THEN amount_token ELSE amount_token*(-1) END) as net_inflow
	, MAX(last_activity_date) as last_activity_date from base  GROUP BY wallet ORDER BY net_inflow DESC



=======================================================================================
=======================================================================================
QUERY_NO: 475
QUERY_ID: 0d30457b-426b-4e58-972b-d0edd2905719
QUERY_TITLE: odd-case

QUERY_STRING:

SELECT * from near.core.fact_transactions WHERE tx_hash = 'zzzwcRVjTJjMQb3HDk8hZ7zyTsKMTq4PcP5F2sGdzpp'



=======================================================================================
=======================================================================================
QUERY_NO: 476
QUERY_ID: 93801321-01b4-4bd3-aef0-4ecdf8e18241
QUERY_TITLE: weekly-apricot

QUERY_STRING:





=======================================================================================
=======================================================================================
QUERY_NO: 477
QUERY_ID: 43f2a497-3ac9-48f2-b424-96de6c9c7fd4
QUERY_TITLE: [Terra][Q169] Failed Transactions Reasons

QUERY_STRING:

with terra_txns as (
	SELECT
		COUNT(tx_id) as totals,
		ltrim(regexp_substr(tx_status_msg, '.*:([\\w\\s,\\(\\\\;)]+)$', 1, 1, 'e', 1)) as fail_reason,
		date_trunc('day', block_timestamp) as ddate
	from  terra.transactions
	WHERE
		block_timestamp>='2021-11-01'
		AND tx_status!='SUCCEEDED'
	GROUP BY ddate,fail_reason ORDER BY ddate ASC ) SELECT
	 ddate,
	totals,
	CASE
	WHEN fail_reason = 'reveal period of submitted vote do not match with registered prevote'
			THEN 'vote didnt match prevote' ELSE fail_reason END as fail_reason,
	row_number() OVER (PARTITION BY DDATE ORDER BY totals DESC) as rno from terra_txns QUALIFY rno<=5



=======================================================================================
=======================================================================================
QUERY_NO: 478
QUERY_ID: b5002754-6364-4ff8-b9e8-087682a4a8a6
QUERY_TITLE: negative fee trades copy

QUERY_STRING:

-- forked from negative fee trades @ https://flipsidecrypto.xyz/studio/queries/cfa26183-6619-4886-b79b-7af87b148306 SELECT
	 * from base.vertex.ez_perp_trades LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 479
QUERY_ID: 08d1f9dc-d5c2-446c-834b-36d9108edc57
QUERY_TITLE: [LilNouns] Total NFTs and holders

QUERY_STRING:

with base as (
	SELECT
	
	*,
		dense_rank() over (PARTITION by TOKENID ORDER BY BLOCK_TIMESTAMP DESC, EVENT_INDEX DESC) as row_num --EVENT-INDEX for the hops during mint...
	from ethereum.core.ez_nft_transfers
	WHERE 1=1
		AND NFT_ADDRESS = lower('0x4b10701Bfd7BFEdc47d50562b76b436fbB5BdB3B')
	qualify row_num=1 ) SELECT
	 COUNT(TOKENID) as,
	COUNT(DISTINCT NFT_TO_ADDRESS) as holders from base



=======================================================================================
=======================================================================================
QUERY_NO: 480
QUERY_ID: 4fa24ea2-3767-482f-bc4b-6cb1c41f9282
QUERY_TITLE: Sell-Side: Last 20 Inflows

QUERY_STRING:

-- forked from Sell-Side: Top 20 Significant Sellers @ https://flipsidecrypto.xyz/edit/queries/086a3a89-6d26-4fe6-8d59-7a4c7204e0ad -- forked from Sell-Side: CEX Summaries @ https://flipsidecrypto.xyz/edit/queries/8e6d0ae7-69d3-460b-81d6-04d5ddddedd0 with base as (
	SELECT
	
	from_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , project_name as CEX
	  , ROUND(amount_usd, 0) as amount_usd
	  , ROUND(AMOUNT_PRECISE, 2) as amount_token
	  , block_timestamp as timestamp
	  , tx_hash
	  --, 'inflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  and l.label_subtype='deposit_wallet' ) SELECT
	 amount_token
	, amount_usd
	, cex
	 , timestamp
	, wallet
	 , tx_hash from base  ORDER BY timestamp DESC  LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 481
QUERY_ID: 586c69d9-f084-4770-96b6-910217e9c1fc
QUERY_TITLE: New Wallets By Counts: 5

QUERY_STRING:

-- forked from New Wallets By L2 Cumulative @ https://flipsidecrypto.xyz/edit/queries/28692dcc-db45-40ea-bfae-9ccaee84d32e  -- forked from New Wallets By L2 @ https://flipsidecrypto.xyz/edit/queries/9480a1aa-b212-4b9a-aca9-d78f60f2259c  with arb as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'arbitrum' as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , base as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'base' as cat
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , opt as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'optimism' as cat
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , combo as (
	SELECT from_address as wallet, tx_hash, block_timestamp, 'arb' as cat from arbitrum.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from arb) AND STATUS='SUCCESS'
	UNION ALL
	SELECT from_address as wallet, tx_hash, block_timestamp, 'base' as cat from base.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from base) AND STATUS='SUCCESS'
	UNION ALL
	 SELECT from_address as wallet, tx_hash, block_timestamp, 'op' as cat from optimism.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from opt) AND STATUS='SUCCESS' ) , pre as (
	SELECT
	 COUNT(DISTINCT tx_hash) as total_txns
	, cat
	, wallet
	from combo
	 GROUP BY wallet, cat  ) SELECT
	COUNT(DISTINCT wallet) as wallets
	, cat as chain
	, CASE WHEN total_txns<5 THEN 'less than 5 txns' ELSE '5 or more txns' END as wallet_type from pre GROUP by chain, wallet_type



=======================================================================================
=======================================================================================
QUERY_NO: 482
QUERY_ID: ba16fa8f-b887-4c05-8bc5-f869b210674f
QUERY_TITLE: New Wallets By Counts: 10

QUERY_STRING:

-- forked from New Wallets By Counts: 5 @ https://flipsidecrypto.xyz/edit/queries/586c69d9-f084-4770-96b6-910217e9c1fc  -- forked from New Wallets By L2 Cumulative @ https://flipsidecrypto.xyz/edit/queries/28692dcc-db45-40ea-bfae-9ccaee84d32e  -- forked from New Wallets By L2 @ https://flipsidecrypto.xyz/edit/queries/9480a1aa-b212-4b9a-aca9-d78f60f2259c  with arb as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'arbitrum' as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , base as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'base' as cat
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , opt as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'optimism' as cat
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01'
	  AND STATUS='SUCCESS' ) , combo as (
	SELECT from_address as wallet, tx_hash, block_timestamp, 'arb' as cat from arbitrum.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from arb) AND STATUS='SUCCESS'
	UNION ALL
	SELECT from_address as wallet, tx_hash, block_timestamp, 'base' as cat from base.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from base) AND STATUS='SUCCESS'
	UNION ALL
	 SELECT from_address as wallet, tx_hash, block_timestamp, 'op' as cat from optimism.core.fact_transactions
	WHERE 1=1 AND block_timestamp>='2023-08-01' AND wallet IN (SELECT wallet from opt) AND STATUS='SUCCESS' ) , pre as (
	SELECT
	 COUNT(DISTINCT tx_hash) as total_txns
	, cat
	, wallet
	from combo
	 GROUP BY wallet, cat  ) SELECT
	COUNT(DISTINCT wallet) as wallets
	, cat as chain
	, CASE WHEN total_txns<10 THEN 'less than 10 txns' ELSE '10 or more txns' END as wallet_type from pre GROUP by chain, wallet_type



=======================================================================================
=======================================================================================
QUERY_NO: 483
QUERY_ID: 086a3a89-6d26-4fe6-8d59-7a4c7204e0ad
QUERY_TITLE: Sell-Side: Top 20 Significant NET Inflows

QUERY_STRING:

-- forked from Sell-Side: CEX Summaries @ https://flipsidecrypto.xyz/edit/queries/8e6d0ae7-69d3-460b-81d6-04d5ddddedd0 with base as (
	SELECT
	
	from_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , ROUND( sum(amount_usd), 0) as amount_usd
	  , ROUND( SUM(AMOUNT_PRECISE), 2) as amount_token
	  , MAX(block_timestamp::date) as last_activity_date
	  , 'inflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  and l.label_subtype='deposit_wallet'
	group by wallet, side
	UNION
	 SELECT
	
	to_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , ROUND( sum(amount_usd), 0) as amount_usd
	  , ROUND( SUM(AMOUNT_PRECISE), 2) as amount_token
	  , MAX(block_timestamp::date) as last_activity_date
	  , 'outflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.from_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  --and dl.label_subtype='hot_wallet'
	group by wallet,  side ) SELECT
	 wallet
	, SUM(CASE WHEN side='inflow' THEN amount_token ELSE amount_token*(-1) END) as net_token_inflow
	, MAX(last_activity_date) as last_activity_date from base  GROUP BY wallet ORDER BY net_token_inflow DESC



=======================================================================================
=======================================================================================
QUERY_NO: 484
QUERY_ID: f36d2eb1-fbd6-4223-a620-3cca0e8e655c
QUERY_TITLE: Sell-Side: DEX Top Net Sellers

QUERY_STRING:

-- forked from Sell-Side: DEX Summaries Dailies @ https://flipsidecrypto.xyz/edit/queries/7463326d-c7c1-4ee8-ae4c-17838e204060 -- forked from Sell-Side: DEX Summaries @ https://flipsidecrypto.xyz/edit/queries/a3a38387-c48c-4750-a7f6-db6cd8e65d6e -- forked from Vertex Protocol - VRTX Spot Activity @ https://flipsidecrypto.xyz/edit/queries/9b7878c9-5311-4068-9184-ecf1250dc069 with base as (
	SELECT
	
	SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  , MAX(tx_hash) as tx_hash_sample
	  , MAX(block_timestamp::date) as last_activity_date
	  , trader as wallet
	
	  from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND symbol = 'VRTX'
	GROUP BY wallet
	UNION
	
	 SELECT
	
	SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END ) as amount_token
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END ) as amount_usd
	  , MAX(tx_hash) as tx_hash_sample
	  , MAX(block_timestamp::date) as last_activity_date
	  , sender as wallet
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY wallet
	 ) SELECT
	 wallet
	, ROUND(SUM(amount_usd), 0) as net_usd
	, ROUND(SUM(amount_token), 2) as net_token
	, MAX(last_activity_date) as last_activity_date
	--, MAX(tx_hash_sample) as tx_hash_sample from base GROUP BY wallet ORDER BY net_token ASC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 485
QUERY_ID: 67fb898d-5702-4c68-8646-996f8275b84e
QUERY_TITLE: All NET Sellers

QUERY_STRING:

-- forked from SS Param Overview @ https://flipsidecrypto.xyz/edit/queries/17ff4a7c-ca47-4bf5-aec1-95df92890d7a with cex_flows as (
	with transfers as (
	  SELECT
	
	  -- block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.to_address as cex_address
	
	 from_address as wallet
	
	 --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'inflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 and l.label_subtype='deposit_wallet'
	  group by wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	  UNION
	
	
	SELECT
	
	  -- block_timestamp::date as ddate
	
	 -- , PROJECT_NAME
	
	 -- , t.from_address as cex_address
	
	 to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'outflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	  group by wallet, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	)
	SELECT
	  -- ddate
	  --, side
	  wallet
	  , 'cex_flow' as label
	  , SUM(CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END) as amount_token
	  , SUM(CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END) as amount_usd
	  from transfers
	GROUP BY wallet, label --, side ) , master as (
	SELECT
	
	trader as wallet
	  -- block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	
	  from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND symbol = 'VRTX'
	  AND is_taker = true
	  GROUP BY wallet, label
	UNION
	
	 SELECT
	
	sender as wallet
	  -- block_timestamp::date as ddate
	  , 'dex_volume' as label
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END ) as amount_token
	  , SUM(CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END ) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	GROUP BY wallet, label --wallet
	
	UNION
	
	 SELECT
	  -- block_timestamp::date as ddate
	  TO_ADDRESS as wallet
	  , 'vesting' as label
	  , SUM(amount) as amount_token
	  , SUM(AMOUNT_USD) as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	 from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	GROUP BY wallet, label
	UNION
	SELECT * from cex_flows ) ,  stats as (
	SELECT
	
	wallet
	  , COALESCE( SUM(CASE WHEN label='dex_volume' THEN amount_token ELSE NULL END), 0) as volume_t_dex
	  , COALESCE( SUM(CASE WHEN label='cex_flow' THEN amount_token ELSE NULL END), 0) as volume_t_cex
	  , COALESCE( SUM(CASE WHEN label='vesting' THEN amount_token ELSE NULL END), 0) as volume_t_vesting
	  , volume_t_cex + volume_t_dex as net_flow
	from master
	GROUP BY wallet
	having net_flow<0
	 ) SELECT
	 ROUND(net_flow, 0) as net_flow
	, wallet
	 , ROUND(volume_t_cex, 2) as cex_flow
	, ROUND(volume_t_dex, 2) as dex_flow
	, ROUND(volume_t_vesting, 2) as volume_vested from stats ORDER BY net_flow ASC



=======================================================================================
=======================================================================================
QUERY_NO: 486
QUERY_ID: c84b077e-0b75-403e-9709-9e9d19fb0c77
QUERY_TITLE: Wallet Inspector - All Transactions

QUERY_STRING:

-- forked from Wallet Inspector Daily Summary @ https://flipsidecrypto.xyz/edit/queries/7c87d9ac-4c4a-4ada-a3da-7b3cad5585c7 -- forked from All NET Sellers @ https://flipsidecrypto.xyz/edit/queries/67fb898d-5702-4c68-8646-996f8275b84e -- forked from SS Param Overview @ https://flipsidecrypto.xyz/edit/queries/17ff4a7c-ca47-4bf5-aec1-95df92890d7a with cex_flows as (
	with transfers as (
	  SELECT
	
	  block_timestamp as ddate
	
	 , PROJECT_NAME as sub_label
	
	 -- , t.to_address as cex_address
	
	 , from_address as wallet
	
	 --sum(eth.amount) as eth_amount,
	
	 , amount_usd as usd_amount
	
	 , AMOUNT_PRECISE as token_amount
	
	 , 'inflow' as side
	
	 , tx_hash
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 and from_address = lower('{{wallet}}')
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	
	  UNION
	
	
	SELECT
	
	  block_timestamp as ddate
	
	 , PROJECT_NAME as sub_label
	
	 -- , t.from_address as cex_address
	
	 , to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , amount_usd as usd_amount
	
	 , AMOUNT_PRECISE as token_amount
	
	 , 'outflow' as side
	
	 , tx_hash
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 and to_address = lower('{{wallet}}')
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	
	 )
	SELECT
	  wallet
	  , ddate
	  , 'cex_flow' as label
	  , sub_label
	  , CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END as amount_token
	  , CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END as amount_usd
	  , tx_hash
	from transfers ) , master as (
	SELECT
	
	trader as wallet
	  , MAX(block_timestamp) as ddate
	  , MAX('dex_volume') as label
	  , MAX('Vertex Protocol') as sub_label
	  , SUM(BASE_DELTA_AMOUNT) as amount_token
	
	, SUM(CASE WHEN trade_type='buy/long' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	  , tx_hash
	from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  and trader = lower('{{wallet}}')
	  AND symbol = 'VRTX'
	  AND is_taker = true
	  group by tx_hash, wallet
	UNION
	
	 SELECT
	
	sender as wallet
	  , block_timestamp ddate
	  , 'dex_volume' as label
	  , platform as sub_label
	  , CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	THEN AMOUNT_OUT ELSE AMOUNT_IN*(-1) END  as amount_token
	  , CASE WHEN token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	
	
	 THEN AMOUNT_IN_USD ELSE AMOUNT_IN_USD*(-1) END  as amount_usd
	  -- , MAX(tx_hash) as tx_hash_sample
	  -- , MAX(block_timestamp::date) as last_activity_date
	  , tx_hash
	from arbitrum.defi.ez_dex_swaps
	WHERE 1=1
	  and sender = lower('{{wallet}}')
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND ( token_in = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	
	  OR
	
	
	
	token_out = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9') )
	
	
	UNION
	
	 SELECT
	  TO_ADDRESS as wallet
	  , block_timestamp as ddate
	  , 'vesting' as label
	  , 'Hedgey' as sub_label
	  , amount as amount_token
	  , AMOUNT_USD as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	
	, tx_hash
	from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  and to_address = lower('{{wallet}}')
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	
	UNION
	SELECT * from cex_flows ) SELECT
	 ddate
	, label
	, sub_label
	, amount_token
	, amount_usd
	, wallet
	 , tx_hash from master ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 487
QUERY_ID: fba20c11-f0b8-4d4d-a5d6-6d8ec51a67c8
QUERY_TITLE: TESTS: real time bins

QUERY_STRING:

SELECT
	TIME_SLICE(block_timestamp, 15, 'minute', 'START') as time_bin  , COUNT(*) as test from ethereum.core.fact_blocks WHERE 1=1
	AND block_timestamp >= '2025-02-19 15:00' GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 488
QUERY_ID: 9480a1aa-b212-4b9a-aca9-d78f60f2259c
QUERY_TITLE: New Wallets By L2

QUERY_STRING:

with arb as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'arbitrum' as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'base' as cat
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , opt as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'optimism' as cat
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , combo as (
	SELECT * from arb
	UNION ALL
	SELECT * from opt
	UNION ALL
	 SELECT * from base ) SELECT
	 COUNT(DISTINCT wallet) as wallets
	, ddate
	, cat from combo  GROUP BY ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 489
QUERY_ID: 28692dcc-db45-40ea-bfae-9ccaee84d32e
QUERY_TITLE: New Wallets By L2 Cumulative

QUERY_STRING:

-- forked from New Wallets By L2 @ https://flipsidecrypto.xyz/edit/queries/9480a1aa-b212-4b9a-aca9-d78f60f2259c  with arb as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'arbitrum' as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'base' as cat
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , opt as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	  , 'optimism' as cat
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , combo as (
	SELECT * from arb
	UNION ALL
	SELECT * from opt
	UNION ALL
	 SELECT * from base ) , pre as (
	SELECT
	 COUNT(DISTINCT wallet) as wallets
	, ddate
	, cat
	from combo
	 GROUP BY ddate, cat ORDER BY ddate ASC  ) SELECT
	*
	, SUM(wallets) OVER (partition by cat ORDER BY ddate ASC) as wallets_cumu from pre



=======================================================================================
=======================================================================================
QUERY_NO: 490
QUERY_ID: b9179676-f7fa-4bc9-850e-50e3a47de32e
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP - USDT

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (312769)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ), avgs as (
	SELECT avg (CDP_RATIO) as avg_cdp
	from pre_final_cdp
	 ) SELECT *,
	CASE WHEN CDP_RATIO<avg_cdp THEN 'Below Avg' ELSE 'Above Average' END as types from pre_final_cdp LEFT JOIN avgs a ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 491
QUERY_ID: a9e58248-668a-4e90-910b-e01c29af8ddb
QUERY_TITLE: MiBera Debug

QUERY_STRING:

-- forked from MiBera @ https://flipsidecrypto.xyz/edit/queries/060a5ef9-92f1-4b31-a5e8-6579efb94cda -- forked from Cubhub @ https://flipsidecrypto.xyz/edit/queries/00d28c72-77d0-4544-9bb2-12ac23edeb58 -- forked from $ER @ https://flipsidecrypto.xyz/edit/queries/628128b8-9006-4fb4-8067-47fe244e3290 with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply )
	
	
	SELECT
	
	
	
	*
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND tx_hash = '0xc3bb2f7dd40ae6ce263ef65f8103a0fb92a7c8d6d6e6e271be2fb1f8863a2461'



=======================================================================================
=======================================================================================
QUERY_NO: 492
QUERY_ID: fca3cfc1-6eb8-4990-aa9f-53edc4a14ae1
QUERY_TITLE: Weekly Cohort Combo

QUERY_STRING:

-- forked from ARB-Weekly Cohort @ https://flipsidecrypto.xyz/edit/queries/4f3f9007-f47b-44e8-927d-4ad50b89b242 with arb_filter as (
	SELECT
	
	*
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , op_filter as (
	SELECT
	
	*
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base_filter as (
	SELECT
	
	*
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , combo_table as (
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	  , 'arb' as cat
	from arbitrum.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from arb_filter)
	  and block_timestamp>='2023-08-01'
	UNION ALL
	
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	  , 'op' as cat
	from optimism.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from op_filter)
	  and block_timestamp>='2023-08-01'
	UNION ALL
	
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	  , 'base' as cat
	from base.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from base_filter)
	  and block_timestamp>='2023-08-01' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , cat
	
	 , count(distinct user) as new_users
	
	from combo_table
	  group by 1, 2 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , cat
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from combo_table
	  where difference != 0
	  group by 1, 2, 3 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , count_new_users.cat
	
	  , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , cat
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_week_later
	
	 , case when difference = 2 then retention_pct else null end as two_week_later
	
	 , case when difference = 3 then retention_pct else null end as three_week_later
	
	 , case when difference = 4 then retention_pct else null end as four_week_later
	
	 , case when difference = 5 then retention_pct else null end as five_week_later
	
	 , case when difference = 6 then retention_pct else null end as six_week_later
	
	 , case when difference = 7 then retention_pct else null end as seven_week_later
	
	 , case when difference = 8 then retention_pct else null end as eight_week_later
	
	 , case when difference = 9 then retention_pct else null end as nine_week_later
	
	 , case when difference = 10 then retention_pct else null end as ten_week_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_week_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_week_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'MM-dd') as earliest_date
	
	 , cat
	
	 , to_varchar(users, '999,999,999,999') as new_users
	
	 , concat(max(one_week_later) * 100 ,'%') as one_week_later
	
	 , concat(max(two_week_later) * 100 ,'%') as two_week_later
	
	 , concat(max(three_week_later) * 100 ,'%') as three_week_later
	
	 , concat(max(four_week_later) * 100 ,'%') as four_week_later
	
	 , concat(max(five_week_later) * 100 ,'%') as five_week_later
	
	 , concat(max(six_week_later) * 100 ,'%') as six_week_later
	
	 , concat(max(seven_week_later) * 100 ,'%') as seven_week_later
	
	  , concat(max(eight_week_later) * 100 ,'%') as eight_week_later
	
	 , concat(max(nine_week_later) * 100 ,'%') as nine_week_later
	
	 , concat(max(ten_week_later) * 100 ,'%') as ten_week_later
	
	 , concat(max(eleven_week_later) * 100 ,'%') as eleven_week_later
	
	 , concat(max(twelve_week_later) * 100 ,'%') as twelve_week_later
	  from pivot
	
	group by 1, 2, 3 ) , refine as (
	SELECT
	
	arb.earliest_date
	  , ARRAY_CONSTRUCT(  'ARB: ' || arb.new_users, 'BASE: ' || base.new_users, 'OP: ' || op.new_users) as new_user
	  , CASE WHEN arb.one_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.one_week_later, 'BASE: ' || base.one_week_later, 'OP: ' || op.one_week_later) END as one_weeks_later
	  , CASE WHEN arb.two_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.two_week_later, 'BASE: ' || base.two_week_later, 'OP: ' || op.two_week_later) END as two_weeks_later
	  , CASE WHEN arb.three_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.three_week_later, 'BASE: ' || base.three_week_later, 'OP: ' || op.three_week_later) END as three_weeks_later
	  , CASE WHEN arb.four_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.four_week_later, 'BASE: ' || base.four_week_later, 'OP: ' || op.four_week_later) END as four_weeks_later
	  , CASE WHEN arb.five_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.five_week_later, 'BASE: ' || base.five_week_later, 'OP: ' || op.five_week_later) END as five_weeks_later
	  , CASE WHEN arb.six_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.six_week_later, 'BASE: ' || base.six_week_later, 'OP: ' || op.six_week_later) END as six_weeks_later
	  , CASE WHEN arb.seven_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.seven_week_later, 'BASE: ' || base.seven_week_later, 'OP: ' || op.seven_week_later) END as seven_weeks_later
	  , CASE WHEN arb.eight_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.eight_week_later, 'BASE: ' || base.eight_week_later, 'OP: ' || op.eight_week_later) END as eight_weeks_later
	  , CASE WHEN arb.nine_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.nine_week_later, 'BASE: ' || base.nine_week_later, 'OP: ' || op.nine_week_later) END as nine_weeks_later
	  , CASE WHEN arb.ten_week_later IS NULL THEN NULL ELSE ARRAY_CONSTRUCT(  'ARB: ' || arb.ten_week_later, 'BASE: ' || base.ten_week_later, 'OP: ' || op.ten_week_later) END as ten_weeks_later
	
	  from aggregate arb
	LEFT JOIN ( SELECT * from aggregate WHERE cat='base')  base ON (arb.earliest_date=base.earliest_date)
	LEFT JOIN ( SELECT * from aggregate WHERE cat='op')  op ON (arb.earliest_date=op.earliest_date )
	WHERE arb.cat='arb'
	order by arb.earliest_date
	 ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 493
QUERY_ID: 87bc1426-72fe-433e-af59-c3fcb3141ad7
QUERY_TITLE: NEAR Old vs NEW

QUERY_STRING:

with base_wallets as (
	SELECT
	
	TX_SIGNER as wallet,
		MIN(date_trunc('day', block_timestamp)) as min_date
	from near.core.fact_transactions
	WHERE
		block_timestamp >= '2021-11-01' -- Extra Time to store up wallets
	GROUP BY wallet ), new_txns as (
	SELECT
	
	COUNT(TX_HASH) as totals,
		TX_SIGNER as wallet,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN ddate>min_date THEN 'old' ELSE 'new' END as cat
	from near.core.fact_transactions t
	LEFT JOIN base_wallets b ON t.TX_SIGNER = b.wallet
	WHERE
		block_timestamp >= '2023-01-01'
	GROUP BY ddate, TX_SIGNER, cat ) SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	ddate,
	cat from new_txns GROUP BY ddate,cat ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 494
QUERY_ID: b3925d47-b2f4-4870-a55f-2d3b340cdd67
QUERY_TITLE: Selected Wallet Summaries

QUERY_STRING:

-- forked from Selected Wallet Trading Over Time @ https://flipsidecrypto.xyz/edit/queries/56a569a9-5a67-4048-8033-e03f434b4736 -- forked from Selected Wallet's Trades Data @ https://flipsidecrypto.xyz/edit/queries/6cd83106-0d46-474e-ad44-5026449d1e1a -- forked from Random Sampler (Vertex + GMX Traders) @ https://flipsidecrypto.xyz/edit/queries/e00fcb9f-ef7f-40c7-8b5f-d4f5640a9578 with v1 as (
	SELECT
	
	block_timestamp
	  , 'GMX V1' as platform
	  , TO_VARCHAR(DECODED_LOG:account) as account
	  , TO_VARCHAR(DECODED_LOG:index) as market
	  , event_name as order_type
	  , CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as trade_type
	  , DECODED_LOG:"sizeDelta"/1e30 as volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	  , DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	  , ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	  , DECODED_LOG
	  , tx_hash
	  -- , DECODED_LOG:path
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN arbitrum.core.dim_contracts con
	 ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	  AND EVENT_NAME ILIKE 'Create%'
	  AND DECODED_LOG:account = lower('{{account}}')
	  AND DECODED_LOG:"collateralDelta" IS NOT NULL
	  AND tx_status = 'SUCCESS' ) , v2 as (
	with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	  AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS'
	)
	,
	orders_created as (
	  SELECT
	
	  tx_hash
	
	 , block_timestamp
	
	 , DECODED_LOG
	
	 , DECODED_LOG:"eventData"[0][0][0][1] as account
	
	 , DECODED_LOG:"eventData"[0][0][4][1] as market
	
	 , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	
	 , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	
	 , DECODED_LOG:"eventData"[1][0][2][1]/1e30 as volume  --div by 1e30
	
	 , DECODED_LOG:"eventData"[4][0][0][1] as key
	
	 , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	
	 , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as trade_type
	
	 , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	  from arbitrum.core.ez_decoded_event_logs
	
	WHERE 1=1
	
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	
	 AND decoded_log:"eventName"='OrderCreated'
	
	 AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	
	 AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	
	 AND event_name='EventLog2'
	
	 AND tx_status = 'SUCCESS'
	)
	SELECT
	
	c.block_timestamp
	  , 'GMX V2' as platform
	  , TO_VARCHAR(account) as account
	  , TO_VARCHAR(market) as market
	  , order_type
	  , trade_type
	  , volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	  , execution_fee_eth
	  , ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	  , c.DECODED_LOG
	  , c.tx_hash
	from orders_created c
	 LEFT JOIN orders_exec e ON c.key=e.ex_key
	LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address
	WHERE 1=1
	  AND exec=1 ) , vertex as (
	SELECT
	  block_timestamp
	  , TO_VARCHAR('Vertex ' || version) as platform
	  , trader as account
	  , SYMBOL as market
	  , order_type
	  , trade_type
	
	, amount_usd as volume
	  , fee_amount
	  , NULL as collateral_token
	  , NULL as init_collateral_delta_amount
	  , NULL as execution_fee_eth
	  , ARRAY_CONSTRUCT('orderExecuted:' || tx_hash) as tx_hashes
	  , NULL as DECODED_LOG
	  , tx_hash
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND trader = lower('{{account}}') ) , combo as (
	SELECT * from v1
	UNION
	 SELECT * from v2
	UNION
	 SELECT * from vertex ) SELECT
	 account
	, SUM(iff(platform ilike 'gmx%', volume, 0)) as volume_gmx
	, SUM(iff(platform ilike 'vertex%', volume, 0)) as volume_vertex
	, COUNT(DISTINCT CASE WHEN platform ilike 'gmx%' THEN tx_hash ELSE NULL END) as trades_gmx
	, COUNT(DISTINCT CASE WHEN platform ilike 'vertex%' THEN tx_hash ELSE NULL END) as trades_vertex
	, SUM(iff(platform ilike 'gmx%', fee_amount, 0)) as fee_gmx
	, SUM(iff(platform ilike 'vertex%', fee_amount, 0)) as fee_vertex from combo GROUP BY account -- SELECT * from combo



=======================================================================================
=======================================================================================
QUERY_NO: 495
QUERY_ID: ba1b1ef0-c266-4157-b810-575ea24dbeeb
QUERY_TITLE: [ThorChain][38] Rune Upgrades - Outliers

QUERY_STRING:

SELECT
	block_timestamp, BURN_E8/1e8 as BURN_AMOUNT, tx from thorchain.switch_events  WHERE
	identified_id IN (
	 
	SELECT
	
	 
		identified_id
	
	
	from thorchain.upgrades
	
	
	WHERE block_timestamp >= '2022-01-01' AND  block_timestamp <= '2022-01-07'
	
	
		AND RUNE_AMOUNT > 1000000
	
	
	ORDER BY RUNE_AMOUNT DESC ) ORDER BY BURN_AMOUNT DESC



=======================================================================================
=======================================================================================
QUERY_NO: 496
QUERY_ID: 75667fd6-d86e-418b-a332-44f23907c4e9
QUERY_TITLE: ARB claims

QUERY_STRING:

with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) SELECT
	 block_timestamp::date as ddate
	, label
	, COUNT(DISTINCT claimer ) as claimers
	, SUM(token_amount) as tokens
	, SUM(amount_usd) as usd_val from arb_claims GROUP BY ddate, label ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 497
QUERY_ID: 744e8a6b-d983-4cae-a0c9-448de253e043
QUERY_TITLE: TheHoneyCast

QUERY_STRING:

with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = '0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	 qualify ranks=1
	
	) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , count(1) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select 'The Honey Cast' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 498
QUERY_ID: 4930e771-b51a-48da-8541-6cc9c55e4e33
QUERY_TITLE: Vertex Orders Debug

QUERY_STRING:

-- forked from Vertex Orders Test @ https://flipsidecrypto.xyz/edit/queries/793804fd-13d4-477c-a0e2-8e8bf06862eb -- forked from GMX Order Lookup - Both V1/V2 @ https://flipsidecrypto.xyz/edit/queries/1ce9b21c-1de9-4ef1-93a7-065ac6cdef49 with base as (
	SELECT
	
	*
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND trader = lower('{{account}}')
	  AND DIGEST = '0x828cf7a9145687a8371aeed8655abc65e80ba04578238418fc5f3e02c1467bfb' )
	
	SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 499
QUERY_ID: 1ce9b21c-1de9-4ef1-93a7-065ac6cdef49
QUERY_TITLE: GMX Order Lookup - Both V1/V2

QUERY_STRING:

with v1 as (
	SELECT
	
	block_timestamp
	  , 'GMX V1' as platform
	  , DECODED_LOG:account as account
	  , DECODED_LOG:index as market
	  , event_name as order_type
	  , CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as trade_type
	  , DECODED_LOG:"sizeDelta"/1e30 as volume
	  , SYMBOL as collateral_token
	  , COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	  , DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	  , ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	  , DECODED_LOG
	  , tx_hash
	  --, DECODED_LOG:path
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN arbitrum.core.dim_contracts con
	 ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address
	WHERE 1=1
	
	AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	  AND EVENT_NAME ILIKE 'Create%'
	  AND DECODED_LOG:account = lower('{{account}}')
	  AND DECODED_LOG:"collateralDelta" IS NOT NULL
	  AND tx_status = 'SUCCESS' ) , v2 as (
	with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp>'2024-04-01'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	  AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS'
	)
	,
	orders_created as (
	  SELECT
	
	  tx_hash
	
	 , block_timestamp
	
	 , DECODED_LOG
	
	 , DECODED_LOG:"eventData"[0][0][0][1] as account
	
	 , DECODED_LOG:"eventData"[0][0][4][1] as market
	
	 , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	
	 , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	
	 , DECODED_LOG:"eventData"[1][0][2][1]/1e30 as volume  --div by 1e30
	
	 , DECODED_LOG:"eventData"[4][0][0][1] as key
	
	 , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	
	 , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as trade_type
	
	 , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	  from arbitrum.core.ez_decoded_event_logs
	
	WHERE 1=1
	
	  AND block_timestamp>'2024-04-01'
	
	 AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	
	 AND decoded_log:"eventName"='OrderCreated'
	
	 AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	
	 AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	
	 AND event_name='EventLog2'
	
	 AND tx_status = 'SUCCESS'
	)
	SELECT
	
	c.block_timestamp
	  , 'GMX V2' as platform
	  , account
	  , market
	  , order_type
	  , trade_type
	  , volume
	  , SYMBOL as collateral_token
	  , init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	  , execution_fee_eth
	  , ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	  , c.DECODED_LOG
	  , c.tx_hash
	from orders_created c
	 LEFT JOIN orders_exec e ON c.key=e.ex_key
	LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address
	WHERE 1=1
	  AND exec=1 ) SELECT * from v1 UNION  SELECT * from v2 ORDER BY block_timestamp DESC



=======================================================================================
=======================================================================================
QUERY_NO: 500
QUERY_ID: 19e381ac-9ad6-44a7-a61f-6a889319f9d9
QUERY_TITLE: Holder Stats & HoneyComb Intersection copy

QUERY_STRING:

-- forked from Holder Stats & HoneyComb Intersection @ https://flipsidecrypto.xyz/edit/queries/84ba69a7-ce14-405c-a71d-8d003f1582cd with raw as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/744e8a6b-d983-4cae-a0c9-448de253e043/latest-run') as resp
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/eb7cf3da-5d77-4570-832a-c401f4d73bfa/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/bb23cb1d-c639-4cd2-8aa2-476c0ae639c1/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1fbd8e0e-a737-4615-8676-e1c82aad5a84/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/d247e0d6-8502-4843-928d-141e3132bd1f/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e/latest-run') as response ) , flattened as (
	select
	value[0] as project
	,value[1] as holders
	,value[2] as holders_with_hc
	,value[3] as hc_holders_percentage
	,value[4] as supply
	,value[5] as holders_with_hc_balance
	,value[6] as hc_holders_balance_percentage
	from raw, lateral FLATTEN (input=> resp:data:result:rows) ) SELECT * from raw



=======================================================================================
=======================================================================================
QUERY_NO: 501
QUERY_ID: 812a10d9-5315-40cf-987d-755500405718
QUERY_TITLE: NFT Markets User Totals

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users_dupe as (
	SELECT
	  TO_VARCHAR(purchaser) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplaces
	  , COUNT(*) as totals
	
	  from sales_mixer
	GROUP BY user, marketplaces
	UNION
	
	 SELECT
	 TO_VARCHAR(seller) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplaces
	  , COUNT(*) as totals
	from sales_mixer
	GROUP BY user, marketplaces ) , refine_users as (
	SELECT
	
	COUNT(DISTINCT user) as users
	  , marketplaces
	from users_dupe
	GROUP BY marketplaces ) SELECT * from refine_users



=======================================================================================
=======================================================================================
QUERY_NO: 502
QUERY_ID: 4821d8dc-1bce-4eae-be6a-9e67c57cb82f
QUERY_TITLE: NFT Markets User Behavior Buy/Sell Types

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users_dupe as (
	SELECT
	  TO_VARCHAR(purchaser) as user
	  , MAX(NULL) as sales
	  , COUNT(*) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user
	
	UNION ALL
	
	 SELECT
	  TO_VARCHAR(seller) as user
	  , COUNT(*) as sales
	  , MAX(NULL) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user ) , refine_users as (
	SELECT
	
	user
	  , coalesce(SUM(sales), 0) as sales
	  , coalesce(SUM(purchases),0) as purchases
	  , SUM(c_wapal) as c_wapal
	  , SUM(c_topaz) as c_topaz
	  , SUM(c_bluemove) as c_bluemove
	from users_dupe
	GROUP BY user ) SELECT
	  CASE WHEN sales=0 THEN 'purchases only'
	
	  WHEN purchases=0 THEN 'sales only'
	
	  ELSE 'both' END as cat
	 , COUNT(DISTINCT user) as users from refine_users  GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 503
QUERY_ID: 20c8d55c-6cf4-43f6-bbc6-621de3d067e7
QUERY_TITLE: Copy of gib cod | near contract address and decimal for ref finance

QUERY_STRING:

WITH near_token_address AS ( select 'wrap.near' as contract_address, 'NEAR' as symbol, 24 as decimal union select 'meta-pool.near' as contract_address, 'stNEAR' as symbol, 24 as decimal union select 'usn' as contract_address, 'USN' as symbol, 18 as decimal union select 'aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near' as contract_address, 'Aurora' as symbol, 18 as decimal union select 'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near' as contract_address, 'USDT' as symbol, 6 as decimal union -- stable select 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near' as contract_address, 'USDC' as symbol, 6 as decimal union -- stable select '6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near' as contract_address, 'DAI' as symbol, 18 as decimal union -- stable select '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near' as contract_address, 'WBTC' as symbol, 8 as decimal union  select 'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near' as contract_address, 'WETH' as symbol, 18 as decimal union select 'aurora' as contract_address, 'WETH' as symbol, 18 as decimal union select 'token.paras.near' as contract_address, 'Paras' as symbol, 18 as decimal union select 'token.v2.ref-finance.near' as contract_address, 'REF' as symbol, 18 as decimal union select 'linear-protocol.near' as contract_address, 'LINEAR' as symbol, 24 as decimal union select 'token.burrow.near' as contract_address, 'BRRR' as symbol, 18 as decimal union select 'berryclub.ek.near' as contract_address, 'BANANA' as symbol, 18 as decimal union select 'farm.berryclub.ek.near' as contract_address, 'CUCUMBER' as symbol, 18 as decimal union select 'token.skyward.near' as contract_address, 'Skyward' as symbol, 18 as decimal union select 'token.shrm.near' as contract_address, 'SHRM' as symbol, 18 as decimal union select 'token.cheddar.near' as contract_address, 'Cheddar' as symbol, 24 as decimal union select 'v3.oin_finance.near' as contract_address, 'nUSDO' as symbol, 8 as decimal union -- stable select 'cusd.token.a11bd.near' as contract_address, 'cUSD' as symbol, 24 as decimal union -- stable select 'marmaj.tkn.near' as contract_address, 'marma' as symbol, 18 as decimal union  select 'hak.tkn.near' as contract_address, 'HAK' as symbol, 18 as decimal union  select '9aeb50f542050172359a0e1a25a9933bc8c01259.factory.bridge.near' as contract_address, 'OIN' as symbol, 8 as decimal union select '514910771af9ca656af840dff83e8264ecf986ca.factory.bridge.near' as contract_address, 'LINK' as symbol, 18 as decimal union select 'd9c2d319cd7e6177336b0a9c93c21cb48d84fb54.factory.bridge.near' as contract_address, 'HAPI' as symbol, 18 as decimal union select '52a047ee205701895ee06a375492490ec9c597ce.factory.bridge.near' as contract_address, 'PULSE' as symbol, 18 as decimal union select 'de30da39c46104798bb5aa3fe8b9e0e1f348163f.factory.bridge.near' as contract_address, 'Gitcoin' as symbol, 18 as decimal union select 'f5cfbc74057c610c8ef151a439252680ac68c6dc.factory.bridge.near' as contract_address, 'Octopus Network' as symbol, 18 as decimal  select 'pixeltoken.near' as contract_address, 'PXT' as symbol, 6 as decimal union  select 'meta-token.near' as contract_address, 'META' as symbol, 18 as decimal union select '3ea8ea4237344c9931214796d9417af1a1180770.factory.bridge.near' as contract_address, 'FLX' as symbol, 18 as decimal ) SELECT * FROM near_token_address



=======================================================================================
=======================================================================================
QUERY_NO: 504
QUERY_ID: 18f8013d-3eb3-46fd-8c34-8781bd65ae48
QUERY_TITLE: [ALGO][Q69] Folks Borrows By Asset

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	WHEN rank=4 AND asset_id=0 THEN tx_message:txn:amt/1e6
					WHEN rank=4 AND asset_id in (386192725,386195940) THEN tx_message:txn:aamt/1e8
	
				WHEN rank=4 AND asset_id in (31566704,312769) THEN tx_message:txn:aamt/1e6
					ELSE NULL END ) as bor_asset_amt,
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		MAX(CASE WHEN rank=6 THEN tx_message:txn:aamt/1e6 ELSE NULL END) as col_asset_amt,
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), pre_final as ( SELECT
	 COUNT(tx_group_id) as totals,
	asset_name,
	date_trunc('day', ddate) as dddate from borrows b LEFT JOIN flipside_prod_db.algorand.asset a ON b.bor_asset=a.asset_id WHERE
	bor_asset IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) GROUP BY dddate, asset_name ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 505
QUERY_ID: 6e67f6da-616f-4b92-baca-d70ab2dcce24
QUERY_TITLE: [avax] TPS vs ETH

QUERY_STRING:

with prices as (
	SELECT price, hour as hhtime, token_address from ethereum.core.fact_hourly_token_prices
	WHERE
		token_address IN (lower('0x85f138bfEE4ef8e540890CFb48F620571d67Eda3'), lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'))
		AND  hour >= '2022-06-20'  ), avax as (
	SELECT
	COUNT(tx_hash) as txns,
		round(COUNT(tx_hash)/3600, 3) as TPS,
		AVG(round(tx_fee*price, 3)) as avg_tx_fee,
		MAX(price) as token_price,
	date_trunc('hour', block_timestamp) as htime
	from avalanche.core.fact_transactions b
	 LEFT JOIN prices p ON  date_trunc('hour', b.block_timestamp) = p.hhtime AND p.token_address = lower('0x85f138bfEE4ef8e540890CFb48F620571d67Eda3')
	WHERE 1=1
		AND  block_timestamp >= '2022-06-20'
	GROUP by htime ), eth as (
	SELECT
	COUNT(tx_hash) as txns,
		round(COUNT(tx_hash)/3600, 3) as TPS,
		AVG(round(tx_fee*price, 3)) as avg_tx_fee,
		MAX(price) as token_price,
	date_trunc('hour', block_timestamp) as htime
	from ethereum.core.fact_transactions b
	 LEFT JOIN prices p ON  date_trunc('hour', b.block_timestamp) = p.hhtime AND p.token_address = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	WHERE 1=1
		AND  block_timestamp >= '2022-06-20'
	GROUP by htime ), pre as (
	SELECT tps, htime,avg_tx_fee, 'avax' as cat from avax
	UNION ALL
	SELECT tps, htime,avg_tx_fee, 'eth' as cat from eth ) SELECT
	MAX(tps) as tps,
		MAX(avg_tx_fee) as avg_tx_fee,
	cat,
	htime from pre  GROUP BY htime,cat



=======================================================================================
=======================================================================================
QUERY_NO: 506
QUERY_ID: 61366423-fd6f-4213-9660-703baba1e8f8
QUERY_TITLE: EZ Tables - Topaz Single Day

QUERY_STRING:

-- forked from NFTs Overview - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/203f56ad-9528-4790-a0f5-de956273ea43 -- forked from NFTs Overview - Summaries @ https://flipsidecrypto.xyz/edit/queries/de09d687-4bf4-438e-a9af-666b34105c77 -- forked from NFTs Overview @ https://flipsidecrypto.xyz/edit/queries/b5f1a806-1264-46a5-be65-bd112d6aee94 with stats as (
	SELECT
	
	*
	from aptos.nft.ez_nft_sales
	WHERE 1=1
	  AND PLATFORM_NAME = 'Topaz'
	  AND block_timestamp::date = '2022-10-19' ) SELECT * from stats ORDER BY block_timestamp ASC



=======================================================================================
=======================================================================================
QUERY_NO: 507
QUERY_ID: bab29727-d510-4095-98be-920b4ccdfa57
QUERY_TITLE: [ALGO] Active Wallets

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	'465814065', --ALGO market
						'465814103', --USDC
						'465814149', --goBTC
						'465814222', --goETH
						'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14')
		 ), wallets as (
	  SELECT
	MIN(date_trunc('day', block_timestamp)) as ddate,
			SUM(AMOUNT) as amount,
			sender,
				market,
				types
	from groups
	WHERE 
		types IN ('liquidity', 'borrow')
		GROUP by sender, market, types ), valid_wallets as (
	SELECT
		COUNT(DISTINCT sender) as total_wallets,
			types,
			ddate
		from wallets
	WHERE
			amount>0
		GROUP BY ddate, types ), /* refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE 
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), */ dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 66)) ), mock_types as (
	SELECT DISTINCT types
		from valid_wallets
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_wallets, backup) as total_wallets,
		SUM(total_wallets) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as total_wallets_over_time from base_data b LEFT JOIN valid_wallets c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 508
QUERY_ID: edc0b593-789d-4499-ab7a-89f4d28f577c
QUERY_TITLE: test copy

QUERY_STRING:

-- forked from 1f1b4c46-8989-49d5-a20f-6007dfab64a4
	SELECT
	COUNT(*) as totals,
	ACTION from near.core.dim_staking_actions
	
	  GROUP BY action



=======================================================================================
=======================================================================================
QUERY_NO: 509
QUERY_ID: 1d78aac9-939d-4f06-bf0f-fa250698ca6e
QUERY_TITLE: Community Raises Master

QUERY_STRING:

with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , merger as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b'
	  AND STATUS = 'SUCCESS'
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	UNION
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	
	AND STATUS = 'SUCCESS'
	
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND STATUS = 'SUCCESS'
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	 UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	
	 UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	  UNION
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS'
	
	UNION
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as USER
	  , AMOUNT_USD/price as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.ez_token_transfers t
	 LEFT JOIN (
	  SELECT
	
	  price , hour
	
	from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	
	AND SYMBOL='WETH' AND blockchain='ethereum'
	
	
	 AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	  ) p on date_trunc('hour', t.block_timestamp) = p.hour
	WHERE 1=1
	
	AND tx_hash in (
	
	
	  SELECT
	
	
	
	
	 tx_hash
	
	
	  from ethereum.core.fact_transactions
	
	
	  WHERE 1=1
	
	
	
	 AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	 AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	 AND STATUS = 'SUCCESS'
	
	 ) ) SELECT
	 SUM(cost_eth) as eth_raised
	, SUM(cost_eth * p.price) as usd_raised
	, label from merger m LEFT JOIN (
	  SELECT price from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	  AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	
	  AND HOUR >=CURRENT_DATE -1
	
	  ORDER BY HOUR DESC LIMIT 1
	  ) p on 1=1 GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 510
QUERY_ID: f571edc0-5e15-4955-922f-00bf4901eae4
QUERY_TITLE: kwenta - trades - sweep

QUERY_STRING:

-- forked from kwenta - trades - PARAMS @ https://flipsidecrypto.xyz/edit/queries/2ff138a1-cb2a-4f75-900d-a7ce11535601 -- forked from kwenta - trades debug @ https://flipsidecrypto.xyz/edit/queries/191fda0b-330d-41fd-88e5-88ea594dbfee -- forked from kwenta - accounts @ https://flipsidecrypto.xyz/edit/queries/70771449-6a97-4e3e-be51-6315eff8ec83 -- derive all sub_accounts for given User/ or just the 1 sub_account and it's User with sub_accounts as (
	SELECT
	
	DECODED_LOG:creator as user
	  , DECODED_LOG:account as sub_account
	from optimism.core.fact_decoded_event_logs
	WHERE 1=1
	  AND contract_address = lower('0x8234F990b149Ae59416dc260305E565e5DAfEb54')
	  AND event_name = 'NewAccount'
	
	) , -- find all completed/executed orders by the subaccounts orders as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , contract_address as market_proxy
	  , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0]) as margin
	  , ethereum.public.udf_hex_to_int(params [1]) as size
	  , ethereum.public.udf_hex_to_int(params [2]) as trade_size
	  , ethereum.public.udf_hex_to_int(params [3]) as last_price
	  , ethereum.public.udf_hex_to_int(params [5]) as fee
	  , ethereum.public.udf_hex_to_int(params [6]) as skew
	 --------decides fee/fee rate
	  , '0x' || substring(topics[2], 27, 66) as sub_account
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  AND origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	  AND topics[0] = '0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43' --PositionModified
	  --AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3'
	  AND '0x' || substring(topics[2], 27, 66) IN (SELECT sub_account from sub_accounts) ) , -- extra event to join with for market/asset info market_infos as (
	SELECT
	
	block_timestamp
	  , tx_hash
	
	
	 , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0])::VARCHAR as base_asset
	  , TO_VARCHAR(ethereum.public.udf_hex_to_int(params [1])) as market_key
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  AND origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	  AND topics[0] = '0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4' --PerpsTracking
	  --AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3' ) -- club all info for each order SELECT
	 o.block_timestamp
	, o.tx_hash
	, user
	, market_proxy
	, margin
	, size
	, trade_size
	, last_price
	, o.sub_account
	, base_asset
	, market_key from orders o  LEFT JOIN market_infos i ON o.tx_hash=i.tx_hash  LEFT JOIN sub_accounts s ON o.sub_account = s.sub_account LIMIT 10000



=======================================================================================
=======================================================================================
QUERY_NO: 511
QUERY_ID: cc18f9b9-99aa-4f01-868f-5da27b5cd2fe
QUERY_TITLE: kwenta - trades - sweep copy

QUERY_STRING:

with sub_accounts as (
	SELECT
	
	DECODED_LOG:creator as user
	  , DECODED_LOG:account as sub_account
	from optimism.core.fact_decoded_event_logs
	WHERE 1=1
	  AND contract_address = lower('0x8234F990b149Ae59416dc260305E565e5DAfEb54')
	  AND event_name = 'NewAccount'
	  AND (sub_account = lower('{{account}}') OR user = lower('{{account}}')) ) SELECT * from sub_accounts



=======================================================================================
=======================================================================================
QUERY_NO: 512
QUERY_ID: b24aed85-fa18-42f4-82b6-ff7e89943d85
QUERY_TITLE: friend base

QUERY_STRING:

--First own share buy-> New User with base as (
	SELECT
	
	date_trunc('day', block_timestamp) as dtime
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  , ORIGIN_FROM_ADDRESS as user
	  , rank() OVER (PARTITION BY user ORDER BY block_timestamp ASC) as rank
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS
	qualify rank=1 ), refine as (
	SELECT
	
	COUNT(DISTINCT user) as users
	  , dtime
	from base
	GROUP by dtime ) SELECT
	 *,
	SUM(users) OVER (ORDER BY dtime ASC) as total_users from refine ORDER BY dtime DESC



=======================================================================================
=======================================================================================
QUERY_NO: 513
QUERY_ID: 67db4bda-1960-449c-b4bb-5e12d5bb0cd0
QUERY_TITLE: Collections - 30D Volume by Marketplace

QUERY_STRING:

-- forked from Collections - Summaries @ https://flipsidecrypto.xyz/edit/queries/e96916fd-4df3-4261-9aa7-5e936e75bca0 -- forked from Collections - Sale History 30D @ https://flipsidecrypto.xyz/edit/queries/76f18931-e552-47d0-9b43-17766856cf87 with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferCollectionEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	 ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	  AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	  AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}'
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, round(SUM(sale_amount), 2) as volume
	, round(AVG(sale_amount), 2) as price
	, marketplace
	, block_timestamp::date as ddate from sales_mixer WHERE block_timestamp>=current_date - INTERVAL '30 day' GROUP BY ddate, marketplace ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 514
QUERY_ID: 2ff138a1-cb2a-4f75-900d-a7ce11535601
QUERY_TITLE: kwenta - trades - PARAMS

QUERY_STRING:

-- forked from kwenta - trades debug @ https://flipsidecrypto.xyz/edit/queries/191fda0b-330d-41fd-88e5-88ea594dbfee -- forked from kwenta - accounts @ https://flipsidecrypto.xyz/edit/queries/70771449-6a97-4e3e-be51-6315eff8ec83 -- derive all sub_accounts for given User/ or just the 1 sub_account and it's User with sub_accounts as (
	SELECT
	
	DECODED_LOG:creator as user
	  , DECODED_LOG:account as sub_account
	from optimism.core.fact_decoded_event_logs
	WHERE 1=1
	  AND contract_address = lower('0x8234F990b149Ae59416dc260305E565e5DAfEb54')
	  AND event_name = 'NewAccount'
	  AND (sub_account = lower('{{account}}') OR user = lower('{{account}}')) ) , -- find all completed/executed orders by the subaccounts orders as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , contract_address as market_proxy
	  , origin_function_signature
	  , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0]) as margin
	  , ethereum.public.udf_hex_to_int(params [1]) as size
	  , ethereum.public.udf_hex_to_int(params [2]) as trade_size
	  , ethereum.public.udf_hex_to_int(params [3]) as last_price
	  , ethereum.public.udf_hex_to_int(params [5]) as fee
	  , ethereum.public.udf_hex_to_int(params [6]) as skew
	 --------decides fee/fee rate
	  , '0x' || substring(topics[2], 27, 66) as sub_account
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  AND (origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	
	
	
	OR
	
	
	  origin_function_signature ='0x590104e3' ---idk what
	
	
	)
	  AND topics[0] = '0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43' --PositionModified
	  --AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3'
	  AND '0x' || substring(topics[2], 27, 66) IN (SELECT sub_account from sub_accounts) ) , -- extra event to join with for market/asset info market_infos as (
	SELECT
	
	block_timestamp
	  , tx_hash
	
	
	 , regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS params
	  , ethereum.public.udf_hex_to_int(params[0])::VARCHAR as base_asset
	  , TO_VARCHAR(ethereum.public.udf_hex_to_int(params [1])) as market_key
	from optimism.core.fact_event_logs
	WHERE 1=1
	  --AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  AND (origin_function_signature = '0xdfa723cc' --executeOffchainDelayedOrder
	
	
	
	OR
	
	
	  origin_function_signature ='0x590104e3' ---idk what
	
	
	)
	  AND topics[0] = '0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4' --PerpsTracking
	  --AND tx_hash = '0x8778688860dfd369141ec859ec3a3c909dc87a7ab04044fa67fb3905b982fab3' ) -- club all info for each order SELECT
	 o.block_timestamp
	, o.tx_hash
	, origin_function_signature
	, user
	, market_proxy
	, margin
	, size
	, trade_size
	, last_price
	, o.sub_account
	, base_asset
	, market_key from orders o  LEFT JOIN market_infos i ON o.tx_hash=i.tx_hash  LEFT JOIN sub_accounts s ON o.sub_account = s.sub_account



=======================================================================================
=======================================================================================
QUERY_NO: 515
QUERY_ID: 750c59f1-6860-4529-848a-037bee0c5393
QUERY_TITLE: friend - Trade Volume Cumulative

QUERY_STRING:

-- forked from friend - Trade Volume @ https://flipsidecrypto.xyz/edit/queries/80af3f43-64c2-4ab5-a490-18bb57049f20  -- SELLS AND BUYS: with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	COUNT(DISTINCT trader) as traders
	  , SUM(trade_value) as volume
	  , date_trunc('day', block_timestamp) as dtime
	from base_wallet
	GROUP BY dtime ) select
	 *
	, SUM(volume) OVER ( order by dtime ASC) as volume_cumu from refine ORDER BY dtime DESC



=======================================================================================
=======================================================================================
QUERY_NO: 516
QUERY_ID: 3c85b246-e170-4071-8056-6c899c23df19
QUERY_TITLE: friend - Initial ETH onboarded total

QUERY_STRING:

-- forked from friend - Initial ETH onboarded @ https://flipsidecrypto.xyz/edit/queries/181af298-475f-4f48-8d14-6870820956d2  -- forked from friend base @ https://flipsidecrypto.xyz/edit/queries/b24aed85-fa18-42f4-82b6-ff7e89943d85  --First own share buy-> New User with base_wallet as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dtime
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  , ORIGIN_FROM_ADDRESS as user
	  , rank() OVER (PARTITION BY user ORDER BY block_timestamp ASC) as rank
	from base.core.fact_event_logs
	
	WHERE
	  1=1
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS
	qualify rank=1 ), incoming_eth as (
	SELECT
	
	SUM(VALUE) as eth_deposited
	from base.core.fact_transactions
	WHERE
	
	status='SUCCESS'
	  AND TO_ADDRESS IN (SELECT user as to_address from base_wallet)
	 ) SELECT
	 * from incoming_eth



=======================================================================================
=======================================================================================
QUERY_NO: 517
QUERY_ID: 181af298-475f-4f48-8d14-6870820956d2
QUERY_TITLE: friend - Initial ETH onboarded

QUERY_STRING:

-- forked from friend base @ https://flipsidecrypto.xyz/edit/queries/b24aed85-fa18-42f4-82b6-ff7e89943d85  --First own share buy-> New User with base_wallet as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dtime
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  , ORIGIN_FROM_ADDRESS as user
	  , rank() OVER (PARTITION BY user ORDER BY block_timestamp ASC) as rank
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS
	qualify rank=1 ), incoming_eth as (
	SELECT date_trunc('day', block_timestamp) as dtime
	, SUM(VALUE) as eth_deposited
	from base.core.fact_transactions
	WHERE
	
	status='SUCCESS'
	  AND TO_ADDRESS IN (SELECT user as to_address from base_wallet)
	GROUP BY dtime ) SELECT
	 *,
	SUM(eth_deposited) OVER (ORDER BY dtime ASC) as total_eth from incoming_eth ORDER BY dtime DESC



=======================================================================================
=======================================================================================
QUERY_NO: 518
QUERY_ID: 8916a4b4-fe39-4585-9549-806c16bcfb6d
QUERY_TITLE: Top Participating Governors 

QUERY_STRING:

with base as (
	SELECT COUNT(BLOCK_ID) as totals,
	BLOCK_AUTHOR
	from near.core.fact_blocks
	GROUP BY BLOCK_AUTHOR ),
	 refine as (
	SELECT
	*,
		SUM(totals) OVER () as cum_totals,
		ROUND( (totals/cum_totals*100), 2) as participation
	from base ) SELECT
	 block_author,
	totals as blocks,
	participation as participation_perc from refine ORDER BY totals DESC LIMIT 9



=======================================================================================
=======================================================================================
QUERY_NO: 519
QUERY_ID: 1ba389bf-be34-413b-bbd9-dd978d1f622a
QUERY_TITLE: [NEAR][T3] Ref Finance Top Swaps - Swap To

QUERY_STRING:

--THANKS TO PINE/KIDA! WITH near_token_address AS ( select 'wrap.near' as contract_address, 'NEAR' as symbol, 24 as decimal union select 'meta-pool.near' as contract_address, 'stNEAR' as symbol, 24 as decimal union select 'usn' as contract_address, 'USN' as symbol, 18 as decimal union select 'aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near' as contract_address, 'Aurora' as symbol, 18 as decimal union select 'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near' as contract_address, 'USDT' as symbol, 6 as decimal union -- stable select 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near' as contract_address, 'USDC' as symbol, 6 as decimal union -- stable select '6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near' as contract_address, 'DAI' as symbol, 18 as decimal union -- stable select '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near' as contract_address, 'WBTC' as symbol, 8 as decimal union  select 'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near' as contract_address, 'WETH' as symbol, 18 as decimal union select 'aurora' as contract_address, 'WETH' as symbol, 18 as decimal union select 'token.paras.near' as contract_address, 'Paras' as symbol, 18 as decimal union select 'token.v2.ref-finance.near' as contract_address, 'REF' as symbol, 18 as decimal union select 'linear-protocol.near' as contract_address, 'LINEAR' as symbol, 24 as decimal union select 'token.burrow.near' as contract_address, 'BRRR' as symbol, 18 as decimal union select 'berryclub.ek.near' as contract_address, 'BANANA' as symbol, 18 as decimal union select 'farm.berryclub.ek.near' as contract_address, 'CUCUMBER' as symbol, 18 as decimal union select 'token.skyward.near' as contract_address, 'Skyward' as symbol, 18 as decimal union select 'token.shrm.near' as contract_address, 'SHRM' as symbol, 18 as decimal union select 'token.cheddar.near' as contract_address, 'Cheddar' as symbol, 24 as decimal union select 'v3.oin_finance.near' as contract_address, 'nUSDO' as symbol, 8 as decimal union -- stable select 'cusd.token.a11bd.near' as contract_address, 'cUSD' as symbol, 24 as decimal union -- stable select 'marmaj.tkn.near' as contract_address, 'marma' as symbol, 18 as decimal union  select 'hak.tkn.near' as contract_address, 'HAK' as symbol, 18 as decimal union  select '9aeb50f542050172359a0e1a25a9933bc8c01259.factory.bridge.near' as contract_address, 'OIN' as symbol, 8 as decimal union select '514910771af9ca656af840dff83e8264ecf986ca.factory.bridge.near' as contract_address, 'LINK' as symbol, 18 as decimal union select 'd9c2d319cd7e6177336b0a9c93c21cb48d84fb54.factory.bridge.near' as contract_address, 'HAPI' as symbol, 18 as decimal union select '52a047ee205701895ee06a375492490ec9c597ce.factory.bridge.near' as contract_address, 'PULSE' as symbol, 18 as decimal union select 'de30da39c46104798bb5aa3fe8b9e0e1f348163f.factory.bridge.near' as contract_address, 'Gitcoin' as symbol, 18 as decimal union select 'f5cfbc74057c610c8ef151a439252680ac68c6dc.factory.bridge.near' as contract_address, 'Octopus Network' as symbol, 18 as decimal union select 'pixeltoken.near' as contract_address, 'PXT' as symbol, 6 as decimal union  select 'meta-token.near' as contract_address, 'META' as symbol, 18 as decimal union select '3ea8ea4237344c9931214796d9417af1a1180770.factory.bridge.near' as contract_address, 'FLX' as symbol, 18 as decimal ),
	 base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
	
		regexp_substr(logs[0], 'Swapped (\\d+) ([\\w\\.-]+) for', 1, 1, 'e', 1) as swap_from_amt,
		n.decimal as swap_from_dec,
		regexp_substr(logs[0], 'Swapped (\\d+) ([\\w\\.-]+) for', 1, 1, 'e', 2) as swap_from_text,
		
		--FIND final swap log, ignore FEE bulshit
		CASE WHEN logs[array_size(logs)-1] ILIKE 'admin v2%' THEN 2 ELSE 1 END as diff,
		CASE WHEN logs[array_size(logs)-diff] ILIKE 'referral%' THEN diff+1 ELSE diff END as diff_final,
	
		logs[array_size(logs)-diff_final] as to_line,
		regexp_substr(logs[array_size(logs)-diff_final], '.*for (\\d+) ([\\w\\.-]+)', 1, 1, 'e', 1) as swap_to_amt,
		nn.decimal as swap_from_dec,
		regexp_substr(logs[array_size(logs)-diff_final], '.*for (\\d+) ([\\w\\.-]+)', 1, 1, 'e', 2) as swap_to_text,
		coalesce(n.symbol, swap_from_text) as swap_from,
		coalesce(nn.symbol, swap_to_text) as swap_to,
		concat(swap_from, '-->', swap_to) as route,
		CASE WHEN nn.symbol IS NULL OR n.symbol IS NULL THEN 'not safe' ELSE 'safe' END as cat,
		tx
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near_token_address n ON regexp_substr(logs[0], 'Swapped (\\d+) (.*) for', 1, 1, 'e', 2)=n.contract_address
	LEFT JOIN near_token_address nn ON regexp_substr(logs[array_size(logs)-1], '.*for (\\d+) (.*)', 1, 1, 'e', 2)=nn.contract_address
	 WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		AND logs[0] ILIKE 'Swapped%'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	  AND tx not ilike '%"status":{"Failure%'
	  ) , pre as (
	SELECT
	 COUNT
		(DISTINCT TX_HASH) as total,
		ddate,
		swap_to,
		cat
	from base
	GROUP BY ddate, swap_to, cat  ), pre_final as (
	SELECT
	
	total,
		ddate,
		cat,
		rank() over (PARTITION BY ddate ORDER BY total DESC) as rank,
		CASE WHEN rank>5 THEN 'OTHERS' ELSE swap_to END as swap_to
	from pre ) SELECT
	SUM(total) as total,
		ddate,
		swap_to from pre_final GROUP BY ddate, swap_to ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 520
QUERY_ID: 3517097e-eba7-4e35-8bc6-20ba65fea35e
QUERY_TITLE: [NEAR] NFT Paras marketplace BASE

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre, -- remove // | convert variant | parse json
		CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	-- COUNT(*) as total,
		-- coalesce(log_json:type, log_json:event) as type,
		-- MAX(log_json) as sample_json,
		-- MAX(tx_hash) as sample_tx
		e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE NULL END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected,
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:title,
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json:params:ft_token_id,
		log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), all_series as (
	SELECT
	 token_series,
	MAX(actor) as creator,
	--coalesce(split(value, ':')[0], 0) as royalty_taker,
	SUM(coalesce(split(value, ':')[1], 0)) as royalty_perc,
	MAX(log_json:params:token_metadata:title) as title
	from types, table(flatten(input=>royalty_set))
	WHERE 1=1
	AND type = 'nft_create_series'
		--AND try_to_decimal(coalesce(split(value, ':')[1], '0')) IS NULL
	GROUP BY token_series ) SELECT COUNT(*) totals, MAX(log_json), type from types WHERE
	nft_contract_id IS NOT NULL GROUP BY type



=======================================================================================
=======================================================================================
QUERY_NO: 521
QUERY_ID: 26db1fea-005e-441d-9ce5-d5f65b1e3867
QUERY_TITLE: [Optmism] VELO -sample

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' )
	SELECT
	  tx_hash,
	  date_trunc('hour',block_timestamp) as hdate,
	  ORIGIN_FROM_ADDRESS,
	  ORIGIN_TO_ADDRESS,
	  contract_address,
	  provider,
	  locked_date,
	  tokenID,
	  weight,
	  deposit_type,
	  DATEDIFF(day, date_trunc('day',block_timestamp), locked_date)  as days,
	  test
	FROM base
	WHERE weight>0
	LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 522
QUERY_ID: 368b50da-3cf2-49fb-8678-bec507e492c8
QUERY_TITLE: [ALGO][Q78] Purchases & New Wallets

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), min_dates_wallets as (
	SELECT
		buyer,
		'1' as is_new,
		min(date_trunc('day',trade_close_date)) as ddate
	from filter_trades
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL
	GROUP BY buyer ), purchase_types as (
	SELECT
		f.buyer as wallet,
		date_trunc('day',f.trade_close_date) as pdate,
		CASE	WHEN is_new=1 THEN 'NEW'
				ELSE 'OLD' END as cat
	from filter_trades f
	LEFT JOIN  min_dates_wallets m ON date_trunc('day',f.trade_close_date) = m.ddate AND f.buyer=m.buyer
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL ) SELECT
	COUNT(wallet) as total_purchases,
	cat,
	pdate as purchase_date from purchase_types GROUP BY purchase_date,CAT ORDER BY purchase_date ASC



=======================================================================================
=======================================================================================
QUERY_NO: 523
QUERY_ID: 36ef9990-e8ed-462a-910f-710837fdefcd
QUERY_TITLE: [ENS][Q8]Domains held by Airdrop 'HODLers' (chart)

QUERY_STRING:

with drop_wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND event_type = 'erc20_transfer'
	  GROUP BY origin_address ), hodler_totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND REPLACE(event_inputs:"owner",'"','') IN (
				SELECT origin_address as owner
				from drop_wallets
			where tokens_in!=0 AND tokens_out=0 --Filtering those that still hold airdrop
	
	
	) GROUP BY owner ORDER BY domains DESC ) SELECT
		CASE WHEN domains>=10 THEN 10  ELSE domains END as ndomains,
		COUNT(OWNER) as wallets from hodler_totals WHERE
	domains!=0 GROUP BY ndomains ORDER BY wallets DESC



=======================================================================================
=======================================================================================
QUERY_NO: 524
QUERY_ID: 80bccbbc-8c78-4104-87cb-7f9b440eb309
QUERY_TITLE: friend - Protocol Fees

QUERY_STRING:

-- forked from friend - Top Fee Earners @ https://flipsidecrypto.xyz/edit/queries/ba038483-62ae-4a52-8f24-9274d4fbb3f7  -- forked from frie with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	SUM(protocol_fee) as fees_eth
	  , date_trunc('dauy', block_timestamp) as dtime
	from base_wallet
	GROUP BY dtime  ) select
	 *
	, SUM(fees_eth) OVER(ORDER BY dtime ASC) as fees_cumu from refine ORDER BY dtime DESC



=======================================================================================
=======================================================================================
QUERY_NO: 525
QUERY_ID: 1aede2db-832a-4ed7-80ae-c69eb057a968
QUERY_TITLE: [BANKLESS][Q1]Members & Roles Static

QUERY_STRING:

with holders as ( 
	SELECT
		CASE
			WHEN balance>=150000 THEN 'whale'
			WHEN balance>=35000 THEN 'member'
			ELSE NULL END as role_type,
		balance_date as ddate,
		COUNT(DISTINCT user_address) as wallets
	from ethereum.erc20_balances
	WHERE
		balance_date= '2022-03-01'
		AND contract_address = lower('0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198')
		AND balance>= 35000
	GROUP BY ddate, role_type ) SELECT * from holders



=======================================================================================
=======================================================================================
QUERY_NO: 526
QUERY_ID: b4d853b7-8dba-442a-a4b4-c696a07d857c
QUERY_TITLE: Redelegators Percentage of Participants

QUERY_STRING:

with base as (
	SELECT
	
	parse_json(args) as json_args,
		json_args:new_account_id as citizen
	from near.core.fact_actions_events_function_call
	where method_name = 'create_account' and args LIKE '%new_account_id%' ), stakers as (
	SELECT
	
	tx_signer as staker,
		COUNT(DISTINCT t.tx_hash) as txns
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
		AND tx_signer IN ( SELECT citizen from base)
	GROUP BY tx_signer ), actions as (
	SELECT
	
	a.block_timestamp as dtime,
		tx_signer as staker,
	
	tx_receiver as gov,
		a.tx_hash,
		method_name as act
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
	ORDER BY staker, dtime ), refine as (
	SELECT
	*,
		lag(gov) OVER (PARTITION BY staker ORDER BY dtime) as pgov,
		lag(act) OVER (PARTITION BY staker ORDER BY dtime) as pact,
		lag(tx_hash) OVER (PARTITION BY staker ORDER BY dtime) as ptx,
		lag(dtime) OVER (PARTITION BY staker ORDER BY dtime) as ptime,
		TIMEDIFF(seconds, ptime, dtime) as time_delta
	from actions ), restakes as (
	SELECT
	staker,
				COUNT(*) as totals
		from refine
	WHERE 1=1
		AND (pact = 'unstake_all' AND act ='deposit_and_stake')
		AND (gov!=pgov)
	GROUP BY staker ), pre as (
	SELECT
	
	s.staker,
	CASE WHEN totals IS NOT NULL THEN 'Redelegator' ELSE 'Never Redelegated' END as cat
	from stakers s
	LEFT JOIN restakes r ON s.staker = r.staker ) SELECT
	COUNT(*) as totals,
	CAT from pre  GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 527
QUERY_ID: 25c99d5d-2422-4043-876f-797d27dc1923
QUERY_TITLE: Top Restakes:  Ex Governor

QUERY_STRING:

with actions as (
	SELECT
	
	a.block_timestamp as dtime,
		tx_signer as staker,
	
	tx_receiver as gov,
		a.tx_hash,
		method_name as act
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
	ORDER BY staker, dtime ), refine as (
	SELECT
	*,
		lag(gov) OVER (PARTITION BY staker ORDER BY dtime) as pgov,
		lag(act) OVER (PARTITION BY staker ORDER BY dtime) as pact,
		lag(tx_hash) OVER (PARTITION BY staker ORDER BY dtime) as ptx,
		lag(dtime) OVER (PARTITION BY staker ORDER BY dtime) as ptime,
		TIMEDIFF(seconds, ptime, dtime) as time_delta
	from actions ), restakes as (
	SELECT * from refine
	WHERE 1=1
		AND (pact = 'unstake_all' AND act ='deposit_and_stake')
		AND (gov!=pgov) ) SELECT
	pgov as ex_gov,
		COUNT(DISTINCT staker) as totals from restakes group by ex_gov order by TOTALS DESC



=======================================================================================
=======================================================================================
QUERY_NO: 528
QUERY_ID: 9518cb73-bee2-4b47-94af-348226dd2335
QUERY_TITLE: [NEAR][T2] Citizen Participation

QUERY_STRING:

with base as (
	SELECT
	
	parse_json(args) as json_args,
		json_args:new_account_id as citizen
	from near.core.fact_actions_events_function_call
	where method_name = 'create_account' and args LIKE '%new_account_id%' ), stakers as (
	SELECT
	
	tx_signer,
		COUNT(DISTINCT t.tx_hash) as txns
	FROM near.core.fact_actions_events_function_call a
	JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		AND method_name IN('deposit_and_stake','unstake_all')
	GROUP BY tx_signer ) SELECT
	COUNT(DISTINCT citizen) as totals,
	CASE WHEN txns IS NOT NULL THEN 'participated' ELSE 'never participated' END as cat from base b LEFT JOIN stakers s ON b.citizen = s.tx_signer GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 529
QUERY_ID: 54d08323-88fe-45d3-8fd9-7094537fd0de
QUERY_TITLE: Ramen Finance 

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 530
QUERY_ID: 394e86f6-5969-435d-bc33-e4c22fc000de
QUERY_TITLE: [Optmism] VELO - Base Weeks

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' ), refine as (
	SELECT
		tx_hash,
		date_trunc('hour',block_timestamp) as hdate,
		ORIGIN_FROM_ADDRESS,
		ORIGIN_TO_ADDRESS,
		contract_address,
		provider,
		locked_date,
		tokenID,
		weight,
		deposit_type,
		DATEDIFF(week, date_trunc('day',block_timestamp), locked_date)  as duration,
		test
	FROM base
	WHERE weight>0 )  SELECT
	 * from refine LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 531
QUERY_ID: 4779191e-cbfd-4190-8459-d025b9fe0db2
QUERY_TITLE: [FS] Shrooms Secondary Sales

QUERY_STRING:

with shroom_sales as (
	SELECT
		date_trunc('hour', block_timestamp) as htime,
		price_usd
	from ethereum.core.ez_nft_sales
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146') ) SELECT * from shroom_sales



=======================================================================================
=======================================================================================
QUERY_NO: 532
QUERY_ID: 37ca22b7-a577-432b-a423-2c819c3533e0
QUERY_TITLE: Untitled Query

QUERY_STRING:

with table_sales as (
	
	
	select 1 as block_timestamp, 0 as hero_id, 10 as total_jewels
	union select 2 as block_timestamp, 2 as hero_id, 20 as total_jewels
	union select 3 as block_timestamp, 1 as hero_id, 30 as total_jewels
	union select 4 as block_timestamp, 3 as hero_id, 40 as total_jewels ), table_update as (
	
	
	select 0 as block_timestamp, 1 as hero_id, 10 as str
	union select 1 as block_timestamp, 2 as hero_id, 20 as str
	union select 2 as block_timestamp, 1 as hero_id, 30 as str
	union select 3 as block_timestamp, 3 as hero_id, 40 as str
	union select 6 as block_timestamp, 1 as hero_id, 60 as str
	union select 7 as block_timestamp, 1 as hero_id, 70 as str ), sales as (
	  select
	
	
	block_timestamp,
	
	
	hero_id,
	
	
	total_jewels
	  from table_sales ) select
	  s.block_timestamp,
	  s.hero_id,
	  s.total_jewels,
	  u.block_timestamp as u_time,
	  u.hero_id as u_hero,
	  u.str from sales as s left join table_update u on u.hero_id = s.hero_id and u.block_timestamp < s.block_timestamp



=======================================================================================
=======================================================================================
QUERY_NO: 533
QUERY_ID: 22fb75f0-1509-47e1-984f-d8f9a36e50fb
QUERY_TITLE: VRTX Staking Burns test samples

QUERY_STRING:

-- forked from VRTX Staking Burns test @ https://flipsidecrypto.xyz/studio/queries/ed9d6fe1-714a-4b76-87e6-96c3d2f44cf5 -- forked from VRTX Staking Totals FINAL @ https://flipsidecrypto.xyz/studio/queries/d21a2b3a-091e-4a6d-b141-d9406615b208 -- forked from VRTX Staking Totals (updated contracts) @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	-- sig with 2 logs (1 transfer, 1 unknown log): 0x3ccfd60b
	-- sig with 1 simple transfer: 0x0e8584aa
	SELECT
	  *
	  , (amount*10)/9 as total_amount
	  , total_amount - amount as burnt_amount
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND stake_action NOT in ('migrate-stake', 'stake')
	  AND symbol = 'VRTX'
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x3ccfd60b'
	  --AND block_timestamp>='2024-12-01'
	  AND block_timestamp::date = '2025-01-11'
	  AND from_address!='0x5be754ad77766089c4284d914f0cc37e8e3f669a' ) SELECT
	 block_timestamp::date as ddate
	, SUM(burnt_amount) as burnt_totals from base group by 1 order by 1 ASC
	-- SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 534
QUERY_ID: 9054dd2c-5c0e-4516-a8cd-a06796495bad
QUERY_TITLE: [ALGO][Q15] Anomaly Trades

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery'
			AND (block_timestamp>='2021-11-08' AND block_timestamp<'2021-11-10') ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  * from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL ORDER BY algo_amount DESC



=======================================================================================
=======================================================================================
QUERY_NO: 535
QUERY_ID: 9cfafa34-c192-42a6-9f10-e1df82dcd618
QUERY_TITLE: Dune AVS plagiarizer

QUERY_STRING:

WITH latest_entries AS (
	  SELECT
	
	 block_timestamp
	
	 , decoded_log:avs as operator
	
	 , decoded_log:"metadataURI" as url
	
	 , row_number() OVER (PARTITION BY decoded_log:avs ORDER BY block_timestamp DESC) AS rn
	  FROM ethereum.core.ez_decoded_event_logs
	
	WHERE event_name = 'AVSMetadataURIUpdated' --AND decoded_log:avs = '0x4cd2086e1d708e65db5d4f5712a9ca46ed4bbd0a'
	  qualify rn=1 ) SELECT
	 *
	, live.udf_api(url) as resp
	, resp:data:name as op_name
	, resp:data:website as op_website FROM latest_entries LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 536
QUERY_ID: 80af3f43-64c2-4ab5-a490-18bb57049f20
QUERY_TITLE: friend - Trade Volume

QUERY_STRING:

-- SELLS AND BUYS: with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' )
	SELECT
	 COUNT(DISTINCT trader) as traders
	, SUM(trade_value) as volume
	, trade_type
	, date_trunc('day', block_timestamp) as dtime from base_wallet GROUP BY trade_type, dtime



=======================================================================================
=======================================================================================
QUERY_NO: 537
QUERY_ID: 7ad69e0b-ffcd-47d2-9925-3f9e34beefd8
QUERY_TITLE: Holders - NFT Collection

QUERY_STRING:

with base as (
	SELECT
	
	tokenid
	  , NFT_TO_ADDRESS as holder
	  , row_number() OVER (PARTITION BY tokenid ORDER BY BLOCK_TIMESTAMP DESC) as rank
	  , block_timestamp
	  , tx_hash
	  from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0x5af0d9827e0c53e4799bb226655a1de152a425a5')
	qualify rank=1 ) SELECT
	 * from base



=======================================================================================
=======================================================================================
QUERY_NO: 538
QUERY_ID: 618a596f-664b-4202-95a6-e30455821345
QUERY_TITLE: special gas - over time only orig_func

QUERY_STRING:

-- forked from special gas - over time copy @ https://flipsidecrypto.xyz/studio/queries/44b3d4e4-ed24-4080-823a-8c2bd6be1c46 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  --AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  --AND block_number<4000000 ) SELECT
	 date_trunc('minute', block_timestamp) as dmin
	, COUNT(distinct wallet) as users
	, COUNT(distinct tx_hash) as txns
	, SUM(amount) as total_mon
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative
	, SUM(txns) OVER (ORDER by dmin ASC) as txns_total from gas_base GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 539
QUERY_ID: 90b1e546-f1d8-49ff-8465-3956d0650ee7
QUERY_TITLE: [ALGO][Q77] Top Purchasers by Algo Spent

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	coalesce(amount,0) as amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), top10 as (
	SELECT
		buyer as wallet,
		SUM(amount) as algo_spent,
		COUNT(tx_group_id) as NFT_purchases
	from all_purchases
	GROUP BY wallet ORDER BY algo_spent DESC
	LIMIT 10 ) SELECT
	 *,
	concat(substr(wallet,0,4), '...', substr(wallet, len(wallet)-3, len(wallet))) as wallet_trunc from top10



=======================================================================================
=======================================================================================
QUERY_NO: 540
QUERY_ID: 9cd4d5f6-089b-41b7-848e-3ed5f47dee07
QUERY_TITLE: summary stats original

QUERY_STRING:

-- forked from summary stats @ https://flipsidecrypto.xyz/studio/queries/f4083419-d81f-46fd-b33f-ca8e75860447 -- forked from summary stats test (no edge) @ https://flipsidecrypto.xyz/studio/queries/164ece5b-50d0-4186-b27d-2866887d8a47 ----SEI Orderfill events----- with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	
	
	NULL as EZ_PERP_TRADES_ID,
	
	
	NULL as INSERTED_TIMESTAMP,
	
	
	NULL as MODIFIED_TIMESTAMP
	  FROM
	
	
	order_fill_format ) ------ END OF SEI ORDERFILLS------------------ , base_perp_trades as (
	with base_products as (
	  with based as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from based, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	base_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	base_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  base_logs l
	),
	base_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	 base_order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 base_order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- -------------------------------------MANTLE PERP TRADES--------------------------------------------------- , mantle_perp_trades as (
	with mantle_products as (
	  with mantle as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1c9d6124-52fa-46cd-9ed9-c6e2244b3f93/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from mantle, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	mantle_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  mantle.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-04-28'
	
	
	  AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  AND contract_address = LOWER('0x736a2ada5f4700d49da6b28a74c4a77cdb3e2994') --Offchain EXchange Contract
	
	
	 ),
	
	mantle_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  mantle_logs l
	),
	mantle_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	  mantle_order_fill_decode_v2 l
	
	 INNER JOIN mantle_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 mantle_order_fill_format ) -------------------------------------END OF MANTLE PERP TRADES--------------------------------------------------- , merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from FINAL
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees from merge -- SELECT * from merge WHERE label = 'arbitrum' -- LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 541
QUERY_ID: 22686b1c-dbaa-4263-b484-c205314bd924
QUERY_TITLE: [Polygon] liquid staking withdraw overtime copy

QUERY_STRING:

-- forked from phu / [Polygon] liquid staking withdraw overtime @ https://flipsidecrypto.xyz/phu/q/OsqAOanTqFyF/polygon]-liquid-staking-withdraw-overtime with
	lido_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0x9ee91f9f426fa633d227f7a9b000e28b9dfd8599' -- stMATIC
	and ORIGIN_FUNCTION_SIGNATURE = '0x745400c9' -- requestWithdraw
	)
	, claystack_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0x91730940dce63a7c0501cedfc31d9c28bcf5f905' -- ClayMatic
	and ORIGIN_FUNCTION_SIGNATURE = '0x2e1a7d4d' -- withdraw
	)
	, ankr_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, TO_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0xcfd4b4bc15c8bf0fd820b0d4558c725727b3ce89' -- PolygonPool
	and ORIGIN_FUNCTION_SIGNATURE = '0x93651269' -- serveClaims
	)
	, stader_cte as (
	  -- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from ethereum.core.ez_token_transfers
	where 1=1
	and CONTRACT_ADDRESS = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0' -- MATIC
	and ORIGIN_TO_ADDRESS = '0xf03a7eb46d01d9ecaa104558c732cf82f6b6b645' -- MaticX
	and FROM_ADDRESS = '0x5e3ef299fddf15eaa0432e6e66473ace8c13d908' -- PoS Staking Contract
	and ORIGIN_FUNCTION_SIGNATURE = '0xf8444436' -- claimWithdrawal
	)
	, stader_polygon_cte as (
	-- withdraw
	select
	BLOCK_TIMESTAMP
	, BLOCK_TIMESTAMP::date date
	, ORIGIN_FROM_ADDRESS
	, AMOUNT
	, AMOUNT_USD
	, TX_HASH
	from polygon.core.ez_native_transfers
	where 1=1
	and ORIGIN_TO_ADDRESS = '0xfd225c9e6601c9d38d8f98d8731bf59efcf8c0e3' -- ChildPool
	and ORIGIN_FROM_ADDRESS = '0xfd225c9e6601c9d38d8f98d8731bf59efcf8c0e3' -- ChildPool
	and ORIGIN_FUNCTION_SIGNATURE = '0x77baf209' -- claimMaticXSwap
	)
	, union_cte as (
	select 'Lido' platform, * from lido_cte
	union all
	select 'Claystack', * from claystack_cte
	union all
	select 'Ankr', * from ankr_cte
	union all
	select 'Stader', * from stader_cte
	union all
	select 'Stader (Polygon)', * from stader_polygon_cte
	)
	select
	date
	, platform
	, withdrawer
	, AMOUNT
	, tx_count
	, sum(AMOUNT) over(partition by platform order by date rows between unbounded preceding and current row) cumulative_AMOUNT
	, sum(tx_count) over(partition by platform order by date rows between unbounded preceding and current row) cumulative_tx_count
	from (
	select
	  date
	, platform
	, count(distinct ORIGIN_FROM_ADDRESS) withdrawer
	, sum(AMOUNT) AMOUNT
	, count(TX_HASH) tx_count
	from union_cte
	 where 1=1
	group by 1,2
	)



=======================================================================================
=======================================================================================
QUERY_NO: 542
QUERY_ID: e69ca312-2df6-4175-b8c3-41c789d36a1b
QUERY_TITLE: [ALGO][Q42] Top Arb Profiteers

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ), post_proc as (
	SELECT
	
	COUNT(*) as total_arbs,
		SUM(profit) as total_profit,
		swapper,
		MAX(profit_perc) as max_arb_perc,
		AVG(profit_perc) as avg_arb_perc
	from refine
	WHERE
		time_delta_seconds <= 600
		AND profit_perc> 0
	GROUP BY swapper ORDER BY total_profit DESC ) SELECT
	 *,
	--regexp_replace(swapper,'^\\w{4}(.*)\\w{4}$','...') as swapper_trunc
	 concat( substring(swapper, 0, 4), '.....', substring(swapper, len(swapper)-3, len(swapper)) ) as swapper_trunc from post_proc ORDER BY total_profit DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 543
QUERY_ID: e69bd93b-bbdf-4f42-b08c-98269df0534c
QUERY_TITLE: [algo] AlgoDex Mock

QUERY_STRING:

SELECT
	
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '(\\[.*\\])', 1, 1, 'e', 1) as substr_note_l,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.* ":(.*)', 1, 1, 'e', 1) as substr_note_r,
			PARSE_JSON(SUBSTRING( substr_note_r, 0, LEN(substr_note_r) -1 )) as json_note,
			json_note:escrowAddr as escrow_wallet,
		json_note:escrowOrderType as otype,
			json_note:isASAEscrow as asa,
			json_note:txnNum as tnum,
			tx_type_name,
			tx_id,
			intra,
			tx_message:txn:amt/1e6 as amt from algorand.transactions WHERE 
	tx_group_id = 'zqzH8XZxoaVXWmkHBMQw7NeLtYL7+nMSdk9euNbF+dE='



=======================================================================================
=======================================================================================
QUERY_NO: 544
QUERY_ID: e6cbd306-ef47-40a4-9732-8ce0987b2d36
QUERY_TITLE: [ALGO] arc69 collection grouping

QUERY_STRING:

SELECT COUNT(DISTINCT asset_id) as totals, replace(tx_message:txn:snd,'"','') as collection_id from algorand.asset_configuration_transaction WHERE
	tx_message:txn:note like '%eyJzdGFuZGFyZCI6ImFy%'
		AND tx_message:txn:snd IS NOT NULL  GROUP BY collection_id ORDER BY totals DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 545
QUERY_ID: 8b68d2ab-22e8-4cdb-82f9-49b102dd47d3
QUERY_TITLE: friend base totals

QUERY_STRING:

-- forked from friend base @ https://flipsidecrypto.xyz/edit/queries/b24aed85-fa18-42f4-82b6-ff7e89943d85  --First own share buy-> New User with base as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dtime
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  , ORIGIN_FROM_ADDRESS as user
	  , rank() OVER (PARTITION BY user ORDER BY block_timestamp ASC) as rank
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS
	qualify rank=1 ), refine as (
	SELECT
	
	COUNT(DISTINCT user) as users
	from base ) SELECT
	 * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 546
QUERY_ID: 2449bd9d-b07c-40ab-b1a8-5a41cc3066ae
QUERY_TITLE: [FS] Shrooms Base

QUERY_STRING:

with mints as (
	SELECT
		date_trunc('hour', block_timestamp) as hdate,
		COUNT(DISTINCT TOKENID) as mints,
	  SUM(mints) OVER(ORDER BY hdate) as mints_cumulative,
		COUNT(DISTINCT NFT_TO_ADDRESS) as minters,
		SUM(minters) OVER(ORDER BY hdate) as minters_cumulative
	from ethereum.core.ez_nft_mints
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
	GROUP by hdate ORDER BY hdate DESC ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 547
QUERY_ID: ef1717b9-fbf0-4982-a941-45c467d9d48b
QUERY_TITLE: [avax] Txn fees

QUERY_STRING:

with prices as (
	SELECT price, hour as hhtime from ethereum.core.fact_hourly_token_prices
	WHERE
		token_address = lower('0x85f138bfEE4ef8e540890CFb48F620571d67Eda3')
		AND  hour >= '2022-06-20'  ), base as (
	SELECT
		round(AVG(tx_fee*price), 3) as avg_txn_fee,
		max(tx_fee*price) as max_txn_fee,
		min(tx_fee*price) as min_txn_fee,
		MAX(price) as token_price,
	date_trunc('hour', block_timestamp) as htime
	from avalanche.core.fact_transactions b
	LEFT JOIN prices p ON p.hhtime = date_trunc('hour', b.block_timestamp)
	WHERE 1=1
		AND  block_timestamp >= '2022-06-20'
	GROUP by htime ) SELECT
	* from base



=======================================================================================
=======================================================================================
QUERY_NO: 548
QUERY_ID: 4672bb93-41df-4f80-b6d0-10e427b9021b
QUERY_TITLE: [POOLY][Q2] Pooly & PoolTogether Intersection

QUERY_STRING:

with base as (
	SELECT 
	*,
		CASE	WHEN NFT_ADDRESS = lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523') THEN 'Pooly Judge'
				WHEN NFT_ADDRESS = lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9') THEN 'Pooly Lawyer'
				ELSE 'Pooly Supporter' END as types
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS IN
	
	(lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523'),
		 lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9'),
		 lower('0x90B3832e2F2aDe2FE382a911805B6933C056D6ed')) ), pooly as (
	SELECT DISTINCT NFT_TO_ADDRESS as minter
	from base ), depositors as (
	SELECT
		DISTINCT FROM_ADDRESS as depositor,
		1 as dep
	from ethereum.core.ez_token_transfers
	WHERE 1=1
		AND block_timestamp BETWEEN '2022-05-01' AND '2022-06-20'
		AND to_address = lower('0xd89a09084555a7D0ABe7B111b1f78DFEdDd638Be')
		AND symbol ='USDC'
		AND origin_function_signature = '0xd7a169eb' ) SELECT
	COUNT(minter) as totals,
	CASE WHEN dep=1 THEN 'depositor' ELSE 'Not a depositor' END as cat from pooly LEFT JOIN depositors ON minter = depositor GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 549
QUERY_ID: ffddb2ea-925f-4d70-9ab4-252377940266
QUERY_TITLE: special gas - over time contract interactor

QUERY_STRING:

-- forked from special gas - over time only orig_func @ https://flipsidecrypto.xyz/studio/queries/618a596f-664b-4202-95a6-e30455821345 -- forked from special gas - over time copy @ https://flipsidecrypto.xyz/studio/queries/44b3d4e4-ed24-4080-823a-8c2bd6be1c46 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , to_address as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND from_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  --AND block_number<4000000 ) SELECT
	 date_trunc('minute', block_timestamp) as dmin
	, COUNT(distinct wallet) as users
	, COUNT(distinct tx_hash) as txns
	, SUM(amount) as total_mon
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative
	, SUM(txns) OVER (ORDER by dmin ASC) as txns_total from gas_base GROUP BY 1 ORDER BY 1 ASC
	-- SELECT * from gas_base



=======================================================================================
=======================================================================================
QUERY_NO: 550
QUERY_ID: 0b257590-d61e-4f8f-8299-025d5af82d5a
QUERY_TITLE: Hourly Success vs Failure Rates

QUERY_STRING:

-- forked from Hourly Success vs Failure Rates @ https://flipsidecrypto.xyz/studio/queries/666a34cb-96d8-452b-a576-c8719fab847a -- forked from base @ https://flipsidecrypto.xyz/edit/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dhour
	  , CASE
	
	  WHEN SUCCESS= FALSE THEN 'failed' ELSE 'successful' END  as label
	  , COUNT(version) as txns
	  , COUNT(DISTINCT SENDER) as wallets
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp BETWEEN '2024-08-13' AND '2024-08-19'
	  AND tx_type = 'user_transaction'
	  --AND SUCCESS = TRUE
	 GROUP BY dhour, label ORDER BY dhour ASC, label ASC
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 551
QUERY_ID: ba038483-62ae-4a52-8f24-9274d4fbb3f7
QUERY_TITLE: friend - Top Fee Earners

QUERY_STRING:

-- forked from frie with base_wallet as (
	SELECT
	
	
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  tx_hash
	  , block_timestamp
	  , ORIGIN_FROM_ADDRESS as trader
	  , concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) as account
	  , CASE WHEN  ORIGIN_FUNCTION_SIGNATURE='0x6945b123' THEN 'buy' ELSE 'sell' END as trade_type
	  , ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[3]) as units
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[4]))/1e18 as fee_deducted_eth
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[5]))/1e18 as protocol_fee
	  , TO_NUMBER(ethereum.public.udf_hex_to_int(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[6]))/1e18 as account_fee
	  , (fee_deducted_eth + protocol_fee + account_fee) as trade_value
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE IN ('0x6945b123', '0xb51d0534')
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4' ) , refine as (
	SELECT
	
	SUM(protocol_fee) as fees_eth
	  , date_trunc('hour', block_timestamp) as dtime
	  , account
	from base_wallet
	GROUP BY dtime, account ORDER BY dtime DESC ), account_funders as (
	SELECT
	
	t.tx_hash
	  , t.block_timestamp
	  , to_address as account
	  , from_address as funder
	  , value
	  , ENS_DOMAIN
	  , rank() OVER (PARTITION BY to_address ORDER BY t.block_timestamp ASC) as rank
	from base.core.fact_transactions t
	LEFT JOIN crosschain.ens.ez_ens_domains e ON t.from_address=e.owner
	WHERE 1=1
	  AND VALUE>0
	  AND ENS_SET!=false
	  AND to_address IN (SELECT account as to_address from refine)
	qualify rank=1
	 ) select
	 SUM(fees_eth) as fees_earned,
	r.account,
	MAX(ENS_DOMAIN) as ENS_NAME from refine r LEFT JOIN account_funders a ON r.account=a.account GROUP BY r.account ORDER BY fees_earned DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 552
QUERY_ID: da932e25-34c3-4bf9-913a-613028c4e2f6
QUERY_TITLE: Top 50 Sellers Debug

QUERY_STRING:

SELECT
	  -- block_timestamp::date as ddate
	  TO_ADDRESS as wallet
	  , 'vesting' as label
	  , SUM(amount) as amount_token
	  , SUM(AMOUNT_USD) as amount_usd
	  --, COUNT(DISTINCT TO_ADDRESS) as claimers
	 from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  --and tx_hash = '0x2957a30a25b10786e3ef02ee0a6fede5876c9ec63093bedc38d2e25862c1d5a4'
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_to_address = '0x2cde9919e81b20b4b33dd562a48a84b54c48f00c'
	  AND origin_function_signature = '0x968b3e59'
	GROUP BY wallet, label



=======================================================================================
=======================================================================================
QUERY_NO: 553
QUERY_ID: e821f308-da9b-48f2-8e9c-fd7c6888f4be
QUERY_TITLE: [AAVE-29] Average Deposit Amount (USD)

QUERY_STRING:

with total_flash as (
	SELECT AVG(supplied_usd), date_trunc('month', block_timestamp) as mdate
	from aave.deposits
	WHERE 
	block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	) SELECT 
	* FROM total_flash



=======================================================================================
=======================================================================================
QUERY_NO: 554
QUERY_ID: e81d2e4a-ad15-489f-aeee-4b00111d6b47
QUERY_TITLE: [TC] User Distribution (Cumulative USD value deposited)

QUERY_STRING:

with labels as (
	SELECT * from flipside_prod_db.crosschain.address_labels
	WHERE 1=1
	AND project_name ilike '%tornado%' ), base as (
	SELECT
	
	block_timestamp,
	  tx_hash,
	
	
	 CASE	WHEN event_name='Deposit' THEN ORIGIN_FROM_ADDRESS
	
			ELSE event_inputs:"to" END  as actor,
	  CASE	WHEN event_name='Withdrawal' THEN coalesce(event_inputs:relayer, NULL)
	
			ELSE NULL END  as relayer,
	  CASE	WHEN relayer IS NOT NULL THEN event_inputs:fee ELSE 0 END as fee,
	
		ADDRESS_NAME,
	  TO_NUMERIC(regexp_substr(ADDRESS_NAME, '.*\\: (\\d+[\\.\\d]*)', 1, 1, 'e', 1), 10, 1) as token_amount,
	  regexp_substr(ADDRESS_NAME, '.*\\: \\d+[\\.\\d]* (\\w+)', 1, 1, 'e', 1) as token,
		contract_address,
	  ORIGIN_FUNCTION_SIGNATURE,
	  event_name
	from ethereum.core.fact_event_logs f
	LEFT JOIN labels l on f.contract_address = l.address
	WHERE 1=1
		AND block_timestamp BETWEEN CURRENT_DATE -(30*{{Months_Ago}}) AND CURRENT_DATE-1
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x13d98d13', '0xb438689f')
	AND event_name IN ('Deposit', 'Withdrawal') ),
	 refine as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txns,
		SUM(token_amount) as token_amounts,
		concat(token,':', token_amount) as cat,
		date_trunc('day', block_timestamp) as ddate,
		actor
	from base
	WHERE
	event_name IN ('Deposit')
	GROUP BY actor,cat, ddate ), pre as (
	SELECT 
	r.actor,
		ddate,
		cat,
	total_txns,
		token_amounts,
		price,
		token_amounts*price as volume_usd
	from refine r
	 LEFT JOIN  (
	  SELECT
	
	avg(price) as price,
	
	CASE WHEN lower(SYMBOL)='weth' THEN 'eth' ELSE lower(SYMBOL) END as symbol,
	  date_trunc('day', HOUR) as pdate
	  FROM ethereum.core.fact_hourly_token_prices
	  WHERE lower(symbol) IN (SELECT DISTINCT CASE WHEN lower(split(cat,':')[0])='eth' THEN 'weth' ELSE split(cat,':')[0] END as cat from refine WHERE cat IS NOT NULL)
	  GROUP BY pdate,symbol
	  ) p ON lower((split(r.cat,':')[0]))=p.symbol AND r.ddate =p.pdate
	WHERE 1=1
		AND r.cat ilike '%{{ASSET}}%'  ), pre_final as (
	SELECT
	SUM(volume_usd) as volume_usd,
	actor
	from pre
	GROUP BY actor ) --THANKS TO MARQU for this hack lol SELECT
	 COUNT(DISTINCT actor) as total_users,
	CASE
	when volume_usd < 10 then (floor(volume_usd))::string
			when volume_usd < 100 then (floor(volume_usd/10.0)*10)::string
			when volume_usd < 1000 then (floor(volume_usd/100.0)*100)::string
			when volume_usd < 10000 then (floor(volume_usd/1000.0)*1000)::string
			when volume_usd < 100000 then (floor(volume_usd/10000.0)*10000)::string
			when volume_usd < 1000000 then (floor(volume_usd/100000.0)*100000)::string
			when volume_usd < 10000000 then (floor(volume_usd/1000000.0)*1000000)::string
			when volume_usd < 100000000 then (floor(volume_usd/10000000.0)*10000000)::string
			when volume_usd < 1000000000 then (floor(volume_usd/10000000.0)*100000000)::string
			when volume_usd < 10000000000 then (floor(volume_usd/100000000.0)*1000000000)::string
			else volume_usd::string end as cat from pre_final GROUP by cat



=======================================================================================
=======================================================================================
QUERY_NO: 555
QUERY_ID: 62e5c11d-1412-425c-827b-14cee4674420
QUERY_TITLE: Cluster Details 

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xe248ccedca76b8b35726c4c30b6b776412a6d859')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 556
QUERY_ID: 1c8292fc-61a8-4194-9fbd-a7f962f909e0
QUERY_TITLE: VRTX Unstake Burns

QUERY_STRING:

with base as (
	-- sig with 2 logs (1 transfer, 1 unknown log): 0x3ccfd60b
	-- sig with 1 simple transfer: 0x0e8584aa
	SELECT
	  *
	  , (amount*10)/9 as total_amount
	  , total_amount - amount as burnt_amount
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND stake_action NOT in ('migrate-stake', 'stake')
	  AND symbol = 'VRTX'
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x3ccfd60b'
	  --AND block_timestamp>='2024-12-01'
	  --AND block_timestamp::date = '2025-01-11'
	  AND from_address!='0x5be754ad77766089c4284d914f0cc37e8e3f669a' ) SELECT
	 block_timestamp::date as ddate
	, SUM(burnt_amount) as burnt_totals
	, SUM(burnt_totals) OVER (ORDER BY ddate ASC) as burns_cumulative from base group by 1 order by 1 DESC  -- SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 557
QUERY_ID: 8247804c-1841-4681-ae75-3ef1601a02b9
QUERY_TITLE:  [Optmism] VELO - Top Lockers

QUERY_STRING:

WITH base AS (
	SELECT
	  *,
	  CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 42)) AS provider,
	  ethereum.public.udf_hex_to_int(topics [2] :: STRING)::DATE AS locked_date,
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	  ethereum.public.udf_hex_to_int(segmented_data [0] :: STRING) AS tokenID,
	  ethereum.public.udf_hex_to_int(segmented_data [1] :: STRING)/pow(10,18) AS weight,
	  ethereum.public.udf_hex_to_int(segmented_data [2] :: STRING) AS deposit_type,
	  TO_TIMESTAMP(ethereum.public.udf_hex_to_int(segmented_data [3] :: STRING)) AS test
	FROM
	  optimism.core.fact_event_logs
	WHERE 1=1
	and block_timestamp BETWEEN '2022-06-01' AND '2022-07-11'
	  and topics [0] :: STRING = '0xff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de624' ), refine as (
	SELECT
		tx_hash,
		date_trunc('hour',block_timestamp) as hdate,
		ORIGIN_FROM_ADDRESS as wallet,
		ORIGIN_TO_ADDRESS,
		contract_address,
		provider,
		locked_date,
		tokenID,
		weight,
		deposit_type,
		DATEDIFF(day, date_trunc('day',block_timestamp), locked_date)  as days,
		test
	FROM base )  SELECT
	 SUM(weight) as total_locked,
	COUNT(DISTINCT tx_hash) as txns,
	wallet, CONCAT( substr(wallet, 0,5), '....', substr(wallet, len(wallet)-4)) as wallet_trunc,
	tokenID from refine GROUP BY wallet, wallet_trunc, tokenID ORDER BY total_locked DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 558
QUERY_ID: 1b969be7-d678-4596-94ed-059e580d3c9d
QUERY_TITLE: New Users & First 3 Interactions - Exact Projects 

QUERY_STRING:

with new_wallets as (
	SELECT
	
	from_address as wallet
	  , block_timestamp::date as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND nonce=0
	  AND STATUS = 'SUCCESS' ) , txns as (
	SELECT
	
	origin_from_address as wallet
	  , CONCAT(label, '-', label_type) as label
	  --,label
	  , min(block_timestamp) as min_dtime
	
	
	from ethereum.core.fact_event_logs t
	 LEFT JOIN ethereum.core.dim_labels l on t.contract_address = l.address
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND origin_from_address IN (SELECT wallet from new_wallets)
	  AND LABEL_TYPE IS NOT NULL
	  AND LABEL_TYPE NOT IN ('token', 'cex', 'chadmin', 'operator','flotsam')
	  AND LABEL NOT IN ('Weth', 'weth')
	  AND TX_STATUS = 'SUCCESS'
	GROUP BY wallet, label, label_type ) , refine as (
	SELECT
	
	*
	  , row_number() OVER(PARTITION BY wallet ORDER BY min_dtime ASC) as num
	 from txns
	qualify num <=3 ) SELECT
	 num as nth_project
	, COUNT(DISTINCT wallet) as totals
	, label from refine GROUP BY label, nth_project having totals>=1000 ORDER BY nth_project, totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 559
QUERY_ID: 5d92fc1d-ca79-43ca-bf8d-28dccdfbde9b
QUERY_TITLE: friend - Hourly ETH Flow

QUERY_STRING:

-- forked from friend - Initial ETH onboarded @ https://flipsidecrypto.xyz/edit/queries/181af298-475f-4f48-8d14-6870820956d2  -- forked from friend base @ https://flipsidecrypto.xyz/edit/queries/b24aed85-fa18-42f4-82b6-ff7e89943d85  --First own share buy-> New User with base_wallet as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dtime
	  --, regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}') as all_data
	  --, concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[0], 40)) as dataz_sel
	  , ORIGIN_FROM_ADDRESS as user
	  , rank() OVER (PARTITION BY user ORDER BY block_timestamp ASC) as rank
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  --AND tx_hash = '0xe15062f241bfabe29ae591efa162aa325ef300731df1f931445ec2d8861b3d43'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS
	qualify rank=1 ), incoming_eth as (
	SELECT date_trunc('day', block_timestamp) as dtime
	, SUM(VALUE) as total_eth
	, 'in' as cat
	from base.core.fact_transactions
	WHERE
	
	TO_ADDRESS IN (SELECT user as to_address from base_wallet)
	GROUP BY dtime, cat ) , outgoing_eth as (
	SELECT date_trunc('day', block_timestamp) as dtime
	, SUM(VALUE*(-1)) as total_eth
	, 'out' as cat
	from base.core.fact_transactions
	WHERE 1=1
	
	AND TO_ADDRESS NOT IN (SELECT user as to_address from base_wallet)
	  AND TO_ADDRESS != '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND FROM_ADDRESS IN (SELECT user as from_address from base_wallet)
	GROUP BY dtime, cat ), mix as (  SELECT * from incoming_ETH  UNION ALL
	SELECT * from outgoing_ETH ) SELECT
	 m.dtime
	, cat
	, net_flow/2 as net_flow --- div/2 for the chart/viz
	, total_eth from mix m  LEFT JOIN ( SELECT SUM(total_eth) as net_flow, dtime from mix GROUP BY dtime) n ON m.dtime=n.dtime  WHERE m.dtime>='2023-08-09' ORDER BY m.dtime DESC



=======================================================================================
=======================================================================================
QUERY_NO: 560
QUERY_ID: 61e30848-7510-42a3-8dda-a2754c6b66fa
QUERY_TITLE: KESO static univ3 pool swaps  copy

QUERY_STRING:

-- forked from KESO static univ3 pool swaps  @ https://flipsidecrypto.xyz/studio/queries/d108aaad-fe80-46dd-ab8b-99737f945b68 with kizzy_swap_events as (
	  SELECT
	  block_timestamp
	  , tx_hash
	  , origin_from_address
	  , '0x' || substr(topic_1, 27) AS sender
	  , '0x' || substr(topic_2, 27) AS receiver
	  , '0x6fa7e462c074d50f0d1b55675cedbdc3e23fda36' as pool_address
	  , '0x760afe86e5de5fa0ee542fc7b7b713e1c5425701' as token0_address
	  , '0x954a9b30f5aece2c1581e33b16d9ddfcd473a0f8' as token1_address
	  , regexp_substr_all(substr(data, 3), '.{64}') AS segmented_data
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[0])::FLOAT as amount0_unadj
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[1])::FLOAT as amount1_unadj
	  , 'WMON' AS token0_symbol
	  , 'KESO' AS token1_symbol
	  -- , c0.name AS token0_name
	  -- , c1.name AS token1_name
	  , 18 AS token0_decimals
	  , 6 AS token1_decimals
	  , amount0_unadj / pow(10, token0_decimals) as amount0_adjusted
	  , amount1_unadj / pow(10, token1_decimals) as amount1_adjusted
	  , CASE
	
	
	WHEN amount0_adjusted > 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_in
	  , CASE
	
	
	WHEN amount0_adjusted < 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_out
	  , CASE
	
	
	WHEN amount0_unadj > 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_in
	  , CASE
	
	
	WHEN amount0_unadj < 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_out
	FROM monad.testnet.fact_event_logs
	 WHERE 1=1
	  AND contract_address = '0x6fa7e462c074d50f0d1b55675cedbdc3e23fda36'
	  AND block_timestamp >= '2025-05-21'
	  AND topic_0 = '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67'
	  --kizzy pool
	  AND (origin_from_address = '0x25859318f26a78b7613ef1b7a9005e997ea03821' OR substr(topic_2, 27) = '25859318f26a78b7613ef1b7a9005e997ea03821')
	  --AND tx_hash = '0x3c181304c2a63b8bb45187abfb5ce74fe0bc5fc20ad3a7987d52313362d2d95b'  ) SELECT
	block_timestamp
	, tx_hash
	, origin_from_address
	, sender
	, receiver
	, pool_address
	, token0_symbol || '-' || token1_symbol as pool_name
	, token_in
	, token_out
	, amount_in
	, amount_out from kizzy_swap_events WHERE 1=1 ORDER BY block_timestamp DESC LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 561
QUERY_ID: 257f40ec-7b4f-479b-b132-5ba7922c5457
QUERY_TITLE: univ3 pool swaps DEBUG

QUERY_STRING:

with swap_events as (
	  SELECT
	  l.block_timestamp
	  , l.tx_hash
	  , origin_from_address
	  , '0x' || substr(topic_1, 27) AS sender
	  , '0x' || substr(topic_2, 27) AS receiver
	  -- , pool_address
	  -- , token0_address
	  -- , token1_address
	  , regexp_substr_all(substr(data, 3), '.{64}') AS segmented_data
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[0]) as amount0_unadj
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[1]) as amount1_unadj
	  , 'WMON' AS token0_symbol
	  , 'KESO' AS token1_symbol
	  -- , c0.name AS token0_name
	  -- , c1.name AS token1_name
	  , 18 AS token0_decimals
	  , 6 AS token1_decimals
	  , amount0_unadj / pow(10, token0_decimals) as amount0_adjusted
	  , amount1_unadj / pow(10, token1_decimals) as amount1_adjusted
	  , CASE
	
	
	WHEN amount0_adjusted > 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_in
	  , CASE
	
	
	WHEN amount0_adjusted < 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_out
	  -- , CASE
	  --
	  WHEN amount0_unadj > 0 THEN token0_address
	  --
	  ELSE token1_address
	  --
	END AS token_in
	  -- , CASE
	  --
	  WHEN amount0_unadj < 0 THEN token0_address
	  --
	  ELSE token1_address
	
	 -- END AS token_out
	FROM monad.testnet.fact_event_logs l
	-- INNER JOIN (
	--
	  SELECT * from pools
	--
	  WHERE pool_address = '0x6fa7e462c074d50f0d1b55675cedbdc3e23fda36'
	--
	) p ON l.contract_address = p.pool_address
	-- dim labels table is defunct/field values NULL
	-- LEFT JOIN monad.testnet.dim_contracts c0 ON p.token0_address = c0.address
	-- LEFT JOIN monad.testnet.dim_contracts c1 ON p.token1_address = c1.address
	WHERE 1=1
	  AND l.block_timestamp >= '2025-05-21'
	  AND tx_hash = '0x3c181304c2a63b8bb45187abfb5ce74fe0bc5fc20ad3a7987d52313362d2d95b'
	  AND topic_0 = '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67' ) SELECT * from swap_events



=======================================================================================
=======================================================================================
QUERY_NO: 562
QUERY_ID: 4a151ca4-cfd0-47bb-87aa-b3208b06fa2c
QUERY_TITLE: mon - net withdraws

QUERY_STRING:

--ALL valid withdraws SELECT
	SUM(amount_out) as total_mon from community.monad.kizzy_testnet_uni_v3_swaps WHERE 1=1
	AND origin_from_address = '0x25859318f26a78b7613ef1b7a9005e997ea03821'



=======================================================================================
=======================================================================================
QUERY_NO: 563
QUERY_ID: ed7515d5-f934-42b6-95e1-0aeb777cde33
QUERY_TITLE: Top 10 Delegates (Week 26th Nov -2nd Dec) by 'Power'

QUERY_STRING:

with latest_del_stats as (
	SELECT MAX(block_id) as block_id, REPLACE(event_inputs:"delegate",'"','') as new_del
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
	 
	
		AND date_trunc('day', block_timestamp) < '2021-12-03'
	  GROUP BY new_del ) SELECT REPLACE(event_inputs:"delegate",'"','') as delegate, MAX(REPLACE(event_inputs:"newBalance",'"','')) as power  from ethereum.events_emitted WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateVotesChanged'
		AND date_trunc('day', block_timestamp) < '2021-12-03'
		AND block_id IN (
			SELECT block_id from latest_del_stats ) GROUP BY delegate ORDER BY power DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 564
QUERY_ID: 6d83dfba-bf4f-4a12-a3f1-1e9ce4750364
QUERY_TITLE: [OP][Q10] Velo Stats

QUERY_STRING:





=======================================================================================
=======================================================================================
QUERY_NO: 565
QUERY_ID: be64130f-ef1d-47c8-8f28-58a55b7ddd89
QUERY_TITLE: MoM Volumes + Price

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , prices as (
	--- MONTHLY CLOSE PRICE!!!
	SELECT
	  date_trunc('month', HOUR) as dmonth
	  , PRICE
	from arbitrum.price.ez_prices_hourly
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	  AND HOUR::DATE >= '2024-01-01' AND HOUR::date < DATE_TRUNC ('month', CURRENT_DATE)
	qualify row_number() OVER (PARTITION BY date_trunc('month', HOUR) ORDER BY HOUR DESC) =1
	 ) SELECT
	date_trunc('month', m.block_timestamp) as dmonth
	, COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees
	, MAX(PRICE) as monthly_close_price from merge m LEFT JOIN prices p ON date_trunc('month', m.block_timestamp) = p.dmonth WHERE 1=1
	AND block_timestamp::date >= '2024-01-01' AND block_timestamp::date < DATE_TRUNC ('month', CURRENT_DATE) GROUP BY date_trunc('month', m.block_timestamp) ORDER BY dmonth ASC  -- SELECT * from prices



=======================================================================================
=======================================================================================
QUERY_NO: 566
QUERY_ID: eb5c2ebd-ba76-4387-ba7d-cf3abad2b372
QUERY_TITLE: base  daily

QUERY_STRING:

-- forked from base  @ https://flipsidecrypto.xyz/studio/queries/96d02fd1-966f-4751-bbd7-5859d88ae7d9 -- forked from base @ https://flipsidecrypto.xyz/studio/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	date_trunc('day', block_timestamp) as dhour
	  , CASE
	
	  WHEN payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos_game_2::play'
	
	 THEN 'Tapos - Tickling' ELSE 'normal' END as label
	  , COUNT(version) as txns
	  , COUNT(DISTINCT SENDER) as wallets
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp BETWEEN '2024-08-13' AND '2024-08-19'
	  AND tx_type = 'user_transaction'
	  AND SUCCESS = TRUE
	 GROUP BY dhour, label ORDER BY dhour ASC, label ASC
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base  -- SELECT * from aptos.core.fact_transactions -- WHERE 1=1 --
	and block_timestamp >= '2024-08-13' --
	AND payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos_game_2::play' -- LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 567
QUERY_ID: ee96b9a1-54f2-4b8d-b3c3-f6a6c7cd6844
QUERY_TITLE: [algo] AlgoDex Base

QUERY_STRING:

with tgroups as (
	SELECT
		DISTINCT tx_group_id
	  from algorand.transactions
	  WHERE
			(block_timestamp>='2022-02-10' AND block_timestamp<'2022-02-11')
			AND tx_type_name = 'application call'
			AND tx_message:txn:apid IN ('354073834', '354073718' )
	 ), samples as (
	  SELECT
	
		REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.* ":(.*)', 1, 1, 'e', 1) as substr_note,
		PARSE_JSON(SUBSTRING( substr_note, 0, LEN(substr_note) -1 )) as json_note,
		json_note:escrowAddr as escrow_wallet,
		json_note:escrowOrderType as otype,
			json_note:txnNum as tnum,
			tx_group_id
	  from algorand.transactions
	  WHERE
		tx_group_id in (SELECT * from tgroups) ) SELECT	
	COUNT(DISTINCT tx_group_id) as totals,
	MAX(tx_group_id) as eg_group,
	MIN(tx_group_id) as eg_group2,
	tnum, otype from samples GROUP BY tnum, otype



=======================================================================================
=======================================================================================
QUERY_NO: 568
QUERY_ID: 50685d22-f893-4987-99a5-48973f158e8f
QUERY_TITLE: Leaderboard

QUERY_STRING:

-- forked from Leaderboard @ https://flipsidecrypto.xyz/studio/queries/012dde54-11a8-44dc-8a7f-cff1bbfa76a1 -- forked from base @ https://flipsidecrypto.xyz/edit/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	sender as wallet
	  , COUNT(version) as txns
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp BETWEEN '2024-08-13' AND '2024-08-19'
	  AND payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos_game_2::play'
	  AND tx_type = 'user_transaction'
	  AND SUCCESS = TRUE
	 GROUP BY wallet ORDER BY txns DESC
	LIMIT 1000
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base  ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 569
QUERY_ID: 82c3a80a-df98-46e4-a7f5-e7ae78bf23ca
QUERY_TITLE: FDV - Fees Monthly

QUERY_STRING:

-- forked from FDV Base Daily @ https://flipsidecrypto.xyz/studio/queries/4bc0310f-ef57-464f-9750-0ed72e074368 with total_supply as (
	--https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply
	SELECT
	
	TO_NUMERIC(
	
	 livequery.live.udf_api(
	
	
	'https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply'
	
	 ):data) as supply ) , price_closes as (
	SELECT
	  *
	  , row_number () OVER (PARTITION BY date_trunc('month', HOUR) ORDER BY HOUR DESC) as rank
	from arbitrum.price.ez_prices_hourly p
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	qualify rank=1 ) , daily_fdv as (
	SELECT
	
	date_trunc('month', HOUR) as ddate
	  , price
	  , supply
	  , price * supply as fdv
	 from price_closes p
	 left join total_supply ts on 1=1 ) , daily_rev as (
	with base as (
	  SELECT date_trunc('month', BLOCK_TIMESTAMP) as ddate, SUM(FEE_AMOUNT) as fee_usd from arbitrum.vertex.ez_perp_trades GROUP BY ddate
	  UNION ALL
	
	SELECT date_trunc('month', BLOCK_TIMESTAMP) as ddate, SUM(FEE_AMOUNT) as fee_usd from arbitrum.vertex.ez_spot_trades GROUP BY ddate
	)
	SELECT
	
	ddate
	  , SUM(fee_usd) as fees
	from base
	 GROUP BY ddate ) SELECT
	 r.ddate
	, fdv
	 , fees from daily_rev r  LEFT JOIN daily_fdv f on r.ddate=f.ddate WHERE 1=1 AND r.ddate>='2023-11-28'



=======================================================================================
=======================================================================================
QUERY_NO: 570
QUERY_ID: 8f7f7f67-0058-4a4a-85b8-3c38bacc0425
QUERY_TITLE: PE Ratios

QUERY_STRING:

-- forked from MoM Volumes + Price @ https://flipsidecrypto.xyz/studio/queries/be64130f-ef1d-47c8-8f28-58a55b7ddd89 with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , prices as (
	--- MONTHLY CLOSE PRICE!!!
	SELECT
	  date_trunc('month', HOUR) as dmonth
	  , PRICE
	from arbitrum.price.ez_prices_hourly
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	  AND HOUR::DATE >= '2024-01-01' AND HOUR::date < DATE_TRUNC ('month', CURRENT_DATE)
	qualify row_number() OVER (PARTITION BY date_trunc('month', HOUR) ORDER BY HOUR DESC) =1
	 ) , supplies as (
	SELECT
	
	livequery.live.udf_api('https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply'):data as total_supply
	  , livequery.live.udf_api('https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=circulating_supply'):data as circ_supply ) SELECT
	date_trunc('month', m.block_timestamp) as dmonth
	, COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees
	, MAX(PRICE) as monthly_close_price
	, MAX(total_supply) as tsupply
	, MAX(circ_supply) as csupply
	, ROUND((monthly_close_price*csupply)/(total_fees*12) , 0) as pe_circ -- fees annualized -> annual revenue
	, ROUND((monthly_close_price*tsupply)/(total_fees*12) , 0) as pe_fdv from merge m LEFT JOIN prices p ON date_trunc('month', m.block_timestamp) = p.dmonth LEFT JOIN supplies s ON 1=1 WHERE 1=1
	AND block_timestamp::date >= '2024-01-01' AND block_timestamp::date < DATE_TRUNC ('month', CURRENT_DATE) GROUP BY date_trunc('month', m.block_timestamp) ORDER BY dmonth ASC  -- SELECT * from prices



=======================================================================================
=======================================================================================
QUERY_NO: 571
QUERY_ID: 8432ea02-4106-455d-867f-a453bf5bd02b
QUERY_TITLE: account-creations

QUERY_STRING:

select
	 *
	, 'account-creations' as cat
	from near.core.fact_transactions WHERE 1=1
	AND TX_SIGNER='users.kaiching'
	AND TX:actions[0]='CreateAccount'
	AND TX_SUCCEEDED = TRUE LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 572
QUERY_ID: d108aaad-fe80-46dd-ab8b-99737f945b68
QUERY_TITLE: KESO POOL tests ft comm table

QUERY_STRING:

with kizzy_swap_events as (
	  SELECT
	  block_timestamp
	  , tx_hash
	  , origin_from_address
	  , '0x' || substr(topic_1, 27) AS sender
	  , '0x' || substr(topic_2, 27) AS receiver
	  , '0x6fa7e462c074d50f0d1b55675cedbdc3e23fda36' as pool_address
	  , '0x760afe86e5de5fa0ee542fc7b7b713e1c5425701' as token0_address
	  , '0x954a9b30f5aece2c1581e33b16d9ddfcd473a0f8' as token1_address
	  , regexp_substr_all(substr(data, 3), '.{64}') AS segmented_data
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[0])::FLOAT as amount0_unadj
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[1])::FLOAT as amount1_unadj
	  , 'WMON' AS token0_symbol
	  , 'KESO' AS token1_symbol
	  -- , c0.name AS token0_name
	  -- , c1.name AS token1_name
	  , 18 AS token0_decimals
	  , 6 AS token1_decimals
	  , amount0_unadj / pow(10, token0_decimals) as amount0_adjusted
	  , amount1_unadj / pow(10, token1_decimals) as amount1_adjusted
	  , CASE
	
	
	WHEN amount0_adjusted > 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_in
	  , CASE
	
	
	WHEN amount0_adjusted < 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_out
	  , CASE
	
	
	WHEN amount0_unadj > 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_in
	  , CASE
	
	
	WHEN amount0_unadj < 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_out
	FROM monad.testnet.fact_event_logs
	 WHERE 1=1
	  AND contract_address = '0x6fa7e462c074d50f0d1b55675cedbdc3e23fda36'
	  AND block_timestamp >= '2025-05-21'
	  AND topic_0 = '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67'
	  --kizzy pool
	  AND (origin_from_address = '0x25859318f26a78b7613ef1b7a9005e997ea03821' OR substr(topic_2, 27) = '25859318f26a78b7613ef1b7a9005e997ea03821')
	  --AND tx_hash = '0x3c181304c2a63b8bb45187abfb5ce74fe0bc5fc20ad3a7987d52313362d2d95b'  ) SELECT
	'query' as label, COUNT(*) as totals, MAX(block_timestamp) as latest_event from kizzy_swap_events WHERE 1=1 GROUP BY 1 UNION ALL SELECT
	'table' as label, COUNT(*) as totals, MAX(block_timestamp) as latest_event from community.monad.kizzy_testnet_uni_v3_swaps GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 573
QUERY_ID: f1f5069f-eb79-4547-a469-2e9efb5f1aa4
QUERY_TITLE: Ref Summary Counts

QUERY_STRING:

with base as (
	SELECT
	
	a.tx_hash,
		action_name,
		method_name,
		tx_signer,
		tx_receiver,
		replace(args, '\\') as args2,
		replace( replace(args2, '\:\"\{\"', '\:\{\"'), '\}\"', '\}') as args_cleaned,
		TRY_PARSE_JSON(args_cleaned) as clean_json,
		tx
	from near.core.fact_actions_events_function_call a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	AND tx not ilike '%"status":{"Failure"%' ), refine as (
	SELECT * from base
	WHERE 1=1
	--AND NOT (clean_json:actions IS NOT NULL OR clean_json:msg:actions IS NOT NULL) ) SELECT
	 COUNT(tx_hash) as totals,
	min(tx_hash) as min_ex,
	max(tx_hash) as max_ex,
	method_name from refine group by method_name



=======================================================================================
=======================================================================================
QUERY_NO: 574
QUERY_ID: f1f6b4dd-db68-489e-8214-95b24db54e3f
QUERY_TITLE: [OP] L2 Summer Mainnet Activity

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	COUNT(DISTINCT a.sender) as totals
	, ddate::date as dates
	, CASE	WHEN mdate IS NULL THEN 'Optimism Only'
				WHEN mdate>ddate THEN 'Both/Optimism First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	GROUP BY dates, cat ORDER BY dates ASC  ) SELECT 
	dates
		, cat
	
	, totals
	, SUM(totals) OVER (PARTITION BY CAT ORDER BY dates ASC) as totals_cumulative from refine



=======================================================================================
=======================================================================================
QUERY_NO: 575
QUERY_ID: f2bb58d8-8e0c-4557-be8e-e3c1386eaf87
QUERY_TITLE: [Algo][Q1] Transaction Trends for Top ASAs

QUERY_STRING:

with top_txns as (
	  SELECT
	 
	COUNT(TX_ID) as totals,
	 
	asset_id
	  from algorand.transactions
	WHERE
		asset_id!=0 AND asset_id IS NOT NULL
	  GROUP BY asset_id ORDER BY totals DESC
	  LIMIT 20 ), top_txns_final as (
	SELECT totals, t1.asset_id, t2.asset_name
	  from top_txns as t1
	  LEFT JOIN algorand.asset as t2
	  ON t1.asset_id = t2.asset_id
	  ORDER BY totals DESC ), top_holders as (
	SELECT
	 
	COUNT(DISTINCT address) as holders,
	 
	asset_id, asset_name
	  from algorand.account_asset
	  WHERE
	 
	asset_closed = FALSE
	 
	AND frozen = FALSE
	  GROUP BY asset_id, asset_name ORDER BY holders DESC
	  LIMIT 20 ), mix as (
	  SELECT asset_id, asset_name, 'top holders' as criteria
	  from top_holders
	
	
	 UNION
	
	
	 SELECT asset_id, asset_name, 'top txns' as criteria
	  from top_txns_final ), top_asa as (
	  SELECT asset_name, MAX(ASSET_ID) as asset_id, MIN(criteria) as criteria from mix
	  GROUP BY asset_name ), top_asa_txns as (
		SELECT
	COUNT(tx_id) as totals,
				asset_id,
			block_id
				from algorand.transactions
				WHERE
					asset_id IN ( SELECT asset_id from top_asa)
			GROUP BY block_id, asset_id ), time_table as (
	  SELECT	t1.asset_id, t1.block_id, t2.block_timestamp, totals
	  from top_asa_txns as t1
	  LEFT JOIN algorand.block as t2
	  ON t1.block_id = t2.block_id ) SELECT
	date_trunc('week', block_timestamp) as ddate,
		SUM(totals) as totals,
		asset_name from time_table as t1 LEFT JOIN top_asa as t2 ON t1.asset_id = t2.asset_id GROUP BY ddate, asset_name



=======================================================================================
=======================================================================================
QUERY_NO: 576
QUERY_ID: f31eea11-501f-48be-8278-def8fd2aeb6d
QUERY_TITLE: Copy of [ALGO][Q3] Tinyman Debug

QUERY_STRING:

/* SELECT * from algorand.transactions WHERE 
	tx_id IN (SELECT* from tinyman_txns) LIMIT 50 */ with tinyman_assets as (
	  SELECT
	address, asset_name, asset_id,
	
			amount
	
	from algorand.account_asset
	
	WHERE
	
		(asset_name LIKE '%inyman%' AND asset_name LIKE '%ool%' AND asset_name like '%-ALGO') ) SELECT * from tinyman_assets LIMIT 50



=======================================================================================
=======================================================================================
QUERY_NO: 577
QUERY_ID: f2ee2d70-f85a-4413-b63e-4ee42da6d839
QUERY_TITLE: [ENS][Q3] Delagation Events

QUERY_STRING:

SELECT COUNT(DISTINCT tx_from_address) as totals from ethereum.events_emitted WHERE
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name = 'Claim'



=======================================================================================
=======================================================================================
QUERY_NO: 578
QUERY_ID: 81f8acbf-2b9c-45fa-95e4-65e2bb0e79ad
QUERY_TITLE: Sybils: CEX Deposit Clusters - B - Cluster Detail w/ FEEDBACK CHECK

QUERY_STRING:

-- forked from Sybils: CEX Deposit Clusters - B - Cluster Detail @ https://flipsidecrypto.xyz/edit/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , filter as ( --ALREADY REPORTED feedback loop
	with raw as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/418bc24a-71c9-4fd2-8db9-fbb7eb09e38d/latest-run') as resp
	  )
	select
	  value[0] as address
	from raw, lateral FLATTEN (input=> resp:data:result:rows) ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	AND from_address NOT IN (SELECT address from filter)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0x71f7544adeb03244261008e6cfa6365f6c46195f')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 579
QUERY_ID: f32a8e4f-a42a-4657-840e-f4aaaf34fd25
QUERY_TITLE: [NEAR] ETH TPS

QUERY_STRING:

with tps as (
	SELECT
	
	COUNT(*) as total,
		date_trunc('day', block_timestamp) as ddate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
		AND status = 'SUCCESS'
	GROUP BY ddate ) SELECT
	ddate,
	round(total/86400, 2) as tps from tps



=======================================================================================
=======================================================================================
QUERY_NO: 580
QUERY_ID: f6a3a0dc-1375-49a4-96b0-4f486cedca3e
QUERY_TITLE: [ENS][Q14] Registration Duration preference

QUERY_STRING:

with samples as (
	SELECT
	MIN(DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") )) as durations, 
			REPLACE(event_inputs:"name",'"','') as ens_name
	  from ethereum.events_emitted
	  WHERE
	
	
	contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
	
	
	AND (event_name = 'NameRegistered')
	
	
	--AND block_timestamp >= '2021-11-01' 
	GROUP by ens_name
	) SELECT
	COUNT(ens_name) as totals, durations from samples WHERE
	durations>=1 AND durations<=10 GROUP BY durations



=======================================================================================
=======================================================================================
QUERY_NO: 581
QUERY_ID: d50785db-40d4-4fc0-9193-3e74ef726543
QUERY_TITLE: [avax] TPS by Hour

QUERY_STRING:

with base as (
	SELECT
	COUNT(tx_hash) as txns,
		round(COUNT(tx_hash)/3600, 3) as TPS,
	date_trunc('hour', block_timestamp) as htime
	from avalanche.core.fact_transactions
	WHERE 1=1
		AND  block_timestamp >= '2022-06-20'
	GROUP by htime ) SELECT
	* from base



=======================================================================================
=======================================================================================
QUERY_NO: 582
QUERY_ID: f6cf1391-0c92-451b-9d23-6896f041c59a
QUERY_TITLE: [algo] Pairs debug

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ),
	 base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from tinyman_txns
						) ),
	 filter as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=5 THEN sender ELSE NULL END) as final_sender,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as asset_id_2,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
	 
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	 
	MAX(CASE WHEN order_num=5 THEN tx_message:txn:xaid ELSE NULL END) as pool_asset_id,
	
	
	CASE WHEN app_call_sender = final_sender THEN 'add' ELSE 'remove' END as cat,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT
	COUNT(DISTINCT tx_group_id) as total from filter WHERE	totals = 5



=======================================================================================
=======================================================================================
QUERY_NO: 583
QUERY_ID: d36c8c45-62d6-41f7-a114-7bcd21cc5a4f
QUERY_TITLE: REPORT # 14 DEBUG

QUERY_STRING:

-- forked from REPORT # 14 @ https://flipsidecrypto.xyz/edit/queries/e31a1b2f-cac9-49ff-95ad-0b4cdb51c970 -- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	
	 , tx_hash
	
	 , row_number() OVER (PARTITION BY from_address ORDER BY block_timestamp DESC ) as rank
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	  qualify rank=1
	)
	 ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, tx_hash as cex_txn_sample
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xef29688da54f5dd185201c6e50357ef4ca0004b3')
	AND txns IS NOT NULL ORDER BY txns DESC
	-- SELECT
	--
	
	to_address as deposit_wallet  --
	
	, project_name as cex  --
	
	, 'arbitrum' as cluster_src  --
	
	, from_address as cluster_member  --
	 from arbitrum.core.fact_token_transfers t  --
	 LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address  --
	 where 1=1  --
	
	  and dl.label_type='cex'  --
	
	  and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'  --
	
	  AND from_address IN (SELECT wallet from snap_senders)  --
	
	  AND deposit_wallet IN ('0xef29688da54f5dd185201c6e50357ef4ca0004b3')  --
	
	  --AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'  --
	 qualify row_number() OVER (PARTITION BY from_address ORDER BY block_timestamp DESC ) =1



=======================================================================================
=======================================================================================
QUERY_NO: 584
QUERY_ID: 4533387b-f6a8-406e-ac3e-36f6147b5af4
QUERY_TITLE: [ALGO] Defly Distribution

QUERY_STRING:

with base as (
	  SELECT
	address, amount/1e6 as abs_amount,
	
			CASE
	WHEN abs_amount<1
			THEN '<1'
	
					WHEN abs_amount>=1
			AND abs_amount<10
			THEN '1-10'
	
						WHEN abs_amount>=10
		AND abs_amount<100
			THEN '10-100'
	
						WHEN abs_amount>=100
		AND abs_amount<1000
		THEN '100-1K'
	
					WHEN abs_amount>=1000
		AND abs_amount<10000
		THEN '1K-10k'
	
						WHEN abs_amount>=10000
		AND abs_amount<100000
		THEN '10K-100k'
	
					WHEN abs_amount>=100000
	AND abs_amount<1000000
		THEN '100K-1M'
	
						WHEN abs_amount>=1000000
	AND abs_amount<10000000
	THEN '1M-10M'
	
					WHEN abs_amount>=10000000
	AND abs_amount<100000000
	THEN '10M-100M'
	
					WHEN abs_amount>=100000000
	AND abs_amount<1000000000
	THEN '100M-1B'
	
						WHEN abs_amount>=1000000000
	
						THEN '>=1B'
	
						END as category
	  from algorand.account_asset
	  WHERE
	 
	asset_id = '470842789'
	 
	AND asset_closed = FALSE
	
	
	AND frozen = FALSE
	 
	AND amount!=0
	
	) SELECT
	COUNT(*) as total_wallets,
			SUM(abs_amount) as total_tokens,
		category from base GROUP BY category ORDER BY total_wallets



=======================================================================================
=======================================================================================
QUERY_NO: 585
QUERY_ID: 477cf235-1cb0-4b96-a29d-0a181ccf54a5
QUERY_TITLE: [ALGO][Q78] AB2 Wallets Over Time

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), min_dates_wallets as (
	SELECT
		buyer,
		'1' as is_new,
		min(date_trunc('day',trade_close_date)) as ddate
	from filter_trades
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL
	GROUP BY buyer ), dates as ( SELECT
	COUNT(buyer) as wallets,
	ddate from min_dates_wallets GROUP BY ddate ) SELECT
	*,
	SUM(wallets) OVER (ORDER BY ddate ASC) as wallets_cumulative from dates



=======================================================================================
=======================================================================================
QUERY_NO: 586
QUERY_ID: fa912be8-2fd0-42d4-80a3-2da3d757b88d
QUERY_TITLE: [NEAR] Perf: Near Fails

QUERY_STRING:

with near as (
	SELECT
	
	date_trunc('day', block_timestamp) as ddate,
		COUNT(txn_hash) as total_txns,
		CASE	WHEN substr(tx_receipt[0]:"outcome":"status",3,7) != 'Success' THEN 'FAIL' ELSE 'SUCCESSFUL' END as types
	from flipside_prod_db.mdao_near.transactions
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
	GROUP BY ddate, types ) SELECT *  from near



=======================================================================================
=======================================================================================
QUERY_NO: 587
QUERY_ID: 48217235-f7b9-4670-8032-04d8b365e6e2
QUERY_TITLE: [ENS][Q4] ENS Revenue 2022-23

QUERY_STRING:

with debug as (
	select * from ethereum.events_emitted
	WHERE
		block_timestamp >= CURRENT_DATE - 180
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		LIMIT 100 ), raw_events as (
	SELECT
	ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		CASE WHEN DATEDIFF( 'day', '2022-01-01', DATE(event_inputs:"expires") ) > 365 THEN 365 ELSE DATEDIFF( 'day', '2022-01-01', DATE(event_inputs:"expires") ) END as days,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
			WHEN 2 THEN 640
				WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND DATE(event_inputs:"expires") >= '2022-01-01'
	), final_events as (
	SELECT SUM(ROUND( (days/365)* base_cost, 3)) as revenue from raw_events ) SELECT * from final_events



=======================================================================================
=======================================================================================
QUERY_NO: 588
QUERY_ID: 49b01f5c-9de8-41db-bd80-cce8d3ed26a2
QUERY_TITLE: Lofty - Total Properties

QUERY_STRING:

with loft_asas as (
	SELECT asset_name, asset_url,total_supply,total_supply*50 as TTIP, asset_id
	from algorand.asset
	WHERE
		creator_address = 'LOFTYRITC3QUX6TVQBGT3BARKWAZDEB2TTJWYQMH6YITKNH7IOMWRLC7SA'
			AND (ASSET_NAME IS NOT NULL AND asset_name!='Lofty AI') ) SELECT
	COUNT(asset_id)	as total_properties from loft_asas



=======================================================================================
=======================================================================================
QUERY_NO: 589
QUERY_ID: 4a11aff9-9ab6-4f33-a615-3c76b1e47eb4
QUERY_TITLE: [ALGO] Defly Tinyman Base Stats

QUERY_STRING:

with tinyman_txns as (
	SELECT tx_group_id, sender
	from algorand.application_call_transaction
		WHERE
			app_id =  '552635992'
			AND block_id >= '18718205' ), defly_txns as (
	SELECT tx_group_id
		from algorand.asset_transfer_transaction
	WHERE
		asset_id = '470842789'
		AND tx_group_id IN ( SELECT tx_group_id from tinyman_txns) ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from defly_txns
						)
			AND block_id >= '18718205' ), filter_buys as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
		MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter_sells as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
			MAX(block_timestamp) as block_timestamp,
	
	
	MAX(CASE WHEN order_num=1 THEN sender ELSE NULL END) as wallet,
	 
	MAX(CASE WHEN order_num=2 THEN sender ELSE NULL END) as app_call_sender,
	 
	MAX(CASE WHEN order_num=4 THEN sender ELSE NULL END) as final_sender,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:xaid ELSE NULL END) as token_id,
	
	
	MAX(CASE WHEN order_num=3 THEN tx_message:txn:aamt ELSE NULL END) as token_amount,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), filter as (
	SELECT * , 'buy' as side from filter_buys
	WHERE
		totals = 4 AND algo_amount IS NOT NULL
	UNION ALL
		SELECT * , 'sell' as side from filter_sells
	WHERE
		totals = 4 AND algo_amount IS NOT NULL ), pre_final as (
	  SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	
	
		AVG(algo_amount) as avg_algo_swapped,
			SUM(algo_amount) as total_algo_volume,
	
	
		token_id,
	 
		asset_name
	  from filter
	  LEFT JOIN  algorand.asset ass ON filter.token_id = ass.asset_id
	  WHERE
	
		totals = 4 AND algo_amount IS NOT NULL
	  GROUP BY token_id,asset_name ORDER BY total_wallets DESC
	  LIMIT 1 ) SELECT * from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 590
QUERY_ID: 49ebc88c-dc12-4bae-adfd-5a62af227809
QUERY_TITLE: [BANKLESS][Q2] Dex Swaps  - Tokens Swapped

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT' ), base_groups as (
	SELECT *,
	row_number() OVER(Partition BY tx_id ORDER BY event_index ASC) as row_num
	from ethereum.dex_swaps
	WHERE
	tx_id IN (SELECT * from swap_outs) ), groups as (
	SELECT
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN pool_name ELSE NULL END) as final_pool,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN amount_out ELSE NULL END) as amount_vol,
	MAX(CASE WHEN (row_num IN (1,2) AND direction='IN' AND token_address!='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198') THEN token_address ELSE NULL END) as swap_token,
		MAX(CASE WHEN (row_num IN (1,2) AND direction='IN' AND token_address!='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198')  THEN pool_name ELSE NULL END) as swap_pool,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN platform ELSE NULL END) as platform,
	tx_id
	 from base_groups
	GROUP BY tx_id ), balances as (
	SELECT DISTINCT contract_address, symbol as name
		from ethereum.erc20_balances
		WHERE
		balance_date = '2022-03-01' ), results as (
	SELECT
	COUNT(tx_id) as totals,
		SUM(amount_vol) as volume,
	regexp_substr(final_pool,'^(\\w+-\\w+)', 1, 1, 'e', 1) as final_pool,
	name as input_token,
	swap_token,
	platform
	from groups g
	--LEFT JOIN ethereum.contracts c ON g.swap_token = c.address
	LEFT JOIN balances b ON g.swap_token = b.contract_address
	WHERE SWAP_TOKEN IS NOT NULL
	GROUP BY final_pool, platform, input_token, swap_token ), totals as (
	SELECT
	SUM(totals) as total_d,
		SUM(volume) as total_v
	from results ) SELECT
	totals,
		volume,
	CASE WHEN (totals/total_d)*100 <= 0.5 THEN 'OTHER' ELSE input_token END as input_token,
		CASE WHEN (volume/total_v)*100 <= 0.5 THEN 'OTHER' ELSE input_token END as input_token_v from results r LEFT JOIN totals t ON 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 591
QUERY_ID: fb054007-107f-428b-84a9-2a03bb9961d8
QUERY_TITLE: [ALGO][Q78] AB2 Wallets Base

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT COUNT(DISTINCT buyer) as wallets from filter_trades WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL



=======================================================================================
=======================================================================================
QUERY_NO: 592
QUERY_ID: fb9ecee8-d2a9-48bf-bddc-42d5b8fe49ea
QUERY_TITLE: [ENS][Q2] % Airdrop Not Moved

QUERY_STRING:

with wallets as (
	  SELECT origin_address,
	
		MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer')  THEN AMOUNT/1e18 ELSE 0 END) as tokens_in,
	 
	MAX(CASE WHEN (origin_address = to_address AND origin_function_signature = '0x76122903' AND event_type = 'erc20_transfer') THEN 0 ELSE AMOUNT/1e18 END) as tokens_out
	  FROM ethereum.udm_events
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND block_timestamp >= CURRENT_DATE - 180
		AND event_type = 'erc20_transfer'
	  GROUP BY origin_address ) SELECT
	SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END)/(25*1e6) * 100 as not_moved_per,
		SUM(CASE WHEN (tokens_in!=0 AND tokens_out=0)  THEN tokens_in ELSE 0 END) as not_moved_tokens from wallets WHERE
	tokens_in!=0



=======================================================================================
=======================================================================================
QUERY_NO: 593
QUERY_ID: 52d1a1ea-be29-446f-b2c8-f1ec6660ce27
QUERY_TITLE: [NEAR][T3] Ref Base Swaps

QUERY_STRING:

with base as (
	SELECT
	
	a.tx_hash,
		action_name,
		method_name,
		tx_signer,
		tx_receiver,
		replace(args, '\\') as args2,
		replace( replace(args2, '\:\"\{\"', '\:\{\"'), '\}\"', '\}') as args_cleaned,
		TRY_PARSE_JSON(args_cleaned) as clean_json,
		tx
	from near.core.fact_actions_events_function_call a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	WHERE 1=1
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	AND tx not ilike '%"status":{"Failure"%' ), refine as (
	SELECT * from base
	WHERE 
	(clean_json:actions IS NOT NULL OR clean_json:msg:actions IS NOT NULL)
		AND method_name!='swap' )
	SELECT
	
	COUNT(tx_hash) as totals,
		min(tx_hash) as min_ex,
		max(tx_hash) as max_ex,
		method_name
	from refine
	group by method_name SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 594
QUERY_ID: 535bf771-d2a2-43de-a632-f9cd87e0cf51
QUERY_TITLE: Top 10 delegates ( By sum of voting power across proposals )

QUERY_STRING:

with top_10 as (
		select 
		sum(voting_power) as v_pow,
	
		voter 
	from aave.votes
	GROUP by voter
	ORDER by v_pow desc 
	limit 10
	) , mapper as (
	SELECT
	DISTINCT(from_address) as voter, from_address_name, from_label, from_label_subtype
		from ethereum.transactions
	WHERE voter in (SELECT voter from top_10) )
	 SELECT tt.voter as voter, v_pow from top_10 as tt



=======================================================================================
=======================================================================================
QUERY_NO: 595
QUERY_ID: 461615c6-3d8e-4041-8eba-7e9eebcd2bfb
QUERY_TITLE: daily stats

QUERY_STRING:

with delegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0xbd168b3c3bbaaec0a4f5dd4a388ebf8883a952ddf73cd109a065c2a13234f584'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesIncreased'
	)
	
	SELECT
	  dtime::date as ddate
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY ddate ) , undelegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0x53530454455c30b97f6185419b3151ecfcca0a9d50ea465ddd6967d81cca3354'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesDecreased'
	)
	
	SELECT
	  dtime::date as ddate
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY ddate ) , merge as (
	SELECT * , 'delegations' as label from delegations
	UNION ALL
	 SELECT *, 'undelegations' as label from undelegations ) , daily_stats as (
	SELECT
	
	ddate
	  , label
	  , SUM(CASE WHEN label='delegations' THEN stake ELSE stake*-1 END) as amounts
	from merge
	GROUP BY ddate,label ORDER BY ddate ASC, label ASC  ) , net_sums as (
	SELECT
	
	ddate
	  , SUM(amounts) as net_flow
	  --, SUM(amounts) OVER (ORDER BY DDATE ASC) as total_stake
	from daily_stats
	GROUP BY ddate ) SELECT
	 d.ddate
	, label
	 , amounts  from daily_stats d ORDER BY DDATE ASC, LABEL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 596
QUERY_ID: fed21089-7259-480a-83e0-9c700d3510d5
QUERY_TITLE: Copy of [PoolT] USDC - Deposit Amounts Per Day

QUERY_STRING:

with base as (
	SELECT *
	 from ethereum.core.ez_token_transfers
	WHERE 1=1
		AND block_timestamp BETWEEN '2022-05-01' AND '2022-06-20'
		AND to_address = lower('0xd89a09084555a7D0ABe7B111b1f78DFEdDd638Be')
		AND symbol ='USDC'
		AND origin_function_signature = '0xd7a169eb' ), day_stats as (
	SELECT
	
	COUNT(DISTINCT FROM_ADDRESS) as wallets,
		COUNT(tx_hash) as txns,
		date_trunc('day', block_timestamp) as ddate
	from base
	group by ddate order by ddate ASC ) SELECT
	*,
	SUM(amt_usd) OVER ( ORDER BY DDATE ASC) as usd_amt_cumulative from day_stats



=======================================================================================
=======================================================================================
QUERY_NO: 597
QUERY_ID: febfa263-635e-473a-a8eb-97c256c691e9
QUERY_TITLE: [wormhole] Shuttle Users & Wormhole ( Pre WH)

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			
			AND block_timestamp <'2021-10-20'
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			--AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp < '2021-10-20'
			AND block_timestamp <= '2022-01-10' ), total_shuttle_users_pre as (
	SELECT address, shuttle_date from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MAX(shuttle_date) as shuttle_date
		from total_shuttle_users_pre
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), min_wh_user as (
	  SELECT	msg_value:sender as sender,
	
	
	 
	MIN(date_trunc('day', block_timestamp)) as wh_date
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10'
	  GROUP by sender ), common_user as ( SELECT
	sender, wh_date, shuttle_date,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.sender = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ), pre_output as ( SELECT
	COUNT(DISTINCT SENDER) as total_wh_adopters,
		AVG(w_diff) as avg_adoption_weeks,
		AVG(d_diff) as avg_adoption_dayss from common_user ) SELECT * from  pre_output



=======================================================================================
=======================================================================================
QUERY_NO: 598
QUERY_ID: e31a1b2f-cac9-49ff-95ad-0b4cdb51c970
QUERY_TITLE: REPORT # 14

QUERY_STRING:

-- forked from Cluster Details  @ https://flipsidecrypto.xyz/edit/queries/62e5c11d-1412-425c-827b-14cee4674420 -- forked from Sybils: CEX Deposit Clusters - A - Overview @ https://flipsidecrypto.xyz/edit/queries/7b449cdc-ce21-48a8-a5a3-52899727ebed -- ARKHAM LINK: https://platform.arkhamintelligence.com/visualizer/entity/0xeF29688Da54f5Dd185201C6e50357Ef4Ca0004b3?flow=all&positions=%7B%7D&sortDir=desc&sortKey=time&usdGte=0.1 with snap_senders as (
	  SELECT
	
	  DISTINCT sender_wallet as wallet
	  FROM external.layerzero.fact_transactions_snapshot
	  WHERE 1=1 ) , cluster_detail as (
	(
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'arbitrum' as cluster_src
	
	 , from_address as cluster_member
	  from arbitrum.core.fact_token_transfers t
	  LEFT JOIN arbitrum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'base' as cluster_src
	
	 , from_address as cluster_member
	  from base.core.fact_token_transfers t
	  LEFT JOIN base.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , NULL as cex
	
	 , 'ethereum' as cluster_src
	
	 , from_address as cluster_member
	  from ethereum.core.fact_token_transfers t
	  LEFT JOIN ethereum.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'optimism' as cluster_src
	
	 , from_address as cluster_member
	  from optimism.core.fact_token_transfers t
	  LEFT JOIN optimism.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	)
	UNION ALL
	 (
	  SELECT
	
	  DISTINCT to_address as deposit_wallet
	
	 , project_name as cex
	
	 , 'polygon' as cluster_src
	
	 , from_address as cluster_member
	  from polygon.core.fact_token_transfers t
	  LEFT JOIN polygon.core.dim_labels dl on t.to_address=dl.address
	  where 1=1
	
	
	and dl.label_type='cex'
	
	
	and dl.label_subtype IN ('deposit_wallet') --, 'hot_wallet'
	
	
	AND from_address IN (SELECT wallet from snap_senders)
	
	
	--AND to_address = '0x95dcf8372dceb2a43478d590872c9d27cf43dd84'
	) ) , lz_data as (
	SELECT
	SENDER_WALLET as sender
	, MIN(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as min_lz_date
	, MAX(date_trunc('day', SOURCE_TIMESTAMP_UTC)) as max_lz_date
	, COUNT(*) as txns
	 , COUNT(DISTINCT project) as projects_interacted
	, SUM(COALESCE(NATIVE_DROP_USD, 0)) as native_drop
	, SUM(COALESCE(STARGATE_SWAP_USD, 0)) as stg_swap_usd
	, native_drop + stg_swap_usd as vol_usd
	from external.layerzero.fact_transactions_snapshot
	WHERE 1=1
	  and SENDER_WALLET IN (SELECT cluster_member from cluster_detail)
	GROUP BY sender ) SELECT
	 DEPOSIT_WALLET
	, CEX
	, CLUSTER_SRC
	, CLUSTER_MEMBER
	, min_lz_date
	, max_lz_date
	, txns
	 , projects_interacted
	, native_drop
	, stg_swap_usd
	, vol_usd from cluster_detail c LEFT JOIN lz_data d on c.cluster_member=d.sender WHERE 1=1
	AND deposit_wallet IN ('0xef29688da54f5dd185201c6e50357ef4ca0004b3')
	AND txns IS NOT NULL ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 599
QUERY_ID: fecfb7e6-da83-4e75-ba50-7a75353924bf
QUERY_TITLE: [ALGO][Q69] Folks Borrows Daily Volumes

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		bor_asset_amt*bor_price as volume_usd,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ) SELECT SUM(volume_usd) as volume_usd,
	bor_name,
	dddate from pre_final_cdp GROUP BY dddate, bor_name



=======================================================================================
=======================================================================================
QUERY_NO: 600
QUERY_ID: fede9f37-5bc6-4952-a6f0-7bc464163592
QUERY_TITLE: [AAVE] [Q19] Master Search

QUERY_STRING:

 updated,with total_flash as (
	SELECT
	
		SUM(FLASHLOAN_AMOUNT_USD) as total_sum,
	
		COUNT(tx_id) as total_counts,
			date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
		block_timestamp >= CURRENT_DATE - 720
	  GROUP BY mdate
	 ) , ds_data as (
		SELECT
	
		SUM(FLASHLOAN_AMOUNT_USD) as total_sum,
	
		COUNT(tx_id) as total_counts,
			date_trunc('month', block_timestamp) as mdate
	from aave.flashloans
	WHERE 
		block_timestamp >= CURRENT_DATE - 720
	 
	AND initiator_address in (	'0x46aafdbc76a8b412909985d0a2c51073ff33c02e', '0xaed662abcc4fa3314985e67ea993cad064a7f5cf',
										'0xa5d330f6619d6bf892a5b87d80272e1607b3e34d' )
		GROUP BY mdate  ) SELECT 
	*, 'AAVE Total' as label FROM total_flash
	 UNION
	  SELECT 
	*, 'DefiSaver' as label FROM ds_data



=======================================================================================
=======================================================================================
QUERY_NO: 601
QUERY_ID: 601aa50b-628c-4ebd-ac38-b06db607cf31
QUERY_TITLE: [ALGO][Q35] Top 10 Popular ASAs (wagmiswap)

QUERY_STRING:

with base as (
	SELECT
		COUNT(DISTINCT tx_group_id) as total_swaps,
		COUNT(DISTINCT swapper) as unique_wallets,
		swap_to_asset_id as swap_to,
		SWAP_PROGRAM as app
	from algorand.swaps
	WHERE
		(block_timestamp>='2022-01-01' AND block_timestamp<='2022-03-20')
		--AND swap_from_asset_id = 0
		AND swap_to_asset_id!=0
		AND swap_from_amount>0
	AND swap_to_amount>0
	GROUP BY swap_to, app ) SELECT
	app,
	asset_name,
	total_swaps,
	unique_wallets,
	row_number() OVER (PARTITION by app ORDER BY total_swaps DESC) as rno from base b LEFT JOIN algorand.asset a ON b.swap_to = a.asset_id WHERE
	app = 'wagmiswap' qualify rno <= 10 ORDER BY rno



=======================================================================================
=======================================================================================
QUERY_NO: 602
QUERY_ID: 60c17e0d-f570-44b5-a1e4-fb151e19d866
QUERY_TITLE: [ANCHOR][Q123] Average Anchor D/B

QUERY_STRING:

with wdeps as ( SELECT
	AVG(deposit_amount_usd) as usd_dep,
		date_trunc('week', block_timestamp) as wdate from anchor.deposits WHERE
	block_timestamp>'2021-01-01' AND block_timestamp<'2021-12-31' GROUP BY wdate ), wborrs as ( SELECT
	AVG(amount_usd) as usd_borr,
		date_trunc('week', block_timestamp) as wdate from anchor.borrows WHERE
	block_timestamp>'2021-01-01' AND block_timestamp<'2021-12-31' GROUP BY wdate ) SELECT wdeps.wdate, usd_dep, usd_borr from wdeps  JOIN wborrs ON wborrs.wdate=wdeps.wdate



=======================================================================================
=======================================================================================
QUERY_NO: 603
QUERY_ID: 05eff601-75eb-4db5-bcac-283ea5732b26
QUERY_TITLE: NFT Markets User Total Actions

QUERY_STRING:

-- forked from NFT Markets User Behavior Buy/Sell Types @ https://flipsidecrypto.xyz/edit/queries/4821d8dc-1bce-4eae-be6a-9e67c57cb82f -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users_dupe as (
	SELECT
	  TO_VARCHAR(purchaser) as user
	  , MAX(NULL) as sales
	  , COUNT(*) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user
	
	UNION ALL
	
	 SELECT
	  TO_VARCHAR(seller) as user
	  , COUNT(*) as sales
	  , MAX(NULL) as purchases
	  , SUM(CASE WHEN marketplace='wapal' THEN 1 ELSE 0 END) as c_wapal
	  , SUM(CASE WHEN marketplace='topaz' THEN 1 ELSE 0 END) as c_topaz
	  , SUM(CASE WHEN marketplace LIKE 'bluemove%' THEN 1 ELSE 0 END) as c_bluemove
	from sales_mixer
	GROUP BY user ) , refine_users as (
	SELECT
	
	user
	  , coalesce(SUM(sales), 0) as sales
	  , coalesce(SUM(purchases),0) as purchases
	  , SUM(c_wapal) as c_wapal
	  , SUM(c_topaz) as c_topaz
	  , SUM(c_bluemove) as c_bluemove
	from users_dupe
	GROUP BY user ) SELECT
	  CASE WHEN sales+purchases=1 THEN 'just 1'
	
	  WHEN sales+purchases between 2 and 5 THEN '2-5'
	
	  WHEN sales+purchases between 6 and 20 THEN '6-20'
	
	  ELSE '21 or more' END as cat
	, COUNT(DISTINCT user) as users from refine_users  GROUP BY cat



=======================================================================================
=======================================================================================
QUERY_NO: 604
QUERY_ID: 615a662f-ac85-4e69-985c-e93726c14561
QUERY_TITLE: [ALGO][Q69] Folks Borrows CDP Base Avg

QUERY_STRING:

with groups as (
	SELECT
	
	DISTINCT tx_group_id, block_timestamp
	from flipside_prod_db.algorand.application_call_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(tx_message:txn:apaa[0]::STRING) = 'b' ), pre_filter as (
	SELECT
		*,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY intra) as rank
	from flipside_prod_db.algorand.transactions
	WHERE
		tx_group_id IN (SELECT tx_group_id from groups)
	
	qualify rank IN (4,6) ), borrows as (
	SELECT
		MAX(CASE
	WHEN rank=4 THEN asset_id ELSE NULL END) as bor_asset,
		MAX(CASE
	
				WHEN rank=4 AND asset_id= 0 THEN tx_message:txn:amt/1e6
				WHEN rank=4 AND asset_id in (386192725, 386195940) THEN tx_message:txn:aamt/1e8
				WHEN rank=4 AND asset_id in (31566704, 312769, 694432641) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as bor_asset_amt,
	
		MAX(CASE WHEN rank=6 THEN asset_id ELSE NULL END) as col_asset,
		--map fAsset to usual ID:
		MAX(CASE
				WHEN rank=6 AND asset_id= 686505742 THEN 0
				WHEN rank=6 AND asset_id= 686508050 THEN 31566704
				WHEN rank=6 AND asset_id= 686509463 THEN 312769
				WHEN rank=6 AND asset_id= 686510134 THEN 386192725
				WHEN rank=6 AND asset_id= 694408528 THEN 386195940
				WHEN rank=6 AND asset_id= 694474015 THEN 694432641
				ELSE NULL END) as  col_asset_norm,
		MAX(CASE
	
				WHEN rank=6 AND asset_id=686505742 THEN tx_message:txn:aamt/1e6
				WHEN rank=6 AND asset_id in (686510134, 694408528) THEN tx_message:txn:aamt/1e8
				WHEN rank=6 AND asset_id in (686508050, 686509463, 694474015) THEN tx_message:txn:aamt/1e6
				ELSE NULL END ) as col_asset_amt,
		COUNT(tx_id) as totals,
		MAX(block_timestamp) as ddate,
		tx_group_id
	from pre_filter
	group by tx_group_id ), prices as (
	SELECT
	
	AVG(price_usd) as price,
		ASSET_NAME,
		ASSET_ID,
		date_trunc('day', block_hour) as ddate
	from flipside_prod_db.algorand.prices_swap
	WHERE
		asset_id IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
		AND block_hour>='2022-04-02' GROUP BY ddate, asset_name, ASSET_ID ORDER BY ddate ), pre_final_cdp as (
	SELECT
	
	date_trunc('day', b.ddate) as dddate,
		bor_asset,
		bor_asset_amt,
		p.price as bor_price,
		p.asset_name as bor_name,
		col_asset,
		col_asset_norm,
		col_asset_amt,
		c.asset_name as col_name,
		c.price as col_price,
		--UPPER LIMIT for sanity
		CASE
	
		WHEN round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) >=10 THEN 10.00
	
		ELSE round(((col_asset_amt*col_price)/(bor_asset_amt*bor_price)), 2) END as CDP_RATIO,
		bor_asset_amt*bor_price as volume,
		tx_group_id as txn
	from borrows b
	 LEFT JOIN prices p on date_trunc('day', b.ddate) = p.ddate AND bor_asset = p.asset_id
	LEFT JOIN prices c on date_trunc('day', b.ddate) = c.ddate AND col_asset_norm = c.asset_id
	WHERE
	bor_asset IN (0, 31566704, 312769, 386192725, 386195940, 694432641)
	AND col_asset_norm IN (0, 31566704, 312769, 386192725, 386195940, 694432641) ) SELECT AVG(CDP_RATIO) as avg_cdp,
	bor_name from pre_final_cdp GROUP BY bor_name



=======================================================================================
=======================================================================================
QUERY_NO: 605
QUERY_ID: 61da73b1-f734-4fb0-9800-2142f889f109
QUERY_TITLE: [BANKLESS] DEBUG #2

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT'
			AND tx_id = '0x26be3f9f3c828943035b9aeab7658be035db399ce9db0a305b3528fbd0cad509' ), base as ( SELECT *,
	row_number() OVER(Partition BY tx_id ORDER BY event_index ASC) as row_num from ethereum.dex_swaps WHERE
	tx_id IN (SELECT * from swap_outs) ), groups as (
	SELECT
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN pool_name ELSE NULL END) as final_pool,
	MAX(CASE WHEN (row_num=1 AND direction='IN') THEN token_address ELSE NULL END) as swap_token,
		MAX(CASE WHEN (row_num=1 AND direction='IN')  THEN pool_name ELSE NULL END) as swap_pool,
		MAX(CASE WHEN token_address='0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198' AND direction='OUT' THEN platform ELSE NULL END) as platform,
	tx_id
	 from base
	GROUP BY tx_id ) SELECT * from base LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 606
QUERY_ID: c2870524-9f3b-4c07-afb3-03481538fbcb
QUERY_TITLE: dummy search

QUERY_STRING:

with base as (
	SELECT
	
	'dummy table' as field
	 FROM ethereum.core.fact_transactions
	LIMIT 1
	 ) , base2 as (
	SELECT
	
	'dummy table' as field
	 FROM optimism.core.fact_transactions
	LIMIT 1
	 ) , base3 as (
	SELECT
	
	'dummy table' as field
	 FROM arbitrum.core.fact_transactions
	LIMIT 1
	 ) , base4 as (
	SELECT
	
	'dummy table' as field
	 FROM near.core.fact_transactions
	LIMIT 1
	 ) , base4 as (
	SELECT
	
	'dummy table' as field
	 FROM solana.core.fact_transactions
	LIMIT 1
	 ) SELECT * from base4



=======================================================================================
=======================================================================================
QUERY_NO: 607
QUERY_ID: 62505ba1-3d45-4835-a900-94fe5a5af2fa
QUERY_TITLE: [ThorChain][38] Rune Upgrades - 2022 First Week Charts

QUERY_STRING:

SELECT
	date_trunc('week', block_timestamp) as wdate,
		COUNT(DISTINCT from_address) as wallets,
			SUM(RUNE_AMOUNT) as total_rune,
		SUM(RUNE_AMOUNT_USD) as total_usd,
			AVG(wallets) OVER (ORDER BY wdate ASC) as avg_daily_wallets,
			AVG(total_rune) OVER (ORDER BY wdate ASC) as avg_daily_rune
		 from thorchain.upgrades WHERE block_timestamp >= '2021-12-01' AND  block_timestamp <= '2022-01-07' GROUP BY wdate ORDER BY wdate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 608
QUERY_ID: 5cf2d6da-e821-4fc8-a55a-1e8a76864c54
QUERY_TITLE: [algo] Tinyman LP Actions

QUERY_STRING:

with base as (
	SELECT
		CASE
			WHEN tx_message:txn:apaa[0] = 'bWludA==' THEN 'mint'
			ELSE 'burn' END as types,
		get(tx_message:txn:apas, array_size(tx_message:txn:apas)-1) as lp_token,
			block_timestamp as bt,
			tx_id, tx_group_id
	FROM algorand.application_call_transaction 
	WHERE
		tx_message:txn:apaa[0] IN ('bWludA==', 'YnVybg==') -- mint, burn
		AND app_id = 552635992 ) SELECT
	date_trunc('day', bt) as ddate,
	types,
	COUNT(DISTINCT tx_group_id) as totals from base GROUP BY ddate,types ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 609
QUERY_ID: 688d8ac9-0886-4c87-9b59-8b2fc9eb1f26
QUERY_TITLE: Top 10 delegates ( By Max. Voting power in a proposal )

QUERY_STRING:

with top_10 as (
		select 
		MAX(voting_power) as v_pow,
	
		voter 
	from aave.votes
	GROUP by voter
	ORDER by v_pow desc 
	limit 10
	) , mapper as (
	SELECT 
		DISTINCT(from_address) as voter, from_address_name, from_label, from_label_subtype
		from ethereum.udm_events
	WHERE voter in (SELECT voter from top_10) )
	 SELECT tt.voter as voter, v_pow from top_10 as tt



=======================================================================================
=======================================================================================
QUERY_NO: 610
QUERY_ID: ebb67ef1-188e-4ea3-9779-efc9afa8e45c
QUERY_TITLE: Quarterly Comparisons Strings+Emojis

QUERY_STRING:

-- forked from Quarterly Comparisons @ https://flipsidecrypto.xyz/studio/queries/a281ac54-d871-4f7f-8163-7a5460149da8 with ranges as (
	SELECT
	
	TO_TIMESTAMP_NTZ('{{start_date}}') as start_date
	  , 4 as quarters
	
	UNION ALL
	
	 SELECT
	
	DATEADD('month', -3, start_date), quarters-1
	from ranges
	WHERE
	
	quarters>1 ) , q1_data as (
	with q1_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q1_merge ) , q2_data as (
	with q2_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q2_merge ) , q3_data as (
	with q3_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q3_merge ) , q4_data as (
	with q4_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q4_merge ) , q1_data_str as (
	SELECT
	
	*
	  , TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') as total_volume_str
	  , TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') as total_orders_str
	  , TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') as unique_traders_str
	  , TO_VARCHAR(TO_NUMBER(total_fees),'999,999,999,999,999.00') as total_fees_str
	from q1_data ) , q2_data_str as (
	SELECT
	
	c.label
	  , c.total_volume
	  , c.total_orders
	  , c.unique_traders
	  , c.total_fees
	  , ROUND(((c.total_volume-p.total_volume)/p.total_volume)*100, 2) as vol_delta
	  , ROUND(((c.total_orders-p.total_orders)/p.total_orders)*100, 2) as orders_delta
	  , ROUND(((c.unique_traders-p.unique_traders)/p.unique_traders)*100, 2) as unique_traders_delta
	  , ROUND(((c.total_fees-p.total_fees)/p.total_fees)*100, 2) as total_fees_delta
	  , to_varchar(TO_NUMBER(c.total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)' as total_volume_str
	  , to_varchar(TO_NUMBER(c.total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)' as total_orders_str
	  , to_varchar(TO_NUMBER(c.unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN unique_traders_delta>=0 THEN '↗️' ELSE '🔻' END) || unique_traders_delta || '%)' as unique_traders_str
	  , to_varchar(TO_NUMBER(c.total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN total_fees_delta>=0 THEN '↗️' ELSE '🔻' END) || total_fees_delta || '%)' as total_fees_str
	from q2_data c
	 LEFT JOIN q1_data p on 1=1 ) , q3_data_str as (
	SELECT
	
	c.label
	  , c.total_volume
	  , c.total_orders
	  , c.unique_traders
	  , c.total_fees
	  , ROUND(((c.total_volume-p.total_volume)/p.total_volume)*100, 2) as vol_delta
	  , ROUND(((c.total_orders-p.total_orders)/p.total_orders)*100, 2) as orders_delta
	  , ROUND(((c.unique_traders-p.unique_traders)/p.unique_traders)*100, 2) as unique_traders_delta
	  , ROUND(((c.total_fees-p.total_fees)/p.total_fees)*100, 2) as total_fees_delta
	  , to_varchar(TO_NUMBER(c.total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)' as total_volume_str
	  , to_varchar(TO_NUMBER(c.total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)' as total_orders_str
	  , to_varchar(TO_NUMBER(c.unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN unique_traders_delta>=0 THEN '↗️' ELSE '🔻' END) || unique_traders_delta || '%)' as unique_traders_str
	  , to_varchar(TO_NUMBER(c.total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN total_fees_delta>=0 THEN '↗️' ELSE '🔻' END) || total_fees_delta || '%)' as total_fees_str
	from q3_data c
	 LEFT JOIN q2_data p on 1=1 ) , q4_data_str as (
	SELECT
	
	c.label
	  , c.total_volume
	  , c.total_orders
	  , c.unique_traders
	  , c.total_fees
	  , ROUND(((c.total_volume-p.total_volume)/p.total_volume)*100, 2) as vol_delta
	  , ROUND(((c.total_orders-p.total_orders)/p.total_orders)*100, 2) as orders_delta
	  , ROUND(((c.unique_traders-p.unique_traders)/p.unique_traders)*100, 2) as unique_traders_delta
	  , ROUND(((c.total_fees-p.total_fees)/p.total_fees)*100, 2) as total_fees_delta
	  , to_varchar(TO_NUMBER(c.total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)' as total_volume_str
	  , to_varchar(TO_NUMBER(c.total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)' as total_orders_str
	  , to_varchar(TO_NUMBER(c.unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN unique_traders_delta>=0 THEN '↗️' ELSE '🔻' END) || unique_traders_delta || '%)' as unique_traders_str
	  , to_varchar(TO_NUMBER(c.total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN total_fees_delta>=0 THEN '↗️' ELSE '🔻' END) || total_fees_delta || '%)' as total_fees_str
	from q4_data c
	 LEFT JOIN q3_data p on 1=1 ) , merged_data as (
	SELECT label, total_volume_str, total_orders_str, unique_traders_str, total_fees_str from q1_data_str
	UNION ALL
	SELECT label, total_volume_str, total_orders_str, unique_traders_str, total_fees_str from q2_data_str
	UNION ALL
	SELECT label, total_volume_str, total_orders_str, unique_traders_str, total_fees_str from q3_data_str
	UNION ALL
	 SELECT label, total_volume_str, total_orders_str, unique_traders_str, total_fees_str from q4_data_str ) , merged_data_fix as (
	SELECT
	  label
	  , (MAX(unique_traders_str)) AS unique_traders
	  , (MAX(total_orders_str)) AS total_orders
	  , (MAX(total_volume_str)) as total_volume
	  , (MAX(total_fees_str)) as total_fees
	from merged_data
	GROUP BY 1 ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM merged_data_fix
	UNPIVOT (VALUE FOR METRIC IN ( unique_traders, total_orders, total_volume, total_fees)) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from merged_data_fix) ) --SELECT * from merged_data --SELECT * from q2_data_str



=======================================================================================
=======================================================================================
QUERY_NO: 611
QUERY_ID: 69531154-b2c3-481b-871a-35d5639f5e9d
QUERY_TITLE: [ENS][Q4] Price & Claims Minus (First Week

QUERY_STRING:

 minus launch day),with claims_t as ( SELECT COUNT(distinct origin_address) as "claims", contract_address as token_address, date_trunc('hour', block_timestamp)  as hours FROM ethereum.udm_events  WHERE
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name='Claim'
	AND block_timestamp >= CURRENT_DATE - 60
	AND block_timestamp < '2021-11-16' AND block_timestamp >= '2021-11-10' GROUP BY hours,token_address ), ens_prices as (
	SELECT hour as hours, token_address, price
	  FROM ethereum.token_prices_hourly
	
	WHERE
	 
	token_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND hour >= CURRENT_DATE - 60 
		 ) SELECT "claims", claims_t.hours, price from claims_t INNER JOIN ens_prices  ON ens_prices.token_address=claims_t.token_address AND ens_prices.hours=claims_t.hours



=======================================================================================
=======================================================================================
QUERY_NO: 612
QUERY_ID: 6b01c256-b7e9-461a-825a-5b82960cca5d
QUERY_TITLE: [SOL][Q2] Sol transfers

QUERY_STRING:

SELECT * from solana.transfers WHERE
		tx_id = '2CV9PKd37wwM65jBfBQ4gzG7G6bPpZU62WApVBKpS7DUfs72S8q2HgZ3Kxgdx6pfu8SDoUFMP3NXRPCcCdz9Rs84'
		/*
		tx_to_address in (
	
	
	
		'6ZRCB7AAqGre6c72PRz3MHLC73VMYvJ8bi9KHf1HFpNk',
	
	
	
		'57vSaRTqN9iXaemgh4AoDsZ63mcaoshfMK8NP3Z5QNbs',
	
	
	
		'88xTWZMeKfiTgbfEmPLdsUCQcZinwUfk25EBQZ21XMAZ',
	
	
	
		'Amf2mf2Ciap5wYAEKDtGoQHfHPWaKbyFYhutMK46hTRF',
	
	
	
		'FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5',
	
	
	
		'FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a',
	
	
	
		'H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS',
	
	
	
		'u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w'
				)
	*/
	  AND succeeded = TRUE
		AND block_timestamp >= '2021-12-01' AND block_timestamp <= '2021-12-31' LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 613
QUERY_ID: 6988685e-f966-44e7-9636-3224827dc41c
QUERY_TITLE: [ALGO][Q35] DEXs - Top 10 Popular ASAs (Tinyman)

QUERY_STRING:

with base as (
	SELECT
		COUNT(DISTINCT tx_group_id) as total_swaps,
		COUNT(DISTINCT swapper) as unique_wallets,
		swap_to_asset_id as swap_to,
		SWAP_PROGRAM as app
	from algorand.swaps
	WHERE
		(block_timestamp>='2022-01-01' AND block_timestamp<='2022-03-20')
		--AND swap_from_asset_id = 0
		AND swap_to_asset_id!=0
		AND swap_from_amount>0
	AND swap_to_amount>0
	GROUP BY swap_to, app ) SELECT
	app,
	asset_name,
	total_swaps,
	unique_wallets,
	row_number() OVER (PARTITION by app ORDER BY total_swaps DESC) as rno from base b LEFT JOIN algorand.asset a ON b.swap_to = a.asset_id WHERE
	app = 'tinyman' qualify rno <= 10 ORDER BY rno



=======================================================================================
=======================================================================================
QUERY_NO: 614
QUERY_ID: 6aa4810b-2898-4404-a365-92c3a7b52cbc
QUERY_TITLE: [ENS][Q1] ENS Tokens Count Advanced

QUERY_STRING:

with all_tokens as (
	  SELECT MAX(AMOUNT/1e18) as "tokens", origin_address, tx_id
	  FROM ethereum.udm_events
	  WHERE
	 
	symbol = 'ENS'
	 
	AND origin_address = to_address
	 
	AND contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND origin_function_signature = '0x76122903'
	 
	AND event_type = 'erc20_transfer'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	
	
	 GROUP BY origin_address, tx_id
	ORDER BY "tokens" DESC
	
	LIMIT 1000
	)
	
	SELECT * from all_tokens



=======================================================================================
=======================================================================================
QUERY_NO: 615
QUERY_ID: 6d736716-908a-4396-b0f3-e6e5fc798f39
QUERY_TITLE: [ENS][Q9] Tokens Claimed Average

QUERY_STRING:

select 
	AVG(event_inputs:"value"/1e18) as avg_tokens
		 from ethereum.events_emitted where 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	AND event_name = 'Claim'



=======================================================================================
=======================================================================================
QUERY_NO: 616
QUERY_ID: dda2723f-543d-4056-8b55-0181d72d2f14
QUERY_TITLE: Untitled Query

QUERY_STRING:

select *
	from optimism.velodrome.ez_swaps
	LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 617
QUERY_ID: 86460365-b780-4323-810d-177d92f25721
QUERY_TITLE: SS Param Overview DEBUGGGG

QUERY_STRING:

-- forked from SS Param Overview @ https://flipsidecrypto.xyz/edit/queries/17ff4a7c-ca47-4bf5-aec1-95df92890d7a
	with transfers as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'inflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.to_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 -- and l.label_subtype='deposit_wallet'
	
	 AND t.from_address NOT IN (
	
	
	SELECT
	
	
	
	DISTINCT address
	
	
	from arbitrum.core.dim_labels
	
	
	WHERE label_type='cex'
	
	
	)
	
	
	
	group by ddate, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	  UNION
	
	
	SELECT
	
	  block_timestamp::date as ddate
	
	
	
	  -- , PROJECT_NAME
	
	 -- , t.from_address as cex_address
	
	 -- , to_address as wallet
	
	 -- --sum(eth.amount) as eth_amount,
	
	 , sum(amount_usd) as usd_amount
	
	 , SUM(AMOUNT_PRECISE) as token_amount
	
	 , 'outflow' as side
	  from arbitrum.core.ez_token_transfers t
	  inner join arbitrum.core.dim_labels l on t.from_address=l.address
	  where 1=1
	
	 and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	
	 and l.label_type='cex'
	
	 AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 --and dl.label_subtype='hot_wallet'
	  group by ddate, side --, PROJECT_NAME, CEX_address, wallet,  side
	
	) SELECT
	  ddate
	  --, side
	  , 'cex_flow' as label
	  , SUM(CASE WHEN side='outflow' THEN usd_amount ELSE usd_amount*(-1) END) as amount_usd
	  , SUM(CASE WHEN side='outflow' THEN token_amount ELSE token_amount*(-1) END) as amount_token
	from transfers
	GROUP BY ddate, label



=======================================================================================
=======================================================================================
QUERY_NO: 618
QUERY_ID: 82dfbc45-05b6-43ef-8b7b-3d4e4232b002
QUERY_TITLE: EVMs || nft_mints_sales || TLM

QUERY_STRING:

---create sample space for chains/dates--- with chains as (
	SELECT * from
	  ( values
	
	  ('ethereum'),
	
	 ('arbitrum'),
	
	 ('base'),
	
	 ('optimism')
	  ) as a (chain) ) , dates as (
	SELECT
	
	date_day as date
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1 ) , sample_space as (
	SELECT
	
	date
	  , chain
	from dates
	 LEFT JOIN chains on 1=1 ) -- Respective chain's data CTEs , eth_stats as (
	SELECT
	
	'ethereum' as chain
	  , block_timestamp::date as date
	  , MAX(n_nft_mints) as n_nft_mints
	  , COUNT(tx_hash) as n_nft_sales
	  , SUM(price_usd) as nft_sales_usd
	FROM ethereum.nft.ez_nft_sales s
	FULL OUTER JOIN (
	  SELECT
	
	  block_timestamp::date as date2
	
	 , COUNT(*) as n_nft_mints
	  from ethereum.nft.ez_nft_mints
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  GROUP BY 1
	) m ON s.block_timestamp::date = m.date2
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	GROUP BY date ) , arb_stats as (
	SELECT
	
	'arbitrum' as chain
	  , block_timestamp::date as date
	  , MAX(n_nft_mints) as n_nft_mints
	  , COUNT(tx_hash) as n_nft_sales
	  , SUM(price_usd) as nft_sales_usd
	FROM arbitrum.nft.ez_nft_sales s
	 FULL OUTER JOIN (
	  SELECT
	
	  block_timestamp::date as date2
	
	 , COUNT(*) as n_nft_mints
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND event_type = 'mint'
	
	 AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  GROUP BY 1
	) m ON s.block_timestamp::date = m.date2
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	GROUP BY date ) , base_stats as (
	SELECT
	
	'base' as chain
	  , block_timestamp::date as date
	  , MAX(n_nft_mints) as n_nft_mints
	  , COUNT(tx_hash) as n_nft_sales
	  , SUM(price_usd) as nft_sales_usd
	FROM base.nft.ez_nft_sales s
	FULL OUTER JOIN (
	  SELECT
	
	  block_timestamp::date as date2
	
	 , COUNT(*) as n_nft_mints
	  from base.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND event_type = 'mint'
	
	 AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  GROUP BY 1
	) m ON s.block_timestamp::date = m.date2
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	GROUP BY date ) , op_stats as (
	SELECT
	
	'optimism' as chain
	  , block_timestamp::date as date
	  , MAX(n_nft_mints) as n_nft_mints
	  , COUNT(tx_hash) as n_nft_sales
	  , SUM(price_usd) as nft_sales_usd
	FROM optimism.nft.ez_nft_sales s
	FULL OUTER JOIN (
	  SELECT
	
	  block_timestamp::date as date2
	
	 , COUNT(*) as n_nft_mints
	  from optimism.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND event_type = 'mint'
	
	 AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  GROUP BY 1
	) m ON s.block_timestamp::date = m.date2
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	GROUP BY date ) , merged_data as (
	SELECT * from eth_stats
	UNION ALL
	 SELECT * from arb_stats
	UNION ALL
	SELECT * from base_stats
	UNION ALL
	SELECT * from op_stats ) SELECT
	 chain
	, date
	, coalesce(n_nft_mints, 0) as n_nft_mints
	, coalesce(n_nft_sales, 0) as n_nft_sales
	, coalesce(nft_sales_usd, 0) as nft_sales_usd from sample_space LEFT JOIN merged_data using (date, chain)



=======================================================================================
=======================================================================================
QUERY_NO: 619
QUERY_ID: 6d82fdbb-0077-4f73-ae19-c41817537461
QUERY_TITLE: DS Proxy

QUERY_STRING:

SELECT *
	from ethereum.events_emitted
	WHERE
	event_name='FlashLoan'
	--AND tx_id = '0x382cf7914c74aae37ab8e4dec4dfa7924125db0b42a09aeb8954bd35f136cdb3'
	
	--AND block_timestamp >= CURRENT_DATE - 7
	AND tx_id IN (SELECT
					tx_id
					from aave.flashloans
					WHERE 
					block_timestamp >= CURRENT_DATE - 360)
	AND block_timestamp >= CURRENT_DATE - 360



=======================================================================================
=======================================================================================
QUERY_NO: 620
QUERY_ID: f6f962d6-1e3f-4b2f-866d-814573c6cc63
QUERY_TITLE: Top Contracts

QUERY_STRING:

with base as (
	SELECT tx_receiver as contract, a.block_timestamp, tx
	from near.core.fact_actions_events a
	
	LEFT JOIN near.core.fact_transactions t ON t.tx_hash = a.tx_hash
	where action_name = 'DeployContract' ), refine as(
	SELECT
	DISTINCT contract
	from base ), txns as (
	SELECT COUNT(DISTINCT tx_hash) as totals,
		receiver_id as contracts
	from near.core.fact_receipts
	WHERE
	receiver_id in (SELECT * from refine)
	GROUP BY contracts ) SELECT * from txns ORDER BY totals DESC LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 621
QUERY_ID: 20433d6b-b72b-4d0e-ad91-823aaa45275b
QUERY_TITLE: NFT Markets Top Collectors

QUERY_STRING:

-- forked from NFT Markets Top Collections @ https://flipsidecrypto.xyz/edit/queries/dc9f1ce6-e092-4c77-8f3d-934aa432a6eb -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	purchaser as spender
	, round(SUM(sale_amount), 1) as volume
	, COUNT(*) as total_buys
	
	 from sales_mixer GROUP BY spender ORDER BY volume DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 622
QUERY_ID: 11f378a3-ce00-4134-8832-a08049ce8724
QUERY_TITLE: [NEAR] Sophisticated Citizens & Casual Tourists

QUERY_STRING:

with txn_types as (
	SELECT COUNT(DISTINCT ACTION_ID) as totals,
		MAX(CASE WHEN ACTION_NAME = 'Transfer' THEN 0 ELSE 1 END ) as txn_type,
	TXN_HASH
	from flipside_prod_db.mdao_near.actions_events
	WHERE block_timestamp>='2022-03-01'
	GROUP BY txn_hash ), user_types as (
	SELECT
	
	TX_SIGNER,
	  MAX(totals) as max_actions, MAX(txn_type) as txn_type,
	  date_trunc('day', block_timestamp) as ddate
	 from flipside_prod_db.mdao_near.transactions t
	 LEFT JOIN txn_types tt ON t.txn_hash = tt.txn_hash
	WHERE
		block_timestamp>='2022-03-01'
	GROUP BY ddate,tx_signer ) SELECT
	 COUNT(DISTINCT TX_SIGNER),
	 CASE WHEN max_actions>=2 OR txn_type!=0 THEN 'Sophisticated User' ELSE 'Casual User' END as cat,
	ddate  from user_types GROUP BY cat, ddate



=======================================================================================
=======================================================================================
QUERY_NO: 623
QUERY_ID: b3eab97d-46b5-4e23-96d5-f50ac625b014
QUERY_TITLE: NEAR Base

QUERY_STRING:

-- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , date_trunc(day, BLOCK_TIMESTAMP) as ddate
	  , TX_STATUS
	FROM near.core.fact_transactions
	GROUP BY ddate, TX_STATUS ) SELECT * from base  WHERE ddate IS NOT NULL



=======================================================================================
=======================================================================================
QUERY_NO: 624
QUERY_ID: 9f5c5a7f-42dd-4641-ace2-b3304bfd382d
QUERY_TITLE: NEAR - New vs Old traffic

QUERY_STRING:

with base_wallets as (
	SELECT
	
	TX_SIGNER as wallet,
		MIN(date_trunc('day', block_timestamp)) as min_date
	from near.core.fact_transactions
	WHERE
		block_timestamp >= '2021-11-01' -- Extra Time to store up wallets
	GROUP BY wallet ), new_txns as (
	SELECT
	
	COUNT(TX_HASH) as totals,
		TX_SIGNER as wallet,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN ddate>min_date THEN 'old' ELSE 'new' END as cat
	from near.core.fact_transactions t
	LEFT JOIN base_wallets b ON t.TX_SIGNER = b.wallet
	WHERE
		block_timestamp >= '2022-03-01'
	GROUP BY ddate, TX_SIGNER, cat ) SELECT
	COUNT(DISTINCT wallet) as total_wallets,
	ddate,
	cat from new_txns GROUP BY ddate,cat ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 625
QUERY_ID: 2a505671-23ad-4690-86d9-91ea3896b2ab
QUERY_TITLE: NEAR User Types By Txn Complexity

QUERY_STRING:

with txn_types as (
	SELECT COUNT(DISTINCT ACTION_ID) as totals,
		MAX(CASE WHEN ACTION_NAME = 'Transfer' THEN 0 ELSE 1 END ) as txn_type,
	TX_HASH
	from near.core.fact_actions_events
	WHERE block_timestamp>='2022-03-01'
	GROUP BY tx_hash ), user_types as (
	SELECT
	
	TX_SIGNER,
	  MAX(totals) as max_actions, MAX(txn_type) as txn_type,
	  date_trunc('day', block_timestamp) as ddate
	 from near.core.fact_transactions t
	 LEFT JOIN txn_types tt ON t.tx_hash = tt.tx_hash
	WHERE
		block_timestamp>='2022-03-01'
	GROUP BY ddate,tx_signer ) SELECT
	 COUNT(DISTINCT TX_SIGNER) as users,
	 CASE WHEN (max_actions>=3 AND txn_type!=0) THEN 'Sophisticated User' ELSE 'Casual User' END as cat,
	ddate  from user_types GROUP BY cat, ddate



=======================================================================================
=======================================================================================
QUERY_NO: 626
QUERY_ID: 54a2d98c-ea7a-4b4d-9201-c64a69ad57f1
QUERY_TITLE: earn-claim

QUERY_STRING:

SELECT
	*
	, 'earn-claims' as cat
	from near.core.ez_token_transfers WHERE 1=1
	AND contract_address = 'wallet.kaiching'
	AND from_address = 'earn.kaiching'
	AND to_address ilike '%users.kaiching'
	-- AND to_address = 'optd6ict12gu.users.kaiching' --FAILING TO fetch the latest 4th claim EZ_TRANSFERS ISSUE vs FACT TRANSACTIONS...
	-- AND tx_hash = 'zzg3X66Czh2sdnpC9MVsxjU5LshVYqtzScUEQ9U6cju' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 627
QUERY_ID: 7028c79f-3826-4bd1-bbca-2da6a8352231
QUERY_TITLE: [ALGO][Q15] AB2 Top 5 -

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ) SELECT  TO_TIMESTAMP_NTZ(trade_close_date) as tdate,
			algo_amount,
			buyer,
			asset_amount,
			asset_id,
			tx_group_id from filter_trades WHERE
	(totals= 5 or totals= 4)
	AND algo_amount IS NOT NULL ORDER BY algo_amount DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 628
QUERY_ID: af624a8e-e9c8-46cb-8765-c4cbb61e2a18
QUERY_TITLE: artistic-white copy copy

QUERY_STRING:

-- forked from flyingfish / artistic-white copy @ https://flipsidecrypto.xyz/flyingfish/q/fkjJjYeX8RVE/artistic-white-copy SELECT (ARRAY_AGG(TO_NUMBER(VALUE)) WITHIN GROUP (ORDER BY TO_NUMBER(KEY) ASC )) from
	 (
	select
	  decoded_instruction:args:name as market_name
	from solana.core.fact_decoded_instructions
	where 1 = 1
	and tx_id = '2NDqmjV1fSkBpvbSWrhr8cV83fiXR7AJd2dH8gHr4jY6mZmbnEebkTeZHJSsAr4QyYGkgQp8c4MnynSiENgiR8H4'
	and block_id = 284961436
	and event_type = 'initializePerpMarket' ), LATERAL FLATTEN (market_name)



=======================================================================================
=======================================================================================
QUERY_NO: 629
QUERY_ID: ded97c9e-134a-46ca-bd19-16f04abb74bf
QUERY_TITLE: Daily Stats - maker

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ) SELECT * from edge_vols ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 630
QUERY_ID: 161b9986-1db7-4a83-8ba3-3eb1a1d23712
QUERY_TITLE: [ENS][Q6] Bonus Top Premium Names

QUERY_STRING:

with valid_txns as (
	SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from ethereum.events_emitted
	WHERE
		tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
		AND block_timestamp >= CURRENT_DATE - 360
	GROUP BY tx_id, block_timestamp
	
	), samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('hour', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND tx_id IN (
			select tx_id from valid_txns
				WHERE
					burn_out = 1
					AND controller_in = 1
			)
		AND block_timestamp >= CURRENT_DATE - 360 ), daily_price as (
	SELECT AVG(price) as price, date_trunc('hour', hour) as days
		from ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 360
	GROUP BY days ), results as ( SELECT
	cost, expiry, years, name, tx_id, base_cost, price, samples.days,
	
	 ROUND((base_cost * years)/price, 4) as expected_cost,
		cost - expected_cost as delta,
		(delta/expected_cost)*100 as DELTA_PERC,
		delta * price as premium_paid,
		floor((premium_paid + 99) / 100) * 100 as rounded_premium from samples INNER JOIN daily_price 
	ON samples.days = daily_price.days WHERE
	price != 0
	AND expected_cost!=0 ORDER BY DELTA_PERC DESC LIMIT 200 ) SELECT
	name,
		CASE WHEN rounded_premium>2000 THEN 2000 ELSE rounded_premium END as levels,
			cost,expected_cost,base_cost, years, price as ETH_PRICE, days as date_of_registry, expiry, tx_id from results WHERE
	rounded_premium>300



=======================================================================================
=======================================================================================
QUERY_NO: 631
QUERY_ID: d9f2c267-f64d-49e3-8855-739d86d47ed4
QUERY_TITLE: NEAR - Base retention copy

QUERY_STRING:

-- forked from NEAR - Base retention @ https://flipsidecrypto.xyz/edit/queries/0a584012-0f8a-440d-96fc-d7421fdf1955  with cosm_users as  (
	  select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2023-08-14'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2023-08-14' ) , base_table as (
	select
	
	user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in month
	
	 ) as difference
	from cosm_users
	where 1=1 ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference  as weeks_forward
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  TO_VARCHAR(count_new_users.earliest_date, 'yyyy-MM-dd') as cohort_date
	
	 , weeks_forward
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_factor
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) select * from long_retention_table



=======================================================================================
=======================================================================================
QUERY_NO: 632
QUERY_ID: 7312c17b-a9cf-4a19-858e-4596b1820fbf
QUERY_TITLE: [ALGO][Q42] Arbs Raw

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ) SELECT * from refine ORDER BY profit_perc ASC



=======================================================================================
=======================================================================================
QUERY_NO: 633
QUERY_ID: 94f8b1e4-b5fd-4cc9-9420-b86247dab23d
QUERY_TITLE: [ENS][Q5] Registration Behaviour (Oct End to 10th November)

QUERY_STRING:

with debug as (
	select COUNT(event_name) as registrations, date_trunc('day', block_timestamp) as day
	from ethereum.events_emitted
	WHERE
		block_timestamp >= '2021-10-29' AND block_timestamp <= '2021-11-11'
		AND contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		GROUP BY DAY ) SELECT * from debug



=======================================================================================
=======================================================================================
QUERY_NO: 634
QUERY_ID: 36364832-b4a1-4765-b7d9-f53c4ef26b50
QUERY_TITLE: AAVE experiments

QUERY_STRING:

SELECT
	--block_timestamp,
	--tx_id,
	--event_index
	* from aave.flashloans WHERE 
	block_timestamp >= CURRENT_DATE - 7



=======================================================================================
=======================================================================================
QUERY_NO: 635
QUERY_ID: 0660684b-a1ac-485f-b156-64d37d128274
QUERY_TITLE: [NEAR][T3] Ref Finance Calls

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('day', a.block_timestamp) as ddate,
		a.tx_hash,
		receipt_index,
		receiver_id,
		tx_signer,
		tx_receiver,
		logs,
		method_name,
		CASE
	
		WHEN logs[0] ilike 'swapped%' THEN 'swaps'
			WHEN method_name ilike '%liquid%' THEN method_name
			ELSE 'other methods' END as cat,
		tx
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
	AND tx not ilike '%"status":{"Failure"%' ) SELECT
	COUNT(DISTINCT tx_hash) as totals,
		COUNT(DISTINCT tx_signer) as users,
		cat,
		ddate from base GROUP BY ddate,cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 636
QUERY_ID: 4a07b62d-5429-4a11-8a32-c3b768c429ef
QUERY_TITLE: [THOR] USDC vs BUSD swaps base

QUERY_STRING:

SELECT * from flipside_prod_db.thorchain.swaps WHERE 1=1
	AND
	
	(
	
		( (to_asset ilike ANY ('%BUSD%', '%USDC%')) AND ( NOT from_asset  ILIKE ANY ('%BUSD%', '%USDC%')))
			OR
	
		( (from_asset ILIKE ANY ('%BUSD%', '%USDC%')) AND ( NOT to_asset  ILIKE ANY ('%BUSD%', '%USDC%')))
		) LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 637
QUERY_ID: 787fb89a-c45e-4c42-b4bd-958e5ea73e67
QUERY_TITLE: NEAR Cohort Retention

QUERY_STRING:

with base_table as (
	select
	
	tx_signer as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from near.core.fact_transactions
	where 1=1
	  and block_timestamp >= current_timestamp() - interval '1 year' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 638
QUERY_ID: 1c483405-c3e2-4372-a332-79b0079f302d
QUERY_TITLE: BASE-Weekly Cohort

QUERY_STRING:

with filter as (
	SELECT
	
	*
	from base.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  and block_timestamp>='2023-08-01' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('week', block_timestamp) -- current date in week
	
	 ) as difference
	from base.core.fact_transactions
	where 1=1
	  and from_address IN ( SELECT from_address from filter)
	  and block_timestamp>='2024-08-01' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_week_later
	
	 , case when difference = 2 then retention_pct else null end as two_week_later
	
	 , case when difference = 3 then retention_pct else null end as three_week_later
	
	 , case when difference = 4 then retention_pct else null end as four_week_later
	
	 , case when difference = 5 then retention_pct else null end as five_week_later
	
	 , case when difference = 6 then retention_pct else null end as six_week_later
	
	 , case when difference = 7 then retention_pct else null end as seven_week_later
	
	 , case when difference = 8 then retention_pct else null end as eight_week_later
	
	 , case when difference = 9 then retention_pct else null end as nine_week_later
	
	 , case when difference = 10 then retention_pct else null end as ten_week_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_week_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_week_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'MM-dd') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_week_later) * 100 ,'%') as one_week_later
	
	 , concat(max(two_week_later) * 100 ,'%') as two_week_later
	
	 , concat(max(three_week_later) * 100 ,'%') as three_week_later
	
	 , concat(max(four_week_later) * 100 ,'%') as four_week_later
	
	 , concat(max(five_week_later) * 100 ,'%') as five_week_later
	
	 , concat(max(six_week_later) * 100 ,'%') as six_week_later
	
	 , concat(max(seven_week_later) * 100 ,'%') as seven_week_later
	
	  , concat(max(eight_week_later) * 100 ,'%') as eight_week_later
	
	 , concat(max(nine_week_later) * 100 ,'%') as nine_week_later
	
	 , concat(max(ten_week_later) * 100 ,'%') as ten_week_later
	
	 , concat(max(eleven_week_later) * 100 ,'%') as eleven_week_later
	
	 , concat(max(twelve_week_later) * 100 ,'%') as twelve_week_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 639
QUERY_ID: 79ce740b-763b-4abd-b8bd-9dd78555cd6b
QUERY_TITLE: [OP] L2 Summer Initial Funding

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp::date as ddate
	from optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp::date as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender
	, CASE	WHEN mdate IS NULL THEN 'optimism Only'
				WHEN mdate>ddate THEN 'Both/optimism First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , init_funds as (
	SELECT 
	from_address
		, ETH_VALUE
		, CAT
		, address_name
		, label_subtype
		, label_type
		, project_name
		, tx_hash
		, block_timestamp
		, rank() OVER (PARTITION BY to_address ORDER BY block_timestamp ASC) as ranks
	from optimism.core.fact_transactions t
	LEFT JOIN arbitrum.core.dim_labels l ON from_address=address
	LEFT JOIN refine r ON from_address=sender
	WHERE 1=1
		AND ETH_VALUE!=0
		AND to_address IN (SELECT sender from refine WHERE CAT='optimism Only')
	QUALIFY ranks=1 ) SELECT
		COUNT(tx_hash) as totals
		, CASE
	WHEN from_address='0xa60113f7d43130919802b0863abdcdb956664fd5' THEN 'ftx'
	
			WHEN project_name IS NULL AND CAT IS NOT NULL THEN 'Another optimism Wallet'
				WHEN project_name IS NULL AND CAT IS NULL THEN 'Untagged'
				ELSE project_name END as pname from init_funds GROUP BY pname HAVING totals>20 ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 640
QUERY_ID: 02dd2d46-62bc-4100-b394-df1c092e3756
QUERY_TITLE: NFT Sales Master - Top Traders By Volume

QUERY_STRING:

-- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , SUM(sale_amount) as buy_vol
	  , COUNT(*) as buy_tot
	  , SUM(0) as sel_vol
	  , COUNT(NULL) as sel_tot
	from sales_mixer
	group by 1
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , SUM(0) as buy_vol
	  , COUNT(NULL) as buy_tot
	  , SUM(sale_amount) as sel_vol
	  , COUNT(*) as sel_tot
	from sales_mixer
	group by 1 ) , refine as (
	SELECT
	
	MAX(buy_vol) buy_volz
	  , MAX(sel_vol) sel_volz
	  , buy_volz + sel_volz as volume
	  , MAX(buy_tot) buy_totz
	  , MAX(sel_tot) sel_totz
	  , buy_totz + sel_totz as trades
	  , user
	from users
	GROUP BY user ) SELECT
	 ROUND(volume, 2) as "volume(APT)"
	, trades
	, user from refine ORDER BY volume DESC  LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 641
QUERY_ID: 7cbf9c1d-119d-4d8d-9d5a-a45c788cd06a
QUERY_TITLE: [ALGO][Q42] Arbs: Intermediate Assets

QUERY_STRING:

with base_swaps as (
	SELECT
		*
	from algorand.swaps
	WHERE
		block_timestamp>='2022-01-01'
		--AND (swap_to_asset_id IN  (31566704,312769) OR swap_from_asset_id IN (31566704,312769) )
	ORDER BY swapper, block_timestamp ), lag_fields as (
	SELECT
	
	*,
		lag(swap_from_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_asset, -- PREV FROM -pf
		lag(swap_from_amount, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pf_amt,
	
		lag(swap_to_asset_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as pt_asset, --PREV TO -pt
		lag(swap_to_amount, 1, NULL) over (PARTITION BY swapper ORDER BY block_timestamp) as pt_amt,
		lag(swap_program, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_program,
		lag(pool_address, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_pool,
		lag(tx_group_id, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_tgroup,
		lag(block_timestamp, 1, NULL) over ( PARTITION BY swapper ORDER BY block_timestamp) as p_time
	from base_swaps ), refine as (
	SELECT
	
	*,
		DATEDIFF('second', p_time, block_timestamp) as time_delta_seconds,
		swap_to_amount-pf_amt as profit,
		round( (profit/pf_amt)*100, 2) as profit_perc
	from lag_fields
	WHERE
		(pf_asset IN (31566704,312769) AND pt_asset NOT IN (31566704,312769) )
		AND pt_asset = swap_from_asset_id
		AND swap_to_asset_id = pf_asset
		AND pt_amt = swap_from_amount ) SELECT
	 COUNT(*) as total,
	coalesce(asset_name, 'ALGO') as asset_name, asset_id from refine r left JOIN algorand.asset a ON r.swap_from_asset_id = a.asset_id WHERE
	time_delta_seconds <= 600
	AND profit_perc> 0 GROUP BY asset_name, asset_id



=======================================================================================
=======================================================================================
QUERY_NO: 642
QUERY_ID: e221a125-970c-4ed8-aff3-83fd4430285a
QUERY_TITLE: NFT Sales Master Stats

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace from sales_mixer GROUP BY ddate, marketplace ORDER BY ddate ASC -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 643
QUERY_ID: 8f8270b2-8cf8-4946-b159-98c77a01a962
QUERY_TITLE: NEAR - chain stats copy

QUERY_STRING:

-- forked from NEAR - chain stats @ https://flipsidecrypto.xyz/edit/queries/ffa8239a-f464-4039-8d57-8dec3810aa31  with sweat_txns as (
	 select block_timestamp,
	 tx_signer as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where project_name ilike '%sweat%'
	  and project_name not ilike '%farand%'
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-06-01'
	UNION
	select block_timestamp,
	 tx_receiver as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where project_name ilike '%sweat%'
	  and project_name not ilike '%farand%'
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-06-01' ) , cosmose_txns as (
	 select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2022-06-01'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a
	 where (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	and TX_STATUS = 'Success'
	and block_timestamp >= '2022-06-01' ) , near_txns as (
	select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where NOT (project_name ilike '%sweat%' and project_name not ilike '%farand%')
	  AND NOT (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-06-01'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where NOT (project_name ilike '%sweat%' and project_name not ilike '%farand%')
	  AND NOT (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching')
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-06-01' ) , combo as (
	SELECT
	
	COUNT(DISTINCT user) as t_users
	  , COUNT(DISTINCT tx_hash) as t_txns
	  , block_timestamp::date as ddate
	
	 , 'sweat' as cat
	 from sweat_txns
	GROUP BY ddate, cat
	UNION
	 SELECT
	
	COUNT(DISTINCT user) as t_users
	  , COUNT(DISTINCT tx_hash) as t_txns
	  , block_timestamp::date as ddate
	
	, 'cosmose' as cat
	 from cosmose_txns
	GROUP BY ddate, cat
	UNION
	 SELECT
	
	COUNT(DISTINCT user) as t_users
	  , COUNT(DISTINCT tx_hash) as t_txns
	  , block_timestamp::date as ddate
	
	 , 'others' as cat
	 from near_txns
	GROUP BY ddate, cat ) SELECT * from combo



=======================================================================================
=======================================================================================
QUERY_NO: 644
QUERY_ID: 70cadecb-6411-4f99-a9df-6814ae2d00fa
QUERY_TITLE: NFT Sales Master - Trader Profiles - Marketplaces

QUERY_STRING:

-- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , SUM(sale_amount) as buy_vol
	  , COUNT(*) as buy_tot
	  , SUM(0) as sel_vol
	  , COUNT(NULL) as sel_tot
	from sales_mixer
	group by 1, 2
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , SUM(0) as buy_vol
	  , COUNT(NULL) as buy_tot
	  , SUM(sale_amount) as sel_vol
	  , COUNT(*) as sel_tot
	from sales_mixer
	group by 1, 2 ) , refine as (
	SELECT
	
	SUM(buy_vol) buy_volz
	  , SUM(sel_vol) sel_volz
	  , buy_volz + sel_volz as volume
	  , SUM(buy_tot) buy_totz
	  , SUM(sel_tot) sel_totz
	  , buy_totz + sel_totz as trades
	  , COUNT(DISTINCT marketplace) as marketplaces
	  , user
	from users
	GROUP BY user ) SELECT
	CASE
	
	WHEN marketplaces=1 THEN 'only 1'
	  WHEN marketplaces>=3 THEN '3 or more'
	  ELSE TO_VARCHAR(marketplaces)
	
	END as label
	, COUNT(DISTINCT user) as totals from refine GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 645
QUERY_ID: 532dad64-e19a-4b1b-8c5b-8329285926cf
QUERY_TITLE: NFT Sales Master - Trader Profiles - Actions

QUERY_STRING:

-- forked from NFT Sales Master - Trader Profiles - Trades done @ https://flipsidecrypto.xyz/edit/queries/a5a6ad8c-3d5a-4074-8a91-e4605e5360b7 -- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , marketplace
	  , SUM(sale_amount) as buy_vol
	  , COUNT(*) as buy_tot
	  , SUM(0) as sel_vol
	  , COUNT(NULL) as sel_tot
	from sales_mixer
	group by 1, 2
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , marketplace
	  , SUM(0) as buy_vol
	  , COUNT(NULL) as buy_tot
	  , SUM(sale_amount) as sel_vol
	  , COUNT(*) as sel_tot
	from sales_mixer
	group by 1, 2 ) , refine as (
	SELECT
	
	SUM(buy_vol) buy_volz
	  , SUM(sel_vol) sel_volz
	  , buy_volz + sel_volz as volume
	  , SUM(buy_tot) buy_totz
	  , SUM(sel_tot) sel_totz
	  , buy_totz + sel_totz as trades
	  , COUNT(DISTINCT marketplace) as marketplaces
	  , user
	from users
	GROUP BY user ) SELECT
	CASE
	
	WHEN buy_totz>0 and sel_totz=0 THEN 'A: buy only'
	  WHEN buy_totz=0 and sel_totz>0 THEN 'B: sell only'
	  ELSE 'C: Both'
	  END as label
	, COUNT(DISTINCT user) as totals from refine GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 646
QUERY_ID: a5a6ad8c-3d5a-4074-8a91-e4605e5360b7
QUERY_TITLE: NFT Sales Master - Trader Profiles - Trades done

QUERY_STRING:

-- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , marketplace
	  , SUM(sale_amount) as buy_vol
	  , COUNT(*) as buy_tot
	  , SUM(0) as sel_vol
	  , COUNT(NULL) as sel_tot
	from sales_mixer
	group by 1, 2
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , marketplace
	  , SUM(0) as buy_vol
	  , COUNT(NULL) as buy_tot
	  , SUM(sale_amount) as sel_vol
	  , COUNT(*) as sel_tot
	from sales_mixer
	group by 1, 2 ) , refine as (
	SELECT
	
	SUM(buy_vol) buy_volz
	  , SUM(sel_vol) sel_volz
	  , buy_volz + sel_volz as volume
	  , SUM(buy_tot) buy_totz
	  , SUM(sel_tot) sel_totz
	  , buy_totz + sel_totz as trades
	  , COUNT(DISTINCT marketplace) as marketplaces
	  , user
	from users
	GROUP BY user ) SELECT
	CASE
	
	WHEN trades=1 THEN 'A: only 1'
	  WHEN trades>2 and trades<=5 THEN 'B: 2-5'
	  WHEN trades>5 and trades<20 THEN 'C: 6-19'
	  ELSE 'D: 20 or more'
	  END as label
	, COUNT(DISTINCT user) as totals from refine GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 647
QUERY_ID: 293a32a8-cfd2-47c6-b923-137dece4ed22
QUERY_TITLE: NFT Sales Master - Wash Trades Marketplaces

QUERY_STRING:

-- forked from NFT Sales Master - Wash Trades Base Summary @ https://flipsidecrypto.xyz/edit/queries/695af6ea-bc26-4328-bfca-fc7c42d96eaa -- forked from NFT Sales Master - Wash Trades Base @ https://flipsidecrypto.xyz/edit/queries/c0b2ca53-86be-461a-bfb7-22b5f2c65228 -- forked from NFT Sales Master - Trader Profiles - Total Summary @ https://flipsidecrypto.xyz/edit/queries/87f01dc0-9228-4a1e-927d-49b209e9f41c -- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , sales_table as (
	SELECT
	
	*
	  ---counters for repeat buying/selling from sale wallet for that unique token from a collection
	  , count(*) over (partition by purchaser, collection_name, creator, token_id) as buyer_count
	  , count(*) over (partition by seller, collection_name, creator, token_id) as seller_count
	from sales_mixer ) , transfers as (
	SELECT
	  block_timestamp
	  , version
	  , from_address
	  , to_address
	  , amount
	from
	  aptos.core.ez_native_transfers
	WHERE 1=1
	  AND success = true ) , -------------------- Wash Trades & LOGIC -------------------- wash_trades as (
	-- -- Case I: Self-funded wash trades
	select
	  sales.*
	  , 'I' as type
	from
	  sales_table sales
	  join transfers on sales.purchaser = transfers.to_address
	
	 and sales.seller = transfers.from_address
	
	 and sales.sale_amount <= transfers.amount
	
	 and sales.block_timestamp > transfers.block_timestamp
	-- Credit: @Pinehearst
	-- Case II: An NFT token exchanged between same hands
	union
	select
	  sales_first.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller
	
	 and sales_first.seller = sales_second.purchaser
	union
	select
	  sales_second.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller	
	
	 and sales_first.seller = sales_second.purchaser
	-- Credit: @Pinehearst
	-- Case III: Buyer transfers the NFT back to seller and repurchase it
	union
	select
	  sales_first.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	union
	select
	  sales_second.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	-- Credit: @Marqu
	-- Case IV: Multiple sales for the same NFT
	union
	select
	  *
	  , 'IV' as type
	from
	  sales_table sales
	where
	  buyer_count > 2
	  or seller_count > 2
	  or buyer_count + seller_count > 3 ) , merger as (
	SELECT
	
	sales.*
	  , COALESCE(wash.type, NULL) as wash_type
	from sales_table sales
	LEFT JOIN wash_trades wash ON sales.version=wash.version AND (sales.collection_name = wash.collection_name AND sales.creator = wash.creator
	  AND sales.token_id = wash.token_id) ) SELECT
	COUNT(*) as sales
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace from merger WHERE 1=1 AND wash_type IS NOT NULL GROUP BY ddate, marketplace ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 648
QUERY_ID: b53750bc-259c-43aa-a33a-243771647f29
QUERY_TITLE: NFT Sales Master - Summaries

QUERY_STRING:

-- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, SUM(sale_amount) as volume
	, CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplaces from sales_mixer GROUP BY marketplaces -- SELECT * from sales_mixer LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 649
QUERY_ID: aaef9bb3-8550-4a99-92fb-8d797965c5e9
QUERY_TITLE: NFT Sales Master - Trader Profiles - Active Days

QUERY_STRING:

-- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , block_timestamp::date as ddate
	from sales_mixer
	UNION ALL
	SELECT
	
	DISTINCT TO_VARCHAR(seller) as user
	  , block_timestamp::date as ddate
	
	  from sales_mixer ) , refine as (
	SELECT
	
	COUNT(DISTINCT ddate) as days
	  , user
	from users
	GROUP BY user ) SELECT
	CASE
	
	WHEN days=1 THEN 'A: only 1'
	  WHEN days>1 AND days<=7 THEN 'B: 3-7'
	  WHEN days>7 AND days<31 THEN 'C: 8-31'
	  ELSE 'D: 31 or more'
	  END as label
	, COUNT(DISTINCT user) as totals from refine GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 650
QUERY_ID: c0b2ca53-86be-461a-bfb7-22b5f2c65228
QUERY_TITLE: NFT Sales Master - Wash Trades Base

QUERY_STRING:

-- forked from NFT Sales Master - Trader Profiles - Total Summary @ https://flipsidecrypto.xyz/edit/queries/87f01dc0-9228-4a1e-927d-49b209e9f41c -- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , sales_table as (
	SELECT
	
	*
	  ---counters for repeat buying/selling from sale wallet for that unique token from a collection
	  , count(*) over (partition by purchaser, collection_name, creator, token_id) as buyer_count
	  , count(*) over (partition by seller, collection_name, creator, token_id) as seller_count
	from sales_mixer ) , transfers as (
	SELECT
	  block_timestamp
	  , version
	  , from_address
	  , to_address
	  , amount
	from
	  aptos.core.ez_native_transfers
	WHERE 1=1
	  AND success = true ) , -------------------- Wash Trades & LOGIC -------------------- wash_trades as (
	-- -- Case I: Self-funded wash trades
	select
	  sales.*
	  , 'I' as type
	from
	  sales_table sales
	  join transfers on sales.purchaser = transfers.to_address
	
	 and sales.seller = transfers.from_address
	
	 and sales.sale_amount <= transfers.amount
	
	 and sales.block_timestamp > transfers.block_timestamp
	-- Credit: @Pinehearst
	-- Case II: An NFT token exchanged between same hands
	union
	select
	  sales_first.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller
	
	 and sales_first.seller = sales_second.purchaser
	union
	select
	  sales_second.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller	
	
	 and sales_first.seller = sales_second.purchaser
	-- Credit: @Pinehearst
	-- Case III: Buyer transfers the NFT back to seller and repurchase it
	union
	select
	  sales_first.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	union
	select
	  sales_second.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	-- Credit: @Marqu
	-- Case IV: Multiple sales for the same NFT
	union
	select
	  *
	  , 'IV' as type
	from
	  sales_table sales
	where
	  buyer_count > 2
	  or seller_count > 2
	  or buyer_count + seller_count > 3 ) , merger as (
	SELECT
	
	sales.*
	  , COALESCE(wash.type, NULL) as wash_type
	from sales_table sales
	LEFT JOIN wash_trades wash ON sales.version=wash.version AND (sales.collection_name = wash.collection_name AND sales.creator = wash.creator
	  AND sales.token_id = wash.token_id) ) SELECT
	COUNT(*) as sales
	, SUM(sale_amount) as volume
	, date_trunc('day', block_timestamp) as ddate
	, CASE WHEN wash_type IS NULL THEN 'normal' ELSE 'wash' END as label
	, CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace from merger GROUP BY ddate, marketplace, label ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 651
QUERY_ID: 487a3fd4-0e6e-4eb6-bb00-9a2a5d8963de
QUERY_TITLE: Total Maker Volume Distribution by Type

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2 ) SELECT
	 SUM(volume) as tvol
	, label2 from edge_vols WHERE 1=1
	AND label ilike '{{instance}}' GROUP BY label2 ORDER BY label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 652
QUERY_ID: 84e229fe-9233-4a0d-bfcf-9ecc814b250b
QUERY_TITLE: [ALGO][Q77] RAND Gallery Base

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), pre_final as (
	SELECT
		COUNT(buyer) as total_buyers,
		COUNT(DISTINCT buyer) as unique_buyers,
	  --AVG(total_buyers) OVER (PARTITION by chain ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as total_buyers_7D_MA
	  --AVG(unique_buyers) OVER (PARTITION by chain ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as unique_buyers_7D_MA
		ddate
	from all_purchases
	GROUP BY ddate ORDER BY ddate ASC ) SELECT
	*,
		AVG(total_buyers) OVER (ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as daily_buyers_7D_MA,
	  AVG(unique_buyers) OVER (ORDER BY  ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as daily_unique_buyers_7D_MA from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 653
QUERY_ID: 2bf3ab2c-8914-46dd-a61f-6e3cdec661b3
QUERY_TITLE: Lend/Borrow Base Table

QUERY_STRING:

-- forked from money markets @ https://flipsidecrypto.xyz/studio/queries/88014729-bdf0-44c9-8c8a-995353568147 with base as (
	SELECT *, 'arbitrum' as label from arbitrum.vertex.ez_money_markets
	WHERE 1=1
	  AND HOUR::date> CURRENT_DATE - 2
	qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1
	
	UNION ALL
	 SELECT *, 'base' as label from base.vertex.ez_money_markets
	WHERE 1=1
	  AND HOUR::date> CURRENT_DATE - 2
	qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1
	UNION ALL
	 SELECT *, 'blitz-blast' as label from blast.blitz.ez_money_markets
	WHERE 1=1
	  AND HOUR::date> CURRENT_DATE - 2
	qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1
	UNION ALL
	 SELECT *, 'mantle' as label from mantle.vertex.ez_money_markets
	WHERE 1=1
	  AND HOUR::date> CURRENT_DATE - 2
	qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1
	UNION ALL
	 SELECT *, 'sei' as label from sei.vertex.ez_money_markets
	WHERE 1=1
	  AND HOUR::date> CURRENT_DATE - 2
	qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1 ) SELECT
	 LABEL as instance
	, SYMBOL
	, ROUND(TVL, 2) as TVL_USD
	, ROUND(DEPOSIT_APR * 100, 3) as DEPOSIT_APR
	, ROUND(BORROW_APR * 100, 3) as BORROW_APR
	, HOUR as snapshot_time_utc from base ORDER BY LABEL ASC, TVL DESC



=======================================================================================
=======================================================================================
QUERY_NO: 654
QUERY_ID: 6b26698a-7e88-43c4-9d8f-c47a39767610
QUERY_TITLE: EDGE Cumu Bars - taker

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	
	SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ) SELECT
	1 as num
	 , label
	, SUM(volume) as total_vol from edge_vols GROUP BY num,label ORDER BY label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 655
QUERY_ID: 0617145e-9c24-4d94-9207-69af6a0a0fd2
QUERY_TITLE: [ALGO][Q33] Total Unique STBL Stakers Over Time

QUERY_STRING:

with app_calls as (
	SELECT
		tx_group_id,
		CASE
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'unstaked'
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'staked'
			ELSE NULL END as cat
	from algorand.application_call_transaction
	WHERE
		app_id = '482608867'
		AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: mt' ) ), stakes as (
	SELECT
		MIN(date_trunc('day', block_timestamp)) as ddate,
		sender
	from algorand.asset_transfer_transaction
	WHERE
		tx_group_id IN ( SELECT tx_group_id from app_calls WHERE cat = 'staked')
	GROUP BY sender ) SELECT
	COUNT(sender) as daily_uniques,
	ddate,
		SUM(daily_uniques) OVER ( ORDER BY ddate ASC) as total_uniques from stakes GROUP BY ddate ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 656
QUERY_ID: 40c5a011-a6b5-4ca5-bd8e-3e0b29bc8e8d
QUERY_TITLE: [algo] Lofty - Wallets Holding Token for At least One Property

QUERY_STRING:

with loft_asas as (
	SELECT asset_name, asset_url,total_supply,total_supply*50 as TTIP, asset_id
	from algorand.asset
	WHERE
		creator_address = 'LOFTYRITC3QUX6TVQBGT3BARKWAZDEB2TTJWYQMH6YITKNH7IOMWRLC7SA'
			AND (ASSET_NAME IS NOT NULL AND asset_name!='Lofty AI') ), prop_holders as (
	SELECT address, amount, asset_id
	from algorand.account_asset
	WHERE
		asset_id IN ( SELECT asset_id from loft_asas)
		AND amount!=0
		AND asset_closed=FALSE ) SELECT
	COUNT(DISTINCT address) as total_walllets from prop_holders



=======================================================================================
=======================================================================================
QUERY_NO: 657
QUERY_ID: 2a44e480-ee89-49ad-a743-88964ea2395e
QUERY_TITLE: arb-airdrop base txns

QUERY_STRING:

with stats as (
	SELECT
	
	COUNT(DISTINCT tx_hash) as txns
	  , COUNT( DISTINCT from_address) as wallets
	  , block_timestamp::date as ddate
	  , CASE WHEN block_timestamp >= TO_TIMESTAMP(1679657598) THEN 'post claims' ELSE 'pre-claims' END as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND ( block_timestamp>'2022-09-01' AND block_timestamp<'2023-09-01')
	  AND STATUS = 'SUCCESS'
	GROUP BY ddate, cat ) SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 658
QUERY_ID: f29f7c67-c966-4c3c-99e7-543e92cd5a46
QUERY_TITLE: arb-airdrop wallet types

QUERY_STRING:

-- forked from arb-airdrop base txns @ https://flipsidecrypto.xyz/edit/queries/2a44e480-ee89-49ad-a743-88964ea2395e with airdrop_wallets AS (
	  SELECT
	
	 ethereum.public.udf_hex_to_int (DATA) / pow(10, 18) AS amount
	
	 , CONCAT('0x', SUBSTR(TOPICS[1], -40, 40)) AS receiver_wallet
	
	 , block_timestamp as claim_time
	
	 , tx_hash as claim_tx
	  FROM
	
	 arbitrum.core.fact_event_logs
	  WHERE 1=1
	
	 AND ORIGIN_TO_ADDRESS = '0x67a24ce4321ab3af51c2d0a4801c3e111d88c9d9'
	
	 AND ORIGIN_FUNCTION_SIGNATURE = '0xae373c1b'
	
	 AND BLOCK_NUMBER >= 70506697
	
	 AND TX_STATUS = 'SUCCESS' ) , stats as (
	SELECT
	
	COUNT(DISTINCT tx_hash) as txns
	  , from_address as wallet
	  , block_timestamp::date as ddate
	  , CASE WHEN claim_time IS NOT NULL THEN 'claimer' ELSE 'non-claimer' END as cat
	from arbitrum.core.fact_transactions t
	 LEFT JOIN airdrop_wallets a ON t.from_address = a.receiver_wallet
	WHERE 1=1
	  AND ( block_timestamp>'2022-09-01' AND block_timestamp<'2023-09-01')
	  AND STATUS = 'SUCCESS'
	GROUP BY ddate, cat, wallet ) SELECT
	SUM(txns) as t_txns
	, COUNT(DISTINCT wallet) as t_wallets
	, cat
	, ddate
	from stats  GROUP BY ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 659
QUERY_ID: 0de52225-1f4e-45dd-8b21-189e482590a1
QUERY_TITLE: op-airdrop base txns

QUERY_STRING:

with stats as (
	SELECT
	
	COUNT(DISTINCT tx_hash) as txns
	  , COUNT( DISTINCT from_address) as wallets
	  , block_timestamp::date as ddate
	  , CASE WHEN block_timestamp >= TO_TIMESTAMP(1654040700) THEN 'post claims' ELSE 'pre-claims' END as cat
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND ( block_timestamp>'2022-01-01' AND block_timestamp<'2023-01-01')
	  AND STATUS = 'SUCCESS'
	GROUP BY ddate, cat ) SELECT * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 660
QUERY_ID: b5753731-d9a3-4357-87a7-8486ae67f6fc
QUERY_TITLE: op-airdrop wallet types 

QUERY_STRING:

with airdrop_wallets as (
	 select
	  origin_from_address as receiver_wallet
	
	, raw_amount/pow(10,18) as amount
	  , block_timestamp as claim_time
	  , tx_hash as claim_tx
	from optimism.core.fact_token_transfers
	where 1=1
	
	AND contract_address = '0x4200000000000000000000000000000000000042'
	  AND from_address = lower('0xfedfaf1a10335448b7fa0268f56d2b44dbd357de')
	  AND origin_function_signature = '0x2e7ba6ef' ) , stats as (
	SELECT
	
	COUNT(DISTINCT tx_hash) as txns
	  , from_address as wallet
	  , block_timestamp::date as ddate
	  , CASE WHEN claim_time IS NOT NULL THEN 'claimer' ELSE 'non-claimer' END as cat
	from optimism.core.fact_transactions t
	 LEFT JOIN airdrop_wallets a ON t.from_address = a.receiver_wallet
	WHERE 1=1
	  AND ( block_timestamp>'2022-01-01' AND block_timestamp<'2023-01-01')
	  AND STATUS = 'SUCCESS'
	GROUP BY ddate, cat, wallet ) SELECT
	SUM(txns) as t_txns
	, COUNT(DISTINCT wallet) as t_wallets
	, cat
	, ddate
	from stats  GROUP BY ddate, cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 661
QUERY_ID: c6cd63b5-deb3-4a7f-bdf2-aab66d38518e
QUERY_TITLE: arb- airdrop retentions 

QUERY_STRING:

-- forked from arb- retentions @ https://flipsidecrypto.xyz/edit/queries/d054be95-aa8d-4b3a-9888-b68e192b9886  -- forked from arb-airdrop base txns @ https://flipsidecrypto.xyz/edit/queries/2a44e480-ee89-49ad-a743-88964ea2395e with airdrop_wallets AS (
	  SELECT
	
	 ethereum.public.udf_hex_to_int (DATA) / pow(10, 18) AS amount
	
	 , CONCAT('0x', SUBSTR(TOPICS[1], -40, 40)) AS receiver_wallet
	
	 , block_timestamp as claim_time
	
	 , tx_hash as claim_tx
	  FROM
	
	 arbitrum.core.fact_event_logs
	  WHERE 1=1
	
	 AND ORIGIN_TO_ADDRESS = '0x67a24ce4321ab3af51c2d0a4801c3e111d88c9d9'
	
	 AND ORIGIN_FUNCTION_SIGNATURE = '0xae373c1b'
	
	 AND BLOCK_NUMBER >= 70506697
	
	 AND TX_STATUS = 'SUCCESS' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from arbitrum.core.fact_transactions
	where 1=1
	  and ( block_timestamp>'2022-09-01' AND block_timestamp<'2023-09-01')
	  AND from_address in ( SELECT receiver_wallet as from_address from airdrop_wallets) ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 662
QUERY_ID: ab18b41f-a200-4c8a-bd75-9cffe527e45c
QUERY_TITLE: [ALGO][Q34] P2 Voting Breakdown - By Vote Counts

QUERY_STRING:

/* with p1_voters as (	
	SELECT
	
		sender,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop, tx_id, block_id,
			lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1)) as opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			--AND sender= '46QNIYQEMLKNOBTQC56UEBBHFNH37EWLHGT2KGL3ZGB4SW77W6V7GBKPDY'
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ),*/ with p2_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			--AND (block_timestamp>='2022-01-31 21:29:00' AND block_timestamp<'2022-03-01')
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY' ) SELECT COUNT(DISTINCT sender) as totals, final_opt, prop from p2_voters_debug WHERE prop = 5 GROUP BY prop, final_opt



=======================================================================================
=======================================================================================
QUERY_NO: 663
QUERY_ID: 12e9baf8-d464-4bc7-987f-374ada30d2d3
QUERY_TITLE: [poly][Q4] Active Wallets And Price

QUERY_STRING:

with base_wallets as (
	SELECT
	
	COUNT(*) as txns,
		from_address as wallet,
		MAX(DATEADD('day', 90, date_trunc('day', block_timestamp))) as ddate_ul,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.polygon.transactions
	WHERE
		block_timestamp >= CURRENT_DATE - 365
	GROUP BY ddate, wallet ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 275)) ), mixer as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		b.ddate_ul
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_ul AND d.dkey>=b.ddate ), prices as (
	SELECT
	
	AVG(price) as price,
		date_trunc('day', hour) as ddate
	from flipside_prod_db.ethereum.token_prices_hourly
	WHERE
		symbol = 'MATIC'
		AND hour = CURRENT_DATE - 365
	GROUP BY ddate ), prices_ext as (
	SELECT
	
	*,
		lag(price,1, NULL) OVER (ORDER BY ddate ASC) as p_price,
		ROUND(((price-p_price)/p_price) * 100, 2) as prev_delta
	from prices ), pre_final as (
	SELECT
		COUNT(DISTINCT wallet) as active_wallets,
	MAX(price) as price, MAX(prev_delta) as prev_price_delta,
	dkey
	from mixer m
	LEFT JOIN prices_ext p ON p.ddate=m.dkey
	GROUP BY dkey ORDER BY dkey ASC ) SELECT
	*,
		lag(active_wallets,1, NULL) OVER (ORDER BY dkey ASC) as p_active_wallets,
		ROUND(((active_wallets-p_active_wallets)/p_active_wallets) * 100, 2) as prev_wallets_delta from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 664
QUERY_ID: 7438b077-5038-4307-8962-c6fa200e0b67
QUERY_TITLE: Cumu Stake

QUERY_STRING:

-- forked from daily stats @ https://flipsidecrypto.xyz/studio/queries/461615c6-3d8e-4041-8eba-7e9eebcd2bfb with delegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0xbd168b3c3bbaaec0a4f5dd4a388ebf8883a952ddf73cd109a065c2a13234f584'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesIncreased'
	)
	
	SELECT
	  dtime::date as ddate
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY ddate ) , undelegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0x53530454455c30b97f6185419b3151ecfcca0a9d50ea465ddd6967d81cca3354'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesDecreased'
	)
	
	SELECT
	  dtime::date as ddate
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY ddate ) , merge as (
	SELECT * , 'delegations' as label from delegations
	UNION ALL
	 SELECT *, 'undelegations' as label from undelegations ) , daily_stats as (
	SELECT
	
	ddate
	  , label
	  , SUM(CASE WHEN label='delegations' THEN stake ELSE stake*-1 END) as amounts
	from merge
	GROUP BY ddate,label ORDER BY ddate ASC, label ASC  ) , net_sums as (
	SELECT
	
	ddate
	  , SUM(amounts) as net_flow
	  --, SUM(amounts) OVER (ORDER BY DDATE ASC) as total_stake
	from daily_stats
	GROUP BY ddate ) SELECT
	 ddate
	, ROUND(net_flow,1) as net_flow
	, SUM(net_flow) OVER (ORDER BY DDATE ASC) as active_delegation from net_sums  ORDER BY DDATE ASC



=======================================================================================
=======================================================================================
QUERY_NO: 665
QUERY_ID: 71475581-6fb7-4ee6-bf49-7679b2aaa5e4
QUERY_TITLE: Friends - Address to ENS map

QUERY_STRING:

with base_accounts as (
	SELECT
	
	DISTINCT ORIGIN_FROM_ADDRESS as account
	from base.core.fact_event_logs
	
	WHERE
	  ORIGIN_FUNCTION_SIGNATURE = '0x6945b123'
	  AND contract_address = '0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4'
	  AND concat('0x',RIGHT(regexp_substr_all(SUBSTR(DATA,3,len(DATA)),'.{64}')[1], 40)) = ORIGIN_FROM_ADDRESS ), account_funders as (
	SELECT
	
	t.tx_hash
	  , t.block_timestamp
	  , to_address as account
	  , from_address as funder
	  , eth_value
	  , ENS_NAME
	  , rank() OVER (PARTITION BY to_address ORDER BY t.block_timestamp ASC) as rank
	from base.core.fact_transactions t
	LEFT JOIN crosschain.core.ez_ens e ON t.from_address=e.owner
	WHERE 1=1
	  AND ETH_VALUE>0
	  AND ENS_SET!='N'
	  AND to_address IN (SELECT account as to_address from base_accounts)
	qualify rank=1
	LIMIT 10 ) SELECT * from account_funders



=======================================================================================
=======================================================================================
QUERY_NO: 666
QUERY_ID: 7dc28c14-2590-4148-b29f-5aad497af490
QUERY_TITLE: [FS] Shrooms Transfers

QUERY_STRING:

with shroomts as (
	SELECT
		COUNT(*) as total
	from ethereum.core.ez_nft_transfers
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
		AND event_type != 'mint' ) SELECT * from shroomts



=======================================================================================
=======================================================================================
QUERY_NO: 667
QUERY_ID: 2901f597-460f-4393-b0e1-ddceea2e391d
QUERY_TITLE: [ENS]  Top Premium Names Demo

QUERY_STRING:

with valid_txns as (
	SELECT
	MAX( CASE WHEN REPLACE(event_inputs:"to",'"','') = '0x0000000000000000000000000000000000000000' AND REPLACE(event_inputs:"from",'"','') != tx_from_address THEN 1 ELSE 0 END ) as burn_out,
	MAX( CASE WHEN REPLACE(event_inputs:"from",'"','') = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'  AND REPLACE(event_inputs:"to",'"','') = tx_from_address THEN 1 ELSE 0 END) as controller_in,
	tx_id, block_timestamp
	from flipside_prod_db.ethereum.events_emitted
	WHERE
		tx_to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'
		AND event_name = 'Transfer'
		AND block_timestamp >= CURRENT_DATE - 90
	GROUP BY tx_id, block_timestamp
	
	), samples as (
	SELECT
	
			ROUND(event_inputs:"cost"/1e18,4) as cost,
		DATE(event_inputs:"expires") as expiry, 
		DATEDIFF( 'year', block_timestamp, DATE(event_inputs:"expires") ) as years,
		REPLACE(event_inputs:"name",'"','') as name,
		LEN(TO_CHAR(REPLACE(event_inputs:"name",'"',''))) as length,
		tx_id,
		date_trunc('hour', block_timestamp) as days,
		CASE LEN(TO_CHAR(REPLACE(event_inputs:"name",'"','')))
	 
		WHEN 1 THEN 640
				WHEN 2 THEN 640
			WHEN 3 THEN 640
	 
		WHEN 4 THEN 120
	 
		ELSE 5
			END AS base_cost
		from flipside_prod_db.ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered'
		AND tx_id IN (
			select tx_id from valid_txns
				WHERE
					burn_out = 1
					AND controller_in = 1
			)
		AND block_timestamp >= CURRENT_DATE - 90 ), daily_price as (
	SELECT AVG(price) as price, date_trunc('hour', hour) as days
		from flipside_prod_db.ethereum.token_prices_hourly
	WHERE	
		symbol = 'ETH'
		AND hour >= CURRENT_DATE - 360
	GROUP BY days ), results as ( SELECT
	cost, expiry, years, name, tx_id, base_cost, price, samples.days,
	
	 ROUND((base_cost * years)/price, 4) as expected_cost,
		cost - expected_cost as delta,
		(delta/expected_cost)*100 as DELTA_PERC,
		delta * price as premium_paid,
		floor((premium_paid + 99) / 100) * 100 as rounded_premium from samples INNER JOIN daily_price 
	ON samples.days = daily_price.days ORDER BY DELTA_PERC DESC LIMIT 200 ) SELECT * from samples



=======================================================================================
=======================================================================================
QUERY_NO: 668
QUERY_ID: 0d9c28bd-79ce-4aab-96ac-94fafa97a114
QUERY_TITLE: instances - makers wrong

QUERY_STRING:

-- forked from base sei products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ), maker_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  ,SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from FINAL
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  ,SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-08-14'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ), mantle_deduction as (
	with base as (
	  SELECT
	
	  ddate
	
	 , SUM(CASE WHEN label='vertex' THEN volume ELSE 0 END) as v_taker
	
	 , SUM(CASE WHEN label!='vertex' THEN volume ELSE 0 END) as vol_blitz_sei
	  from (
	
	
	select * from maker_vols
	
	
	
	
	
	UNION ALL
	
	
	 --need reference for Vertex's EDGE taker volume
	
	
	SELECT
	
	
	  block_timestamp::date as ddate
	
	
	  , 'vertex' as label
	
	
	  ,SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	
	
	 from blast.blitz.ez_perp_trades
	
	
	WHERE 1=1
	
	
	  AND block_timestamp>='2024-08-14'
	
	
	  AND trader = '0x0000000000000000000000000000000000000000'
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	GROUP BY ddate, label
	  )
	  GROUP BY ddate
	)
	SELECT
	
	ddate
	  , 'mantle' as label
	
	, v_taker-vol_blitz_sei as volume
	from base  ) SELECT * from maker_vols UNION ALL
	
	
	 --need reference for Vertex's EDGE taker volume
	
	
	SELECT
	
	
	  block_timestamp::date as ddate
	
	
	  , 'vertex' as label
	
	
	  ,SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	
	
	 from blast.blitz.ez_perp_trades
	
	
	WHERE 1=1
	
	
	  AND block_timestamp>='2024-08-14'
	
	
	  AND trader = '0x0000000000000000000000000000000000000000'
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	GROUP BY ddate, label UNION ALL  SELECT * from mantle_deduction ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 669
QUERY_ID: a8b8c915-cb52-42d0-9bdc-476e23cbd700
QUERY_TITLE: instances - makers correct

QUERY_STRING:

-- forked from instances - makers wrong @ https://flipsidecrypto.xyz/studio/queries/4e820421-5906-4323-832f-679485ea7e3d
	-- forked from base sei products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ), maker_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  ,SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from FINAL
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  ,SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-08-14'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ) SELECT * from maker_vols ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 670
QUERY_ID: 0f2c0bc7-c584-4ead-b446-fdb36ebf1a92
QUERY_TITLE: SEI price test

QUERY_STRING:

with astro_price as (
	SELECT
	  TO_TIMESTAMP(value[0]::string) as day,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart?vs_currency=usd&days=150') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	TO_TIMESTAMP(value[0]::string) as day,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart?vs_currency=usd&days=150') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	trunc(day,'hour') as hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where day >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) -- select  --
	  tx_id,  --
	  block_timestamp,  --
	  bridge, --
	  amount,  --
	  (amount * prices) as volume, --
	  user,  --
	  chain,  --
	  a.symbol as token_name, --
	  cat --
	from airdrop_claimers a  --
	LEFT JOIN price_i b on trunc(a.block_timestamp,'day') = b.hourly and a.symbol_address = b.token_address SELECT * from price_i where symbol ='SEI'



=======================================================================================
=======================================================================================
QUERY_NO: 671
QUERY_ID: 49eaaca2-ca62-40a0-8c08-3ebb18de8203
QUERY_TITLE: [AAVE-29] Average FEE for Borrows

QUERY_STRING:

SELECT AVG(FEE_USD), date_trunc('month', block_timestamp) as mdate FROM ethereum.transactions WHERE
	tx_id IN (
		SELECT tx_id
		from aave.borrows
		WHERE 
			block_timestamp >= CURRENT_DATE - 720
	)
	AND block_timestamp >= CURRENT_DATE - 720 GROUP BY mdate



=======================================================================================
=======================================================================================
QUERY_NO: 672
QUERY_ID: 57a3e1dc-6435-4605-ab38-d470adc05f30
QUERY_TITLE: EVMs || contract_program_deployments || TLM

QUERY_STRING:

---create sample space for chains/dates--- with chains as (
	SELECT * from
	  ( values
	
	  ('ethereum'),
	
	 ('arbitrum'),
	
	 ('base'),
	
	 ('optimism')
	  ) as a (chain) ) , dates as (
	SELECT
	
	date_day as date
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1 ) , sample_space as (
	SELECT
	
	date
	  , chain
	from dates
	 LEFT JOIN chains on 1=1 ) -- Respective chain's data CTEs , eth_stats as (
	SELECT
	
	'ethereum' as chain
	  , block_timestamp::date as date
	  , COUNT(*) as n_contracts
	FROM ethereum.core.fact_traces
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  AND TYPE IN ('CREATE', 'CREATE2')
	  AND OUTPUT IS NOT NULL
	  AND TX_STATUS = 'SUCCESS'
	  AND TRACE_STATUS = 'SUCCESS'
	GROUP BY date ) , arb_stats as (
	SELECT
	
	'arbitrum' as chain
	  , block_timestamp::date as date
	  , COUNT(*) as n_contracts
	FROM arbitrum.core.fact_traces
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  AND TYPE IN ('CREATE', 'CREATE2')
	  AND OUTPUT IS NOT NULL
	  AND TX_STATUS = 'SUCCESS'
	  AND TRACE_STATUS = 'SUCCESS'
	GROUP BY date ) , base_stats as (
	SELECT
	
	'base' as chain
	  , block_timestamp::date as date
	  , COUNT(*) as n_contracts
	FROM base.core.fact_traces
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  AND TYPE IN ('CREATE', 'CREATE2')
	  AND OUTPUT IS NOT NULL
	  AND TX_STATUS = 'SUCCESS'
	  AND TRACE_STATUS = 'SUCCESS'
	GROUP BY date ) , op_stats as (
	SELECT
	
	'optimism' as chain
	  , block_timestamp::date as date
	  , COUNT(*) as n_contracts
	FROM optimism.core.fact_traces
	WHERE 1=1
	  AND block_timestamp::date BETWEEN CURRENT_DATE -1 -29 AND CURRENT_DATE -1
	  AND TYPE IN ('CREATE', 'CREATE2')
	  AND OUTPUT IS NOT NULL
	  AND TX_STATUS = 'SUCCESS'
	  AND TRACE_STATUS = 'SUCCESS'
	GROUP BY date ) , merged_data as (
	SELECT * from eth_stats
	UNION ALL
	 SELECT * from arb_stats
	UNION ALL
	SELECT * from base_stats
	UNION ALL
	SELECT * from op_stats ) SELECT
	 chain
	, date
	, coalesce(n_contracts, 0) as n_contracts from sample_space LEFT JOIN merged_data using (date, chain)



=======================================================================================
=======================================================================================
QUERY_NO: 673
QUERY_ID: 5412ad3a-00ad-4d99-9548-b2ee097eb422
QUERY_TITLE: latest events

QUERY_STRING:

SELECT
	*
	, 'deposits' as label from ethereum.beacon_chain.ez_deposits qualify row_number() OVER (ORDER BY block_timestamp DESC) = 1



=======================================================================================
=======================================================================================
QUERY_NO: 674
QUERY_ID: e9ed2300-b276-4532-8394-19a7c5744521
QUERY_TITLE: [NEAR] NFT Paras marketplace Sample - NFT sold/mint

QUERY_STRING:

with base as (
	SELECT
	 --*,
	-- breaking down all the steps into each field for ease of understanding, else can just wrap
	 txn_hash,
	replace(TX_RECEIPT[0]:outcome:logs[0], '\\', '') as string,
	split(string,'EVENT_JSON\:')[1] as string_cleaned, --NEED another cleanup pass due to the " " quotes around memo...
	TRY_PARSE_JSON(string_cleaned) as json_obj,
	json_obj:event as type,
	json_obj:data[0]:owner_id as owner
	FROM  flipside_prod_db.mdao_near.transactions
	WHERE 1=1
	AND txn_hash = 'Ebw3W4kQBggbUzMUvp48NbtJAgXSUogWNqZLp6sk7VCQ' ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 675
QUERY_ID: ad37d69a-84b2-4e0e-8f80-5f3a50c02289
QUERY_TITLE: Top Operators

QUERY_STRING:

-- forked from Cumu Stake @ https://flipsidecrypto.xyz/studio/queries/7438b077-5038-4307-8962-c6fa200e0b67 -- forked from daily stats @ https://flipsidecrypto.xyz/studio/queries/461615c6-3d8e-4041-8eba-7e9eebcd2bfb with delegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0xbd168b3c3bbaaec0a4f5dd4a388ebf8883a952ddf73cd109a065c2a13234f584'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesIncreased'
	)
	
	SELECT
	  operator
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY operator ) , undelegations as (
	with base as (
	  SELECT
	
	  block_timestamp as dtime
	
	 , DECODED_LOG:operator as operator
	
	 , TO_NUMERIC(DECODED_LOG:shares)/1e18 as amount
	
	 , DECODED_LOG:staker as wallet
	
	 , DECODED_LOG:strategy as strat --- wtf is this? idk
	  from ethereum.core.fact_decoded_event_logs
	  WHERE 1=1
	
	 --AND tx_hash = '0x53530454455c30b97f6185419b3151ecfcca0a9d50ea465ddd6967d81cca3354'
	
	 AND contract_address = '0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a'
	
	 AND event_name = 'OperatorSharesDecreased'
	)
	
	SELECT
	  operator
	  , SUM(amount) as stake
	  , COUNT(DISTINCT wallet) as wallets
	from base
	GROUP BY operator ) , merge as (
	SELECT * , 'delegations' as label from delegations
	UNION ALL
	 SELECT *, 'undelegations' as label from undelegations ) , topn as (
	SELECT
	
	operator
	  , SUM(CASE WHEN label='delegations' THEN stake ELSE stake*-1 END) as amounts
	from merge
	GROUP BY operator
	ORDER BY amounts DESC
	 LIMIT 20 ) SELECT * from topn



=======================================================================================
=======================================================================================
QUERY_NO: 676
QUERY_ID: 449d981b-f322-4f04-b4af-9779ef0092a5
QUERY_TITLE: [NEAR][T3] Time To Ref Finance 23434

QUERY_STRING:

with citizens as (
	SELECT
	
	parse_json(args) as json_args,
		json_args:new_account_id as citizen,
		block_timestamp as ddate
	from near.core.fact_actions_events_function_call
	where method_name = 'create_account' and args LIKE '%new_account_id%' ), txns as (
	SELECT
	
	MIN(a.block_timestamp) as mdate,
		
		tx_signer
	from near.core.fact_receipts a
	LEFT JOIN near.core.fact_transactions t ON a.tx_hash = t.tx_hash
	LEFT JOIN near.core.fact_actions_events_function_call f ON a.tx_hash=f.tx_hash
	WHERE 1=1
		AND receiver_id='v2.ref-finance.near'
		 --AND (a.tx_hash = '9PTe5i2iV7CgHdHFj5zyL7TTRATKege6bG3z7PzD2VGN' OR a.tx_hash='zzwK6JTxtSNFhWX2k7gfvuA7ZgfkxrfokpS4F71y9K8')
	--AND (tx_receiver = 'v2.ref-finance.near' OR args LIKE '%\"receiver_id\":\"v2.ref-finance.near\"%')
		AND tx not ilike '%"status":{"Failure"%'
	GROUP BY tx_signer ) SELECT
	 COUNT(citizen) as totals,
		CASE
	WHEN TIMEDIFF(days,ddate,mdate) = 0 THEN 'same day'
				WHEN TIMEDIFF(days,ddate,mdate) <=7  THEN '1 week'
				WHEN TIMEDIFF(days,ddate,mdate) <=14  THEN '2 week'
				WHEN TIMEDIFF(days,ddate,mdate) <=21  THEN '3 week'
				ELSE '~ 1 Month or more' END as cat from citizens LEFT JOIN txns ON citizen=tx_signer WHERE mdate IS NOT NULL GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 677
QUERY_ID: 8f23f503-4f74-47ec-a290-941746982122
QUERY_TITLE: immense-harlequin

QUERY_STRING:

WITH yearly_data AS (
	  SELECT
	
	
	 date_trunc('year', block_timestamp) AS year,
	
	
	SUM(CASE WHEN from_address = LOWER('0x0000000000000000000000000000000000000000')
	
	
	
	
	
	 THEN cast(raw_amount_precise as NUMERIC)/1e6 ELSE 0 END) AS token_minted,
	
	
	SUM(CASE WHEN to_address = LOWER('0x0000000000000000000000000000000000000000')
	
	
	
	
	
	 THEN cast(raw_amount_precise as NUMERIC)/1e6  ELSE 0 END) AS token_burnt,
	
	
	token_minted-token_burnt as net_supply
	  FROM
	
	
	 ethereum.core.fact_token_transfers
	  WHERE 1=1
	
	
	AND contract_address = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48')
	
	
	AND block_timestamp BETWEEN '2018-01-01' AND '2025-01-01'
	  GROUP BY
	
	
	 year ) SELECT
	
	year,
	  token_minted,
	  token_burnt,
	  net_supply,
	  SUM(net_supply) OVER (ORDER BY year ASC) AS cumulative_supply FROM
	
	yearly_data ORDER BY
	
	year ASC;



=======================================================================================
=======================================================================================
QUERY_NO: 678
QUERY_ID: 46082471-6125-41fb-8690-d31debe12a44
QUERY_TITLE: [ENS][Q10] Historic Registration Trends

QUERY_STRING:

with totals as ( SELECT
		REPLACE(event_inputs:"owner",'"','') as owner,
		COUNT( REPLACE(event_inputs:"name",'"','')) as domains,
		MAX(date_trunc('day', block_timestamp)) as max_date,
	MIN(date_trunc('day', block_timestamp)) as min_date
		from ethereum.events_emitted
	WHERE
		contract_address = lower('0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5')
		AND event_name = 'NameRegistered' GROUP BY owner ORDER BY domains DESC ) SELECT
	date_trunc('month', max_date) as ddate,
		CASE
	WHEN domains=1 OR (domains>1 AND min_date=max_date) THEN 'new'
	
				ELSE 'multiple' END
					as trend,
		COUNT(trend) as total from totals GROUP BY ddate,trend



=======================================================================================
=======================================================================================
QUERY_NO: 679
QUERY_ID: 465e1947-a678-4fb0-a194-3ade378a398a
QUERY_TITLE: [ALGO][Q2] Total Wallets in Governance

QUERY_STRING:

with comms as (
	SELECT
	
		CASE WHEN RECEIVER='GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' THEN 1 ELSE 0 END as p1,
			CASE WHEN RECEIVER='57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY' THEN 1 ELSE 0 END as p2,
			sender,
		tx_id,
			block_id,
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) as msg,
			--TRY_TO_NUMBER(LTRIM(substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ))) as num_value,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) as num_value,
			TO_NUMBER(last_value(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '\\:\\s?(\\d+)', 1, 1, 'e', 1) ) OVER (PARTITION BY sender,p1, p2 order by block_id asc))/1e6 as final_commit,
			CASE WHEN num_value IS NULL THEN substr(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), 17, length(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note))  -1 -17 ) ELSE NULL END as error
	from algorand.payment_transaction
	WHERE
		TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE 'af/gov1:j{"com%'
		AND RECEIVER IN('GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U', '57QZ4S7YHTWPRAM3DQ2MLNSVLAQB7DTK4D7SUNRIEFMRGOU7DMYFGF55BY')
	
		--AND RECEIVER IN( 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U')
		--AND sender = '6NTP2VYDYVNYJECH5KTWHX43CRNMAMDFHUEJNQDTTSPKHVB6P6J6MKKOTE'
			--AND NOT (TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE  ANY ('%:0}', '%: 0}')) ), p1_voters_debug as (	
	SELECT
	
		sender,
		tx_id,
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*(\\d),\\w.*', 1, 1, 'e', 1) as prop,
			last_value(tx_id) OVER (PARTITION BY sender,prop order by block_id asc) as last_tx_id,
			last_value(lower(REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d,(\\w).*', 1, 1, 'e', 1))) OVER (PARTITION BY sender,prop order by block_id asc) as final_opt
	from algorand.payment_transaction
	WHERE
		regexp_like(TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.*\\d{1},\\w.*')
			
		--AND TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note) LIKE '%"%"%'
		AND receiver = 'GULDQIEZ2CUPBSHKXRWUW7X3LCYL44AI5GGSHHOQDGKJAZ2OANZJ43S72U' ), grouper as (
	  SELECT
	MAX(p1) as p1,
	 
		MAX(p2) as p2,
	 
		sender
		from comms
		WHERE
			(p1=1)
		OR p2=1
		GROUP BY SENDER ), total_across as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 OR P2 committed' as label,
		'test' as dummy
		from grouper ), total_p1 as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 committed' as label,
		'test' as dummy
		from grouper
		WHERE p1=1 ), total_p2 as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P2 committed' as label,
		'test' as dummy
		from grouper
		WHERE p2=1 ), total_both as (
	SELECT COUNT(DISTINCT sender) as totals,
		'P1 & P2 committed' as label,
		'test' as dummy
		from grouper
		WHERE p2=1 AND p1=1 ), combo as (
	  SELECT * from total_both
	  UNION
	
	SELECT * from total_p2
	  UNION
	
	SELECT * from total_p1
	  UNION
	
	SELECT * from total_across ), active_wallets as (
	SELECT COUNT(DISTINCT address) as total_wallets,
		'test' as dummy
		from algorand.account
	WHERE
		account_closed = FALSE ) SELECT label, totals, total_wallets, (totals/total_wallets)*100 as wallet_percentage from combo LEFT JOIN active_wallets ON combo.dummy = active_wallets.dummy WHERE label = 'P1 OR P2 committed'



=======================================================================================
=======================================================================================
QUERY_NO: 680
QUERY_ID: 4ab71e7d-a66c-40b2-af59-406ce6480a80
QUERY_TITLE: [Optimism][Q10] Daily Swaps: Velodrome vs Uniswap

QUERY_STRING:

with swaps as (
	SELECT ORIGIN_FROM_ADDRESS as sender, tx_hash, block_timestamp, 'velodrome'  as type from optimism.velodrome.ez_swaps
	UNION ALL
	 SELECT
		origin_from_address as sender,
		tx_hash,
		block_timestamp,
		'uniswap' as type
	 from optimism.core.fact_event_logs
	WHERE 1=1
		AND ORIGIN_TO_ADDRESS IN ('0xe592427a0aece92de3edee1f18e0157c05861564',	--Uniswap V3: Router
							 '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45') --V3 Router 2
		AND event_name ='Swap' ) SELECT COUNT(DISTINCT tx_hash) as total_swaps,
	type,
	block_timestamp::date as ddate from swaps  GROUP by ddate, type



=======================================================================================
=======================================================================================
QUERY_NO: 681
QUERY_ID: 4af4b427-986a-4b3e-8a6d-59c24dfcf0f6
QUERY_TITLE: [BANKLESS] Dex Swaps Example

QUERY_STRING:

with swap_outs as (
	SELECT
	 
	tx_id
	FROM ethereum.dex_swaps
	WHERE
		token_address = '0x2d94aa3e47d9d5024503ca8491fce9a2fb4da198'
		AND block_timestamp <= '2022-03-01'
		AND direction = 'OUT' ), groups as (
	SELECT
		MAX(CASE WHEN direction='IN' THEN token_address ELSE NULL END) as token_in,
		MAX(pool_name) as pool_name,
		MAX(pool_address) as pool_address,
		MAX(platform) as platform,
		tx_id
	from ethereum.dex_swaps
	WHERE
		tx_id IN (SELECT * from swap_outs)
	GROUP BY tx_id ) SELECT * from groups WHERE
	pool_name = 'USDC-WETH SLP' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 682
QUERY_ID: eaf850ef-b826-4d51-b3e8-4647312b479e
QUERY_TITLE: [NEAR][2023] Block Producers per day

QUERY_STRING:

SELECT
	date_trunc('day', BLOCK_TIMESTAMP) as ddate
	, COUNT(DISTINCT block_author) as validators from near.core.fact_blocks GROUP BY ddate ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 683
QUERY_ID: 174f89fc-5796-4fda-917f-e7b75bbbb104
QUERY_TITLE: [ALGO] Algofi USDC alternate

QUERY_STRING:

with algofi_call_groups as (
	SELECT
	tx_group_id,
				CASE
	WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'liquidity -'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: b' THEN 'borrow +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'liquidity +'
						WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rb' THEN 'borrow -'
						ELSE NULL END as types,
	
				CASE
	WHEN app_id = '465814065' THEN 'ALGO'
						WHEN app_id = '465814103' THEN 'USDC'
						WHEN app_id = '465814149' THEN 'goBTC'
						WHEN app_id = '465814222' THEN 'goETH'
					
	 WHEN app_id = '465814278' THEN 'STBL'
						ELSE NULL END as market
	
		from algorand.application_call_transaction
		WHERE
			app_id IN (	--'465814065' --ALGO market
						'465814103' --USDC
						--'465814149', --goBTC
						--'465814222', --goETH
						--'465814278'  --STBL
				)
			AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: b', 'Market: mt', 'Market: rb' )
						 ), ordered as (
	
	SELECT
	row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra DESC) as order_num, *
		from algorand.transactions
	WHERE
	
		tx_group_id IN (
	
							SELECT tx_group_id from algofi_call_groups
						)
			AND inner_tx = FALSE ), groups as (
	SELECT
	
				DISTINCT ordered.tx_group_id, market, tx_type, block_timestamp, sender,
				CASE
	WHEN market='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:amt/1e6
					
	WHEN market='ALGO' AND tx_type = 'pay' THEN TX_MESSAGE:txn:amt/1e6
						ELSE NULL END as algo_amount,
	
				CASE	WHEN market!='ALGO' AND tx_type = 'appl' THEN TX_MESSAGE:dt:itx[0]:txn:aamt
						WHEN market!='ALGO' AND tx_type = 'axfer' THEN TX_MESSAGE:txn:aamt
						ELSE NULL END as asset_amount_pre,
	
				CASE
	WHEN market IN ('goETH', 'goBTC') THEN asset_amount_pre/1e8
						ELSE asset_amount_pre/1e6 END as asset_amount,
				CASE	WHEN types LIKE '% -%' THEN COALESCE(algo_amount,asset_amount)*(-1)
					ELSE COALESCE(algo_amount,asset_amount) END as amount,
				regexp_substr(types, '(\\w+) ', 1, 1, 'e', 1) as types
		from ordered
		JOIN algofi_call_groups acg ON ordered.tx_group_id = acg.tx_group_id
	WHERE
			order_num = 1
			AND (block_timestamp>='2021-12-14' AND block_timestamp<'2022-02-01')
		 ), refine  as (
	SELECT SUM(amount) as total_amount,
		types,
		date_trunc('day', block_timestamp ) as ddate
		from groups
		WHERE 
		types IN ('liquidity', 'borrow')
		GROUP BY ddate,types
	
	), dates as ( 
	select
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '+' || row_number() over (order by null),  TO_DATE('2021-12-12')) as ddate
	from table (generator(rowcount => 51)) ), mock_types as (
	SELECT DISTINCT types
		from refine
		LIMIT 2 ), base_data as (
	select ddate, types, 0 as backup
	  from dates d
	  CROSS JOIN (
	 
	SELECT types from mock_types
	  ) ) SELECT
	b.ddate,
			b.types,
			COALESCE(total_amount, backup) as total_amount,
		SUM(total_amount) OVER ( PARTITION BY b.types ORDER BY b.ddate ASC) as amount_over_time from base_data b LEFT JOIN refine c ON b.ddate = c.ddate AND b.types=c.types



=======================================================================================
=======================================================================================
QUERY_NO: 684
QUERY_ID: cd0b2392-a383-4190-8b19-3269b19f3a83
QUERY_TITLE: Yeet

QUERY_STRING:

-- forked from Honeypot Finance @ https://flipsidecrypto.xyz/edit/queries/b11bb11d-6acc-4471-91a7-070052a5d3cd -- forked from Ramen Finance  @ https://flipsidecrypto.xyz/edit/queries/54d08323-88fe-45d3-8fd9-7094537fd0de with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 685
QUERY_ID: 5c641e1a-6873-4ea7-8fa2-d9fffa6d0fca
QUERY_TITLE: Contracts Over Time (cumulative)

QUERY_STRING:

with base as (
	SELECT
		tx_receiver as contract,
		a.block_timestamp,
	
	first_value(a.block_timestamp) OVER (PARTITION BY contract ORDER BY a.block_timestamp) as origin,
		tx
	from near.core.fact_actions_events a
	 LEFT JOIN near.core.fact_transactions t ON t.tx_hash = a.tx_hash
	where action_name = 'DeployContract' ), refine as(
	SELECT
	COUNT(DISTINCT contract) as totals,
		CASE WHEN block_timestamp = origin THEN 'new' ELSE 'upgrade existing' END as cat,
		date_trunc('day', block_timestamp) as ddate
	from base
	GROUP BY ddate, cat
	ORDER BY ddate  ) SELECT *  from refine



=======================================================================================
=======================================================================================
QUERY_NO: 686
QUERY_ID: 56a569a9-5a67-4048-8033-e03f434b4736
QUERY_TITLE: Selected Wallet Trading Over Time

QUERY_STRING:

-- forked from Selected Wallet's Trades Data @ https://flipsidecrypto.xyz/edit/queries/6cd83106-0d46-474e-ad44-5026449d1e1a -- forked from Random Sampler (Vertex + GMX Traders) @ https://flipsidecrypto.xyz/edit/queries/e00fcb9f-ef7f-40c7-8b5f-d4f5640a9578 with v1 as (
	SELECT
	
	block_timestamp
	  , 'GMX V1' as platform
	  , TO_VARCHAR(DECODED_LOG:account) as account
	  , TO_VARCHAR(DECODED_LOG:index) as market
	  , event_name as order_type
	  , CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as trade_type
	  , DECODED_LOG:"sizeDelta"/1e30 as volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	  , DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	  , ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	  , DECODED_LOG
	  , tx_hash
	  -- , DECODED_LOG:path
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN arbitrum.core.dim_contracts con
	 ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	  AND EVENT_NAME ILIKE 'Create%'
	  AND DECODED_LOG:account = lower('{{account}}')
	  AND DECODED_LOG:"collateralDelta" IS NOT NULL
	  AND tx_status = 'SUCCESS' ) , v2 as (
	with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	  AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	  AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS'
	)
	,
	orders_created as (
	  SELECT
	
	  tx_hash
	
	 , block_timestamp
	
	 , DECODED_LOG
	
	 , DECODED_LOG:"eventData"[0][0][0][1] as account
	
	 , DECODED_LOG:"eventData"[0][0][4][1] as market
	
	 , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	
	 , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	
	 , DECODED_LOG:"eventData"[1][0][2][1]/1e30 as volume  --div by 1e30
	
	 , DECODED_LOG:"eventData"[4][0][0][1] as key
	
	 , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	
	 , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as trade_type
	
	 , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	  from arbitrum.core.ez_decoded_event_logs
	
	WHERE 1=1
	
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	
	 AND decoded_log:"eventName"='OrderCreated'
	
	 AND DECODED_LOG:"eventData"[0][0][0][1] = lower('{{account}}')
	
	 AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	
	 AND event_name='EventLog2'
	
	 AND tx_status = 'SUCCESS'
	)
	SELECT
	
	c.block_timestamp
	  , 'GMX V2' as platform
	  , TO_VARCHAR(account) as account
	  , TO_VARCHAR(market) as market
	  , order_type
	  , trade_type
	  , volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	  , execution_fee_eth
	  , ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	  , c.DECODED_LOG
	  , c.tx_hash
	from orders_created c
	 LEFT JOIN orders_exec e ON c.key=e.ex_key
	LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address
	WHERE 1=1
	  AND exec=1 ) , vertex as (
	SELECT
	  block_timestamp
	  , TO_VARCHAR('Vertex ' || version) as platform
	  , trader as account
	  , SYMBOL as market
	  , order_type
	  , trade_type
	
	, amount_usd as volume
	  , fee_amount
	  , NULL as collateral_token
	  , NULL as init_collateral_delta_amount
	  , NULL as execution_fee_eth
	  , ARRAY_CONSTRUCT('orderExecuted:' || tx_hash) as tx_hashes
	  , NULL as DECODED_LOG
	  , tx_hash
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND trader = lower('{{account}}') ) , combo as (
	SELECT * from v1
	UNION
	 SELECT * from v2
	UNION
	 SELECT * from vertex ) SELECT
	 block_timestamp::date as ddate
	, CASE WHEN platform ilike 'gmx%' THEN 'GMX' ELSE 'VERTEX' END as cat
	, SUM(volume) as volume
	, SUM(fee_amount) as fees from COMBO GROUP BY DDATE, cat ORDER BY DDATE ASC -- SELECT * from combo



=======================================================================================
=======================================================================================
QUERY_NO: 687
QUERY_ID: 3400a889-8ce4-4330-b463-a2ded60616eb
QUERY_TITLE: [ALGO][Q78] Top Purchasers by Algo Spent

QUERY_STRING:

with ab_txns as (
	SELECT tx_group_id, sender
	from algorand.payment_transaction
		WHERE
			try_base64_decode_string(tx_message:txn:note::string) = 'ab2.gallery' ), base as (
	SELECT row_number() OVER (PARTITION by TX_GROUP_ID ORDER BY intra) as order_num, *
	
	from algorand.transactions
	WHERE
	
		tx_group_id IN ( SELECT tx_group_id from ab_txns ) ), filter_trades as (
	
	SELECT
	 
	COUNT(tx_id) as totals,
	
	
	MAX(block_timestamp) as trade_close_date,
			MAX(CASE WHEN order_num=3 THEN tx_message:txn:amt/1e6 ELSE NULL END) as algo_amount,
			MAX(CASE WHEN order_num=3 THEN sender ELSE NULL END) as buyer,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:aamt ELSE NULL END) as asset_amount,
			MAX(CASE WHEN order_num=4 THEN tx_message:txn:xaid ELSE NULL END) as asset_id,
	 
	tx_group_id
	  from base
	  GROUP BY tx_group_id ), top10 as (
	SELECT
		buyer as wallet,
		SUM(algo_amount) as algo_spent,
		COUNT(tx_group_id) as NFT_purchases
	from filter_trades
	WHERE
		(totals= 5 or totals= 4)
		AND algo_amount IS NOT NULL
	GROUP BY wallet ORDER BY algo_spent DESC
	LIMIT 10 ) SELECT
	 *,
	concat(substr(wallet,0,4), '...', substr(wallet, len(wallet)-3, len(wallet))) as wallet_trunc from top10



=======================================================================================
=======================================================================================
QUERY_NO: 688
QUERY_ID: 3be3106e-1c79-4089-842f-dce577a5078c
QUERY_TITLE: Copy of [MM][Q1] Total Users/Holders

QUERY_STRING:

SELECT
	COUNT(*),
		max(tx_hash),
		max(origin_to_address),
		CASE WHEN ORIGIN_TO_ADDRESS='0x881d40237659c251811cec9c364ef91dc08d300c' THEN 'metamask' ELSE platform END as platform from ethereum.core.ez_dex_swaps WHERE 1=1
		AND block_timestamp >='2021-10-01' AND block_timestamp<='2022-06-20' GROUP BY platform



=======================================================================================
=======================================================================================
QUERY_NO: 689
QUERY_ID: 5930c778-d488-4959-b631-23c43d1a3d31
QUERY_TITLE: [ALGO][Q1] Top 20 ASAs ( By Number of Holders )

QUERY_STRING:

SELECT
	COUNT(DISTINCT address) as holders,
	asset_id, asset_name from algorand.account_asset WHERE
	asset_closed = FALSE
	AND frozen = FALSE GROUP BY asset_id, asset_name ORDER BY holders DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 690
QUERY_ID: 672a1bc0-6413-4590-97c9-9c53f64a2786
QUERY_TITLE: [avax] Data Debug

QUERY_STRING:

with base as (
	SELECT
	block_number,
		lag(block_number,1) OVER (order by block_number) as pblock_number,
		block_number-pblock_number as diff,
		block_timestamp,
		lag(block_timestamp,1) OVER (ORDER BY block_number) as ptime,
		DATEDIFF(seconds, ptime, block_timestamp) as block_time_seconds
	from avalanche.core.fact_blocks
	WHERE 1=1
		AND  block_timestamp::date = '2022-06-24' ) SELECT
	block_number,
		pblock_number,
		diff,
		block_time_seconds,
		block_timestamp, ptime from base WHERE diff>1 ORDER BY DIFF DESC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 691
QUERY_ID: 558a21df-be05-4877-ab3f-a0dcf6171c9a
QUERY_TITLE: [ALGO][Q33] Staking STBL Actions Over Time

QUERY_STRING:

with app_calls as (
	SELECT
		tx_group_id,
		CASE
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: rcu' THEN 'unstaked'
			WHEN try_base64_decode_string(tx_message:txn:note::string) = 'Market: mt' THEN 'staked'
			ELSE NULL END as cat
	from algorand.application_call_transaction
	WHERE
		app_id = '482608867'
		AND try_base64_decode_string(tx_message:txn:note::string) IN ( 'Market: rcu', 'Market: mt' ) ), stakes as (
	SELECT
		block_timestamp,
		tx_group_id,
		asset_amount/1e6 as amt,
		'staked' as cat
	from algorand.asset_transfer_transaction
	WHERE
		tx_group_id IN ( SELECT tx_group_id from app_calls WHERE cat = 'staked') ), --TX_MESSAGE:dt:itx[0]:txn:amt/1e6 unstakes as (
	SELECT
		block_timestamp,
		tx_group_id,
		--tx_id,
		--TX_MESSAGE,
		TX_MESSAGE:dt:itx[0]:txn:aamt/1e6 as amt,
		'unstaked' as cat
	from algorand.transactions
	WHERE
		tx_group_id IN ( SELECT DISTINCT tx_group_id from app_calls WHERE cat = 'unstaked')
		AND tx_type = 'appl' AND TX_MESSAGE:dt:itx[0]:txn:aamt IS NOT NULL ), combo as (
	SELECT * from stakes
	UNION ALL
	SELECT * from unstakes ) SELECT
	COUNT(DISTINCT tx_group_id) as totals,
	cat,
	date_trunc('day', block_timestamp) as ddate from combo GROUP by ddate,cat ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 692
QUERY_ID: 39a48443-3289-4ef5-907a-307493820d87
QUERY_TITLE: [NEAR] Active Wallets Base

QUERY_STRING:

with base_wallets as (
	SELECT
	
	COUNT(*) as txns,
		TX_SIGNER as wallet,
		MAX(DATEADD('day', 90, date_trunc('day', block_timestamp))) as ddate_90,
		MAX(DATEADD('day', 60, date_trunc('day', block_timestamp))) as ddate_60,
		MAX(DATEADD('day', 30, date_trunc('day', block_timestamp))) as ddate_30,
		MAX(DATEADD('day', 7, date_trunc('day', block_timestamp))) as ddate_7,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.mdao_near.transactions
	WHERE
		block_timestamp >= '2022-01-01' -- Extra Time to store up wallets
	GROUP BY ddate, wallet ), dates as ( 
	SELECT
		-- first argument is unit of time to add, second is amount to increment, third is starting date
		dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as dkey
	from table (generator(rowcount => 365)) ), mixer90 as (
	 SELECT
		d.dkey,
		b.wallet,
		b.ddate,
		'90day Rolling' as cat
	from dates d
	INNER JOIN base_wallets b ON d.dkey<=ddate_90 AND d.dkey>=b.ddate ) SELECT
	COUNT(DISTINCT wallet) as active_wallets,
	dkey from mixer90 WHERE
	dkey >= '2022-03-01' GROUP BY dkey ORDER BY dkey ASC



=======================================================================================
=======================================================================================
QUERY_NO: 693
QUERY_ID: 7aebf8ce-2fe2-431c-a027-fbd405e4ca3d
QUERY_TITLE: Total Ecosystem Raises - Plot

QUERY_STRING:

-- forked from Total Ecosystem Raises - Results @ https://flipsidecrypto.xyz/edit/queries/8638c461-957b-42a9-b065-da229d221a53 with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , merger as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b'
	  AND STATUS = 'SUCCESS'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	
	AND STATUS = 'SUCCESS'
	
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND STATUS = 'SUCCESS'
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	 UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	
	 UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	  SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	  UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS'
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as USER
	  , AMOUNT_USD/price as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.ez_token_transfers t
	 LEFT JOIN (
	  SELECT
	
	  price , hour
	
	from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	  AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	  ) p on date_trunc('hour', t.block_timestamp) = p.hour
	WHERE 1=1
	
	AND tx_hash in (
	
	
	  SELECT
	
	
	
	
	 tx_hash
	
	
	  from ethereum.core.fact_transactions
	
	
	  WHERE 1=1
	
	
	
	 AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	 AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	 AND STATUS = 'SUCCESS'
	
	 )
	  --AND t.SYMBOL = 'OHM' ) , combo as (
	SELECT
	
	date_trunc('month', block_timestamp) as ddate
	  , SUM(cost_eth) as eth_raised
	  , SUM(cost_eth * p.price) as usd_raised
	  , label as project
	  --, 'Ecosystem/Community Fundraise' as tag
	from merger m
	LEFT JOIN (
	
	 SELECT price
	
	  from crosschain.price.ez_prices_hourly
	
	  WHERE 1=1 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	
	 AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	
	
	 AND HOUR >=CURRENT_DATE -1
	
	
	 ORDER BY HOUR DESC LIMIT 1
	
	 ) p on 1=1
	GROUP BY ddate ,label
	
	UNION ALL
	select date_trunc('month', block_timestamp) as ddate, NULL as eth_raised , raised_in_usd as usd_raised, project --, 'VC/Seed/Series XYZ' as tag
	from(
	select TO_TIMESTAMP(1710939960) as block_timestamp, 'https://fxtwitter.com/0xoogabooga/status/1770436712684044707' as source,'Ooga Booga' as project, 1000000 as raised_in_usd
	union
	select TO_TIMESTAMP(1688070600) as block_timestamp, 'https://fxtwitter.com/stackingsalmon' as source,'Stacking Salmon' as project, 250000
	union
	select TO_TIMESTAMP(1706536800) as block_timestamp, 'https://fxtwitter.com/InfraredFinance/status/1751968505682092241' as source,'Infrared',2500000
	union
	select TO_TIMESTAMP(1707138000) as block_timestamp, 'https://fxtwitter.com/KodiakFi/status/1754490009368039481','Kodiak',2000000
	union
	select TO_TIMESTAMP(1712158200) as block_timestamp, 'https://fxtwitter.com/NAVFinance_/status/1775543050217111704','Nav',3000000
	union
	select TO_TIMESTAMP(1715805000) as block_timestamp, 'https://fxtwitter.com/shogunfi/status/1790842628591726730','Shogun',6900000)
	union
	 SELECT date_trunc('month', block_timestamp) as ddate, NULL as eth_raised , raised_in_usd as usd_raised, project --, 'VC/Seed/Series XYZ' as tag
	from
	
	(
	
	 select
	
	
	 TO_TIMESTAMP(1714417200) as block_timestamp
	
	
	, 'https://fxtwitter.com/berabot_/status/1785022321838760443' as source
	
	
	, 'Berabot' as project
	
	
	, 60 as cost_eth
	
	
	, cost_eth*price as raised_in_usd
	
	 from ethereum.price.ez_prices_hourly
	
	 WHERE 1=1
	
	
	AND symbol='WETH'
	
	
	AND blockchain='ethereum' AND HOUR >=CURRENT_DATE -1
	
	 ORDER BY HOUR DESC
	
	  LIMIT 1
	  ) ) SELECT
	 ddate
	, project
	, ROUND(usd_raised,0) as usd_raised
	, ROUND(eth_raised,2) as eth_raised from combo ORDER BY DDATE ASC



=======================================================================================
=======================================================================================
QUERY_NO: 694
QUERY_ID: 7cd70382-c6f7-496d-9d07-5cf5508d9c3d
QUERY_TITLE: [POOLY][Q2] Collector Stats

QUERY_STRING:

with base as (
	SELECT 
	*,
		CASE	WHEN NFT_ADDRESS = lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523') THEN 'Pooly Judge'
				WHEN NFT_ADDRESS = lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9') THEN 'Pooly Lawyer'
				ELSE 'Pooly Supporter' END as types,
		rank() over (PARTITION by TOKENID ORDER BY BLOCK_TIMESTAMP DESC) as row_num
	from ethereum.core.ez_nft_transfers
	WHERE
		NFT_ADDRESS IN
	
	(lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523'),
		 lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9'),
		 lower('0x90B3832e2F2aDe2FE382a911805B6933C056D6ed'))
	qualify row_num=1 ),		 bins as (
	SELECT
	COUNT(*) as totals,
		CASE
	WHEN totals>5 THEN 'More than 5'
				ELSE to_varchar(totals) END as total_collected,
		NFT_TO_ADDRESS
	from base
	GROUP BY NFT_TO_ADDRESS
	 ) SELECT
	COUNT(DISTINCT NFT_TO_ADDRESS) as addresses,
	total_collected from bins GROUP BY total_collected



=======================================================================================
=======================================================================================
QUERY_NO: 695
QUERY_ID: 841f4a59-26f5-447f-9880-bd20498b9d94
QUERY_TITLE: [Tutorial] Charting Different Scales.

QUERY_STRING:

with base as (
	SELECT
	  date_trunc('day', block_timestamp) AS DDATE,
	  SUM(amount) as algo_daily,
	  COUNT(tx_id) as txns_daily
	FROM algorand.payment_transaction
	WHERE
		receiver = '2XBL47CKYWTNAIVUQCTAMFBL75EXXRT3TBG2ZK7SOG7MDBER7Q3XNL77XQ'
		AND asset_id = 0
		AND tx_type_name = 'payment'
	GROUP BY DDATE ) SELECT
	*,
	SUM(algo_daily) OVER (ORDER BY DDATE ASC) as algo_cumulative from base ORDER BY DDATE



=======================================================================================
=======================================================================================
QUERY_NO: 696
QUERY_ID: 3d2dca7f-49a1-4741-be81-843c94124043
QUERY_TITLE: Lofty - Properties Ranked by TTIP ( Raw Data )

QUERY_STRING:

with loft_asas as (
	SELECT asset_name, asset_url,total_supply,total_supply*50 as TTIP, asset_id
	from algorand.asset
	WHERE
		creator_address = 'LOFTYRITC3QUX6TVQBGT3BARKWAZDEB2TTJWYQMH6YITKNH7IOMWRLC7SA'
			AND (ASSET_NAME IS NOT NULL AND asset_name!='Lofty AI') ) SELECT
	row_number() OVER (ORDER BY TTIP DESC)as rank,
	replace(asset_name,'Lofty ', '') as asset_name,
	asset_url,
	TTIP	 from loft_asas ORDER BY TTIP DESC



=======================================================================================
=======================================================================================
QUERY_NO: 697
QUERY_ID: eca159f4-977e-4bbf-aad9-cb22c5694382
QUERY_TITLE: Terra Flatten Example

QUERY_STRING:

SELECT
	T.tx_id, T.arr,
	 X.VALUE AS flatttt FROM (
	SELECT
	  tx_id,
	  msg_value:execute_msg:feed_price:prices as arr
	from terra.msgs
	WHERE
	  tx_id = '824E45B1B275538C0B9AD79E4FA513ECE67966B6C404263C307001F7AA64BD55') T,
	LATERAL FLATTEN(	T.arr) X



=======================================================================================
=======================================================================================
QUERY_NO: 698
QUERY_ID: ed2290c5-37aa-4d80-8db8-c6079544e6ce
QUERY_TITLE: Delegate change Frequency

QUERY_STRING:

SELECT  COUNT(tx_from_address) as totals, date_trunc('day', block_timestamp) as day_date
	  from ethereum.events_emitted
	  WHERE
	 
	contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND event_name = 'DelegateChanged'
		AND REPLACE(event_inputs:"fromDelegate",'"','') != '0x0000000000000000000000000000000000000000' --Ensure not first claim/first delegation.
		AND REPLACE(event_inputs:"fromDelegate",'"','') != REPLACE(event_inputs:"toDelegate",'"','') --Redundant check for sanity
		AND tx_from_address != REPLACE(event_inputs:"toDelegate",'"','') --Ensure current user not becoming Delegate coz of txn.
		AND block_timestamp >= CURRENT_DATE - 180
	GROUP BY day_date



=======================================================================================
=======================================================================================
QUERY_NO: 699
QUERY_ID: f8d1e594-9c75-4e0b-984c-3451da15f919
QUERY_TITLE: [WvS] Shuttle Users Interacted Over Time

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address )  SELECT
	date_trunc('day', shuttle_date) as ddate,
		COUNT(DISTINCT address) as new_users,
			SUM(new_users) OVER (ORDER BY ddate ASC)as user_growth from total_shuttle_users GROUP BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 700
QUERY_ID: dc9f1ce6-e092-4c77-8f3d-934aa432a6eb
QUERY_TITLE: NFT Markets Top Collections

QUERY_STRING:

-----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	collection_name
	, ROUND(SUM(sale_amount),0) as volume
	, COUNT(*) as trades
	, ROUND(AVG(sale_amount), 2) as avg_sale
	 from sales_mixer GROUP BY collection_name, creator ORDER BY volume DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 701
QUERY_ID: 47ec2aaa-04eb-458c-903b-824f3b4cdbcd
QUERY_TITLE: [wormhole] Total Shuttle Users

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp < '2021-10-20' ), terra_shuttle_in as (
		SELECT
	tx_id, date_trunc('day', block_timestamp) as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp < '2021-10-20' ). total_shuttle_users as (
	SELECT address from terra_shuttle_in
	UNION ALL
	SELECT address from terra_shuttle_out )



=======================================================================================
=======================================================================================
QUERY_NO: 702
QUERY_ID: 8135332f-4edd-40e5-afe3-c72dd7f473f8
QUERY_TITLE: ETH Stake - tests on fact_validators copy

QUERY_STRING:

-- forked from ETH Stake - tests on fact_validators @ https://flipsidecrypto.xyz/studio/queries/62bf07c9-2b1e-4bd2-a3ff-bf9716c1dfc4 ------------------------SAMPLE SPACE------------------------ with dates as (
	SELECT
	
	DISTINCT date_trunc('month', date_day) as dmonth
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '2020-11-01' AND CURRENT_DATE ) , -- sample_space as ( --
	SELECT  --
	  dmonth --
	  , wallet  --
	  , NULL as eth_staked --
	from dates  --
	LEFT JOIN wallets on 1=1 -- ) -- , validator_stamps as (
	SELECT
	
	pubkey
	  , MIN(CASE
	
	
	 WHEN validator_status IN ('active_ongoing', 'active_slashed')
	
	
	 THEN slot_timestamp ELSE NULL END)::date as min_active
	  , MAX(CASE
	
	
	 WHEN validator_status IN ('active_ongoing', 'active_slashed')
	
	
	 THEN slot_timestamp ELSE NULL END)::date as max_active
	  , MIN(CASE
	
	
	WHEN validator_status IN ('exited_unslashed', 'exited_slashed')
	
	
	 THEN slot_timestamp ELSE NULL END)::date as min_exit
	  , MAX(CASE
	
	
	 WHEN slashed=TRUE THEN 1 ELSE 0 END) as slashed
	from ethereum.beacon_chain.fact_validators v
	LEFT JOIN ethereum.beacon_chain.fact_blocks b ON v.slot_number = b.slot_number
	WHERE 1=1
	  AND validator_status in ('active_ongoing', 'active_slashed', 'exited_unslashed', 'exited_slashed')
	GROUP BY pubkey
	LIMIT 10
	--AND max_active>min_exit  --sanity test: so far has never happened  -> validator once exited has never restarted/became active again ) SELECT * from validator_stamps



=======================================================================================
=======================================================================================
QUERY_NO: 703
QUERY_ID: 86755d6a-e150-485e-8667-3a548c235d5b
QUERY_TITLE: Airdrop Daily Activity

QUERY_STRING:

-- forked from Airdrop Overview Stats @ https://flipsidecrypto.xyz/edit/queries/66b5df76-3846-4874-8881-d724cf30d931 with prices as (
	Select
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as ddate
	  , 'SEI' as symbol
	  , 'usei' as token_address
	  , 6 as decimal
	  , value[1] as price
	  from (
	
	 SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400')
	
	  as resp
	  ), LATERAL FLATTEN (input => resp:data:prices) ) , claims_base as (  SELECT
	tx_id
	, block_timestamp
	, receiver as user
	, amount/pow(10,6)  as amount
	, amount/pow(10,6)*price as volume
	from sei.core.fact_transfers t
	LEFT JOIN prices p ON trunc(t.block_timestamp,'hour') = p.ddate
	where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18' ) , summaries as (
	SELECT
	
	trunc(block_timestamp,'day') as ddate
	  , COUNT(DISTINCT user) as claimers
	  , SUM(claimers) OVER (order by ddate) as claimers_total
	  , SUM(amount) as amt_claimed
	  , SUM(volume) as amt_claimed_usd
	  , AVG(volume) as avg_usd
	  , AVG(amount) as avg_tokens
	  , MAX(volume) as max_usd
	  , MAX(amount) as max_token
	 from claims_base
	GROUP BY ddate ORDER BY DDATE ) SELECT * from summaries



=======================================================================================
=======================================================================================
QUERY_NO: 704
QUERY_ID: 303e80ea-363c-4d33-8639-89010c86b05c
QUERY_TITLE: SEI Transfers Abuse  RNG %

QUERY_STRING:

with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where hourly >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address ) ,  merge_txns as (
	SELECT
	
	SUM(CASE WHEN cat='in' THEN volume ELSE null END) as vol_in
	  , SUM(CASE WHEN cat='out' THEN volume ELSE null END) as vol_out
	  , SUM(CASE WHEN cat='drop' THEN volume ELSE NULL END) as vol_drop
	  , SUM(CASE WHEN cat='drop' THEN amount ELSE NULL END) as amt_drop
	  , COUNT(DISTINCT tx_id) as txns
	  , MIN(block_timestamp) as t_min
	  , MAX(block_timestamp) as t_max
	  , MIN(CASE WHEN cat='drop' THEN block_timestamp ELSE NULL END) as t_drop
	  , user
	from all_bridges
	GROUP BY user ) SELECT
	  CASE WHEN AMT_DROP <5000 THEN 'regular drop' ELSE 'EPIC drop' END as cat
	, COUNT(DISTINCT user) as totals from merge_txns where 1=1
	AND (VOL_IN>9999) group by cat



=======================================================================================
=======================================================================================
QUERY_NO: 705
QUERY_ID: f8d9f9fc-8704-46a0-80a4-452b70e5162e
QUERY_TITLE: Total Ecosystem Raises - Results by type

QUERY_STRING:

-- forked from Total Ecosystem Raises - Results @ https://flipsidecrypto.xyz/edit/queries/8638c461-957b-42a9-b065-da229d221a53 with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , merger as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b'
	  AND STATUS = 'SUCCESS'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	
	AND STATUS = 'SUCCESS'
	
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND STATUS = 'SUCCESS'
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	 UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	
	 UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	  SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	  UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS'
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as USER
	  , AMOUNT_USD/price as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.ez_token_transfers t
	 LEFT JOIN (
	  SELECT
	
	  price , hour
	
	from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	  AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	  ) p on date_trunc('hour', t.block_timestamp) = p.hour
	WHERE 1=1
	
	AND tx_hash in (
	
	
	  SELECT
	
	
	
	
	 tx_hash
	
	
	  from ethereum.core.fact_transactions
	
	
	  WHERE 1=1
	
	
	
	 AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	 AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	 AND STATUS = 'SUCCESS'
	
	 )
	  --AND t.SYMBOL = 'OHM' ) , combo as (
	SELECT
	
	SUM(cost_eth) as eth_raised
	  , SUM(cost_eth * p.price) as usd_raised
	  , label as project
	  , 'Ecosystem/Community Fundraise' as tag
	from merger m
	LEFT JOIN (
	
	 SELECT price
	
	  from crosschain.price.ez_prices_hourly
	
	  WHERE 1=1 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	
	 AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	
	
	 AND HOUR >=CURRENT_DATE -1
	
	
	 ORDER BY HOUR DESC LIMIT 1
	
	 ) p on 1=1
	GROUP BY label
	
	UNION
	 select NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from(
	select 1710939960 as block_timestamp, 'https://fxtwitter.com/0xoogabooga/status/1770436712684044707' as source,'Ooga Booga' as project, 1000000 as raised_in_usd
	union
	select 1688070600 as block_timestamp, 'https://fxtwitter.com/stackingsalmon' as source,'Stacking Salmon' as project, 250000
	union
	select 1706536800 as block_timestamp, 'https://fxtwitter.com/InfraredFinance/status/1751968505682092241' as source,'Infrared',2500000
	union
	select 1707138000 as block_timestamp, 'https://fxtwitter.com/KodiakFi/status/1754490009368039481','Kodiak',2000000
	union
	select 1712158200 as block_timestamp, 'https://fxtwitter.com/NAVFinance_/status/1775543050217111704','Nav',3000000
	union
	select 1715805000 as block_timestamp, 'https://fxtwitter.com/shogunfi/status/1790842628591726730','Shogun',6900000)
	union
	 SELECT NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from
	
	(
	
	 select
	
	
	 1714417200 as block_timestamp
	
	
	, 'https://fxtwitter.com/berabot_/status/1785022321838760443' as source
	
	
	, 'Berabot' as project
	
	
	, 60 as cost_eth
	
	
	, cost_eth*price as raised_in_usd
	
	 from ethereum.price.ez_prices_hourly
	
	 WHERE 1=1
	
	
	AND symbol='WETH'
	
	
	AND blockchain='ethereum' AND HOUR >=CURRENT_DATE -1
	
	 ORDER BY HOUR DESC
	
	  LIMIT 1
	  ) ) SELECT
	 ROUND(SUM(usd_raised),0) as usd_raised
	, ROUND(SUM(eth_raised),2) as eth_raised
	, tag from combo GROUP BY TAG ORDER BY tag DESC



=======================================================================================
=======================================================================================
QUERY_NO: 706
QUERY_ID: d573cf96-18cb-41e5-b5d4-d2127f032725
QUERY_TITLE: status events sample

QUERY_STRING:

SELECT
	validator_status
	, COUNT(DISTINCT pubkey) as totals
	, MAX(pubkey) as sample_pubkey from ethereum.beacon_chain.fact_validators GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 707
QUERY_ID: 9b6ef6ad-97ed-46c5-9772-b22973207d00
QUERY_TITLE: Total Ecosystem Raises - Results Summaries

QUERY_STRING:

-- forked from Total Ecosystem Raises - Results by type @ https://flipsidecrypto.xyz/edit/queries/f8d9f9fc-8704-46a0-80a4-452b70e5162e -- forked from Total Ecosystem Raises - Results @ https://flipsidecrypto.xyz/edit/queries/8638c461-957b-42a9-b065-da229d221a53 with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , merger as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b'
	  AND STATUS = 'SUCCESS'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	
	AND STATUS = 'SUCCESS'
	
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND STATUS = 'SUCCESS'
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	 UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	
	 UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	  SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	  UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS'
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as USER
	  , AMOUNT_USD/price as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.ez_token_transfers t
	 LEFT JOIN (
	  SELECT
	
	  price , hour
	
	from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	  AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	  ) p on date_trunc('hour', t.block_timestamp) = p.hour
	WHERE 1=1
	
	AND tx_hash in (
	
	
	  SELECT
	
	
	
	
	 tx_hash
	
	
	  from ethereum.core.fact_transactions
	
	
	  WHERE 1=1
	
	
	
	 AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	 AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	 AND STATUS = 'SUCCESS'
	
	 )
	  --AND t.SYMBOL = 'OHM' ) , combo as (
	SELECT
	
	SUM(cost_eth) as eth_raised
	  , SUM(cost_eth * p.price) as usd_raised
	  , label as project
	  , 'Ecosystem/Community Fundraise' as tag
	from merger m
	LEFT JOIN (
	
	 SELECT price
	
	  from crosschain.price.ez_prices_hourly
	
	  WHERE 1=1 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	
	 AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	
	
	 AND HOUR >=CURRENT_DATE -1
	
	
	 ORDER BY HOUR DESC LIMIT 1
	
	 ) p on 1=1
	GROUP BY label
	
	UNION
	 select NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from(
	select 1710939960 as block_timestamp, 'https://fxtwitter.com/0xoogabooga/status/1770436712684044707' as source,'Ooga Booga' as project, 1000000 as raised_in_usd
	union
	select 1688070600 as block_timestamp, 'https://fxtwitter.com/stackingsalmon' as source,'Stacking Salmon' as project, 250000
	union
	select 1706536800 as block_timestamp, 'https://fxtwitter.com/InfraredFinance/status/1751968505682092241' as source,'Infrared',2500000
	union
	select 1707138000 as block_timestamp, 'https://fxtwitter.com/KodiakFi/status/1754490009368039481','Kodiak',2000000
	union
	select 1712158200 as block_timestamp, 'https://fxtwitter.com/NAVFinance_/status/1775543050217111704','Nav',3000000
	union
	select 1715805000 as block_timestamp, 'https://fxtwitter.com/shogunfi/status/1790842628591726730','Shogun',6900000)
	union
	 SELECT NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from
	
	(
	
	 select
	
	
	 1714417200 as block_timestamp
	
	
	, 'https://fxtwitter.com/berabot_/status/1785022321838760443' as source
	
	
	, 'Berabot' as project
	
	
	, 60 as cost_eth
	
	
	, cost_eth*price as raised_in_usd
	
	 from ethereum.price.ez_prices_hourly
	
	 WHERE 1=1
	
	
	AND symbol='WETH'
	
	
	AND blockchain='ethereum' AND HOUR >=CURRENT_DATE -1
	
	 ORDER BY HOUR DESC
	
	  LIMIT 1
	  ) ) SELECT
	 ROUND(SUM(usd_raised),0) as usd_raised
	, ROUND(SUM(eth_raised),2) as eth_raised from combo



=======================================================================================
=======================================================================================
QUERY_NO: 708
QUERY_ID: a75b5519-543c-42d1-854c-d61747e30473
QUERY_TITLE: BeraPunk

QUERY_STRING:

-- forked from Beradoge @ https://flipsidecrypto.xyz/edit/queries/ec349266-44c4-414b-8fe0-238f085a6ea4 with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 709
QUERY_ID: b73bed3e-93cf-40d2-b84a-d037378c314e
QUERY_TITLE: Secondary Trading Volumes

QUERY_STRING:

with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , collections as (
	SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME
	  , SUM(PRICE_USD) as volume
	from ethereum.nft.ez_nft_sales
	WHERE 1=1
	  AND NFT_ADDRESS IN (lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244'), '0x89b2249d7fbb30765d94c163929cd04b5afa77e3')
	GROUP BY 1, 2
	UNION ALL
	
	
	
	 SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME
	  , SUM(PRICE_USD) as volume
	from arbitrum.nft.ez_nft_sales
	WHERE 1=1
	  AND NFT_ADDRESS IN ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9', '0x75395f24644f1e65f66e346a414ff3412f131dd5', '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca')
	GROUP BY 1, 2
	
	) SELECT * from collections ORDER BY ddate ASC, PROJECT_NAME ASC



=======================================================================================
=======================================================================================
QUERY_NO: 710
QUERY_ID: 47116f2f-e2be-4c68-817a-8cf422ec46ed
QUERY_TITLE: Post Hype Transaction Activity

QUERY_STRING:

with spam_txns as (
	select
	
	distinct tx_id
	from sei.core.fact_msg_attributes
	where 1=1
	  AND block_timestamp between '2023-08-15' AND '2023-11-20'
	  AND MSG_TYPE = 'message'
	  AND ATTRIBUTE_KEY = 'action'
	  AND ATTRIBUTE_VALUE = '/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVote' ) , stats as (
	SELECT
	  COUNT(DISTINCT tx_id) as txns
	  , COUNT(DISTINCT tx_from) as users
	  , CASE WHEN block_timestamp between '2023-08-15' AND '2023-08-29' THEN 'airdrop hype' ELSE 'post-airdrop' END as cat
	  , block_timestamp::date as ddate
	from sei.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp between '2023-08-15' AND '2023-11-20'
	  AND tx_succeeded = 'true'
	  AND tx_id NOT IN (SELECT tx_id from spam_txns)
	GROUP by ddate, cat ) select * from stats



=======================================================================================
=======================================================================================
QUERY_NO: 711
QUERY_ID: 66b5df76-3846-4874-8881-d724cf30d931
QUERY_TITLE: Airdrop Overview Stats

QUERY_STRING:

with prices as (
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as ddate
	  , 'SEI' as symbol
	  , 'usei' as token_address
	  , 6 as decimal
	  , value[1] as price
	  from (
	
	 SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400')
	
	  as resp
	  ), LATERAL FLATTEN (input => resp:data:prices) ) , claims_base as (  SELECT
	tx_id
	, block_timestamp
	, receiver as user
	, amount/pow(10,6)  as amount
	, amount/pow(10,6)*price as volume
	from sei.core.fact_transfers t
	LEFT JOIN prices p ON trunc(t.block_timestamp,'hour') = p.ddate
	where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18' ) , summaries as (
	SELECT
	
	COUNT(DISTINCT user) as claimers
	  , SUM(amount) as amt_claimed
	  , SUM(volume) as amt_claimed_usd
	  , AVG(volume) as avg_usd
	  , AVG(amount) as avg_tokens
	  , MAX(volume) as max_usd
	  , MIN(volume) as min_usd
	  , MAX(amount) as max_token
	
	, MIN(amount) as min_token
	 from claims_base ) SELECT * from summaries



=======================================================================================
=======================================================================================
QUERY_NO: 712
QUERY_ID: bc8817ed-c5da-40c6-b96b-8dd5bc516283
QUERY_TITLE: Airdrop Transactions Activity

QUERY_STRING:

with claims_base as (  SELECT
	tx_id
	, block_timestamp
	, receiver as user
	from sei.core.fact_transfers
	 where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , spam_txns as (
	select
	
	distinct tx_id
	from sei.core.fact_msg_attributes
	where 1=1
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp <= '2023-09-15'
	  AND MSG_TYPE = 'message'
	  AND ATTRIBUTE_KEY = 'action'
	  AND ATTRIBUTE_VALUE = '/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVote' ) , txns_claimers as (
	SELECT
	
	block_timestamp
	  , tx_id
	  , 'claimer' as cat
	from sei.core.fact_msg_attributes
	 WHERE 1=1
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp <= '2023-09-15'
	  AND ATTRIBUTE_KEY in ('recipient', 'sender')
	  AND tx_succeeded = 'true'
	  AND ATTRIBUTE_VALUE IN (SELECT DISTINCT user from claims_base) ) , merge as (
	SELECT
	
	trunc(block_timestamp,'day') as ddate
	  , COUNT(DISTINCT tx_id) as txns
	  , 'claimer' as cat
	from txns_claimers
	GROUP BY ddate, cat
	 UNION
	SELECT
	
	trunc(block_timestamp,'day') as ddate
	  , COUNT(DISTINCT tx_id) as txns
	  , 'non-claimer' as cat
	from sei.core.fact_msg_attributes
	 WHERE 1=1
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp <= '2023-09-15'
	  AND tx_succeeded = 'true'
	  AND tx_id NOT IN (SELECT DISTINCT tx_id from txns_claimers)
	  AND tx_id NOT IN (select tx_id from spam_txns)
	GROUP BY ddate, cat  ) SELECT * from merge ORDER by DDATE



=======================================================================================
=======================================================================================
QUERY_NO: 713
QUERY_ID: 2c74ac1c-48f6-458b-931f-f8459d55cd2c
QUERY_TITLE: Claimers & Staking

QUERY_STRING:

-- forked from Post Airdrop Timeline (hours) @ https://flipsidecrypto.xyz/edit/queries/17f86f74-58d2-413a-921d-b943874fd058 with claims_base as (  SELECT
	  max(block_timestamp) as claim_time
	  , receiver as user
	
	
	, SUM(amount/pow(10,6))  as amount
	from sei.core.fact_transfers
	 where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15'
	GROUP BY user ) , gov as (
	SELECT
	  SUM(CASE WHEN action='delegate' THEN amount/1e6
	
	
	
	
	WHEN action='undelegate' THEN -1*(amount/1e6) ELSE NULL END ) as stake
	  , DELEGATOR_ADDRESS as  user
	from sei.gov.fact_staking
	WHERE 1=1
	  AND DELEGATOR_ADDRESS in (SELECT user from claims_base)
	GROUP BY user ) , merge as (
	SELECT
	  CASE WHEN stake IS NULL or stake=0 THEN 'not active' ELSE 'active' END as cat
	  , COUNT(DISTINCT c.user) as totals
	from claims_base c
	LEFT JOIN gov g on c.user=g.user
	GROUP BY cat ) SELECT * from merge



=======================================================================================
=======================================================================================
QUERY_NO: 714
QUERY_ID: dee1f899-332b-4449-ae7a-9f9576c1decc
QUERY_TITLE: Post Airdrop Behaviors Vs Other Prominent Airdrops 

QUERY_STRING:

with base_query AS ( -- Get data from target query
	SELECT
	  value[0]::numeric as users
	  , value[1]::string as label
	  , 'op' as cat
	
	  FROM (
	  SELECT
	
	 livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/53679b7a-03a0-4b6b-a701-155fc2fdaffa/latest-run') as response
	  ), lateral FLATTEN (input => response:data:result:rows)
	UNION
	SELECT
	value[0]::numeric as users
	, value[1]::string as label
	, 'arb' as cat
	
	FROM (
	  SELECT
	
	 livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7dc614f7-62fa-42ab-bb72-4d28017cab03/latest-run') as response
	  ), lateral FLATTEN (input => response:data:result:rows)
	UNION
	 SELECT
	value[0]::numeric as users
	, value[1]::string as label
	, 'sei' as cat
	
	FROM (
	  SELECT
	
	 livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/bf3376cd-4720-4717-be2d-c0a1a0963b7f/latest-run') as response
	  ), lateral FLATTEN (input => response:data:result:rows) ) SELECT * from base_query



=======================================================================================
=======================================================================================
QUERY_NO: 715
QUERY_ID: 17f86f74-58d2-413a-921d-b943874fd058
QUERY_TITLE: Post Airdrop Timeline (hours)

QUERY_STRING:

with claims_base as (  SELECT
	  max(block_timestamp) as claim_time
	  , receiver as user
	
	
	, SUM(amount/pow(10,6))  as amount
	from sei.core.fact_transfers
	 where 1=1
	  AND sender IN ('sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	
	
	
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	
	
	
	
	
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18'
	GROUP BY user ) , txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , MAX(claim_time) as ctime
	  , COUNT(DISTINCT tx_id) as txns
	  , ATTRIBUTE_VALUE as user
	from sei.core.fact_msg_attributes f
	LEFT JOIN claims_base c on c.user=f.attribute_value
	WHERE 1=1
	  AND block_timestamp >= '2023-08-15'
	  AND block_timestamp < '2023-09-18'
	  AND claim_time<block_timestamp
	  AND ATTRIBUTE_KEY in ('recipient', 'sender')
	  AND ATTRIBUTE_VALUE IN (SELECT DISTINCT user from claims_base)
	GROUP BY ATTRIBUTE_VALUE ) , refine as (
	SELECT *,
	  DATEDIFF('hour', ctime, last_time) as time_delta
	  , CASE
	
	  WHEN time_delta=0 THEN 'Less than a Hour'
	
	 WHEN time_delta=1 THEN 'Roughly an Hour'
	
	 WHEN time_delta>1 AND time_delta<24 THEN 'Multiple Hours'
	
	 ELSE 'Day(s) apart' END as cat
	  from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 716
QUERY_ID: 83f5eaeb-94d0-4d2e-b32a-6212222e9867
QUERY_TITLE: kwenta contract debug

QUERY_STRING:

SELECT
	
	COUNT(DISTINCT tx_hash) as totals
	  , MAX(tx_hash) as example
	  , origin_function_signature as func  from optimism.core.fact_event_logs WHERE 1=1
	  AND contract_address = lower('0x2b3bb4c683bfc5239b029131eef3b1d214478d93')
	  AND topics[0] = '0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43' GROUP BY func ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 717
QUERY_ID: 8788f1dc-7f74-4e5e-8392-9c57010a080c
QUERY_TITLE: withdrawal to deposit mapping

QUERY_STRING:

-- SELECT  --
	w.block_timestamp --
	, depositor as wallet --
	, w.WITHDRAWAL_AMOUNT  --
	, w.withdrawal_address  --
	, t.index --
	, t.pubkey --
	from ethereum.beacon_chain.ez_withdrawals w --
	LEFT JOIN ( --
	  SELECT  --
	
	 * --
	
	 , row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks --
	  from ethereum.beacon_chain.fact_validators --
	  QUALIFY ranks=1 --
	) t on w.validator_index = t.index --
	LEFT JOIN ( --
	  SELECT *  --
	  FROM ethereum.beacon_chain.ez_deposits --
	  qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1 --
	) d ON t.pubkey = d.pubkey -- WHERE 1=1 --
	AND t.pubkey = '0x8a4f2e7e2fea00a9ce77d669aeba2573137010db2f85e18c0265e492d3a9b5367e15f356abd58b2bfb3a3bddef9aece9'
	 SELECT * from ethereum.beacon_chain.ez_deposits WHERE pubkey = '0x8a4f2e7e2fea00a9ce77d669aeba2573137010db2f85e18c0265e492d3a9b5367e15f356abd58b2bfb3a3bddef9aece9'



=======================================================================================
=======================================================================================
QUERY_NO: 718
QUERY_ID: 7909f5b8-e7ec-47c7-9efc-d35949fcf25e
QUERY_TITLE: ETH Stake - Pubkeys w/ depositor address

QUERY_STRING:

-- forked from ETH Stake - Pubkeys w/ withdrawal address @ https://flipsidecrypto.xyz/studio/queries/2b1049f2-6a21-4284-8832-9b67d5ce73e2 with wallet_labels as (
	SELECT
	
	pubkey
	  , MAX(wallet) as wallet
	  , MAX(label) as label
	  , MAX(sub_label) as sub_label
	from (
	  SELECT
	
	  pubkey
	
	 , depositor as wallet
	
	 , PLATFORM as label
	
	 , PLATFORM_CATEGORY as sub_label
	  FROM ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	  qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1
	
	 --AND WITHDRAWAL_ADDRESS = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96'
	  UNION ALL
	
	SELECT
	
	  t.pubkey
	
	 , d.depositor  as wallet
	
	 , NULL as label
	
	 , NULL as sub_label
	  from (
	
	 SELECT
	
	
	 *
	
	  from ethereum.beacon_chain.ez_withdrawals
	
	 qualify row_number() OVER (PARTITION BY validator_index ORDER BY block_timestamp DESC) =1
	  )  w
	  LEFT JOIN (
	
	 SELECT
	
	
	 *
	
	
	, row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks
	
	 from ethereum.beacon_chain.fact_validators
	
	 QUALIFY ranks=1
	  ) t on w.validator_index = t.index
	  LEFT JOIN (
	
	 SELECT *
	
	  FROM ethereum.beacon_chain.ez_deposits
	
	 qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1
	  ) d ON t.pubkey = d.pubkey
	)
	GROUP BY 1 ) , dates as (
	SELECT
	
	DISTINCT date_trunc('month', date_day) as dmonth
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '2020-11-01' AND CURRENT_DATE ) , sample_space as (
	SELECT
	
	dmonth
	  , pubkey
	  , wallet
	  , label
	  , sub_label
	from dates
	 LEFT JOIN wallet_labels on 1=1 ) -- SELECT * from sample_space ----------------------------END OF SAMPLE SPACE ----------------------------- , deposits as (
	SELECT
	
	date_trunc('month', block_timestamp) as dmonth
	  , pubkey
	  , SUM(deposit_amount) as validator_init --NOT always 32E
	from ethereum.beacon_chain.ez_deposits
	WHERE 1=1
	GROUP BY 1, 2 ) , withdraws as (
	SELECT
	
	date_trunc('month', w.block_timestamp) as dmonth
	  , t.pubkey
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END ---ignoring summing/taking into account other values - > staking reward withdrawals
	
	 ) as validator_exit
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT <20 THEN WITHDRAWAL_AMOUNT END
	
	  ) as rewards
	from ethereum.beacon_chain.ez_withdrawals w
	LEFT JOIN (
	  SELECT
	
	  *
	
	 , row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks
	  from ethereum.beacon_chain.fact_validators
	  QUALIFY ranks=1
	) t on w.validator_index = t.index
	WHERE 1=1
	GROUP BY 1, 2 ) , merge as (
	SELECT
	
	s.dmonth
	  , s.pubkey
	  , s.wallet
	  , s.label
	  , d.validator_init
	  , w.validator_exit
	  , SUM(coalesce(validator_init,0)+coalesce(validator_exit,0)) OVER (PARTITION BY PUBKEY ORDER BY dmonth ASC) as key_stake_monthly
	  , w.rewards
	from sample_space s
	 LEFT JOIN deposits d using(dmonth, pubkey)
	LEFT JOIN withdraws w using(dmonth, pubkey) ) SELECT
	  dmonth
	, SUM(key_stake_monthly) as eth_staked
	, COUNT(pubkey) as validators
	, COUNT(DISTINCT wallet) as wallets from merge WHERE key_stake_monthly>=20 GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 719
QUERY_ID: 8638c461-957b-42a9-b065-da229d221a53
QUERY_TITLE: Total Ecosystem Raises - Results

QUERY_STRING:

with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , thj_articles as (
	select 1 as rn,'general' as catogery,'Henlo, World!' as title, '<a href=https://mirror.xyz/janitooor.eth/UAyF43OZtzsf_5bGshlZl9kal0MRE8zZG5ekCE68Vro>Henlo, World!</a>' as articles, '0xaff376b6a630b07b57f676a939748a321ff14734' as contract_address, 10000 as total_supply
	union
	 select 2,'general','Berachain, Cults and the Dawn of The Honey Jar','<a href=https://mirror.xyz/janitooor.eth/nQE-5CbhhirIeTJi7w48P97Ir0-HISuvb6NnwHr-eSA>Berachain, Cults and the Dawn of The Honey Jar</a>' ,'0x31e851ed8b927e07366eaf76d0b5e0a3d13c57ee',10000
	union
	select 3,'Bong Bear','Bonga Bera 101','<a href=https://mirror.xyz/janitooor.eth/5-Skgz_rKNB3FQP4QnfeCWO3f8Ew5G7KLTt-rHZq2Ro>Bonga Bera 101</a>' ,'0xd7ccc7b8ec095644db35a1ac2dc58104294927c3',107
	union
	select 4,'Bond Bear','The Honey Jar 101','<a href=https://mirror.xyz/janitooor.eth/soVN56Jla_Y9x2USB9UO2Pw3T0ALiHwAbI0oxC5AA0M>The Honey Jar 101</a>' ,'0xb8c6145f958f141db0d506a4c1f6c0546ade78ab',126
	union
	select 5,'general','The Honey Jar FAQs','<a href=https://mirror.xyz/janitooor.eth/SeTSHngHlnRrTRhYFmblJPTKoSmolgkFKa6X-Dwl_lw>The Honey Jar FAQs</a>' ,'0x68ae28fb8cd9664cc08090b3c8f241d97012c99b',10000
	union
	select 6,'Boo Bear','Gen 1 Partnooorships 101: Very Sweet Perks','<a href=https://mirror.xyz/janitooor.eth/ieHDPqK_AClVODXxu5G7N4qyMUoUImEprSl03c2ay-g>Gen 1 Partnooorships 101: Very Sweet Perks</a>' ,'0x5ffe4df7c0908232b46edef4ecbbafdb2c1f8cf5',271
	union
	select 7,'Baby Bear','BeraFi: Bong Bears x NFTFi','<a href=https://mirror.xyz/janitooor.eth/QS03M2C0zReJS7KktbgeORPkEloQWYyKBzVSfeowIzI>BeraFi: Bong Bears x NFTFi</a>' ,'0x093312465e593c65b1f00e0ab8c5885634b2aa83',571
	union
	select 8,'Band Bear','Bong Bears Data Insights','<a href=https://mirror.xyz/janitooor.eth/_4bUfIfd248_YxkZPBQ_9ylEg9a90M4ruys8mphzGQk>Bong Bears Data Insights</a>' ,'0x3c13dcd0e6eaef7151f5877f4757951b55cac01c',1175
	union
	select 9,'Bit Bear','Honey Jar Ponzinomics','<a href=https://mirror.xyz/janitooor.eth/3rW2cfsDtTqcS3gHWTgHjxOhOPEGgOzl9A9LCmeJ_tU>Honey Jar Ponzinomics</a>' ,'0x1cbc0e6d9592a45a20a2682397b78cf5bc7db91c',2355
	union
	select 10,'B Bear','HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?','<a href=https://mirror.xyz/janitooor.eth/RQc29u1Ryk_YvXnMFWTx6hO2-aXVccBuSiHyZ527Pn4>HoneyBlitzing: Blitzscaling Berachain or Operation Bear Hug?</a>' ,'0x1460a7292b1485a6bb0f752b5d61bccab260e2bf',4713
	union
	select 11,'general','THJ Gen 2 Campaign: IRL activities','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>THJ Gen 2 Campaign: IRL activities</a>' ,'0x7fcc15a092d8f958c7e16fda6e171083da4a2e18',420
	union
	select 12,'general','THJ Gen 2 Campaign: IRL activities1','<a href=https://mirror.xyz/0x40495A781095932e2FC8dccA69F5e358711Fdd41/qo7oQ1Vv_YtqqDf_GjX-me8qqWSJ6kv62LdQtp7r9iU>THJ Gen 2 Campaign: IRL activities1</a>' ,'0x513e650948227476a7b86bf7c6fafc6b3b263130',420
	union
	select 13,'general','Once Upon A Mint','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>Once Upon A Mint</a>' ,'0x677c71fe7a674567d07cccea354592646fb2b079',420
	union
	select 14,'general','A Honeycomb Retrospective','<a href=https://0xhoneyjar.mirror.xyz/9chL0tvoozvp8u5xeI8iq6wYkMKvhpfhFFTxnfRPuuE>A Honeycomb Retrospective</a>' ,'0x21542878aab3571337445b84bb66f5f9db04c5e9',420
	union
	select 15,'general','The Honey Jar Generation 2 Mint Guide','<a href=https://0xhoneyjar.mirror.xyz/UiSbFkU7Yz_XusXlliICL6eVSfq6iZrI-1i2Euuk3hQ>The Honey Jar Generation 2 Mint Guide</a>' ,'0xe8085309623507ca0ae93f82f260c3bd8f5824c3',420 ) , merger as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as user
	  , VALUE as cost_eth
	
	, 'Hiberanation (Dream Masks)' as label
	from arbitrum.core.fact_transactions t
	where 1=1
	  AND to_address = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	and ORIGIN_FUNCTION_SIGNATURE = '0x1249c58b'
	  AND STATUS = 'SUCCESS'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Beramonium Chronicles' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'insrt finance (BongBear ShardVaults)' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2023-04-10'
	  AND TO_ADDRESS IN  ('0x5e60026d0e63325c47bac35c8820953320930f15',
	
	
	
	
	
	
	
	  '0x9467b523c9eeea7853be0c7f0f1e3e8d4ac698ab',
	
	
	
	
	
	
	
	 '0x4832b4423c35311f9dc0c2d03b29e68b176d40cc')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x98b1e06a'
	
	AND STATUS = 'SUCCESS'
	
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPunk' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xc46233dd3775c858a926b2b2d398bea7ca69499c'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraDoge (Gen1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'Berachein (Baka Bears)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND STATUS = 'SUCCESS'
	  AND TO_ADDRESS IN  ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9')
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x84bb1e42'
	 UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Ramen Finance (HungryBera)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Honeypot Finance' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x7c2f99c405fa3102519f2637f186c5a06c074a0f'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'Yeet (Yeetard NFT)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2e660787bceccd39f67b8190a5bc4fc3ad3b64f7'
	
	
	
	AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'CubHub (Merch Edition#1)' as label
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from arbitrum.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x2359d3f04fc33d1b8223fe5798d7bfdae7a93d9d'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	
	 UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	
	  SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (NFT Vid)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0x1a652a2c9065465c1cca864bfd2a09cbf511c3a3'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	  UNION ALL
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'BeraPlug (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS = '0xcaa5ed9c4a66e53a6f9fcf2aa378884af17600ae'
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN (SELECT contract_address FROM thj_articles)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 )
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS'
	
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as USER
	  , AMOUNT_USD/price as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.ez_token_transfers t
	 LEFT JOIN (
	  SELECT
	
	  price , hour
	
	from crosschain.price.ez_prices_hourly
	
	WHERE 1=1
	
	 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	  AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	  ) p on date_trunc('hour', t.block_timestamp) = p.hour
	WHERE 1=1
	
	AND tx_hash in (
	
	
	  SELECT
	
	
	
	
	 tx_hash
	
	
	  from ethereum.core.fact_transactions
	
	
	  WHERE 1=1
	
	
	
	 AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	 AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	 AND STATUS = 'SUCCESS'
	
	 )
	  --AND t.SYMBOL = 'OHM' ) , combo as (
	SELECT
	
	SUM(cost_eth) as eth_raised
	  , SUM(cost_eth * p.price) as usd_raised
	  , label as project
	  , 'Ecosystem/Community Fundraise' as tag
	from merger m
	LEFT JOIN (
	
	 SELECT price
	
	  from crosschain.price.ez_prices_hourly
	
	  WHERE 1=1 AND SYMBOL='WETH' AND blockchain='ethereum'
	
	
	 AND TOKEN_ADDRESS = lower('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
	
	
	 AND HOUR >=CURRENT_DATE -1
	
	
	 ORDER BY HOUR DESC LIMIT 1
	
	 ) p on 1=1
	GROUP BY label
	
	UNION
	 select NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from(
	select 1710939960 as block_timestamp, 'https://fxtwitter.com/0xoogabooga/status/1770436712684044707' as source,'Ooga Booga' as project, 1000000 as raised_in_usd
	union
	select 1688070600 as block_timestamp, 'https://fxtwitter.com/stackingsalmon' as source,'Stacking Salmon' as project, 250000
	union
	select 1706536800 as block_timestamp, 'https://fxtwitter.com/InfraredFinance/status/1751968505682092241' as source,'Infrared',2500000
	union
	select 1707138000 as block_timestamp, 'https://fxtwitter.com/KodiakFi/status/1754490009368039481','Kodiak',2000000
	union
	select 1712158200 as block_timestamp, 'https://fxtwitter.com/NAVFinance_/status/1775543050217111704','Nav',3000000
	union
	select 1715805000 as block_timestamp, 'https://fxtwitter.com/shogunfi/status/1790842628591726730','Shogun',6900000)
	union
	 SELECT NULL as eth_raised , raised_in_usd as usd_raised, project , 'VC/Seed/Series XYZ' as tag
	from
	
	(
	
	 select
	
	
	 1714417200 as block_timestamp
	
	
	, 'https://fxtwitter.com/berabot_/status/1785022321838760443' as source
	
	
	, 'Berabot' as project
	
	
	, 60 as cost_eth
	
	
	, cost_eth*price as raised_in_usd
	
	 from ethereum.price.ez_prices_hourly
	
	 WHERE 1=1
	
	
	AND symbol='WETH'
	
	
	AND blockchain='ethereum' AND HOUR >=CURRENT_DATE -1
	
	 ORDER BY HOUR DESC
	
	  LIMIT 1
	  ) ) SELECT
	 project
	, ROUND(usd_raised,0) as usd_raised
	, ROUND(eth_raised,2) as eth_raised
	, tag from combo ORDER BY USD_RAISED DESC



=======================================================================================
=======================================================================================
QUERY_NO: 720
QUERY_ID: 923bc548-c4fb-4997-acd2-210e19fa4b00
QUERY_TITLE: [MM][Q1] Total Users/Holders

QUERY_STRING:

SELECT
	COUNT(DISTINCT FROM_ADDRESS) as users from ethereum.core.fact_transactions WHERE
	to_address = '0x881d40237659c251811cec9c364ef91dc08d300c'



=======================================================================================
=======================================================================================
QUERY_NO: 721
QUERY_ID: 3e1bf822-f939-49d5-ba83-735945e43834
QUERY_TITLE: Near Transactions vs KAIKAI

QUERY_STRING:

-- forked from Near Transactions @ https://flipsidecrypto.xyz/edit/queries/9d5ad545-bcf7-400d-a1fb-311174ad694f  -- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (
	SELECT
	
	COUNT(tx_hash) as t_txns
	  , COUNT(DISTINCT TX_SIGNER) as t_users
	  , SUM(TRANSACTION_FEE/1e24) as t_fee
	  , date_trunc(day, BLOCK_TIMESTAMP) as ddate
	  , CASE WHEN (tx_receiver ilike '%.kaiching' or tx_signer ilike '%.kaiching') THEN 'CosmosAI' ELSE 'other' END  as cat
	FROM near.core.fact_transactions
	WHERE tx_status='Success'
	  AND block_timestamp >= '2023-01-01'
	GROUP BY ddate, cat ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 722
QUERY_ID: 591a579d-c2ee-4cbe-a66e-58fd13f6fa8b
QUERY_TITLE: [OP] L2 Summer Preferences Scatter

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp as adate
	from Optimism.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender as wallet
		, adate
	, CASE	WHEN mdate IS NULL THEN 'Optimism Only'
				WHEN mdate>adate THEN 'Both/Optimism First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , arb_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , main_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from ethereum.core.fact_transactions t
	LEFT JOIN refine r ON  t.from_address=r.wallet
	WHERE 1=1
		AND block_timestamp>adate
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , combo as (
	SELECT *, 'arb' as CAT from arb_counts
	UNION ALL
	SELECT *, 'main' as CAT from main_counts ) , pre as (
	SELECT
		MAX(CASE	WHEN CAT='arb' THEN totals ELSE 0 END) as arb_counts
		, MAX(CASE	WHEN CAT='main' THEN totals ELSE 0 END ) as main_counts
		, sender
	from combo
	GROUP BY sender ) , pre_final as (
	SELECT
		*
		, arb_counts+main_counts as total_txns
		, CASE WHEN total_txns>1000 THEN 1000 ELSE total_txns END as norm_totals
		, round(arb_counts/(total_txns) * 100, 2) as arb_pref
		, CASE
	WHEN arb_pref>=70 THEN 'Optimism Preferred'
				WHEN arb_pref<=30 THEN 'Mainnet Preferred'
				ELSE 'Both Balanced Usage' END as CAT
	from pre
	WHERE 1=1
		AND arb_counts>=10
		AND main_counts>=10 ) SELECT
	
	sender
		, total_txns
		, norm_totals
		, arb_pref from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 723
QUERY_ID: e6af720e-9083-43b9-ade7-c475fd2e023e
QUERY_TITLE: growing-harlequin

QUERY_STRING:





=======================================================================================
=======================================================================================
QUERY_NO: 724
QUERY_ID: 1f8e634a-3cd5-4a93-a7c5-a12c8c03224d
QUERY_TITLE: Vertex - Multi-Trade Orders/Digests

QUERY_STRING:

SELECT
	  COUNT(EZ_PERP_TRADES_ID) as totals
	, DIGEST from arbitrum.vertex.ez_perp_trades GROUP BY DIGEST having totals between 5 and 15 LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 725
QUERY_ID: a008fbae-9f92-4389-b83b-8690d536b62c
QUERY_TITLE: sandesh's art

QUERY_STRING:

with tuples as (
	 SELECT
		ARRAY_CONSTRUCT(225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) as span0
		, ARRAY_CONSTRUCT(0, 160, 155, 152, 149, 146, 144, 142, 141, 139, 138, 136, 135, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.0,13.0,14.0,15.0,16.0,17.0,19.0,20.0,22.0,24.0,27.0,29.0, 33) as span1
		, ARRAY_CONSTRUCT(0,17.0,26.0,33.0,39.0,44.0,48.0,52.0,55.0,58.0,61.0,64.0,67.0,69.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,57.0,56.0,53.0,51.0,49.0,47.0,44.0,41.0,37.0,33.0,28.0,23.0, 15) as span2
		, ARRAY_CONSTRUCT(0,48.0,44.0,40.0,37.0,35.0,33.0,31.0,29.0,28.0,26.0,25.0,23.0,22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,156.0,156.0,158.0,159.0,160.0,161.0,162.0,164.0,166.0,168.0,170.0,173.0, 177) as span3
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,133.0,132.0,131.0,130.0,129.0,128.0,127.0,126.0,125.0,125.0,125.0,125.0,125.0,125.0,125.0,126.0,127.0,129.0,0.0,168.0,168.0,168.0,168.0,168.0,168.0,168.0,167.0,31.0,27.0,24.0,22.0,20.0,18.0,17.0,15.0,14.0,13.0,12.0,11.0,10.0,10.0,9.0,8.0,7.0,7.0,6.0,6.0,5.0,5.0,5.0,4.0,4.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,10.0,11.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span4
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,26.0,24.0,23.0,21.0,21.0,20.0,20.0,19.0,18.0,17.0,15.0,14.0,13.0,12.0,10.0,8.0,5.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,14.0,150.0,154.0,157.0,159.0,161.0,163.0,163.0,165.0,165.0,165.0,165.0,165.0,164.0,26.0,24.0,22.0,22.0,20.0,19.0,18.0,18.0,17.0,16.0,16.0,16.0,15.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,23.0,26.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span5
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,20.0,26.0,31.0,36.0,39.0,43.0,45.0,49.0,51.0,53.0,56.0,58.0,60.0,62.0,64.0,65.0,67.0,0.0,21.0,22.0,23.0,23.0,24.0,24.0,25.0,25.0,25.0,26.0,26.0,26.0,26.0,27.0,28.0,28.0,29.0,30.0,31.0,32.0,35.0,173.0,176.0,179.0,180.0,182.0,184.0,185.0,186.0,187.0,188.0,189.0,189.0,190.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,15.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span6
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,27.0,25.0,23.0,22.0,21.0,20.0,20.0,18.0,18.0,18.0,17.0,17.0,17.0,16.0,16.0,16.0,16.0,0.0,16.0,15.0,15.0,15.0,14.0,15.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,23.0,26.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0, 0) as span7
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,20.0,19.0,18.0,17.0,16.0,15.0,14.0,14.0,13.0,12.0,12.0,11.0,10.0,10.0,9.0,9.0,8.0,0.0,7.0,7.0,6.0,6.0,6.0,5.0,5.0,5.0,5.0,4.0,4.0,4.0,4.0,4.0,4.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,153.0,154.0,155.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span8
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,4.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span9
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,15.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,13.0,13.0,14.0,14.0,14.0,14.0,14.0,14.0,15.0,14.0,15.0,15.0,15.0,16.0,16.0,17.0,17.0,18.0,19.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span10
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,29.0,27.0,27.0,25.0,26.0,25.0,24.0,24.0,24.0,24.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,50.0,49.0,49.0,49.0,48.0,47.0,46.0,45.0,43.0,43.0,41.0,39.0,37.0,35.0,33.0,31.0,28.0,25.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span11
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.0,29.0,31.0,34.0,35.0,37.0,38.0,39.0,40.0,41.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,15.0,15.0,15.0,16.0,16.0,17.0,17.0,18.0,18.0,18.0,20.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span12
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,137.0,135.0, 134, 133,132.0,131.0,131.0,130.0,130.0,129.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,129.0,128.0,128.0,129.0,128.0,127.0,125.0,9.0,9.0,9.0,10.0,9.0,9.0,10.0,9.0,10.0,10.0,10.0,11.0,10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span13
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,14.0,14.0,14.0,14.0,15.0,17.0,134.0,133.0,133.0,132.0,133.0,132.0,131.0,131.0,130.0,129.0,128.0,126.0,124.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span14
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,8.0,9.0,10.0,11.0,13.0,15.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0, 0) as span15
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span16
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,15.0,15.0,15.0,16.0,17.0,17.0,18.0,19.0,20.0,20.0,22.0,23.0,24.0,25.0,27.0,29.0,32.0,38.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0, 13, 13,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span17
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,24.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,50.0,50.0,48.0,48.0,48.0,46.0,45.0,44.0,43.0,41.0,39.0,38.0,35.0,33.0,30.0,28.0,24.0,20.0,14.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0, 51, 51,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span18
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,41.0,42.0,42.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,15.0,15.0,15.0,16.0,16.0,17.0,17.0,18.0,19.0,20.0,21.0,22.0,24.0,25.0,27.0,29.0,32.0,39.0,0.0,0.0,0.0,0.0,64.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span19
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,24.0,25.0,27.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span20
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,11.0,9.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span21
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,19.0,20.0,21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span22
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span23
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,19.0,19.0,20.0,22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span24
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,13.0,12.0,12.0,10.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span25
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31.0,30.0,30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0, 30, 30,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,0.0,0.0,0.0,0.0,30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0, 30, 30,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,31.0,31.0,31.0,32.0,34.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span26
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span27
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0, 3, 3,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span28
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span29
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span30
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,4.0,6.0,7.0,9.0,12.0,15.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span31
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,46.0,44.0,40.0,37.0,33.0,28.0,21.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span32
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,3.0,5.0,7.0,9.0,11.0,15.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span33
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span34
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span35
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span36
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span37
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span38
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) as span39
		, ARRAY_CONSTRUCT(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span40
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span41
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span42
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span43
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span44
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,78.0,78.0,78.0,78.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span45
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.0,23.0,23.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span46
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span47
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span48
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span49
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.0,18.0,18.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span50
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span51
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.0,30.0,30.0,30.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span52
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span53
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span54
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span55
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span56
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span57
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span58
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,55.0,55.0,56.0,57.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span59
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,12.0,11.0,10.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span60
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,63.0,63.0,65.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span61
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span62
		, ARRAY_CONSTRUCT(0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,0.0, 0, 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, 0) as span63 ) , row0 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span0 FROM tuples))),  row1 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span1 FROM tuples))),  row2 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span2 FROM tuples))),  row3 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span3 FROM tuples))),  row4 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span4 FROM tuples))),  row5 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span5 FROM tuples))),  row6 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span6 FROM tuples))),  row7 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span7 FROM tuples))),  row8 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span8 FROM tuples))),  row9 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span9 FROM tuples))),  row10 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span10 FROM tuples))),  row11 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span11 FROM tuples))),  row12 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span12 FROM tuples))),  row13 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span13 FROM tuples))),  row14 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span14 FROM tuples))),  row15 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span15 FROM tuples))),  row16 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span16 FROM tuples))),  row17 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span17 FROM tuples))),  row18 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span18 FROM tuples))),  row19 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span19 FROM tuples))),  row20 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span20 FROM tuples))),  row21 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span21 FROM tuples))),  row22 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span22 FROM tuples))),  row23 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span23 FROM tuples))),  row24 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span24 FROM tuples))),  row25 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span25 FROM tuples))),  row26 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span26 FROM tuples))),  row27 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span27 FROM tuples))),  row28 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span28 FROM tuples))),  row29 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span29 FROM tuples))),  row30 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span30 FROM tuples))),  row31 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span31 FROM tuples))),  row32 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span32 FROM tuples))),  row33 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span33 FROM tuples))),  row34 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span34 FROM tuples))),  row35 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span35 FROM tuples))),  row36 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span36 FROM tuples))),  row37 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span37 FROM tuples))),  row38 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span38 FROM tuples))),  row39 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span39 FROM tuples))),  row40 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span40 FROM tuples))),  row41 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span41 FROM tuples))),  row42 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span42 FROM tuples))),  row43 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span43 FROM tuples))),  row44 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span44 FROM tuples))),  row45 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span45 FROM tuples))),  row46 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span46 FROM tuples))),  row47 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span47 FROM tuples))),  row48 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span48 FROM tuples))),  row49 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span49 FROM tuples))),  row50 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span50 FROM tuples))),  row51 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span51 FROM tuples))),  row52 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span52 FROM tuples))),  row53 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span53 FROM tuples))),  row54 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span54 FROM tuples))),  row55 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span55 FROM tuples))),  row56 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span56 FROM tuples))),  row57 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span57 FROM tuples))),  row58 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span58 FROM tuples))),  row59 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span59 FROM tuples))),  row60 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span60 FROM tuples))),  row61 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span61 FROM tuples))),  row62 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span62 FROM tuples))),  row63 AS (SELECT index, value FROM TABLE(FLATTEN(input=> SELECT span63 FROM tuples))) SELECT row0.index,
	row0.value as value_0, 
	row1.value as value_1, 
	row2.value as value_2, 
	row3.value as value_3, 
	row4.value as value_4, 
	row5.value as value_5, 
	row6.value as value_6, 
	row7.value as value_7, 
	row8.value as value_8, 
	row9.value as value_9, 
	row10.value as value_10, 
	row11.value as value_11, 
	row12.value as value_12, 
	row13.value as value_13, 
	row14.value as value_14, 
	row15.value as value_15, 
	row16.value as value_16, 
	row17.value as value_17, 
	row18.value as value_18, 
	row19.value as value_19, 
	row20.value as value_20, 
	row21.value as value_21, 
	row22.value as value_22, 
	row23.value as value_23, 
	row24.value as value_24, 
	row25.value as value_25, 
	row26.value as value_26, 
	row27.value as value_27, 
	row28.value as value_28, 
	row29.value as value_29, 
	row30.value as value_30, 
	row31.value as value_31, 
	row32.value as value_32, 
	row33.value as value_33, 
	row34.value as value_34, 
	row35.value as value_35, 
	row36.value as value_36, 
	row37.value as value_37, 
	row38.value as value_38, 
	row39.value as value_39, 
	row40.value as value_40, 
	row41.value as value_41, 
	row42.value as value_42, 
	row43.value as value_43, 
	row44.value as value_44, 
	row45.value as value_45, 
	row46.value as value_46, 
	row47.value as value_47, 
	row48.value as value_48, 
	row49.value as value_49, 
	row50.value as value_50, 
	row51.value as value_51, 
	row52.value as value_52, 
	row53.value as value_53, 
	row54.value as value_54, 
	row55.value as value_55, 
	row56.value as value_56, 
	row57.value as value_57, 
	row58.value as value_58, 
	row59.value as value_59, 
	row60.value as value_60, 
	row61.value as value_61, 
	row62.value as value_62, 
	row63.value as value_63 from row0 LEFT JOIN row1 ON row0.index = row1.index LEFT JOIN row2 ON row0.index = row2.index LEFT JOIN row3 ON row0.index = row3.index LEFT JOIN row4 ON row0.index = row4.index LEFT JOIN row5 ON row0.index = row5.index LEFT JOIN row6 ON row0.index = row6.index LEFT JOIN row7 ON row0.index = row7.index LEFT JOIN row8 ON row0.index = row8.index LEFT JOIN row9 ON row0.index = row9.index LEFT JOIN row10 ON row0.index = row10.index LEFT JOIN row11 ON row0.index = row11.index LEFT JOIN row12 ON row0.index = row12.index LEFT JOIN row13 ON row0.index = row13.index LEFT JOIN row14 ON row0.index = row14.index LEFT JOIN row15 ON row0.index = row15.index LEFT JOIN row16 ON row0.index = row16.index LEFT JOIN row17 ON row0.index = row17.index LEFT JOIN row18 ON row0.index = row18.index LEFT JOIN row19 ON row0.index = row19.index LEFT JOIN row20 ON row0.index = row20.index LEFT JOIN row21 ON row0.index = row21.index LEFT JOIN row22 ON row0.index = row22.index LEFT JOIN row23 ON row0.index = row23.index LEFT JOIN row24 ON row0.index = row24.index LEFT JOIN row25 ON row0.index = row25.index LEFT JOIN row26 ON row0.index = row26.index LEFT JOIN row27 ON row0.index = row27.index LEFT JOIN row28 ON row0.index = row28.index LEFT JOIN row29 ON row0.index = row29.index LEFT JOIN row30 ON row0.index = row30.index LEFT JOIN row31 ON row0.index = row31.index LEFT JOIN row32 ON row0.index = row32.index LEFT JOIN row33 ON row0.index = row33.index LEFT JOIN row34 ON row0.index = row34.index LEFT JOIN row35 ON row0.index = row35.index LEFT JOIN row36 ON row0.index = row36.index LEFT JOIN row37 ON row0.index = row37.index LEFT JOIN row38 ON row0.index = row38.index LEFT JOIN row39 ON row0.index = row39.index LEFT JOIN row40 ON row0.index = row40.index LEFT JOIN row41 ON row0.index = row41.index LEFT JOIN row42 ON row0.index = row42.index LEFT JOIN row43 ON row0.index = row43.index LEFT JOIN row44 ON row0.index = row44.index LEFT JOIN row45 ON row0.index = row45.index LEFT JOIN row46 ON row0.index = row46.index LEFT JOIN row47 ON row0.index = row47.index LEFT JOIN row48 ON row0.index = row48.index LEFT JOIN row49 ON row0.index = row49.index LEFT JOIN row50 ON row0.index = row50.index LEFT JOIN row51 ON row0.index = row51.index LEFT JOIN row52 ON row0.index = row52.index LEFT JOIN row53 ON row0.index = row53.index LEFT JOIN row54 ON row0.index = row54.index LEFT JOIN row55 ON row0.index = row55.index LEFT JOIN row56 ON row0.index = row56.index LEFT JOIN row57 ON row0.index = row57.index LEFT JOIN row58 ON row0.index = row58.index LEFT JOIN row59 ON row0.index = row59.index LEFT JOIN row60 ON row0.index = row60.index LEFT JOIN row61 ON row0.index = row61.index LEFT JOIN row62 ON row0.index = row62.index LEFT JOIN row63 ON row0.index = row63.index



=======================================================================================
=======================================================================================
QUERY_NO: 726
QUERY_ID: 666a34cb-96d8-452b-a576-c8719fab847a
QUERY_TITLE: Hourly Success vs Failure Rates

QUERY_STRING:

-- forked from base @ https://flipsidecrypto.xyz/edit/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dhour
	  , CASE
	
	  WHEN SUCCESS= FALSE THEN 'failed' ELSE 'successful' END  as label
	  , COUNT(version) as txns
	  , COUNT(DISTINCT SENDER) as wallets
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp >='2024-05-22'
	  --AND SUCCESS = TRUE
	 GROUP BY dhour, label ORDER BY dhour ASC, label ASC
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 727
QUERY_ID: dfa74ed6-5e55-4386-9b87-8bb2b47466c2
QUERY_TITLE: base

QUERY_STRING:

with base as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dhour
	  , CASE
	
	  WHEN payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos::play'
	
	 THEN 'Tapos - Tickling' ELSE 'normal' END as label
	  , COUNT(version) as txns
	  , COUNT(DISTINCT SENDER) as wallets
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp >='2024-05-22'
	  AND SUCCESS = TRUE
	 GROUP BY dhour, label ORDER BY dhour ASC, label ASC
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 728
QUERY_ID: 9f29293d-d7d3-4d5e-b559-1ab0957b8ced
QUERY_TITLE: Daily Transaction Groups

QUERY_STRING:

with app_events as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-lockups' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'earn.kaiching'
	  AND from_address= 'hotwallet.kaiching'
	
	UNION ALL
	 SELECT
	
	 block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'redemptions' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'hotwallet.kaiching'
	  AND from_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'deposit-transfers' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'hotwallet.kaiching'
	  AND to_address ilike '%users.kaiching'
	
	UNION ALL
	
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-claims' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'earn.kaiching'
	  AND to_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'system/contract configs' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND (
	
	  (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	 OR
	
	 (from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	)
	  AND contract_address = 'wrap.near' ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  --, (tx:actions[0]:Transfer:deposit)/1e24 as amount
	  , 'Gas Transfers' as cat
	from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005
	  AND TX_SUCCEEDED = TRUE  ) , gas_clawbacks as (
	with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near'
	)
	SELECT * from base
	
	 UNION ALL
	
	 select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas-clawbacks' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_RECEIVER ='reserve.kaiching'
	  AND TX_SIGNER ilike '%users.kaiching'
	  AND tx_hash NOT IN (SELECT tx_hash from base) ) , acct_creations as (
	select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'account-creations' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_SIGNER='users.kaiching'
	  AND TX:actions[0]='CreateAccount'
	  AND TX_SUCCEEDED = TRUE ) , all_txns as (
	SELECT tx_hash, cat from app_events
	UNION ALL
	SELECT tx_hash, cat from gas_transfers
	UNION ALL
	 SELECT tx_hash, cat from acct_creations
	UNION ALL
	SELECT tx_hash, cat from gas_clawbacks ) SELECT
	block_timestamp::date as ddate
	 , CASE WHEN tx_hash NOT IN (SELECT DISTINCT tx_hash from all_txns) THEN 'others' ELSE 'KAIKAI' END as cat
	, COUNT(DISTINCT tx_hash) as txn_totals
	, COUNT(DISTINCT tx_signer) as signers
	-- , MAX(tx_hash) as example1
	-- , MIN(tx_hash) as example2 from near.core.fact_transactions WHERE 1=1
	AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30' GROUP BY 1, 2  ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 729
QUERY_ID: 65dd5cfa-045c-499c-808d-02aaa01043b1
QUERY_TITLE: op- airdrop retentions 

QUERY_STRING:

-- forked from op- retentions  @ https://flipsidecrypto.xyz/edit/queries/be185609-29bd-4347-a961-13904ee74a36 with airdrop_wallets as (
	 select
	  origin_from_address as receiver_wallet
	
	, raw_amount/pow(10,18) as amount
	  , block_timestamp as claim_time
	  , tx_hash as claim_tx
	from optimism.core.fact_token_transfers
	where 1=1
	
	AND contract_address = '0x4200000000000000000000000000000000000042'
	  AND from_address = lower('0xfedfaf1a10335448b7fa0268f56d2b44dbd357de')
	  AND origin_function_signature = '0x2e7ba6ef' ) , base_table as (
	select
	
	from_address as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from optimism.core.fact_transactions
	where 1=1
	  AND ( block_timestamp>'2022-01-01' AND block_timestamp<'2023-01-01')
	  AND from_address IN ( SELECT receiver_wallet as from_address from airdrop_wallets) ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 730
QUERY_ID: be185609-29bd-4347-a961-13904ee74a36
QUERY_TITLE: op- retentions 

QUERY_STRING:

-- forked from arb- retentions @ https://flipsidecrypto.xyz/edit/queries/d054be95-aa8d-4b3a-9888-b68e192b9886 with base_table as (
	select
	
	from_address as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from optimism.core.fact_transactions
	where 1=1
	  AND ( block_timestamp>'2022-01-01' AND block_timestamp<'2023-01-01') ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 731
QUERY_ID: f8b4e9f3-79ff-4d71-a339-e66d0fa1411c
QUERY_TITLE: Validator geoLocations copy

QUERY_STRING:

-- forked from flyingfish / Validator geoLocations @ https://flipsidecrypto.xyz/flyingfish/q/ZvZPpKpGFyHf/validator-geolocations select
	key
	, value:as::string as name
	, value:city::string as city
	, value:country::string as country
	, value:countryCode::string as country_code
	, value:ip::string as ip
	, value:isd::string as isp
	, value:lat::float as latitude
	, value:lon::float as longitude
	, value:org::string as org
	, value:stake::float as stake from (
	select
	  livequery.live.udf_api('https://select-jennica-apz-gh-9c8c5155.koyeb.app/geolocations') as response ), lateral flatten (input => response:data:lookupTable)



=======================================================================================
=======================================================================================
QUERY_NO: 732
QUERY_ID: eb152aef-ccbb-4e10-bb97-0d82f0d953f9
QUERY_TITLE: system/contract config

QUERY_STRING:

SELECT
	 *
	, 'system/contract configs' as cat  from near.core.ez_token_transfers WHERE 1=1
	AND (
	
	
	 (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	
	OR
	
	
	(from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	  )
	AND contract_address = 'wrap.near'
	AND tx_hash = 'zzqnWqcVr24m3P8LsDnTER5qM2C9TzL8wd4LxNhi3qA' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 733
QUERY_ID: 1fbd8e0e-a737-4615-8676-e1c82aad5a84
QUERY_TITLE: BeraDoge Gen1

QUERY_STRING:

-- forked from HiBeraNation @ https://flipsidecrypto.xyz/edit/queries/d247e0d6-8502-4843-928d-141e3132bd1f -- forked from Ramen HungryBera - Holders @ https://flipsidecrypto.xyz/edit/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e with thc_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from ethereum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	qualify ranks=1
	
	) , thc_unique_holders as(
	select
	
	distinct holder as address
	from thc_holders ) , ramen_holders as (
	SELECT
	  block_timestamp
	
	 , tx_hash
	  , NFT_TO_ADDRESS as holder
	  , tokenid
	  , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	from arbitrum.nft.ez_nft_transfers
	WHERE 1=1
	  AND NFT_ADDRESS = '0x75395f24644f1e65f66e346a414ff3412f131dd5'
	 qualify ranks=1
	
	) , ramen_data as(
	select
	
	count(distinct holder) as ramen_holders
	  , count(1) as ramen_supply
	 from ramen_holders t ) , ramen_hc as(
	select
	
	count(distinct t.address) as hc_holders
	  ,count(1) as hc_holders_holdings
	 from thc_unique_holders t inner join ramen_holders a on a.holder = t.address ) select 'BeraDoge Gen1' as projects ,ramen_holders as holders ,hc_holders as holders_with_hc ,ROUND(hc_holders/cast(ramen_holders as double)*100 , 2) || '%' as hc_holders_percentage ,ramen_supply as supply ,hc_holders_holdings as holders_with_hc_balance ,ROUND(hc_holders_holdings/cast(ramen_supply as double)*100, 2) || '%' as hc_holders_balance_percentage from ramen_data,ramen_hc



=======================================================================================
=======================================================================================
QUERY_NO: 734
QUERY_ID: f053d4bf-4a01-44fc-bad5-9988dd671cd5
QUERY_TITLE: Secondary Trading Volumes-2024

QUERY_STRING:

-- forked from Secondary Trading Volumes @ https://flipsidecrypto.xyz/edit/queries/b73bed3e-93cf-40d2-b84a-d037378c314e with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , collections as (
	SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME
	  , SUM(PRICE_USD) as volume
	from ethereum.nft.ez_nft_sales
	WHERE 1=1
	  AND NFT_ADDRESS IN (lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244'), '0x89b2249d7fbb30765d94c163929cd04b5afa77e3')
	GROUP BY 1, 2
	UNION ALL
	
	
	
	 SELECT
	
	block_timestamp::date as ddate
	  , PROJECT_NAME
	  , SUM(PRICE_USD) as volume
	from arbitrum.nft.ez_nft_sales
	WHERE 1=1
	  AND NFT_ADDRESS IN ('0xe5b68556c12f37fa12f15ae87ea32f15a8c4e7b9', '0x75395f24644f1e65f66e346a414ff3412f131dd5', '0xac59f7e7e5da0dc4f416a7aeff7a49ac284f10ca')
	GROUP BY 1, 2
	
	) SELECT * from collections WHERE 1=1 AND ddate>='2024-01-01' ORDER BY ddate ASC, PROJECT_NAME ASC



=======================================================================================
=======================================================================================
QUERY_NO: 735
QUERY_ID: b6fc8873-7d67-4b43-be1e-32b1f1c60611
QUERY_TITLE: BEAR ECO -  Holders of ONLY HC 

QUERY_STRING:

-- forked from BEAR ECO -  Holders of ONLY HC stats @ https://flipsidecrypto.xyz/edit/queries/9acf330f-75b1-4ebe-b10f-162463b8545e -- forked from BEAR ECO -  Holders w/ ALL NFTs Stats @ https://flipsidecrypto.xyz/edit/queries/ce364be4-b7d8-4dcd-9f1b-51c22a66fd9e -- forked from BEAR ECO -  Holders w/ ALL NFTs @ https://flipsidecrypto.xyz/edit/queries/c4270135-a9d9-44e3-9677-f315101ecaab with hc_holders as(
	with thc_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	  qualify ranks=1
	
	  )
	select
	
	distinct holder as address
	from thc_holders ) , ser_holders as(
	with ramen_holders as (
	  select holder,tokenid,sum(cc) as balance from(
	
	 select
	
	
	 NFT_FROM_ADDRESS as holder ,tokenid,-count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2
	
	 union all
	
	 select
	
	
	 NFT_TO_ADDRESS as holder,tokenid,count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2) a
	  group by 1,2
	  having sum(cc) > 0
	)
	select
	
	distinct holder as address
	from ramen_holders t ) , beradrome_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x17798ba794ad94dad0b7d3f4b9bc2e9f6486d4b9'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , hiberanation_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , beramonium_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t
	) , -- holding ONLY HC refine as (
	select hc.address from hc_holders hc
	WHERE 1=1
	  AND address NOT IN (select * from ser_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	  select * from beradrome_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	  select * from hiberanation_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	 select * from beramonium_holders
	
	
	
	
	
	
	
	 ) ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 736
QUERY_ID: 9acf330f-75b1-4ebe-b10f-162463b8545e
QUERY_TITLE: BEAR ECO -  Holders of ONLY HC stats

QUERY_STRING:

-- forked from BEAR ECO -  Holders w/ ALL NFTs Stats @ https://flipsidecrypto.xyz/edit/queries/ce364be4-b7d8-4dcd-9f1b-51c22a66fd9e -- forked from BEAR ECO -  Holders w/ ALL NFTs @ https://flipsidecrypto.xyz/edit/queries/c4270135-a9d9-44e3-9677-f315101ecaab with hc_holders as(
	with thc_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	  qualify ranks=1
	
	  )
	select
	
	distinct holder as address
	from thc_holders ) , ser_holders as(
	with ramen_holders as (
	  select holder,tokenid,sum(cc) as balance from(
	
	 select
	
	
	 NFT_FROM_ADDRESS as holder ,tokenid,-count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2
	
	 union all
	
	 select
	
	
	 NFT_TO_ADDRESS as holder,tokenid,count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2) a
	  group by 1,2
	  having sum(cc) > 0
	)
	select
	
	distinct holder as address
	from ramen_holders t ) , beradrome_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x17798ba794ad94dad0b7d3f4b9bc2e9f6486d4b9'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , hiberanation_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , beramonium_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t
	) , -- holding ONLY HC refine as (
	select hc.address from hc_holders hc
	WHERE 1=1
	  AND address NOT IN (select * from ser_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	  select * from beradrome_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	  select * from hiberanation_holders
	
	
	
	
	
	
	
	 union all
	
	
	
	
	
	
	
	 select * from beramonium_holders
	
	
	
	
	
	
	
	 ) ) SELECT COUNT(*) as total_wallets from refine



=======================================================================================
=======================================================================================
QUERY_NO: 737
QUERY_ID: ce364be4-b7d8-4dcd-9f1b-51c22a66fd9e
QUERY_TITLE: BEAR ECO -  Holders w/ ALL NFTs Stats

QUERY_STRING:

-- forked from BEAR ECO -  Holders w/ ALL NFTs @ https://flipsidecrypto.xyz/edit/queries/c4270135-a9d9-44e3-9677-f315101ecaab with hc_holders as(
	with thc_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = lower('0xCB0477d1Af5b8b05795D89D59F4667b59eAE9244')
	  qualify ranks=1
	
	  )
	select
	
	distinct holder as address
	from thc_holders ) , ser_holders as(
	with ramen_holders as (
	  select holder,tokenid,sum(cc) as balance from(
	
	 select
	
	
	 NFT_FROM_ADDRESS as holder ,tokenid,-count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2
	
	 union all
	
	 select
	
	
	 NFT_TO_ADDRESS as holder,tokenid,count(1) as cc from ethereum.nft.ez_nft_transfers
	
	 where NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070'
	
	 group by 1,2) a
	  group by 1,2
	  having sum(cc) > 0
	)
	select
	
	distinct holder as address
	from ramen_holders t ) , beradrome_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x17798ba794ad94dad0b7d3f4b9bc2e9f6486d4b9'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , hiberanation_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from arbitrum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0x5996cea2c456259d1dd9ae72b3df5192a1cbae01'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t  ) , beramonium_holders as(
	with hib_holders as (
	  SELECT
	
	 block_timestamp
	
	
	, tx_hash
	
	 , NFT_TO_ADDRESS as holder
	
	 , tokenid
	
	 , row_number() OVER (PARTITION BY tokenid ORDER BY block_timestamp DESC) as ranks
	  from ethereum.nft.ez_nft_transfers
	  WHERE 1=1
	
	 AND NFT_ADDRESS = '0xb44adddbf9b19bcdd12f978df8b36723488b9b8b'
	
	qualify ranks=1
	
	  )
	
	select
	
	distinct holder as address
	from hib_holders t
	) , -- holding all refine as (
	select hc.address from hc_holders hc
	inner join ser_holders ser on ser.address = hc.address
	inner join beradrome_holders bd on bd.address = hc.address
	inner join hiberanation_holders hb on hb.address = hc.address
	inner join beramonium_holders bm on bm.address = hc.address ) SELECT COUNT(*) as total_wallets from refine



=======================================================================================
=======================================================================================
QUERY_NO: 738
QUERY_ID: 84ba69a7-ce14-405c-a71d-8d003f1582cd
QUERY_TITLE: Holder Stats & HoneyComb Intersection

QUERY_STRING:

with raw as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/744e8a6b-d983-4cae-a0c9-448de253e043/latest-run') as resp
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/eb7cf3da-5d77-4570-832a-c401f4d73bfa/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/bb23cb1d-c639-4cd2-8aa2-476c0ae639c1/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1fbd8e0e-a737-4615-8676-e1c82aad5a84/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/d247e0d6-8502-4843-928d-141e3132bd1f/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/b22e4742-2d2c-40b6-b60c-ee305c58d18e/latest-run') as response ) , flattened as (
	select
	value[0] as project
	,value[1] as holders
	,value[2] as holders_with_hc
	,value[3] as hc_holders_percentage
	,value[4] as supply
	,value[5] as holders_with_hc_balance
	,value[6] as hc_holders_balance_percentage
	from raw, lateral FLATTEN (input=> resp:data:result:rows) ) SELECT * from flattened



=======================================================================================
=======================================================================================
QUERY_NO: 739
QUERY_ID: 24dd69e2-fdcf-49a8-abf1-64e1c7f4937d
QUERY_TITLE: Daily users <Emily>

QUERY_STRING:

-- forked from emferons / Daily users @ https://flipsidecrypto.xyz/emferons/q/u4K5NctD8t2A/daily-users WITH kaikai_addresses AS (
	SELECT address
	 FROM near.core.dim_address_labels
	WHERE project_name = 'kaikai'
	  OR address LIKE '%.kaiching' ), -- Get all active days first to create a clean date backbone active_days AS (
	SELECT DISTINCT DATE_TRUNC('day', block_timestamp) AS day
	FROM near.core.fact_actions_events
	WHERE receiver_id IN (SELECT address FROM kaikai_addresses)
	  AND block_timestamp >= CURRENT_DATE - INTERVAL '90 days' ), -- Daily Active Users daily_active AS (
	SELECT
	
	DATE_TRUNC('day', block_timestamp) AS day,
	  COUNT(DISTINCT signer_id) AS daily_active_users
	FROM near.core.fact_actions_events
	WHERE receiver_id IN (SELECT address FROM kaikai_addresses)
	  AND block_timestamp >= CURRENT_DATE - INTERVAL '90 days'
	  AND signer_id NOT IN (SELECT address FROM kaikai_addresses)
	GROUP BY 1 ), -- Daily Transactions daily_txs AS (
	SELECT
	
	DATE_TRUNC('day', block_timestamp) AS day,
	  COUNT(*) AS transaction_count
	FROM near.core.fact_actions_events
	WHERE receiver_id IN (SELECT address FROM kaikai_addresses)
	  AND block_timestamp >= CURRENT_DATE - INTERVAL '90 days'
	GROUP BY 1 ), -- Daily New Wallets new_wallets AS (
	WITH first_interactions AS (
	  SELECT
	
	  signer_id AS wallet,
	
	 MIN(block_timestamp) AS first_interaction_time
	  FROM near.core.fact_actions_events
	  WHERE receiver_id IN (SELECT address FROM kaikai_addresses)
	
	 AND signer_id NOT IN (SELECT address FROM kaikai_addresses)
	  GROUP BY 1
	)
	
	SELECT
	
	DATE_TRUNC('day', first_interaction_time) AS day,
	  COUNT(DISTINCT wallet) AS new_wallets
	FROM first_interactions
	WHERE first_interaction_time >= CURRENT_DATE - INTERVAL '90 days'
	GROUP BY 1 ) -- Combine metrics using the active days as the backbone SELECT
	 ad.day,
	COALESCE(da.daily_active_users, 0) AS daily_active_users,
	COALESCE(dt.transaction_count, 0) AS transaction_count,
	COALESCE(nw.new_wallets, 0) AS new_wallets FROM active_days ad LEFT JOIN daily_active da ON ad.day = da.day LEFT JOIN daily_txs dt ON ad.day = dt.day LEFT JOIN new_wallets nw ON ad.day = nw.day ORDER BY ad.day DESC;



=======================================================================================
=======================================================================================
QUERY_NO: 740
QUERY_ID: aaaee541-5b8c-4044-b127-30a9916aa190
QUERY_TITLE: RON eip1559 burns

QUERY_STRING:

with pf_burns as (
	with block_level as (
	  ----block level for testing/accuracy
	  SELECT
	
	 b.block_number
	
	 , b.block_timestamp
	
	 , SUM(t.tx_fee) as total_txn_fees
	
	 , MAX(b.gas_used * b.base_fee_per_gas/1e18) as burn --london fork, formula of burn from alchemy (August 5th, 2021)
	
	 --, SUM(t.gas_used * (t.gas_price-b.BLOCK_HEADER_JSON:"baseFeePerGas")/1e18) as pf_reward -- TOO COMPLICATED SHIT
	
	 , GREATEST(total_txn_fees-burn, 0) as pf_reward  -- far simpler calc as per etherscan if you already have the burn part// First 0 is block_rewards which are 0 since merge
	  from ronin.core.fact_transactions t
	
	LEFT JOIN ronin.core.fact_blocks b on b.block_number = t.block_number
	  WHERE 1=1
	
	 AND t.block_number>=43447600
	
	 AND t.block_timestamp>= '2025-03-17 07:00'
	
	 --AND b.block_number = 20764985
	
	 -- reward: 0.03376067686372955 ETH (0 + 0.08309174915568116 - 0.04933107229195161)
	  GROUP BY 1, 2
	)
	SELECT
	
	date_trunc('day', block_timestamp) as ddate
	  , SUM(burn) as burns
	  , SUM(pf_reward) as priority_fee_rewards
	from block_level
	GROUP BY 1 ) SELECT * from pf_burns ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 741
QUERY_ID: 7dc614f7-62fa-42ab-bb72-4d28017cab03
QUERY_TITLE: Arbitrum Airdrop overview

QUERY_STRING:

-- source: @crypto_edgar with arb_claims AS (
	SELECT
	  ethereum.public.udf_hex_to_int (DATA) / pow(10, 18) as amount,
	  CONCAT('0x', SUBSTR(TOPICS[1], -40, 40)) as claimer,
	  block_number,
	  block_timestamp as claim_time,
	  tx_hash
	FROM arbitrum.core.fact_event_logs
	WHERE 1=1
	  AND ORIGIN_TO_ADDRESS = '0x67a24ce4321ab3af51c2d0a4801c3e111d88c9d9'
	  AND ORIGIN_FUNCTION_SIGNATURE = '0xae373c1b'
	  AND BLOCK_NUMBER >= 70506697
	  AND TX_STATUS = 'SUCCESS' ), txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , COUNT( DISTINCT block_timestamp::date) as unique_days
	  , MAX(claim_time) as ctime
	  , COUNT(DISTINCT t.tx_hash) as txns
	  , from_address as user
	from arbitrum.core.fact_transactions t
	LEFT JOIN arb_claims c on c.claimer= t.from_address
	WHERE 1=1
	  AND claim_time<block_timestamp
	  AND from_address IN (SELECT DISTINCT claimer from arb_claims)
	GROUP BY user ) , refine as (
	SELECT
	  *
	  , CASE
	
	
	
	WHEN unique_days=1 THEN 'Single Day'
	
	
	  WHEN unique_days between 2 and 7 THEN '2-7 Days'
	
	
	  ELSE '>7 days' END as cat
	from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 742
QUERY_ID: 53679b7a-03a0-4b6b-a701-155fc2fdaffa
QUERY_TITLE: OP Airdrop overview

QUERY_STRING:

-- forked from Arbitrum Airdrop overview @ https://flipsidecrypto.xyz/edit/queries/7dc614f7-62fa-42ab-bb72-4d28017cab03 with op_claims AS (
	SELECT
	  RAW_AMOUNT/1e18 as amount
	  , to_address as claimer
	  , tx_hash
	  , block_timestamp as claim_time
	FROM optimism.core.fact_token_transfers
	WHERE 1=1
	  AND origin_to_address = '0xfedfaf1a10335448b7fa0268f56d2b44dbd357de'
	  AND origin_function_signature = '0x2e7ba6ef'
	  AND contract_address = '0x4200000000000000000000000000000000000042'
	  and block_timestamp::date <= '2022-09-27'
	 ), txns as (
	SELECT
	
	MAX(block_timestamp) as last_time
	  , COUNT( DISTINCT block_timestamp::date) as unique_days
	  , MAX(claim_time) as ctime
	  , COUNT(DISTINCT t.tx_hash) as txns
	  , from_address as user
	from optimism.core.fact_transactions t
	LEFT JOIN op_claims c on c.claimer= t.from_address
	WHERE 1=1
	  AND claim_time<block_timestamp
	  AND from_address IN (SELECT DISTINCT claimer from op_claims)
	GROUP BY user ) , refine as (
	SELECT
	  *
	  , CASE
	
	
	
	WHEN unique_days=1 THEN 'Single Day'
	
	
	  WHEN unique_days between 2 and 7 THEN '2-7 Days'
	
	
	  ELSE '>7 days' END as cat
	from txns )
	 SELECT
	COUNT(user) as users
	, cat from refine group by CAT



=======================================================================================
=======================================================================================
QUERY_NO: 743
QUERY_ID: 58e6caf5-11a5-4d4b-827f-64925d32b719
QUERY_TITLE: ETH Stake - Base

QUERY_STRING:

with base as (
	SELECT
	
	*
	  , row_number() OVER (PARTITION by index, validator_status ORDER BY slot_number ASC) as ranks
	 from ethereum.beacon_chain.fact_validators
	WHERE index=1556229
	QUALIFY ranks=1
	ORDER BY slot_number ASC  ) SELECT
	 d.block_timestamp as deposit_time
	, depositor
	, slot_number as status_slot
	, index as validator_index
	, validator_status
	, pubkey
	, balance from ethereum.beacon_chain.ez_deposits d  LEFT JOIN base b using (pubkey) WHERE pubkey = '0xb834a656febca066a01a814d74a550b822912667f831f5775c52073c98117e8d69bd3e17e9a0e45ee491b1eebe012e20'



=======================================================================================
=======================================================================================
QUERY_NO: 744
QUERY_ID: 969c9f88-6d2c-4a99-bf03-a815520375c4
QUERY_TITLE: snapshot comparison

QUERY_STRING:

with snapshot as (
	with stats as (
	  SELECT
	
	  SUM(deposit_amount) as eth_staked --always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	 AND block_timestamp<'2023-09-01'
	
	
	 UNION ALL
	
	
	  SELECT
	
	  SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	
	 AND block_timestamp<'2023-09-01'
	)
	SELECT
	
	SUM(eth_staked) as total_eth
	  , ROUND(total_eth/32,0) as validators
	from stats  ) , postshot as (
	with stats as (
	  SELECT
	
	  SUM(deposit_amount) as eth_staked --always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	 AND block_timestamp BETWEEN '2023-09-01' AND '2024-08-31'
	
	
	 UNION ALL
	
	
	  SELECT
	
	  SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	
	 AND block_timestamp BETWEEN '2023-09-01' AND '2024-08-31'
	)
	SELECT
	
	SUM(eth_staked) as total_eth
	  , ROUND(total_eth/32,0) as validators
	from stats  ) , merge as (
	SELECT * , TO_TIMESTAMP('2023-08-31') as label from snapshot
	UNION ALL
	 SELECT *, TO_TIMESTAMP('2024-08-31') as label from postshot ) SELECT
	 *
	, lag (total_eth) OVER (ORDER by label ASC) as eth_prev
	, lag(validators) OVER (ORDER by label ASC) as val_prev
	, ROUND((total_eth/eth_prev)*100,2) as eth_growth
	, ROUND((validators/val_prev)*100,2) as val_growth
	, SUM(total_eth) OVER (ORDER by label ASC) as cumu_eth
	, SUM(validators) OVER (ORDER by label ASC) as cumu_validators from merge ORDER BY label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 745
QUERY_ID: 8c094e8c-3252-41d7-ad50-954b8a6277d1
QUERY_TITLE: snapshot comparison MoM - ETH

QUERY_STRING:

-- forked from snapshot comparison @ https://flipsidecrypto.xyz/studio/queries/969c9f88-6d2c-4a99-bf03-a815520375c4 with snapshot as (
	with stats as (
	  SELECT
	
	  SUM(deposit_amount) as eth_staked --always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	 AND block_timestamp<'2023-09-01'
	
	
	 UNION ALL
	
	
	  SELECT
	
	  SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	
	 AND block_timestamp<'2023-09-01'
	)
	SELECT
	
	TO_TIMESTAMP('2023-08-31') as dmonth
	  , SUM(eth_staked) as total_eth
	  , ROUND(total_eth/32,0) as validators
	from stats
	 GROUP BY dmonth ) , postshot as (
	with stats as (
	  SELECT
	
	  date_trunc('month', block_timestamp) as dmonth
	
	 , SUM(deposit_amount) as eth_staked --always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	 AND block_timestamp BETWEEN '2023-09-01' AND '2024-08-31'
	  GROUP BY dmonth
	
	UNION ALL
	
	
	  SELECT
	
	  date_trunc('month', block_timestamp) as dmonth
	
	 , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	
	 AND block_timestamp BETWEEN '2023-09-01' AND '2024-08-31'
	  GROUP BY dmonth
	)
	SELECT
	
	dmonth
	  , SUM(eth_staked) as total_eth
	  , ROUND(total_eth/32,0) as validators
	from stats
	GROUP BY dmonth ) , merge as (
	with base as (
	  SELECT *  from snapshot
	  UNION ALL
	
	SELECT * from postshot
	)
	SELECT
	
	*
	  -- , ROUND((total_eth/eth_prev)*100,2) as eth_growth
	  -- , ROUND((validators/val_prev)*100,2) as val_growth
	  , SUM(total_eth) OVER (ORDER by dmonth ASC) as cumu_eth
	  , SUM(validators) OVER (ORDER by dmonth ASC) as cumu_validators
	from base  ) , refine as (
	SELECT
	
	*
	  , lag (cumu_eth) OVER (ORDER by dmonth ASC) as pcumu_eth
	  , ROUND((total_eth/pcumu_eth)*100,2) as eth_growth
	from merge
	ORDER BY dmonth ASC
	) SELECT * from refine ORDER BY dmonth ASC



=======================================================================================
=======================================================================================
QUERY_NO: 746
QUERY_ID: 9846542b-3be7-4a00-87e2-47675cd81568
QUERY_TITLE: staker labels

QUERY_STRING:

SELECT
	platform
	 , COUNT(DISTINCT depositor) as depositors
	, ROUND(SUM(DEPOSIT_AMOUNT)/32, 0) as validators from ethereum.beacon_chain.ez_deposits GROUP BY 1 ORDER BY validators DESC



=======================================================================================
=======================================================================================
QUERY_NO: 747
QUERY_ID: f798b07b-1cc7-4859-85bd-0f3ec27f3fb8
QUERY_TITLE: initial_time

QUERY_STRING:

SELECT
	 CURRENT_TIMESTAMP as dtime



=======================================================================================
=======================================================================================
QUERY_NO: 748
QUERY_ID: 0193e086-a84a-4a54-9a1c-4fe004ad2f85
QUERY_TITLE: Deposit counts per pubkey

QUERY_STRING:

-- SELECT --
	pubkey --
	, COUNT(*) as totals -- from ethereum.beacon_chain.ez_deposits -- GROUP BY pubkey -- having totals>1 SELECT * from ethereum.beacon_chain.ez_deposits WHERE pubkey='0x8a4f2e7e2fea00a9ce77d669aeba2573137010db2f85e18c0265e492d3a9b5367e15f356abd58b2bfb3a3bddef9aece9'



=======================================================================================
=======================================================================================
QUERY_NO: 749
QUERY_ID: 8dcaeb6c-5fb9-40b2-82a4-d7cae83e9fda
QUERY_TITLE: redeem

QUERY_STRING:

-- forked from deposit-transfer @ https://flipsidecrypto.xyz/studio/queries/4a090036-9be3-4132-a494-2022a98499e8 -- forked from earn-claim @ https://flipsidecrypto.xyz/studio/queries/54a2d98c-ea7a-4b4d-9201-c64a69ad57f1 SELECT
	  *
	, 'redemptions' as cat
	from near.core.ez_token_transfers WHERE 1=1
	AND contract_address = 'wallet.kaiching'
	AND to_address= 'hotwallet.kaiching'
	AND from_address ilike '%users.kaiching' LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 750
QUERY_ID: 66a49ca1-271a-4dd6-97f8-36cfd62ebf9c
QUERY_TITLE: gas transfers

QUERY_STRING:

-- forked from earn-lockups @ https://flipsidecrypto.xyz/studio/queries/7629aeed-a602-4a05-8074-738236ef90f2 SELECT
	BLOCK_TIMESTAMP
	, tx_hash
	, tx_signer::STRING as sender
	, tx_receiver::STRING as receiver
	, (tx:actions[0]:Transfer:deposit)/1e24 as amount
	, 'Gas Transfers' as cat from near.core.fact_transactions WHERE 1=1
	AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	AND TX_SUCCEEDED = TRUE
	 AND tx_signer = 'hotwallet.kaiching'
	AND ARRAY_SIZE(tx:actions) = 1
	AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005 LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 751
QUERY_ID: a809d166-415e-40bd-9584-4200a3526344
QUERY_TITLE: gas clawbacks

QUERY_STRING:

-- forked from account-creations @ https://flipsidecrypto.xyz/studio/queries/8432ea02-4106-455d-867f-a453bf5bd02b with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near' ) SELECT * from base  UNION ALL  select
	 block_timestamp
	, tx_hash
	, tx_signer
	, tx_receiver
	, 'gas-clawbacks' as cat
	from near.core.fact_transactions WHERE 1=1
	AND TX_RECEIVER ='reserve.kaiching'
	AND TX_SIGNER ilike '%users.kaiching'
	--AND tx_hash = '11Cm22ejwga8o6LqXqtGocGXysQxgPiYofmaiWdN2is'
	AND tx_hash NOT IN (SELECT tx_hash from base) LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 752
QUERY_ID: d054be95-aa8d-4b3a-9888-b68e192b9886
QUERY_TITLE: arb- retentions

QUERY_STRING:

-- forked from arb-airdrop base txns @ https://flipsidecrypto.xyz/edit/queries/2a44e480-ee89-49ad-a743-88964ea2395e with base_table as (
	select
	
	from_address as user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from arbitrum.core.fact_transactions
	where 1=1
	  and ( block_timestamp>'2022-09-01' AND block_timestamp<'2023-09-01') ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 753
QUERY_ID: 418bc24a-71c9-4fd2-8db9-fbb7eb09e38d
QUERY_TITLE: Reported Addresses Filter

QUERY_STRING:

with raw as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/ea02effe-e84c-4a71-b3b4-6e4cc9fbf09d/latest-run') as resp
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7453ffd5-7166-4358-9468-cbf8bc72e67a/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/638dd28b-a0da-4f7f-a407-2f85c1b5d814/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1678a85b-566e-4187-b25c-5d07d45c8ab3/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/4745985b-b9c7-4cec-a166-b3c205075d74/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/0e5c1990-d5d4-40f4-9472-f28f8af3a2ac/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/5a51c163-059a-4ad1-9fe6-a7d59c7c2733/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/5286d7a8-8c0a-43e5-8512-fda7f895964d/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/eb6e5be8-f19d-4856-8bf3-5cd5c58db930/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/c5ce9a10-8ed9-4dc8-a89b-43c190a9a198/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/43362c65-f336-4884-8888-db792589f746/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1559bae4-4e36-4e60-8c8b-01a0c5b28a7f/latest-run') as response
	union
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/e31a1b2f-cac9-49ff-95ad-0b4cdb51c970/latest-run') as response
	-- union
	 -- select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/e31a1b2f-cac9-49ff-95ad-0b4cdb51c970/latest-run') as response
	-- union
	 -- select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/e31a1b2f-cac9-49ff-95ad-0b4cdb51c970/latest-run') as response
	) , flattened as (
	select
	  value[3] as address
	from raw, lateral FLATTEN (input=> resp:data:result:rows) ) SELECT * from flattened



=======================================================================================
=======================================================================================
QUERY_NO: 754
QUERY_ID: c9e86dfe-63c0-475b-938a-cf3305e5fb69
QUERY_TITLE: query results copy not working

QUERY_STRING:

SELECT * from base.vertex.ez_perp_trades LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 755
QUERY_ID: 7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1
QUERY_TITLE: SEI Transfers Abuse

QUERY_STRING:

-- forked from SEI transfers/bridging of claimers FIXED @ https://flipsidecrypto.xyz/edit/queries/8f764723-2027-4da8-a983-b44379113127 with token_bank as (
	select * from
	  ( values
	
	  ('8', 'USDT', 'binance', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/871jbn9unTavWsAe83f2Ma9GJWSv6BKsyWYLiQ6z3Pva'),
	
	 ('6', 'USDC', 'solana', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/9fELvUhFo6yWL34ZaLgPbCPzdk9MD1tAzMycgH45qShH'),
	
	 ('6', 'USDC', 'optimism', '/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/3VKKYtbQ9iq8f9CaZfgR6Cr3TUj6ypXPAn6kco6wjcAu'),
	
	 ('6', 'USDC', 'polygon','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/DUVFMY2neJdL8aE4d3stcpttDDm5aoyfGyVvm29iA9Yp'),
	
	 ('6', 'USDC', 'arbitrum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7edDfnf4mku8So3t4Do215GNHwASEwCWrdhM5GqD51xZ'),
	
	 ('8', 'WBTC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/7omXa4gryZ5NiBmLep7JsTtTtANCVKXwT9vbN91aS1br'),
	
	 ('6', 'USDC', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/Hq4tuDzhRBnxw3tFA5n6M52NVMVcC19XggbyDiJKCD6H'),
	
	 ('8', 'ETH', 'ethereum','/sei189adguawugk3e55zn63z8r9ll29xrjwca636ra7v7gxuzn98sxyqwzt47l/4tLQqCLaoKKfNFuPjA9o39YbKUwhR1F8N29Tz3hEbfP2')
	  ) as a (decimal, token_name, chain, token_address)) , airdrop_claimers as (
	SELECT
	  tx_id
	  , block_timestamp
	  , receiver as user
	  , 'SEI' as symbol
	  , 'usei' as symbol_address
	  , amount/pow(10,6)  as amount
	  , 'drop' as cat
	  , 'drop' as bridge
	  ,  'sei' as chain
	FROM sei.core.fact_transfers
	WHERE
	  sender IN (
	
	 'sei1agd6xc09ydnrucxpjy9c47thunrzzhe5sc75gphjnh4nqkdup8wsexh044',
	
	 'sei1mm640rda0zmkfwyprmchk2gg54wj7mn8maqzycgzpul0pml448yswjxvy2'
	  )
	  and tx_succeeded = 'true'
	  and currency = 'usei'
	  AND block_timestamp >= '2023-08-15' ) , -----------------WORM TXNS START----------------------------- bridge_txns as (
	select
	
	DISTINCT tx_id
	
	, CASE WHEN attribute_key='minter' then 'minter' ELSE 'burner' END as t_cat
	from sei.core.fact_msg_attributes
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  and ATTRIBUTE_KEY IN ('minter', 'burner')
	
	) , contract_address as (
	 select DISTINCT attribute_value
	from sei.core.fact_msg_attributes
	where ATTRIBUTE_KEY = '_contract_address' ),
	 -- Wormhole Contract address to find Bridges related to Wormhole
	bridge_tx_worm_only as (
	 select DISTINCT tx_id
	from sei.core.fact_msg_attributes a join sei.core.dim_labels b on a.attribute_value = b.address
	WHERE 1=1
	  and tx_id in (select tx_id from bridge_txns)
	  and label = 'wormhole'
	  and label_type = 'bridge' ),
	 -- Extract User addresses  users as (
	 select
	
	block_timestamp
	  , a.tx_id, attribute_value as user
	  , CASE WHEN (ATTRIBUTE_KEY = 'sender') THEN 'out' ELSE 'in' END as cat
	from sei.core.fact_msg_attributes a
	LEFT JOIN bridge_txns t on a.tx_id=t.tx_id
	where 1=1
	  and (
	
	 (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'recipient' and t_cat='minter')
	
	 OR (MSG_TYPE = 'transfer' and ATTRIBUTE_KEY = 'sender' and t_cat='burner')
	  )
	  and a.tx_id in (select tx_id from bridge_tx_worm_only)
	  and TX_SUCCEEDED = 'true' ) , -- WORM Bridged Amount transfers_worm as (
	 select
	
	DISTINCT
	
	  a.tx_id
	
	 , a.block_timestamp
	
	 , user
	
	  , split(ATTRIBUTE_VALUE, 'factory') as seprator
	
	 , CASE WHEN t_cat='minter' THEN 'in' ELSE 'out' END as cat
	
	 , seprator[0]/ pow(10, decimal) as amount, seprator[1] as tok_address
	
	 , token_name
	from users a
	 LEFT join sei.core.fact_msg_attributes b on a.tx_id = b.tx_id
	LEFT JOIN  token_bank t on split(ATTRIBUTE_VALUE, 'factory')[1] = t.token_address
	LEFT JOIN  bridge_txns ts on a.tx_id = ts.tx_id
	where 1=1
	  and (MSG_TYPE = 'coin_received' and ATTRIBUTE_KEY = 'amount')
	  and user not in ( select attribute_value from contract_address) ) --------------------------------END OF WORM ------------------------------------------------------ , -- ETH and BTC prices to calculate USD Volume price as (
	 select
	
	hour as hourly
	  , case when symbol = 'WETH' then 'ETH' else 'WBTC'end as symb
	  , avg(price) as prices
	from ethereum.price.ez_hourly_token_prices
	where 1=1
	  and symbol in ('WETH', 'WBTC')
	  and hour::date >= '2023-08-15'
	  and (hour::date >= '2023-08-15' AND hour::date<='2023-08-30')
	group by 1, 2 ), total_bridging as (
	select
	
	DISTINCT tx_id
	  , block_timestamp
	  , 'wormhole' as bridge
	  , amount
	
	, case when token_name = symb then amount * prices else amount end as volume
	  , user, 'sei' as chain, token_name
	  , cat
	from transfers_worm a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_name = b.symb
	
	UNION
	select
	
	DISTINCT tx_hash as tx_id,
	
	block_timestamp,
	  'Satellite' as bridge,
	
	amount,
	  case when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_satellite a left join price b on trunc(a.block_timestamp, 'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	and token_symbol not in ('OSMO','ATOM')
	and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	UNION
	
	select
	
	DISTINCT tx_hash as tx_id,block_timestamp,
	  'Squid' as bridge,
	
	amount,
	  case  when token_symbol = 'ETH' then amount*prices
	
	
	
	when token_symbol = 'WBTC' then amount*prices else amount end as volume,
	  CASE WHEN SOURCE_CHAIN='sei' THEN sender ELSE receiver END as user,
	
	DESTINATION_CHAIN as chain,
	
	case when token_symbol in ('USDC.axl','axlUSDC') then 'axlUSDC' else token_symbol end as token_name
	  , CASE WHEN SOURCE_CHAIN='sei' THEN 'out' ELSE 'in' END as cat
	
	  from axelar.defi.ez_bridge_squid a left join price b on trunc(a.block_timestamp,'hour') = b.hourly and a.token_symbol = b.symb
	where 1=1
	  and (SOURCE_CHAIN = 'sei' OR destination_chain= 'sei')
	  --and (user IN (select claimer as user from airdrop_claimers))
	  and token_symbol not in ('OSMO','ATOM')
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30') ) ,  ----------------------- IBC prices ------------------------------------------- --Sei and Astri price astro_price as (
	SELECT
	  trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'Astro' as symbol,
	  'ibc/0EC78B75D318EA0AAB6160A12AEE8F3C7FEA3CFEAD001A3B103E11914709F4CE' as token_address,
	  6 as decimal,
	  value[1] as price
	from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/astroport-fi/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	,LATERAL FLATTEN (input => resp:data:prices)
	
	UNION
	
	Select
	
	trunc(TO_TIMESTAMP(value[0]::string), 'hour') as hourly,
	  'SEI' as symbol,
	  'usei' as token_address,
	  6 as decimal,
	  value[1] as price
	  from (SELECT livequery.live.udf_api('https://api.coingecko.com/api/v3/coins/sei-network/market_chart/range?vs_currency=usd&from=1692037800&to=1694975400') as resp)
	  ,LATERAL FLATTEN (input => resp:data:prices) ) , price_i as (
	 select
	
	hourly,
	  symbol,
	  token_address,
	  avg(price) as prices
	from astro_price
	where hourly >= '2023-08-15'
	group by 1,2,3 ) , -- ATOM and Osmo Prices price_ibc as (
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case
	
	  when symbol = 'OSMO' then 'ibc/ED07A3391A112B175915CD8FAF43A2DA8E4790EDE12566649D0C2F97716B8518'
	
	 when symbol = 'ATOM' then 'ibc/6CDD4663F2F09CD62285E2D45891FC149A3568E316CE3EBBE201A71A78A69388'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and RECORDED_hour::date >= '2023-08-15'
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM', 'OSMO')
	group by 1, 2, 3
	
	UNION
	-----WHY THIS?
	select
	
	trunc(RECORDED_hour,'hour') as hourly
	  , case when symbol = 'ATOM' then 'ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9'
	
	 end as token_address, symbol, avg(price) as prices
	from osmosis.price.ez_prices
	where 1=1
	  and (RECORDED_hour::date >= '2023-08-15' AND RECORDED_hour::date<='2023-08-30')
	  and symbol in ('ATOM')
	group by 1, 2, 3
	
	UNION
	
	select
	
	hourly
	  , symbol
	  , token_address
	  , prices
	 from price_i ) , ibc_transfers as (
	 SELECT
	
	tx_id,
	
	block_timestamp,
	  'IBC' as bridge, amount/pow(10, 6) as amount, currency as symbol_address, sender, receiver
	  , CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user
	  , CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ( (receiver like 'sei%' and (sender like 'osmo%' or sender like 'cosmos%'))
	
	
	  OR
	
	
	
	(sender like 'sei%' and (receiver like 'osmo%'or receiver like 'cosmos%'))
	
	
	  OR
	
	
	  --avoid inverse as that can overlap with squid/satellite
	
	
	  (sender like 'sei%' and receiver like 'axelar%')
	
	
	)
	
	and TX_SUCCEEDED = 'true'
	  and transfer_type IN ('IBC_TRANSFER_IN' , 'IBC_TRANSFER_OUT') ) , terra_transfers as (
	select
	
	 tx_id, block_timestamp, 'IBC' as bridge,
	  amount / pow(10, 6) as amount,
	  amount  * prices as volume,
	  CASE WHEN receiver like 'sei%' THEN receiver ELSE sender END as user,
	
	CASE WHEN receiver like 'sei%' THEN 'sei' ELSE 'terra' END  as chain, symbol,
	  CASE WHEN receiver like 'sei%' THEN 'in' ELSE 'out' END as cat
	from sei.core.fact_transfers a join price_i b on trunc(block_timestamp,'hour') = b.hourly and a.currency = b.token_address
	where 1=1
	  and (block_timestamp::date >= '2023-08-15' AND block_timestamp<='2023-08-30')
	  AND ((receiver like 'sei%' and sender like 'terra%') OR (receiver like 'terra%' and sender like 'sei%'))
	  and TX_SUCCEEDED = 'true' ) , all_bridges as (
	select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  ---USDC.axl for outward to axelar
	  case when symbol_address = 'ibc/F082B65C88E4B6D5EF1DB243CDA1D331D002759E938A0F5CD3FFDC5D53B3E349' then amount ELSE (amount) * prices end as volume,
	  user,
	
	case when receiver like 'osmo%' then 'Osmosis'
	
	
	  when receiver like 'cosmos%' then 'cosmoshub'
	
	
	  ELSE 'sei' end as chain,
	
	symbol as token_name,
	  cat
	from ibc_transfers a left join price_ibc b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address
	UNION
	 SELECT * from total_bridging
	UNION
	SELECT * from terra_transfers
	UNION
	 select
	
	tx_id,
	
	block_timestamp,
	
	bridge,
	  amount,
	  (amount*prices) as volume,
	  user,
	
	chain,
	
	a.symbol as token_name,
	  cat
	
	  from airdrop_claimers a
	 JOIN price_i b on trunc(a.block_timestamp,'hour') = b.hourly and a.symbol_address = b.token_address ) ,  merge_txns as (
	SELECT
	
	SUM(CASE WHEN cat='in' THEN volume ELSE null END) as vol_in
	  , SUM(CASE WHEN cat='out' THEN volume ELSE null END) as vol_out
	  , SUM(CASE WHEN cat='drop' THEN volume ELSE NULL END) as vol_drop
	  , SUM(CASE WHEN cat='drop' THEN amount ELSE NULL END) as amt_drop
	  , COUNT(DISTINCT tx_id) as txns
	  , MIN(block_timestamp) as t_min
	  , MAX(block_timestamp) as t_max
	  , MIN(CASE WHEN cat='drop' THEN block_timestamp ELSE NULL END) as t_drop
	  , user
	from all_bridges
	GROUP BY user ) SELECT * from merge_txns where 1=1
	AND (AMT_DROP>5000)



=======================================================================================
=======================================================================================
QUERY_NO: 756
QUERY_ID: 793804fd-13d4-477c-a0e2-8e8bf06862eb
QUERY_TITLE: Vertex Orders Test

QUERY_STRING:

-- forked from GMX Order Lookup - Both V1/V2 @ https://flipsidecrypto.xyz/edit/queries/1ce9b21c-1de9-4ef1-93a7-065ac6cdef49 with base as (
	SELECT
	  block_timestamp
	  , 'Vertex ' || version as platform
	  , trader as account
	  , SYMBOL as market
	  , order_type
	  , trade_type
	
	, amount_usd as volume
	  , fee_amount
	  , 'NA' as collateral_token
	  , 'NA' as init_collateral_delta_amount
	  , 'NA' as execution_fee_eth
	  , ARRAY_CONSTRUCT('orderExecuted:' || tx_hash) as tx_hashes
	  , 'NA' as DECODED_LOG
	  , tx_hash
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND trader = lower('{{account}}') )
	
	SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 757
QUERY_ID: 9d0635f0-77a7-40c9-a98b-c2a60d6d0391
QUERY_TITLE: All bridges copy

QUERY_STRING:

-- forked from flyingfish / All bridges @ https://flipsidecrypto.xyz/flyingfish/q/bU6uCyHGF2QT/all-bridges -- forked from h4wk / hyperlane - bridge daily token @ https://flipsidecrypto.xyz/h4wk/q/vbsqdxD9Q8nF/hyperlane---bridge-daily-token with tokens as (
	select * from ( values
	  ('USDC', 'USD Coin', 'AKEWE7Bgh87GPp171b4cJPSSZfmZwQ3KaqYqXoKLNAEE'),
	  ('SOL', 'Solana', 'BeRUj3h7BqkbdfFU7FBNYbodgf8GCHodzKvF9aVjNNfL'),
	  ('WIF', 'DogWifHat', '841P4tebEgNux2jaWSjCoi9LhrVr9eHGjLc758Va3RPH'),
	  ('tETH', 'Turbo ETH', 'GU7NS9xCwgNPiAdJ69iusFrRfawjDDPjeMBovhV1d4kn'),
	  ('ORCA', 'Orca', '2tGbYEm4nuPFyS6zjDTELzEhvVKizgKewi6xT7AaSKzn'),
	  ('USDT', 'Tether USD', 'CEBP3CqAbW4zdZA57H2wfaSG1QNdzQ72GiQEbQXyW9Tm'),
	  ('TIA', 'Celestia', '9RryNMhAVJpAwAGjCAMKbbTFwgjapqPkzpGMfTQhEjf8'),
	  ('STTIA', 'Stride Staked TIA', 'V5m1Cc9VK61mKL8xVYrjR7bjD2BC5VpADLa6ws3G8KM'),
	  ('WEETHS', 'Super Symbiotic LRT', 'F72PqK74jc28zjC7kWDk6ykJ2ZAbjNzn2jaAY9v9M6om'),
	  ('WBTC', 'Wrapped BTC', '7UTjr1VC6Z9DPsWD6mh5wPzNtufN17VnzpKS3ASpfAji')
	) as t(symbol, name, mint) ) , price_cte as (
	  select
	
	 hour,
	
	 symbol as price_symbol,
	
	 token_address,
	
	 price
	
	 --avg(price) as price
	  from crosschain.price.ez_prices_hourly
	  where token_address in (
	
	 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', -- USDC
	
	 'So11111111111111111111111111111111111111112', -- SOL
	
	  'EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm', -- WIF
	
	 '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs', -- ETH
	
	 'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE', -- ORCA
	
	 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', -- USDT
	
	 'ibc/D79E7D83AB399BFFF93433E54FAA480C191248FC556924A2A8351AE2638B3877', -- TIA
	
	 'ibc/698350B8A61D575025F3ED13E9AC9C0F45C89DEFE92F76D5838F1D3C1A7FF7C9', -- STTIA
	
	 '0x917cee801a67f933f2e6b33fc0cd1ed2d5909d88', -- WEETHS
	
	 '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh' -- WBTC
	
	 )
	  --group by 1,2 ) , canonical_base as (
	  select
	
	 block_timestamp
	
	 --, signers[0]
	
	 , program_id -- Only native bridge at the moment. Track this to detect new tokens
	
	 , instruction:parsed:info:destination as user
	
	 , instruction:parsed:info:lamports as amount
	
	 , amount / pow(10, 9) as amount_dec
	
	 , price
	
	 , price_symbol
	
	 , amount_dec * price as amount_usd
	
	 , tx_id
	  from eclipse.core.fact_events_inner
	  join price_cte on (date_trunc(hour, block_timestamp) = hour and token_address = '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs')
	  where block_timestamp > '2024-08-25'
	
	 and instruction_program_id = 'br1xwubggTiEZ6b7iNZUwfA3psygFfaXGfZ1heaN9AW'
	
	 and event_type = 'transfer'
	
	 and succeeded  ) , hyperlane_base as (
	  select
	
	  block_timestamp,
	
	 tx_id,
	
	 case when mint is not null then mint else instruction:parsed:info:mint end as mint,
	
	 case when symbol is not null then symbol else 'Unknown Token' end as symbol,
	
	 instruction:parsed:info:tokenAmount:amount / pow(10, instruction:parsed:info:tokenAmount:decimals) as amount,
	
	 amount * price as amount_usd,
	
	  instruction:parsed:info:account as token_account
	  from eclipse.core.fact_events_inner
	  join tokens on (instruction:parsed:info:mint = mint)
	  join price_cte on (date_trunc(hour, block_timestamp) = hour and symbol = price_symbol)
	  where 1=1
	
	  and instruction_program_id = 'EitxJuv2iBjsg2d7jVy2LDC1e2zBrx4GB5Y9h2Ko3A9Y'
	
	 and event_type = 'mintToChecked'
	
	 and succeeded = True
	
	 and block_timestamp::date >= '2024-09-19'
	  order by block_timestamp desc  ) , canonical_bridges as (
	  select
	
	  block_timestamp::date as date,
	
	 'Canonical' as bridge,
	
	 price_symbol as symbol,
	
	 sum(amount_usd) as volume_usd
	  from canonical_base
	  group by 1, 2, 3
	  --order by date desc ) , hyperlane_bridges as (
	  select
	
	  block_timestamp::date as date,
	
	 'Hyperlane' as bridge,
	
	 symbol,
	
	 sum(amount_usd) as volume_usd
	  from hyperlane_base
	  group by 1, 2, 3
	  --order by date desc ) select * from canonical_bridges union all select * from hyperlane_bridges ORDER BY date DESC, bridge ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 758
QUERY_ID: 93060a77-8c28-4cd5-a4b4-444f7e1f713e
QUERY_TITLE: GMX V2 orderExecuted

QUERY_STRING:

SELECT
	 DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	, DECODED_LOG:"eventData"[0][0][0][1] as ex_account from arbitrum.core.ez_decoded_event_logs WHERE 1=1
	 --AND tx_hash='0x27ee73fce2a19973e009529ac9998194d0332e09094ec6f1de7aa36da7a72c8b'
	--AND tx_hash = '0x023b32f57bd6ae7480042fdc290abefa9b7ffb4355ef999e4de58f5034ceee9d'
	AND block_timestamp>'2024-04-01'
	AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	AND decoded_log:"eventName"='OrderExecuted'
	-- AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	AND event_name='EventLog2' LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 759
QUERY_ID: 034dd411-5799-4039-aa3d-50e3d7f9d57d
QUERY_TITLE: [ALGO] AlgoDex Orders and Status

QUERY_STRING:

with tgroups as (
	SELECT
		DISTINCT tx_group_id
	from algorand.transactions
	WHERE
			(block_timestamp>='2022-02-10' AND block_timestamp<'2022-02-11')
			AND tx_type_name = 'application call'
			AND tx_message:txn:apid IN ('354073834', '354073718' )
	 ), samples as (
	  SELECT
	
			REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '(\\[.*\\])', 1, 1, 'e', 1) as substr_note_l,
		CASE
			WHEN substr_note_l like any ('%partial%', '%full%') THEN 1 ELSE 0 END as trades,
			CASE
			WHEN substr_note_l like '%close%' THEN 'fclose'
			WHEN substr_note_l like '%full%' THEN 'filled'
			ELSE NULL END as status,
			CASE
			WHEN substr_note_l like '%open%' THEN 1 ELSE 0 END as opened,
			CASE
			WHEN substr_note_l like '%asa%' THEN TRUE ELSE FALSE END as is_asa,
		REGEXP_SUBSTR( TRY_BASE64_DECODE_STRING(TX_MESSAGE:txn:note), '.* ":(.*)', 1, 1, 'e', 1) as substr_note_r,
		TRY_PARSE_JSON(SUBSTRING( substr_note_r, 0, LEN(substr_note_r) -1 )) as json_note,
		json_note:escrowAddr as escrow_wallet,
		json_note:escrowOrderType as otype,
			json_note:txnNum as tnum,
			tx_group_id
	  from algorand.transactions
	  WHERE
		tx_group_id in (SELECT * from tgroups) ), dedups as (
	  SELECT	DISTINCT escrow_wallet, tx_group_id, trades, status, opened, otype, is_asa
	  from samples ), combo as (
	SELECT
		SUM(trades) as trades,
		MAX(opened) as opened,
		MAX(status) as status,
		MAX(is_asa) as is_asa,
		MAX(TX_GROUP_ID) as eg_txn,
		escrow_wallet
		from dedups
		GROUP BY escrow_wallet ), refine as (
	SELECT 
		trades, opened, is_asa, escrow_wallet,
		CASE
			WHEN status IS NULL AND trades=0 THEN 'open'
				WHEN status IS NULL AND trades!=0 THEN 'open[partially_filled]'
			WHEN status = 'fclose' AND trades=0 THEN 'closed[no fills]'
			WHEN status = 'fclose' AND trades!=0 THEN 'closed[partially filled]'
			ELSE status END as status
		from combo ) SELECT
		COUNT(escrow_wallet) as totals,
		status from refine WHERE
	opened=1 --CHECK if opened within time range! GROUP BY status



=======================================================================================
=======================================================================================
QUERY_NO: 760
QUERY_ID: 96d02fd1-966f-4751-bbd7-5859d88ae7d9
QUERY_TITLE: base 

QUERY_STRING:

-- forked from base @ https://flipsidecrypto.xyz/studio/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	date_trunc('hour', block_timestamp) as dhour
	  , CASE
	
	  WHEN payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos_game_2::play'
	
	 THEN 'Tapos - Tickling' ELSE 'normal' END as label
	  , COUNT(version) as txns
	  , COUNT(DISTINCT SENDER) as wallets
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp BETWEEN '2024-08-13' AND '2024-08-19'
	  AND tx_type = 'user_transaction'
	  AND SUCCESS = TRUE
	 GROUP BY dhour, label ORDER BY dhour ASC, label ASC
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base  -- SELECT * from aptos.core.fact_transactions -- WHERE 1=1 --
	and block_timestamp >= '2024-08-13' --
	AND payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos_game_2::play' -- LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 761
QUERY_ID: 2f1e1d50-dd5a-4ecb-afca-e2e11222d15a
QUERY_TITLE: Collections - Active Listings

QUERY_STRING:

with listings as (
	SELECT
	
	event_data:listing as offer_id
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN block_timestamp END) as start_time
	  , MAX(CASE WHEN event_resource='ListingFilledEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='ListingCanceledEvent' THEN 1 ELSE 0 END) as closed
	
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5'
	  AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent', 'ListingPlacedEvent')
	  AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	  AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}'
	GROUP BY offer_id, collection_name, token_id, creator ) , updates as (
	SELECT
	
	event_data:listing as offer_id
	  , event_data:new_price/1e8 as new_price
	  , row_number() OVER (PARTITION BY offer_id ORDER BY version DESC) as rank
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5'
	  AND event_resource IN ('ListingEditedEvent')
	  AND event_data:listing in (SELECT offer_id from listings)
	qualify rank=1 ) , listings_bluemove as (
	SELECT
	
	l.offer_id
	  , collection_name
	  , token_id
	  , creator
	  , coalesce(new_price, price) as price
	  , start_time
	  , bought
	  , closed
	  , 'bluemove' as marketplace
	from listings l
	 LEFT JOIN updates u ON l.offer_id = u.offer_id ) , listings_topaz as (
	SELECT
	
	event_data:listing_id as offer_id
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , MIN(CASE WHEN event_resource='ListEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListEvent' THEN TO_TIMESTAMP(event_data:timestamp) END) as start_time
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='DelistEvent' THEN 1 ELSE 0 END) as closed
	  , 'topaz' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ('ListEvent', 'BuyEvent', 'DelistEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	GROUP BY offer_id, collection_name, token_id, creator ) , base_wapal as (
	--wapal doesn't have updates/cancel events on editing,
	 --it just creates a new ListingPlacedEvent for the same offerid with updates
	--so dedup listings and take latest entry for the same offer_id
	--then combine with the other events
	SELECT
	
	*
	  , row_number() OVER (partition by event_data:listing ORDER BY version DESC) as rank
	from aptos.core.fact_events
	WHERE 1=1
	
	 AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	
	 AND event_resource IN ('ListingPlacedEvent')
	
	 AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	
	 AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}'
	
	
	 qualify rank=1
	
	UNION ALL
	
	 SELECT
	
	*
	  , '__' as rank
	from aptos.core.fact_events
	WHERE 1=1
	
	 AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	
	 AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent')
	
	 AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	
	 AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}' ) , listings_wapal as (
	--group together the latest events for an offer
	SELECT
	
	event_data:listing as offer_id
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN event_data:price/1e8 END) as price
	  , MIN(CASE WHEN event_resource='ListingPlacedEvent' THEN block_timestamp END) as start_time
	  , MAX(CASE WHEN event_resource='ListingFilledEvent' THEN 1 ELSE 0 END) as bought
	  , MAX(CASE WHEN event_resource='ListingCanceledEvent' THEN 1 ELSE 0 END) as closed
	  , 'wapal' as marketplace
	from base_wapal
	where 1=1
	  AND event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9'
	  AND event_resource IN ('ListingFilledEvent', 'ListingCanceledEvent', 'ListingPlacedEvent')
	  --AND event_data:listing in ('0xe8a25560e3259a711281b2ec7d31ce6dffe8b4ae72bbc8de3cfb76938f4647c2')
	GROUP BY offer_id, collection_name, token_id, creator ) , all_listings as (
	SELECT * from listings_bluemove
	UNION ALL
	 SELECT * from listings_topaz
	UNION ALL
	 SELECT * from listings_wapal ) SELECT
	round(PRICE, 2) as PRICE, token_id, marketplace from all_listings where bought+closed = 0
	--AND start_time>current_date - INTERVAL '15 day' ORDER BY PRICE ASC



=======================================================================================
=======================================================================================
QUERY_NO: 762
QUERY_ID: fd45b915-a796-463e-bbdc-80efe32520ca
QUERY_TITLE: ETH Stake - Fact Validators Daily

QUERY_STRING:

-- forked from ETH Stake - tests on fact_validators copy @ https://flipsidecrypto.xyz/studio/queries/8135332f-4edd-40e5-afe3-c72dd7f473f8 -- forked from ETH Stake - tests on fact_validators @ https://flipsidecrypto.xyz/studio/queries/62bf07c9-2b1e-4bd2-a3ff-bf9716c1dfc4 with active_validators as (
	SELECT
	
	slot_timestamp::date as ddate
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') THEN pubkey END)) as validators
	  , validators * 32 as eth_staked
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('pending_queued') THEN pubkey END)) as validators_pending
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_exiting') THEN pubkey END)) as validators_exiting
	from ethereum.beacon_chain.fact_validators v
	LEFT JOIN ethereum.beacon_chain.fact_blocks b ON v.slot_number = b.slot_number
	WHERE 1=1
	  --AND validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') -- 'exited_unslashed', 'exited_slashed')
	GROUP BY ddate
	--AND max_active>min_exit  --sanity test: so far has never happened  -> validator once exited has never restarted/became active again ) SELECT
	* from active_validators  ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 763
QUERY_ID: 6e5204ae-b740-42e5-942a-7f6a6b26572d
QUERY_TITLE: concrete-gold

QUERY_STRING:

select
	live.udf_api(
	
	 'POST',
	
	 'https://api.mainnet-beta.solana.com',
	
	 { },
	
	 utils.udf_json_rpc_call(
	
	
	  'getAccountInfo'
	
	
	, ['EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm'
	
	
	  , {'encoding': 'base64'}
	
	
	  ]
	
	
	)
	  )



=======================================================================================
=======================================================================================
QUERY_NO: 764
QUERY_ID: a6ce8102-6f66-4629-9a73-dbe0f3af0e73
QUERY_TITLE: sei top perp pairs

QUERY_STRING:

-- forked from sei base dailies @ https://flipsidecrypto.xyz/studio/queries/98a86d5e-6822-4a2d-8f35-cbe7b50b9c67 -- forked from sei base @ https://flipsidecrypto.xyz/studio/queries/42151db0-dc24-449d-ab7a-fb2ab0414732 with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	--https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	--Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e') --Offchain EXchange Contract
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	expiration_raw,
	
	
	exp_binary,
	
	
	order_type AS order_type_raw,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	  FROM
	
	
	order_fill_format ) , refine as (
	SELECT
	
	*
	  , row_number() OVER (ORDER BY volume DESC) as rank
	FROM (
	  SELECT
	
	
	symbol
	
	 , SUM(amount_usd) as volume
	  FROM FINAL
	
	WHERE 1=1 and is_taker=TRUE
	
	GROUP BY symbol
	  ORDER BY volume DESC
	 ) ) SELECT
	 CASE WHEN rank<5 THEN symbol ELSE 'Others' END as label
	, SUM(volume) as volume from refine GROUP BY label ORDER BY VOLUME DESC



=======================================================================================
=======================================================================================
QUERY_NO: 765
QUERY_ID: 5f6ba114-c408-4807-aedf-012c47cfe15c
QUERY_TITLE: dummy query #1 

QUERY_STRING:

SELECT * from ethereum.core.fact_transactions LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 766
QUERY_ID: 57322eca-96a1-4576-8708-2e823cb6814c
QUERY_TITLE: dummy query #2 copy

QUERY_STRING:

-- forked from dummy query #2 @ https://flipsidecrypto.xyz/studio/queries/bc79cbcc-1990-474a-9878-b4767f21055c -- forked from dummy query #1  @ https://flipsidecrypto.xyz/studio/queries/5f6ba114-c408-4807-aedf-012c47cfe15c select * from  $query('630c7f94-6d97-4367-957d-58163699c8d2')



=======================================================================================
=======================================================================================
QUERY_NO: 767
QUERY_ID: 8506f1b1-3b7c-4223-a0e1-fe32a3ef978d
QUERY_TITLE: CreateLockEvent Analysis [Done] copy

QUERY_STRING:

-- forked from optimus_prime / CreateLockEvent Analysis [Done] @ https://flipsidecrypto.xyz/optimus_prime/q/XiRt2-EcdO-P/createlockevent-analysis-done WITH lock_data AS (
	  SELECT
	
	
	DATE_TRUNC('month', block_timestamp) AS month,
	
	
	event_data:amount::NUMERIC / 1e8 AS locked_amount,
	
	
	event_data:lockup_end_epoch::NUMERIC - date_part(epoch_seconds, block_timestamp) AS lockup_duration_seconds,
	
	
	event_data:owner AS locker_address,
	
	
	tx_hash
	  FROM aptos.core.fact_events
	  WHERE event_resource = 'CreateLockEvent'
	  AND event_address = '0x4bf51972879e3b95c4781a5cdcb9e1ee24ef483e7d22f2d903626f126df62bd1' ) SELECT
	  SUM(locked_amount) AS total_locked_amount,
	  COUNT(DISTINCT tx_hash) AS lock_count,
	  AVG(lockup_duration_seconds) / (7 * 24 * 60 * 60) AS avg_lock_duration_weeks FROM lock_data;



=======================================================================================
=======================================================================================
QUERY_NO: 768
QUERY_ID: c4665219-6a9e-4120-b089-a4619318161c
QUERY_TITLE: original-purple

QUERY_STRING:

SELECT * from arbitrum.vertex.ez_perp_trades  LIMIT 10000



=======================================================================================
=======================================================================================
QUERY_NO: 769
QUERY_ID: 2141d3e5-e725-4281-a04d-31a166476085
QUERY_TITLE: Market share  copy

QUERY_STRING:

-- forked from Afonso_Diaz / Market share  @ https://flipsidecrypto.xyz/Afonso_Diaz/q/AZ5Uf1NcRAPQ/market-share with pricet as (
	select
	hour::date as date,
	symbol,
	avg(price) as price_usd
	from near.price.ez_prices_hourly
	group by 1, 2 union
	select
	hour::date as date,
	'ETH',
	avg(price) as price_usd
	from ethereum.price.ez_prices_hourly
	where token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
	group by 1, 2 union
	select
	hour::date as date,
	'WBTC',
	avg(price) as price_usd
	from ethereum.price.ez_prices_hourly
	where token_address = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'
	group by 1, 2 ) -- , -- t as ( select --
	tx_hash, --
	block_timestamp, --
	actions as action, --
	case --
	when a.symbol = 'USDC' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDC.e' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDt' then amount_raw / pow(10, 18) --
	when a.symbol = 'WBTC' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDT.e' then amount_raw / pow(10, 18) --
	else amount end as amount_adjusted, --
	case --
	when a.symbol = 'USDC' then amount_adjusted --
	when a.symbol = 'USDC.e' then amount_adjusted --
	when a.symbol = 'USDt' then amount_adjusted --
	when a.symbol = 'USDT.e' then amount_adjusted --
	when a.symbol = 'DAI' then amount_adjusted --
	when a.symbol = 'STNEAR' then amount_usd --
	when a.symbol = 'wNEAR' then amount_usd --
	when a.symbol = 'LINEAR' then amount_usd --
	when a.symbol = 'FRAX' then amount_adjusted --
	when a.symbol = 'DAI' then amount_adjusted --
	else b.price_usd * amount_adjusted end as amount_usd, --
	a.symbol, --
	sender_id as user --  from near.defi.ez_lending a --  left join pricet b on a.block_timestamp::date = b.date and a.symbol = b.symbol -- where platform = 'burrow' -- and actions in ('increase_collateral', 'decrease_collateral', 'repay', 'borrow') -- union all -- select --
	tx_hash, --
	block_timestamp, --
	iff(actions = 'deposit', 'deposit', 'withdraw') as action, --
	case --
	when a.symbol = 'USDC' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDC.e' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDt' then amount_raw / pow(10, 18) --
	when a.symbol = 'WBTC' then amount_raw / pow(10, 18) --
	when a.symbol = 'USDT.e' then amount_raw / pow(10, 18) --
	else amount end as amount_adjusted, --
	case --
	when a.symbol = 'USDC' then amount_adjusted --
	when a.symbol = 'USDC.e' then amount_adjusted --
	when a.symbol = 'USDt' then amount_adjusted --
	when a.symbol = 'USDT.e' then amount_adjusted --
	when a.symbol = 'DAI' then amount_adjusted --
	when a.symbol = 'STNEAR' then amount_usd --
	when a.symbol = 'wNEAR' then amount_usd --
	when a.symbol = 'LINEAR' then amount_usd --
	when a.symbol = 'FRAX' then amount_adjusted --
	when a.symbol = 'DAI' then amount_adjusted --
	else b.price_usd * amount_adjusted end as amount_usd, --
	a.symbol, --
	sender_id as user --  from near.defi.ez_lending a --  left join pricet b on a.block_timestamp::date = b.date and a.symbol = b.symbol -- where platform = 'burrow' -- and actions in ('deposit', 'withdraw_succeeded') -- and tx_hash in (select tx_hash from near.defi.ez_lending group by 1 having count(*) = 1) -- ), -- boosted_pools as ( --
	select --
	  'Boosted Pools (FRAX, USDC, USDT)' as pool_type, --
	  count(distinct tx_hash) as transactions, --
	  count(distinct user) as users, --
	  sum(amount_usd) as volume_usd, --
	  avg(amount_usd) as average_amount_usd --
	from t --
	where --
	  symbol in ('USDt', 'USDC', 'FRAX') --
	  and block_timestamp::date >= current_date - 30 -- ), -- other_pools as ( --
	select --
	  'Other Burrow Pools' as pool_type, --
	  count(distinct tx_hash) as transactions, --
	  count(distinct user) as users, --
	  sum(amount_usd) as volume_usd, --
	  avg(amount_usd) as average_amount_usd --
	from t --
	where --
	  symbol not in ('USDt', 'USDC', 'FRAX') --
	  and block_timestamp::date >= current_date - 30 -- ) -- select  --
	pool_type, --
	transactions, --
	users, --
	volume_usd, --
	average_amount_usd -- from ( --
	select * from other_pools --
	union all --
	select * from boosted_pools -- ) -- order by pool_type  SELECT * from pricet WHERE 1=1 and (symbol ilike 'eth' OR symbol ilike 'btc' OR symbol ilike 'wbtc' ) ORDER BY date desc, symbol DESC



=======================================================================================
=======================================================================================
QUERY_NO: 770
QUERY_ID: e483f26c-451c-455a-b9e7-eb963e100849
QUERY_TITLE: EZ Tables - Topaz and BLueMove Daily

QUERY_STRING:

-- forked from EZ Tables - Topaz Single Day @ https://flipsidecrypto.xyz/edit/queries/61366423-fd6f-4213-9660-703baba1e8f8 -- forked from NFTs Overview - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/203f56ad-9528-4790-a0f5-de956273ea43 -- forked from NFTs Overview - Summaries @ https://flipsidecrypto.xyz/edit/queries/de09d687-4bf4-438e-a9af-666b34105c77 -- forked from NFTs Overview @ https://flipsidecrypto.xyz/edit/queries/b5f1a806-1264-46a5-be65-bd112d6aee94 with stats as (
	SELECT
	
	COUNT(*) as sales
	  , COUNT(DISTINCT buyer_address) as buyers
	  , COUNT(DISTINCT seller_address) as sellers
	  , SUM(total_price_usd) as volume_usd
	  , PLATFORM_NAME as marketplace
	  , block_timestamp::date as ddate
	from aptos.nft.ez_nft_sales
	WHERE 1=1
	  AND PLATFORM_NAME IN ('Topaz', 'BlueMove')
	GROUP BY ddate, marketplace  ) SELECT * from stats ORDER BY ddate ASC, marketplace ASC



=======================================================================================
=======================================================================================
QUERY_NO: 771
QUERY_ID: de09d687-4bf4-438e-a9af-666b34105c77
QUERY_TITLE: NFTs Overview - Summaries

QUERY_STRING:

-- forked from NFTs Overview @ https://flipsidecrypto.xyz/edit/queries/b5f1a806-1264-46a5-be65-bd112d6aee94 with vol_sums as (
	SELECT
	
	SUM(total_price_usd) as volume_usd
	  , SUM(CREATOR_FEE_USD) as fee_creator_usd
	from aptos.nft.ez_nft_sales
	WHERE 1=1 ) , users as (
	with base as (
	  SELECT
	
	  DISTINCT buyer_address as user
	  from aptos.nft.ez_nft_sales
	  WHERE 1=1
	  UNION
	
	SELECT
	
	
	DISTINCT seller_address as user
	  from aptos.nft.ez_nft_sales
	  WHERE 1=1
	  UNION
	
	SELECT
	
	
	DISTINCT NFT_TO_ADDRESS as user
	  from aptos.nft.ez_nft_mints
	  WHERE 1=1
	)
	SELECT
	
	COUNT(DISTINCT user) as users
	from base ) SELECT
	 * from vol_sums v  LEFT JOIN users on 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 772
QUERY_ID: fb678043-28f6-4f61-9915-e2dc7492c699
QUERY_TITLE: VRTX Staking Burns test samples copy

QUERY_STRING:

-- forked from VRTX Staking Burns test samples @ https://flipsidecrypto.xyz/studio/queries/22fb75f0-1509-47e1-984f-d8f9a36e50fb -- forked from VRTX Staking Burns test @ https://flipsidecrypto.xyz/studio/queries/ed9d6fe1-714a-4b76-87e6-96c3d2f44cf5 -- forked from VRTX Staking Totals FINAL @ https://flipsidecrypto.xyz/studio/queries/d21a2b3a-091e-4a6d-b141-d9406615b208 -- forked from VRTX Staking Totals (updated contracts) @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	-- sig with 2 logs (1 transfer, 1 unknown log): 0x3ccfd60b
	-- sig with 1 simple transfer: 0x0e8584aa
	SELECT
	  *
	  , (amount*10)/9 as total_amount
	  , total_amount - amount as burnt_amount
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND stake_action NOT in ('migrate-stake', 'stake')
	  AND symbol = 'VRTX'
	  AND ORIGIN_FUNCTION_SIGNATURE = '0x3ccfd60b'
	  --AND block_timestamp>='2024-12-01'
	  AND block_timestamp::date = '2025-01-11'
	  AND from_address!='0x5be754ad77766089c4284d914f0cc37e8e3f669a' ) SELECT
	 block_timestamp::date as ddate
	, SUM(burnt_amount) as burnt_totals from base group by 1 order by 1 ASC
	-- SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 773
QUERY_ID: 7414c3f0-4690-40e0-9852-89d1f82b27bf
QUERY_TITLE: mixed-aqua

QUERY_STRING:

SELECT * from ethereum.core.fact_traces LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 774
QUERY_ID: ae710181-4ef3-4fac-8354-f07dd7376b01
QUERY_TITLE: all time stake

QUERY_STRING:

with stats as (
	  SELECT
	
	  SUM(deposit_amount) as eth_staked --always 32E
	  from ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	
	
	 UNION ALL
	
	
	  SELECT
	
	  SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END
	
	 ) as eth_staked
	  from ethereum.beacon_chain.ez_withdrawals
	  WHERE 1=1
	)
	SELECT
	
	SUM(eth_staked) as total_eth
	  , ROUND(total_eth/32,0) as validators
	from stats



=======================================================================================
=======================================================================================
QUERY_NO: 775
QUERY_ID: e74e1bc0-56d2-4d24-8d62-18b5215e51cb
QUERY_TITLE: rune cex labels check

QUERY_STRING:

select
	 address_name
	, label_subtype
	, MAX(address_name) as name
	, COUNT(*) as totals  from thorchain.core.dim_labels where label_type = 'cex' and label='binance' GROUP by 1,2



=======================================================================================
=======================================================================================
QUERY_NO: 776
QUERY_ID: 693e569b-515b-41ff-9371-5347ed67c4ee
QUERY_TITLE: VRTX claims

QUERY_STRING:

with claim_txns as (
	SELECT
	
	*
	from arbitrum.core.fact_transactions
	WHERE 1=1
	  AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	  --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f') ) ,  claims as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from claim_txns)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) SELECT
	 block_timestamp::date as ddate
	, label
	 , COUNT(DISTINCT claimer ) as claimers
	, SUM(token_amount) as tokens
	, SUM(amount_usd) as usd_val from claims GROUP BY ddate, label -- SELECT * from claims



=======================================================================================
=======================================================================================
QUERY_NO: 777
QUERY_ID: ac87dbb5-8d6a-4bac-98e1-3e16591da88f
QUERY_TITLE: Copy of [Optimism][Q10] Velodrome Daily Net LP Flows

QUERY_STRING:

with base as (
	SELECT
		block_timestamp::date as ddate,
		LP_TOKEN_ACTION as act,
		count(DISTINCT tx_hash) as total_txns,
		SUM(CASE WHEN act='mint' THEN LP_TOKEN_AMOUNT_USD ELSE (-1)*LP_TOKEN_AMOUNT_USD END) as usd_amt
	from optimism.velodrome.ez_lp_actions
	GROUP BY ddate, act ) SELECT 
	ddate,
	SUM(usd_amt) as net_usd from base group by ddate



=======================================================================================
=======================================================================================
QUERY_NO: 778
QUERY_ID: aea73ae2-8e60-4b6c-8e3c-ff9140164205
QUERY_TITLE: [ALGO][Q77] RAND DIstribution

QUERY_STRING:

with groups as (
	SELECT
	 
	DISTINCT tx_group_id
	from algorand.payment_transaction
		WHERE receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'
		AND tx_group_id is not null ), all_purchases  as (
	SELECT
		sender as buyer,
	
	coalesce(amount,0) as amount,
		date_trunc('day',block_timestamp) as ddate,
		tx_group_id,
		row_number() OVER (PARTITION BY tx_group_id ORDER BY amount DESC) as rank
	from flipside_prod_db.algorand.payment_transaction
	WHERE
		tx_group_id IN (SELECT * from groups)
	QUALIFY rank=1 ), pre_final as (
	SELECT
	
	COUNT(DISTINCT tx_group_id) as total_buys,
		buyer
	from all_purchases
	
	GROUP BY buyer ) SELECT
	COUNT(DISTINCT buyer) as wallets,
	CASE
	
		WHEN total_buys=1 THEN '1'
		WHEN total_buys>1 AND total_buys<=5 THEN '2-5'
		WHEN total_buys>5 AND total_buys<=10 THEN '6-10'
		WHEN total_buys>10 AND total_buys<=20 THEN '11-20'
		WHEN total_buys>20 AND total_buys<=50 THEN '21-50'
		WHEN total_buys>50 AND total_buys<=100 THEN '51-100'
		ELSE '100+' END as CAT from pre_final GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 779
QUERY_ID: d1fd346f-6783-406d-ad84-496cf40a1091
QUERY_TITLE: Daily Traffic: Users vs Claimers 

QUERY_STRING:

-- forked from Users vs Claimers @ https://flipsidecrypto.xyz/studio/queries/35e5b612-6121-49cc-ada6-f38d36478611 with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , all_claims as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) , claimers as (
	SELECT
	
	claimer as user
	  , SUM(amount_usd) as total_claim_val
	from all_claims
	GROUP BY user ) , activity as (
	  SELECT
	
	
	
	
	block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	  'perp' AS label
	  FROM arbitrum.vertex.ez_perp_trades
	  --WHERE block_timestamp>='2023-11-08'
	  UNION ALL
	  SELECT
	
	
	
	  block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	 'spot' AS label
	  FROM arbitrum.vertex.ez_spot_trades
	  --WHERE block_timestamp>='2023-11-08' ) , vertex_users as (
	SELECT
	
	trader as user
	  , min(block_timestamp) as min_date
	 from activity
	GROUP BY user ) , groups as (
	SELECT
	
	v.user
	
	, CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	  , total_claim_val as value
	 from vertex_users v
	 LEFT JOIN claimers c on v.user=c.user ) -- SELECT * from groups SELECT
	 block_timestamp::date as ddate
	, g.label
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT DIGEST) as orders
	, SUM(CASE WHEN is_taker=true THEN amount_usd ELSE 0 END) as volume_usd from activity a  LEFT JOIN groups g ON a.trader = g.user WHERE block_timestamp>='2023-11-08' GROUP BY 1, 2



=======================================================================================
=======================================================================================
QUERY_NO: 780
QUERY_ID: 164ece5b-50d0-4186-b27d-2866887d8a47
QUERY_TITLE: summary stats test (no edge)

QUERY_STRING:

----SEI Orderfill events----- with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	
	
	NULL as EZ_PERP_TRADES_ID,
	
	
	NULL as INSERTED_TIMESTAMP,
	
	
	NULL as MODIFIED_TIMESTAMP
	  FROM
	
	
	order_fill_format ) ------ END OF SEI ORDERFILLS------------------ , base_perp_trades as (
	with base_products as (
	  with base as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from base, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	base_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	base_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  base_logs l
	),
	base_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	 base_order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 base_order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- , merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from FINAL
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	block_timestamp::date as ddate
	, label
	, COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees from merge GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC  -- SELECT * from merge WHERE label = 'arbitrum' -- LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 781
QUERY_ID: d21a2b3a-091e-4a6d-b141-d9406615b208
QUERY_TITLE: VRTX Staking Totals FINAL

QUERY_STRING:

-- forked from VRTX Staking Totals (updated contracts) @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action as label
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND stake_action!='migrate-stake'
	
	 AND symbol = 'VRTX'
	  GROUP BY ddate, label
	
	  -- UNION ALL
	
	-- --NEW Contract
	  -- SELECT
	
	--
	block_timestamp::date as ddate
	  --
	, CASE WHEN TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4') THEN 'stake' ELSE 'withdraw/claim' END as label
	  --
	, SUM( CASE WHEN label='stake' THEN AMOUNT_USD ELSE AMOUNT_USD * (-1) END) as amount_usd
	  --
	, SUM( CASE WHEN label='stake' THEN AMOUNT ELSE AMOUNT* (-1) END) as amount_token
	  -- from arbitrum.core.ez_token_transfers
	  -- WHERE 1=1
	  --
	AND (
	  --
	  TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	--
	  OR FROM_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	  --
	)
	  --
	--AND (from_address != lower('0x5Be754aD77766089c4284d914F0cC37E8E3F669A')) --auto migration crap?/previous stake contract
	  --
	AND contract_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	  -- GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 SUM(amount_token) as total_stake from base



=======================================================================================
=======================================================================================
QUERY_NO: 782
QUERY_ID: 38f4e527-d13d-401b-a707-e6f240f8cdf8
QUERY_TITLE: VRTX Staking Totals (updated contracts)

QUERY_STRING:

-- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action as label
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND to_address!=lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	 AND symbol = 'VRTX'
	  GROUP BY ddate, label
	
	  UNION ALL
	
	--NEW Contract
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , CASE WHEN TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4') THEN 'stake' ELSE 'withdraw/claim' END as label
	
	 , SUM( CASE WHEN label='stake' THEN AMOUNT_USD ELSE AMOUNT_USD * (-1) END) as amount_usd
	
	 , SUM( CASE WHEN label='stake' THEN AMOUNT ELSE AMOUNT* (-1) END) as amount_token
	  from arbitrum.core.ez_token_transfers
	  WHERE 1=1
	
	 AND (
	
	
	TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	
	 OR FROM_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	 )
	
	 AND (from_address != lower('0x5Be754aD77766089c4284d914F0cC37E8E3F669A')) --auto migration crap?/previous stake contract
	
	 AND contract_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	  GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 SUM(amount_token) as total_stake from base



=======================================================================================
=======================================================================================
QUERY_NO: 783
QUERY_ID: afd1ef7e-682a-461f-b599-47fbaf1582a5
QUERY_TITLE: [NEAR][T2] Gov Actions

QUERY_STRING:

with base as (
	SELECT COUNT(BLOCK_ID) as totals,
	BLOCK_AUTHOR
	from near.core.fact_blocks
	GROUP BY BLOCK_AUTHOR ) SELECT * from base ORDER BY totals DESC



=======================================================================================
=======================================================================================
QUERY_NO: 784
QUERY_ID: e393a526-1b82-475e-9ed6-a5d8018da8db
QUERY_TITLE: contracts_created_daily_through_yesterday copy

QUERY_STRING:

-- forked from charliemarketplace / contracts_created_daily_through_yesterday @ https://flipsidecrypto.xyz/charliemarketplace/q/xYmfghKyBrT-/contracts_created_daily_through_yesterday /* Contracts Part 1 */ -- 2010 to 2020-11-30 with historic1 AS ( select
	
	  livequery.live.udf_api ( 'https://flipsidecrypto.xyz/api/v1/queries/eb5d093b-58d2-46d3-b036-6f96a3a6db5f/data/latest'
	
	 ):data  as json_data ), contracts1 AS (  SELECT
	
	
	d.value:"CHAIN"::VARCHAR AS chain,
	
	
	d.value:"DAY_"::date AS day_,
	
	
	TO_NUMBER(d.value:"N_CONTRACTS") AS N_CONTRACTS
	  FROM
	
	
	historic1,
	
	
	LATERAL FLATTEN(input => historic1.json_data::VARIANT) d ), /* Contracts Part 2 */ -- 2020-12-01 to 2021-05-30 historic2 AS ( select
	
	  livequery.live.udf_api ( 'https://flipsidecrypto.xyz/api/v1/queries/461bd76b-7f89-408e-919f-c86e7ee3c98b/data/latest'
	
	 ):data  as json_data ), contracts2 AS (  SELECT
	
	
	d.value:"CHAIN"::VARCHAR AS chain,
	
	
	d.value:"DAY_"::date AS day_,
	
	
	TO_NUMBER(d.value:"N_CONTRACTS") AS N_CONTRACTS
	  FROM
	
	
	historic2,
	
	
	LATERAL FLATTEN(input => historic2.json_data::VARIANT) d ), /* Contracts Part 3 */ -- 2021-06-01 to 2021-11-31 historic3 AS ( select
	
	  livequery.live.udf_api ( 'https://flipsidecrypto.xyz/api/v1/queries/48358eb8-c169-43d0-9742-9ba2a076edae/data/latest'
	
	 ):data  as json_data ), contracts3 AS (  SELECT
	
	
	d.value:"CHAIN"::VARCHAR AS chain,
	
	
	d.value:"DAY_"::date AS day_,
	
	
	TO_NUMBER(d.value:"N_CONTRACTS") AS N_CONTRACTS
	  FROM
	
	
	historic3,
	
	
	LATERAL FLATTEN(input => historic3.json_data::VARIANT) d ), /* Contracts Part 4 */ -- 2022-01-01 to 2022-12-31 historic4 AS ( select
	
	  livequery.live.udf_api ( 'https://flipsidecrypto.xyz/api/v1/queries/d4736f1a-7d1e-4380-92d2-c6de59e6ee5a/data/latest'
	
	 ):data  as json_data ), contracts4 AS (  SELECT
	
	
	d.value:"CHAIN"::VARCHAR AS chain,
	
	
	d.value:"DAY_"::date AS day_,
	
	
	TO_NUMBER(d.value:"N_CONTRACTS") AS N_CONTRACTS
	  FROM
	
	
	historic4,
	
	
	LATERAL FLATTEN(input => historic4.json_data::VARIANT) d ), /* Contracts Part 5 */ -- 2023-01-01 to 2023-11-30 historic5 AS ( select
	
	  livequery.live.udf_api ( 'https://flipsidecrypto.xyz/api/v1/queries/9e1079f4-8c3a-425f-8d53-1362943ff2ea/data/latest'
	
	 ):data  as json_data ), contracts5 AS (  SELECT
	
	
	d.value:"CHAIN"::VARCHAR AS chain,
	
	
	d.value:"DAY_"::date AS day_,
	
	
	TO_NUMBER(d.value:"N_CONTRACTS") AS N_CONTRACTS
	  FROM
	
	
	historic5,
	
	
	LATERAL FLATTEN(input => historic5.json_data::VARIANT) d ), /* BELOW is Data AFTER 2023-11-30 */
	/* Daily # Contracts launched AFTER 2023-11-30 */ /* Refreshes once per 24 hours, up to [yesterday] to let day finish */ eth_contracts AS ( select  'ethereum' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts from ethereum.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), arb_contracts AS ( select  'arbitrum' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from arbitrum.core.fact_traces where block_timestamp >= '2023-12-01'
	  and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), avax_contracts AS ( select  'avalanche' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from avalanche.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), op_contracts AS ( select  'optimism' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from optimism.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), bsc_contracts AS ( select  'bsc' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from bsc.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), base_contracts AS ( select  'base' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from base.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ), polygon_contracts AS ( select  'polygon' as chain, date_trunc('day', block_timestamp) as day_, count(*) as n_contracts
	from polygon.core.fact_traces where block_timestamp >= '2023-12-01'
	 and block_timestamp < current_date AND TYPE IN ('CREATE', 'CREATE2') AND OUTPUT IS NOT NULL AND TX_STATUS = 'SUCCESS' AND TRACE_STATUS = 'SUCCESS' group by day_ ) select * from eth_contracts
	UNION ALL select * from arb_contracts
	UNION ALL  select * from bsc_contracts
	UNION ALL  select * from op_contracts
	UNION ALL  select * from polygon_contracts
	UNION ALL  select * from base_contracts
	UNION ALL  select * from avax_contracts
	UNION ALL  select * from contracts1  UNION ALL select * from contracts2  UNION ALL select * from contracts3  UNION ALL select * from contracts4  UNION ALL select * from contracts5



=======================================================================================
=======================================================================================
QUERY_NO: 785
QUERY_ID: b426404c-b595-451c-bfd5-373dbb151add
QUERY_TITLE: [POOLY][Q2] Base Stats Types

QUERY_STRING:

with base as (
	SELECT 
	*,
		CASE	WHEN NFT_ADDRESS = lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523') THEN 'Pooly Judge'
				WHEN NFT_ADDRESS = lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9') THEN 'Pooly Lawyer'
				ELSE 'Pooly Supporter' END as types
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS IN
	
	(lower('0x5663e3e096f1743e77b8f71b5de0cf9dfd058523'),
		 lower('0x3545192b340F50d77403DC0A64cf2b32F03d00A9'),
		 lower('0x90B3832e2F2aDe2FE382a911805B6933C056D6ed')) )				 SELECT
	COUNT(*) as total_mints,
		COUNT(DISTINCT NFT_TO_ADDRESS) as unique_minters,
		SUM(MINT_PRICE_ETH) as total_eth_raised,
	types from base GROUP BY types



=======================================================================================
=======================================================================================
QUERY_NO: 786
QUERY_ID: d4525db2-8aaa-4d9e-9355-bcdb8bbcbad8
QUERY_TITLE: User Retention (Trade Activity

QUERY_STRING:

 Claimers),-- forked from Users vs Claimers @ https://flipsidecrypto.xyz/studio/queries/35e5b612-6121-49cc-ada6-f38d36478611 with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , all_claims as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) , claimers as (
	SELECT
	
	claimer as user
	  , SUM(amount_usd) as total_claim_val
	from all_claims
	GROUP BY user ) , activity as (
	  SELECT
	
	
	
	
	block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	  'perp' AS label
	  FROM arbitrum.vertex.ez_perp_trades
	  WHERE block_timestamp>='2023-11-08' AND block_timestamp<=DATEADD('day', -1, date_trunc('month', CURRENT_DATE))
	  UNION ALL
	  SELECT
	
	
	
	  block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	 'spot' AS label
	  FROM arbitrum.vertex.ez_spot_trades
	  WHERE block_timestamp>='2023-11-08' AND block_timestamp<=DATEADD('day', -1, date_trunc('month', CURRENT_DATE)) ) , vertex_users as (
	SELECT
	
	trader as user
	  , min(block_timestamp) as min_date
	 from activity
	GROUP BY user ) , base as (
	SELECT
	
	trader
	  --, CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by trader) as min_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by trader) -- min_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from activity a
	WHERE 1=1 AND trader IN (SELECT user from claimers) ) ,  count_new_users as(
	select
	
	min_date
	  , count(distinct trader) as new_users
	 from base
	group by 1 ) , count_returning_users as(
	select
	
	min_date
	  , difference
	  , count(distinct trader) as existing_users
	 from base
	where difference != 0
	  group by 1,2 ) ,  long_retention_table as(
	select
	
	count_new_users.min_date as cohort
	  , difference
	  , new_users
	  , existing_users
	  , round(existing_users / new_users,2) as retention_pct
	from count_new_users
	left join count_returning_users
	
	
	on count_new_users.min_date = count_returning_users.min_date
	WHERE 1=1 AND difference IS NOT NULL  ) , filter as (
	SELECT
	
	MONTH(cohort) || '-' || YEAR(cohort) as batch
	  , difference as months_since
	  , retention_pct*100 as retention_pct
	  , new_users
	  , existing_users
	from long_retention_table ) SELECT * from filter -- SELECT  --
	*  -- from filter -- PIVOT(MAX(retention_pct) FOR difference IN (1,2,3,4,5,6,7,8,9))



=======================================================================================
=======================================================================================
QUERY_NO: 787
QUERY_ID: 35e5b612-6121-49cc-ada6-f38d36478611
QUERY_TITLE: Users vs Claimers

QUERY_STRING:

with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , all_claims as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) , claimers as (
	SELECT
	
	claimer as user
	  , SUM(amount_usd) as total_claim_val
	from all_claims
	GROUP BY user ) , activity as (
	  SELECT
	
	
	
	
	block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	  'perp' AS label
	  FROM arbitrum.vertex.ez_perp_trades
	  --WHERE block_timestamp>='2023-11-08'
	  UNION ALL
	  SELECT
	
	
	
	  block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	 'spot' AS label
	  FROM arbitrum.vertex.ez_spot_trades
	  --WHERE block_timestamp>='2023-11-08' ) , vertex_users as (
	SELECT
	
	trader as user
	  , min(block_timestamp) as min_date
	 from activity
	GROUP BY user ) SELECT
	 CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	, COUNT(DISTINCT v.user) as users from vertex_users v  LEFT JOIN claimers c on v.user=c.user GROUP BY label



=======================================================================================
=======================================================================================
QUERY_NO: 788
QUERY_ID: bf86b84d-a1e5-4958-84d1-242222d552bc
QUERY_TITLE: market depth - price ranges

QUERY_STRING:

-- forked from market depth test @ https://flipsidecrypto.xyz/studio/queries/5cf20905-8c76-4272-aa41-d99414b6ebcc with base as (
	SELECT
	
	hour
	  , orderbook_side as side
	  , price
	  , volume
	  , price*volume as liquidity
	  , SUM(liquidity) OVER (PARTITION BY hour ORDER BY price DESC) as cum_liquidity
	  , row_number() OVER (PARTITION BY hour ORDER BY price DESC)*-1 as levels
	  , FIRST_VALUE(price) OVER (PARTITION BY hour ORDER BY price DESC) as side_start
	  , (ROUND(((price-side_start)/side_start)*100, 4)) as price_delta
	from arbitrum.vertex.ez_market_depth_stats
	WHERE 1=1
	  AND HOUR = '2024-10-31 16:00:00.000'
	  AND orderbook_side = 'bids'
	  AND ticker_id = 'BTC-PERP_USDC'
	
	UNION ALL
	
	 SELECT
	
	hour
	  , orderbook_side as side
	  , price
	  , volume
	  , price*volume as liquidity
	  , SUM(liquidity) OVER (PARTITION BY hour ORDER BY price ASC) as cum_liquidity
	  , row_number() OVER (PARTITION BY hour ORDER BY price ASC) as levels
	  , FIRST_VALUE(price) OVER (PARTITION BY hour ORDER BY price ASC) as side_start
	  , (ROUND(((price-side_start)/side_start)*100, 4)) as price_delta
	from arbitrum.vertex.ez_market_depth_stats
	WHERE 1=1
	  AND HOUR = '2024-10-31 16:00:00.000'
	  AND orderbook_side = 'asks'
	  AND ticker_id = 'BTC-PERP_USDC'
	
	ORDER BY levels ASC  ) SELECT * from base where (price_delta BETWEEN 0 and 2 OR  price_delta BETWEEN -2 and 0)



=======================================================================================
=======================================================================================
QUERY_NO: 789
QUERY_ID: 735ef633-9ee9-4914-9e0e-35781c10e8e6
QUERY_TITLE: univ3 pool swaps

QUERY_STRING:

with pools as (
	SELECT
	  block_timestamp
	  , tx_hash
	  , REGEXP_SUBSTR_ALL(SUBSTR(data, 3), '.{64}') as segmented_data
	  , '0x' || SUBSTR(topic_1, 27) as token0_address
	  , '0x' || SUBSTR(topic_2, 27) as token1_address
	  , '0x' || SUBSTR(segmented_data[1], 25) as pool_address
	from monad.testnet.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x961235a9020b05c44df1026d956d1f4d78014276' --uni v3 factory MONAD TESTNET
	  AND topic_0 = '0x783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118'
	  AND SUBSTR(REGEXP_SUBSTR_ALL(SUBSTR(data, 3), '.{64}')[1], 25) = '6fa7e462c074d50f0d1b55675cedbdc3e23fda36' ) , swap_events as (
	  SELECT
	  l.block_timestamp
	  , l.tx_hash
	  , origin_from_address
	  , '0x' || substr(topic_1, 27) AS sender
	  , '0x' || substr(topic_2, 27) AS receiver
	  , pool_address
	  , token0_address
	  , token1_address
	  , regexp_substr_all(substr(data, 3), '.{64}') AS segmented_data
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[0])::FLOAT as amount0_unadj
	  , livequery.utils.udf_hex_to_int('s2c', segmented_data[1])::FLOAT as amount1_unadj
	  , 'WMON' AS token0_symbol
	  , 'KESO' AS token1_symbol
	  -- , c0.name AS token0_name
	  -- , c1.name AS token1_name
	  , 18 AS token0_decimals
	  , 6 AS token1_decimals
	  , amount0_unadj / pow(10, token0_decimals) as amount0_adjusted
	  , amount1_unadj / pow(10, token1_decimals) as amount1_adjusted
	  , CASE
	
	
	WHEN amount0_adjusted > 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_in
	  , CASE
	
	
	WHEN amount0_adjusted < 0 THEN ABS(amount0_adjusted)
	
	
	ELSE ABS(amount1_adjusted)
	
	 END AS amount_out
	  , CASE
	
	
	WHEN amount0_unadj > 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_in
	  , CASE
	
	
	WHEN amount0_unadj < 0 THEN token0_address
	
	
	ELSE token1_address
	
	 END AS token_out
	FROM monad.testnet.fact_event_logs l
	INNER JOIN (
	
	 SELECT pool_address, token0_address, token1_address from pools
	  ) p ON l.contract_address = p.pool_address
	-- dim labels table is defunct/field values NULL
	-- LEFT JOIN monad.testnet.dim_contracts c0 ON p.token0_address = c0.address
	-- LEFT JOIN monad.testnet.dim_contracts c1 ON p.token1_address = c1.address
	WHERE 1=1
	  AND l.block_timestamp >= '2025-05-21'
	  AND topic_0 = '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67'
	
	AND (origin_from_address = '0x25859318f26a78b7613ef1b7a9005e997ea03821' OR substr(topic_2, 27) = '25859318f26a78b7613ef1b7a9005e997ea03821')
	  --AND l.tx_hash = '0x3c181304c2a63b8bb45187abfb5ce74fe0bc5fc20ad3a7987d52313362d2d95b'  ) -- SELECT * from swap_events -- SELECT * from monad.testnet.dim_contracts WHERE address = '0x954a9b30f5aece2c1581e33b16d9ddfcd473a0f8' , refine_swaps as (
	SELECT
	  block_timestamp
	  , tx_hash
	  , origin_from_address
	  , sender
	  , receiver
	  , pool_address
	  , token0_symbol || '-' || token1_symbol as pool_name
	  , token_in
	  , token_out
	  , amount_in
	  , amount_out
	from swap_events
	WHERE 1=1 ) SELECT * from refine_swaps ORDER BY block_timestamp ASC LIMIT 10000 -- SELECT * from monad.testnet.dim_contracts -- WHERE address IN ('0x760afe86e5de5fa0ee542fc7b7b713e1c5425701','0x954a9b30f5aece2c1581e33b16d9ddfcd473a0f8')



=======================================================================================
=======================================================================================
QUERY_NO: 790
QUERY_ID: 527107bc-4410-40e4-af88-9c4a362f0742
QUERY_TITLE: [FINAL] ostium_trade_opens

QUERY_STRING:

with opening_fees as (
	SELECT
	  DECODED_LOG:tradeId as trade_id
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='DevFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as dev_fee
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='VaultOpeningFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as vault_open_fee
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='OracleFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as oracle_fee
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND EVENT_NAME IN (
	
	 'DevFeeCharged',
	
	 'VaultOpeningFeeCharged',
	
	 'OracleFeeCharged'
	  )
	GROUP BY 1 ) , async_collat_actions as (
	with base as (
	  SELECT
	  block_timestamp
	  , tx_hash
	  , EVENT_NAME
	  , TO_NUMERIC(DECODED_LOG:tradeId) as trade_id
	  , TO_NUMERIC(DECODED_LOG:pairIndex) as pair_index
	  , DECODED_LOG:topUpAmount/1e6 as collateral
	  , DECODED_LOG:newLeverage/1e2 as leverage
	  , NULL as tp
	  , NULL as sl
	  from arbitrum.core.ez_decoded_event_logs
	  WHERE 1=1
	
	 AND (EVENT_NAME = 'TopUpCollateralExecuted' AND contract_address = '0x6d0ba1f9996dbd8885827e1b2e8f6593e7702411')
	
	 AND tx_succeeded
	
	
	 UNION ALL
	
	
	 SELECT * EXCLUDE segmented_data from (
	
	 SELECT
	
	
	block_timestamp
	
	
	 , tx_hash
	
	
	, 'RemoveCollateralExecuted' as event_name
	
	
	, utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	
	, REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0])) as pair_index
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e6 as collateral
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[2]))/1e2 as leverage
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e18 as tp
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e18 as sl
	
	 from arbitrum.core.fact_event_logs
	
	 WHERE 1=1
	
	
	--AND tx_hash = '0x125b301f96007a98e2f0c20443fa55bcbabfddbd70c15205650968e71fd5c533'
	
	
	AND (
	
	
	  contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	
	  AND TOPIC_0 = '0xd182bace90998b7a07a54165b7beb87743756042148ff3dceb8181dd446533f4'
	
	
	)
	
	
	AND tx_succeeded
	  )
	)
	
	SELECT
	  b.trade_id
	  , SUM(CASE WHEN event_name='TopUpCollateralExecuted' THEN b.collateral ELSE b.collateral *-1 END) as collateral_delta
	  , MAX(l.leverage) as latest_leverage
	  , MAX(l.tp) as latest_tp
	  , MAX(l.sl) as latest_sl
	  , MAX(l.tx_hash) as sample1
	from base b
	 LEFT JOIN (
	  SELECT
	
	 trade_id
	
	 , tx_hash
	
	 , collateral
	
	 , leverage
	
	 , tp
	
	 , sl
	
	 , row_number() OVER (PARTITION BY trade_id ORDER BY block_timestamp DESC) as rank
	  from base
	  qualify rank=1
	) l ON b.trade_id = l.trade_id
	GROUP BY 1 ) , trade_opens as (
	SELECT
	
	l.block_timestamp
	  , tx_hash
	  , DECODED_LOG as log
	  , DECODED_LOG:"t" as tuple
	  , tuple:index as trade_index
	  , 'open' as trade_type
	  , CASE
	
	
	 WHEN EVENT_NAME = 'LimitOpenExecuted'
	
	
	THEN 'limit'
	
	
	ELSE 'market' END  as order_type
	  , DECODED_LOG:"orderId" as trade_id
	  --, DECODED_LOG:"limitIndex" as limit_index --ignoring as this field not present in market opens...
	  , tuple:"pairIndex" as pair_index
	  , market_pair
	  , CASE WHEN tuple:buy = TRUE THEN 'buy/long' ELSE 'sell/short' END as side
	  , tuple:collateral/1e6 as collateral
	  , tuple:leverage/1e2 as leverage
	  , tuple:"openPrice"/1e18 as open_price
	  , tuple:sl/1e18 as stop_loss
	  , tuple:tp/1e18 as take_profit
	  , tuple:trader as trader
	  , DECODED_LOG:tradeNotional as notional_raw
	  , collateral*leverage as volume
	  , DECODED_LOG:priceImpactP/1e18 as price_impact_percent
	  --opening fees
	  , dev_fee
	  , oracle_fee
	  , vault_open_fee
	  --collat changes
	  , collateral_delta
	  , latest_leverage
	  , latest_tp
	  , latest_sl
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN community.arbitrum.ostium_market_pairs mp on l.DECODED_LOG:"t":"pairIndex" = mp.pair_index
	LEFT JOIN opening_fees f on l.DECODED_LOG:"orderId" = f.trade_id
	LEFT JOIN async_collat_actions a on l.DECODED_LOG:"orderId" = a.trade_id
	WHERE 1=1
	  --AND tx_hash = '0xffe3cf4d50bbce55eba988440ba55b4d8457a3bf74cf483ed073b3f798d03e6b'
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND TOPIC_0 IN (
	
	 '0x19c8a7be769082e3461a241a3b6af0adad9302b7c1623ab8adb4d787fd9df67c', --LimitOpenExecuted
	
	 '0xf14b61759b2364f919bb1ce7c68a72e7c012733a5225c194c4f9e8460d9bc0ee'  --MarketOpenExecuted
	
	)
	  AND tx_succeeded
	
	 ) SELECT
	 block_timestamp
	, tx_hash
	, trade_index
	, trade_type
	, order_type
	, trade_id
	, pair_index
	, market_pair
	, side
	, collateral
	, leverage
	, open_price
	, stop_loss
	, take_profit
	, trader
	, notional_raw
	, volume
	, price_impact_percent
	, dev_fee
	, oracle_fee
	, vault_open_fee
	, collateral_delta
	, latest_leverage
	, latest_tp
	, latest_sl from trade_opens



=======================================================================================
=======================================================================================
QUERY_NO: 791
QUERY_ID: 88014729-bdf0-44c9-8c8a-995353568147
QUERY_TITLE: money markets

QUERY_STRING:

SELECT * from arbitrum.vertex.ez_money_markets WHERE 1=1
	AND HOUR::date> CURRENT_DATE - 2 qualify row_number() OVER (PARTITION BY SYMBOL ORDER BY HOUR DESC) = 1 ORDER BY HOUR DESC, TVL DESC



=======================================================================================
=======================================================================================
QUERY_NO: 792
QUERY_ID: 1dfca79f-d7da-4e35-9678-4e6a4d9c0554
QUERY_TITLE: B - Users with stake requirements met

QUERY_STRING:

SELECT
	 origin_from_address as user
	, SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END) as vertex_staked from arbitrum.vertex.ez_staking_actions WHERE 1=1
	AND symbol = 'VRTX' GROUP BY user  HAVING vertex_staked>={{stake_amount}} ORDER BY vertex_staked DESC



=======================================================================================
=======================================================================================
QUERY_NO: 793
QUERY_ID: 114e6231-25c0-4857-a2f8-5b6b69b2bd82
QUERY_TITLE: Daily Stats - taker instance param 

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2 ) SELECT * from edge_vols WHERE 1=1
	AND label ilike '{{instance}}' ORDER BY ddate ASC, label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 794
QUERY_ID: bc8864d2-aec0-498f-b5ac-6d1cb85c52e6
QUERY_TITLE: Total Taker Volume Distribution by Type

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2 ) SELECT
	 SUM(volume) as tvol
	, label2 from edge_vols WHERE 1=1
	AND label ilike '{{instance}}' GROUP BY label2 ORDER BY label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 795
QUERY_ID: ee76379b-516e-44b5-9cf1-1de400fd3b51
QUERY_TITLE: VRTX staking

QUERY_STRING:





=======================================================================================
=======================================================================================
QUERY_NO: 796
QUERY_ID: 4c6a90f7-6d12-46de-80ea-c18bcd05729c
QUERY_TITLE: fish table sync check

QUERY_STRING:

SELECT * from community.solana.pump_fun_new_graduation ORDER BY block_timestamp DESC LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 797
QUERY_ID: 9705640a-f19b-40fb-beb9-7c92bd1b2278
QUERY_TITLE: summary stats test

QUERY_STRING:

-- forked from summary stats @ https://flipsidecrypto.xyz/studio/queries/164ece5b-50d0-4186-b27d-2866887d8a47 ----SEI Orderfill events----- with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e')
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	symbol,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	CASE
	
	
	
	 WHEN amount < 0 THEN 'sell/short'
	
	
	
	 WHEN amount > 0 THEN 'buy/long'
	
	
	END AS trade_type,
	
	
	CASE
	
	
	
	 WHEN order_type = 0 THEN 'default'
	
	
	
	 WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	
	 WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	
	 WHEN order_type = 3 THEN 'post-only'
	
	
	END AS order_type,
	
	
	market_reduce_flag,
	
	
	expiration,
	
	
	nonce,
	
	
	CASE
	
	
	
	 WHEN isTaker = 1 THEN TRUE
	
	
	
	 WHEN isTaker = 0 THEN FALSE
	
	
	END AS is_taker,
	
	
	price_amount_unadj,
	
	
	price_amount,
	
	
	amount_unadj,
	
	
	amount,
	
	
	CASE
	
	
	
	 WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	
	 ELSE quote_delta
	
	
	END AS amount_usd,
	
	
	fee_amount_unadj,
	
	
	fee_amount,
	
	
	base_delta_unadj AS base_delta_amount_unadj,
	
	
	base_delta AS base_delta_amount,
	
	
	quote_delta_unadj AS quote_delta_amount_unadj,
	
	
	quote_delta AS quote_delta_amount,
	
	
	NULL as EZ_PERP_TRADES_ID,
	
	
	NULL as INSERTED_TIMESTAMP,
	
	
	NULL as MODIFIED_TIMESTAMP
	  FROM
	
	
	order_fill_format ) ------ END OF SEI ORDERFILLS------------------ , base_perp_trades as (
	with base_products as (
	  with base as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from base, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	base_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	base_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  base_logs l
	),
	base_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	 base_order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 base_order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- , merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date  BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	 UNION ALL
	 ---base
	 SELECT *, 'base' as label from base_perp_trades
	WHERE 1=1
	  AND block_timestamp::date  BETWEEN '{{start_date}}' AND '{{end_date}}'
	 UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date  BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	UNION ALL
	---sei
	SELECT * , 'sei' as label from FINAL
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  ) ---create sample space for labels persisting colors--- , labels as (
	select * from
	  ( values
	
	  ('arbitrum'),
	
	 ('base'),
	
	 ('blitz'),
	
	 ('sei')
	  ) as a (label) ) , dates as (
	SELECT
	
	DISTINCT date_day
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '{{start_date}}' AND '{{end_date}}' ) , sample_space as (
	SELECT
	
	date_day
	  , label
	from dates
	 LEFT JOIN labels  on 1=1 ) SELECT
	date_trunc('day', date_day) as ddate
	, s.label
	 , COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from sample_space s  LEFT JOIN merge m on (s.date_day = m.block_timestamp::date AND s.label = m.label)  GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC  -- SELECT * from merge WHERE label = 'arbitrum' -- LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 798
QUERY_ID: 9ab4b4a1-3944-4250-8709-ca13df004e5f
QUERY_TITLE: market depth test

QUERY_STRING:

-- forked from market depth test @ https://flipsidecrypto.xyz/studio/queries/5cf20905-8c76-4272-aa41-d99414b6ebcc SELECT
	 hour
	, orderbook_side as side
	, price
	, volume
	, price*volume as liquidity
	, SUM(liquidity) OVER (PARTITION BY hour ORDER BY price DESC) as cum_liquidity
	, row_number() OVER (PARTITION BY hour ORDER BY price DESC)*-1 as levels
	, FIRST_VALUE(price) OVER (PARTITION BY hour ORDER BY price DESC) as side_start
	, ROUND(((price-side_start)/side_start)*100, 2) as price_delta from arbitrum.vertex.ez_market_depth_stats WHERE 1=1
	AND HOUR = '2024-10-31 16:00:00.000'
	AND orderbook_side = 'bids'
	AND ticker_id = 'BTC-PERP_USDC' UNION ALL  SELECT
	 hour
	, orderbook_side as side
	, price
	, volume
	, price*volume as liquidity
	, SUM(liquidity) OVER (PARTITION BY hour ORDER BY price ASC) as cum_liquidity
	, row_number() OVER (PARTITION BY hour ORDER BY price ASC) as levels
	, FIRST_VALUE(price) OVER (PARTITION BY hour ORDER BY price ASC) as side_start
	, ROUND(((price-side_start)/side_start)*100, 2) as price_delta from arbitrum.vertex.ez_market_depth_stats WHERE 1=1
	AND HOUR = '2024-10-31 16:00:00.000'
	AND orderbook_side = 'asks'
	AND ticker_id = 'BTC-PERP_USDC' ORDER BY levels ASC



=======================================================================================
=======================================================================================
QUERY_NO: 799
QUERY_ID: 5e87064d-f266-4b1d-a774-cb9b9ec5b26c
QUERY_TITLE: Total Taker Volume (all instances)

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	ddate
	, label2
	 , SUM(volume) as volume from edge_vols WHERE 1=1 GROUP BY ddate, label2 ORDER BY ddate ASC, label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 800
QUERY_ID: 99920281-e5c9-48fb-8391-c26c6692dbcf
QUERY_TITLE: Total Vertex Stake

QUERY_STRING:

-- forked from VRTX Staking copy @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	SELECT
	
	block_timestamp::date as ddate
	  , stake_action as label
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND symbol = 'VRTX'
	GROUP BY ddate, label ORDER BY label ASC ) SELECT
	 SUM(amount_token) as total_stake from base



=======================================================================================
=======================================================================================
QUERY_NO: 801
QUERY_ID: 012dde54-11a8-44dc-8a7f-cff1bbfa76a1
QUERY_TITLE: Leaderboard

QUERY_STRING:

-- forked from base @ https://flipsidecrypto.xyz/edit/queries/dfa74ed6-5e55-4386-9b87-8bb2b47466c2 with base as (
	SELECT
	
	sender as wallet
	  , COUNT(version) as txns
	from aptos.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp >='2024-05-22'
	  AND payload_function = '0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31::tapos::play'
	  AND SUCCESS = TRUE
	 GROUP BY wallet ORDER BY txns DESC
	LIMIT 1000
	  -- AND PAYLOAD_FUNCTION ilike '%0x7de3fea83cd5ca0e1def27c3f3803af619882db51f34abf30dd04ad12ee6af31%' ) SELECT * from base  ORDER BY txns DESC



=======================================================================================
=======================================================================================
QUERY_NO: 802
QUERY_ID: ef7b409d-a864-4e78-9961-bc7392a1814f
QUERY_TITLE: Quarterly Comparisons Optimized (EDGE included)

QUERY_STRING:

-- forked from Quarterly Comparisons Strings+Emojis @ https://flipsidecrypto.xyz/studio/queries/ebb67ef1-188e-4ea3-9779-efc9afa8e45c -- forked from Quarterly Comparisons @ https://flipsidecrypto.xyz/studio/queries/a281ac54-d871-4f7f-8163-7a5460149da8 with trades_data as (
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND trader != '0x0000000000000000000000000000000000000000'
	  -- AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND trader != '0x0000000000000000000000000000000000000000'
	  -- AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND trader != '0x0000000000000000000000000000000000000000'
	  -- AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND trader != '0x0000000000000000000000000000000000000000'
	  -- AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND trader != '0x0000000000000000000000000000000000000000'
	  -- AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , daily_avg_traders as (
	SELECT
	
	year_num
	  , quarter_num
	
	, AVG(traders) as daily_avg_traders
	  , AVG(trades) as daily_avg_trades
	from (
	  SELECT
	
	  YEAR(block_timestamp) as year_num
	
	 , QUARTER(block_timestamp) as quarter_num
	
	 , block_timestamp::date as ddate
	
	 , COUNT(DISTINCT trader) as traders
	
	 , COUNT(DISTINCT digest) as trades
	  from trades_data
	  GROUP BY 1, 2, 3
	)
	GROUP BY 1, 2 ) , aggrs as (
	SELECT
	  YEAR(block_timestamp) as year_num
	  , QUARTER(block_timestamp) as quarter_num
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  , COUNT(DISTINCT block_timestamp::date) as span_days
	  , MAX(daily_avg_traders) as daily_avg_traders
	  , MAX(daily_avg_trades) as daily_avg_trades
	  , ROUND(total_orders/span_days, 0) as daily_avg_orders
	  , ROUND(total_volume/span_days, 2) as daily_avg_volume
	  , ROUND(total_fees/span_days, 2) as daily_avg_fees
	  , MAX(block_timestamp::date) as max_date
	  , MIN(block_timestamp::date) as min_date
	from trades_data a
	 LEFT JOIN daily_avg_traders t on (YEAR(a.block_timestamp)=t.year_num AND QUARTER(a.block_timestamp)=t.quarter_num)
	 GROUP BY 1, 2
	ORDER BY 1 ASC, 2 ASC ) , delta_strs as (
	SELECT
	  *
	  , lag(unique_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_unique_traders
	  , lag(total_orders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_orders
	  , lag(total_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_volume
	  , lag(total_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_fees
	  , lag(daily_avg_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_traders
	  , lag(daily_avg_trades) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_trades
	  , lag(daily_avg_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_volume
	  , lag(daily_avg_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_fees
	  -- calculate deltas
	  , ROUND(((unique_traders-p_unique_traders)/p_unique_traders)*100, 2) as traders_delta
	  , ROUND(((total_orders-p_total_orders)/p_total_orders)*100, 2) as orders_delta
	  , ROUND(((total_volume-p_total_volume)/p_total_volume)*100, 2) as vol_delta
	  , ROUND(((total_fees-p_total_fees)/p_total_fees)*100, 2) as fees_delta
	  , ROUND(((daily_avg_traders-p_daily_avg_traders)/p_daily_avg_traders)*100, 2) as dat_delta
	  , ROUND(((daily_avg_volume-p_daily_avg_volume)/p_daily_avg_volume)*100, 2) as dav_delta
	  , ROUND(((daily_avg_fees-p_daily_avg_fees)/p_daily_avg_fees)*100, 2) as daf_delta
	  , ROUND(((daily_avg_trades-p_daily_avg_trades)/p_daily_avg_trades)*100, 2) as dats_delta
	  -- stringify
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00')
	
	 ) as vol_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999')
	
	 ) as orders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN traders_delta>=0 THEN '↗️' ELSE '🔻' END) || traders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999')
	
	 ) as traders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN fees_delta>=0 THEN '↗️' ELSE '🔻' END) || fees_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00')
	
	 ) as fees_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999') || ' (' || (CASE WHEN dat_delta>=0 THEN '↗️' ELSE '🔻' END) || dat_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999')
	
	 ) as dat_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN dav_delta>=0 THEN '↗️' ELSE '🔻' END) || dav_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00')
	
	 ) as dav_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN daf_delta>=0 THEN '↗️' ELSE '🔻' END) || daf_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00')
	
	 ) as daf_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00') || ' (' || (CASE WHEN dats_delta>=0 THEN '↗️' ELSE '🔻' END) || dats_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00')
	
	 ) as dats_str
	from aggrs ) , refine as (
	SELECT
	
	('Q' || quarter_num || '-' || year_num) as label
	  , MAX(vol_str) as TOTAL_VOLUME
	  , MAX(fees_str) as TOTAL_FEES
	  , MAX(traders_str) as TOTAL_TRADERS
	  , MAX(orders_str) as TOTAL_TRADES
	  , MAX(dav_str) as DAILY_AVG_VOLUME
	  , MAX(daf_str) as DAILY_AVG_FEES
	  , MAX(dat_str) as DAILY_AVG_TRADERS
	  , MAX(dats_str) as DAILY_AVG_TRADES
	from delta_strs
	GROUP BY 1 ) , quarters as (
	SELECT
	
	year_num
	  , quarter_num
	  ,('Q' || quarter_num || '-' || year_num) as label
	from aggrs
	ORDER BY 1 ASC, 2 ASC  ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM refine
	UNPIVOT (VALUE FOR METRIC IN ( TOTAL_VOLUME, TOTAL_FEES, TOTAL_TRADERS, TOTAL_TRADES, DAILY_AVG_VOLUME, DAILY_AVG_FEES, DAILY_AVG_TRADERS, DAILY_AVG_TRADES )) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from quarters) ) ORDER BY metric DESC



=======================================================================================
=======================================================================================
QUERY_NO: 803
QUERY_ID: 28178306-96ca-42fa-a740-76a3155083b8
QUERY_TITLE: avax vertex products 

QUERY_STRING:

-- forked from sei vertex products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 WITH logs_pull AS (
	  SELECT
	
	
	topics,
	
	
	contract_address,
	
	
	DATA,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	avalanche.core.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-10-01'
	
	
	AND TOPIC_0 :: STRING IN (
	
	
	
	 '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172',
	
	
	
	 '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498'
	
	
	) ), new_prod AS (
	  SELECT
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS product_id,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172' ), book_address_pull AS (
	  SELECT
	
	
	tx_hash,
	
	
	contract_address AS book_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS version
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498' ), api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  --sei-prod
	
	
	
	
	  --'https://gateway.prod.vertexprotocol.com/api/v2/assets'
	
	
	
	
	  --MANTLE: https://gateway.mantle-prod.vertexprotocol.com/v2/assets
	
	
	
	
	  --'https://gateway.sei-prod.vertexprotocol.com/v2/assets'
	
	
	
	
	  'https://gateway.avax-prod.vertexprotocol.com/v2/assets'
	
	
	
	 )
	
	
	) :data AS response ), api_lateral_flatten AS (
	  SELECT
	
	
	r.value
	  FROM
	
	
	api_pull,
	
	
	LATERAL FLATTEN (response) AS r ), product_metadata AS (
	  SELECT
	
	
	VALUE :product_id AS product_id,
	
	
	VALUE :ticker_id AS ticker_id,
	
	
	VALUE :symbol AS symbol,
	
	
	VALUE :name AS NAME,
	
	
	VALUE :market_type AS market_type,
	
	
	VALUE :taker_fee AS taker_fee,
	
	
	VALUE :maker_fee AS maker_fee
	  FROM
	
	
	api_lateral_flatten ), FINAL AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.product_id,
	
	
	CASE
	
	
	
	 WHEN l.product_id % 2 = 0 THEN 'perp'
	
	
	
	 ELSE 'spot'
	
	
	END AS product_type,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN 'USDC'
	
	
	
	 ELSE p.ticker_id :: STRING
	
	
	END AS ticker_id,
	
	
	p.symbol :: STRING AS symbol,
	
	
	p.name :: STRING AS NAME,
	
	
	C.book_address,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN NULL
	
	
	
	 ELSE FLOOR((l.product_id - 1) / 2)
	
	
	END AS health_group,
	
	
	CASE
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WBTC' THEN 'BTC'
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WETH' THEN 'ETH'
	
	
	
	 ELSE SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0]
	
	
	END AS health_group_symbol,
	
	
	p.taker_fee,
	
	
	p.maker_fee,
	
	
	CASE
	
	
	
	 WHEN C.version IS NOT NULL THEN 1
	
	
	
	 ELSE 2
	
	
	END AS version,
	  FROM
	
	
	new_prod l
	
	
	LEFT JOIN book_address_pull C
	
	
	ON l.tx_hash = C.tx_hash
	
	
	LEFT JOIN product_metadata p
	
	
	ON l.product_id = p.product_id
	  WHERE
	
	
	p.ticker_id IS NOT NULL ) SELECT
	  * FROM
	  FINAL qualify(ROW_NUMBER() over(PARTITION BY product_id ORDER BY block_timestamp DESC)) = 1



=======================================================================================
=======================================================================================
QUERY_NO: 804
QUERY_ID: 6a1dcce4-ac6a-4040-a8b0-e68e7f1588a5
QUERY_TITLE: User Retention (Trade Activity

QUERY_STRING:

 Non-Claimers) ,-- forked from User Retention (Trade Activity, Claimers) @ https://flipsidecrypto.xyz/studio/queries/d4525db2-8aaa-4d9e-9355-bcdb8bbcbad8 -- forked from Users vs Claimers @ https://flipsidecrypto.xyz/studio/queries/35e5b612-6121-49cc-ada6-f38d36478611 with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , all_claims as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) , claimers as (
	SELECT
	
	claimer as user
	  , SUM(amount_usd) as total_claim_val
	from all_claims
	GROUP BY user ) , activity as (
	  SELECT
	
	
	
	
	block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	  'perp' AS label
	  FROM arbitrum.vertex.ez_perp_trades
	  WHERE block_timestamp>='2023-11-08' AND block_timestamp<DATEADD('day', -1, date_trunc('month', CURRENT_DATE))
	  UNION ALL
	  SELECT
	
	
	
	  block_timestamp,
	
	
	
	 tx_hash,
	
	
	
	 contract_address,
	
	
	
	 symbol,
	
	
	
	 trader,
	
	
	
	 amount_usd,
	
	
	
	 fee_amount,
	
	
	
	 is_taker,
	
	
	
	 digest,
	
	
	
	 'spot' AS label
	  FROM arbitrum.vertex.ez_spot_trades
	  WHERE block_timestamp>='2023-11-08' AND block_timestamp<DATEADD('day', -1, date_trunc('month', CURRENT_DATE)) ) , vertex_users as (
	SELECT
	
	trader as user
	  , min(block_timestamp) as min_date
	 from activity
	GROUP BY user ) , base as (
	SELECT
	
	trader
	  --, CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by trader) as min_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by trader) -- min_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from activity a
	WHERE 1=1 AND trader NOT IN (SELECT user from claimers) ) ,  count_new_users as(
	select
	
	min_date
	  , count(distinct trader) as new_users
	 from base
	group by 1 ) , count_returning_users as(
	select
	
	min_date
	  , difference
	  , count(distinct trader) as existing_users
	 from base
	where difference != 0
	group by 1,2 ) ,  long_retention_table as(
	select
	
	count_new_users.min_date as cohort
	  , difference
	  , new_users
	  , existing_users
	  , round(existing_users / new_users,2) as retention_pct
	from count_new_users
	left join count_returning_users
	
	
	on count_new_users.min_date = count_returning_users.min_date
	WHERE 1=1 AND difference IS NOT NULL  ) , filter as (
	SELECT
	
	MONTH(cohort) || '-' || YEAR(cohort) as batch
	  , difference as months_since
	  , retention_pct
	  , new_users
	  , existing_users
	from long_retention_table ) SELECT * from filter -- SELECT  --
	*  -- from filter -- PIVOT(MAX(retention_pct) FOR difference IN (1,2,3,4,5,6,7,8,9))



=======================================================================================
=======================================================================================
QUERY_NO: 805
QUERY_ID: 4bc0310f-ef57-464f-9750-0ed72e074368
QUERY_TITLE: FDV - Fees  Daily

QUERY_STRING:

with total_supply as (
	--https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply
	SELECT
	
	TO_NUMERIC(
	
	 livequery.live.udf_api(
	
	
	'https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply'
	
	 ):data) as supply ) , price_closes as (
	SELECT
	  *
	  , row_number () OVER (PARTITION BY HOUR::date ORDER BY HOUR DESC) as rank
	from arbitrum.price.ez_prices_hourly p
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	qualify rank=1 ) , daily_fdv as (
	SELECT
	
	HOUR::date as ddate
	  , price
	  , supply
	  , price * supply as fdv
	 from price_closes p
	 left join total_supply ts on 1=1 ) , daily_rev as (
	with base as (
	  SELECT BLOCK_TIMESTAMP::date as ddate, SUM(FEE_AMOUNT) as fee_usd from arbitrum.vertex.ez_perp_trades GROUP BY ddate
	  UNION ALL
	
	SELECT BLOCK_TIMESTAMP::date as ddate, SUM(FEE_AMOUNT) as fee_usd from arbitrum.vertex.ez_spot_trades GROUP BY ddate
	)
	SELECT
	
	ddate
	  , SUM(fee_usd) as fees
	from base
	 GROUP BY ddate ) SELECT
	 r.ddate
	, fdv
	 , fees from daily_rev r  LEFT JOIN daily_fdv f on r.ddate=f.ddate WHERE 1=1 AND r.ddate>='2023-11-28'



=======================================================================================
=======================================================================================
QUERY_NO: 806
QUERY_ID: e69221ac-246d-485f-92d8-23a817b31bc5
QUERY_TITLE: Price vs Volume Daily

QUERY_STRING:

with price_closes as (
	SELECT
	  *
	  , row_number () OVER (PARTITION BY HOUR::date ORDER BY HOUR DESC) as rank
	from arbitrum.price.ez_prices_hourly p
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	qualify rank=1 ) , volume as (
	with base as (
	  SELECT BLOCK_TIMESTAMP::date as ddate, SUM(FEE_AMOUNT) as fee_usd, SUM(amount_usd) as vol from arbitrum.vertex.ez_perp_trades WHERE is_taker=TRUE GROUP BY ddate
	  UNION ALL
	
	SELECT BLOCK_TIMESTAMP::date as ddate, SUM(FEE_AMOUNT) as fee_usd, SUM(amount_usd) as vol from arbitrum.vertex.ez_spot_trades WHERE is_taker=TRUE GROUP BY ddate
	)
	SELECT
	
	ddate
	  , SUM(vol) as vol
	from base
	 GROUP BY ddate ) , merge as (
	SELECT
	
	ddate
	  , vol
	  , price
	
	, lag(price) OVER (order by ddate ASC ) as prev_price
	  , lag(vol) OVER (order by ddate ASC ) as prev_vol
	  , ROUND((price-prev_price)/prev_price*100, 2) as price_change
	  , ROUND((vol-prev_vol)/prev_vol*100, 2) as vol_change
	from volume v
	LEFT JOIN price_closes p ON v.ddate = p.HOUR::date
	WHERE 1=1
	  AND ddate>='2023-12-01' ) SELECT * from merge



=======================================================================================
=======================================================================================
QUERY_NO: 807
QUERY_ID: cd6f078f-9110-4023-91da-7308ce4c57a7
QUERY_TITLE: fee_accrual tx_ids

QUERY_STRING:

with fee_transfers as (
	SELECT
	  block_timestamp
	
	, tx_id
	  , tx_from as user
	  , amount
	  , mint
	 from solana.core.fact_transfers
	WHERE 1=1
	  AND block_timestamp::date between '2025-01-17' AND '2025-01-19'
	  AND tx_to = '5wkyL2FLEcyUUgc3UeGntHTAfWfzDrVuxMnaMm7792Gk' --moonshot's fee/network fee collector wallet ( SOL + USDT/USDC + Wif)
	
	) SELECT * from fee_transfers LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 808
QUERY_ID: e82ef850-392f-4c01-99f2-3a53d01f721b
QUERY_TITLE: Spreads Picker 

QUERY_STRING:

-- forked from FRates Picker @ https://flipsidecrypto.xyz/studio/queries/527d825c-eb74-435b-9d83-e1432d7a9e0f SELECT
	 HOUR
	, split(ticker_id,'_')[0] as symbol
	, MIN(CASE WHEN orderbook_side='asks' THEN price ELSE NULL END) as price_ask
	, MAX(CASE WHEN orderbook_side='bids' THEN price ELSE NULL END) as price_bid
	, ROUND(abs(((price_ask-price_bid)/price_ask)*100), 3) as spread
	, SUM(CASE WHEN orderbook_side='asks' THEN volume ELSE NULL END) as vol_ask
	, SUM(CASE WHEN orderbook_side='bids' THEN volume ELSE NULL END) as vol_bid from arbitrum.vertex.ez_market_depth_stats WHERE 1=1
	AND HOUR::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	 AND split(ticker_id,'_')[0] ilike '{{ticker}}%'
	--AND ticker_id = 'BTC-PERP_USDC'
	--AND orderbook_side = 'asks' GROUP BY HOUR, symbol ORDER BY HOUR ASC, symbol ASC



=======================================================================================
=======================================================================================
QUERY_NO: 809
QUERY_ID: 32c825b6-9c3d-467a-811e-23cbd25bb896
QUERY_TITLE: new vs old traffic

QUERY_STRING:

-- forked from new users by instance @ https://flipsidecrypto.xyz/studio/queries/c8ac5c1a-c63d-4c2f-bb3c-8bf718b0822c -- forked from new users @ https://flipsidecrypto.xyz/studio/queries/1a856392-7af8-4ad9-96ee-909b0154fe62 with merge_all_time as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , users as (
	SELECT
	
	block_timestamp
	  , trader
	  , label
	from merge_all_time
	qualify row_number() OVER (PARTITION BY trader ORDER BY block_timestamp ASC) = 1 ) , new_users as (
	SELECT
	
	block_timestamp
	  , trader
	  , 1 as is_new
	from users
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  ) SELECT
	date_trunc('day', block_timestamp) as ddate
	, CASE WHEN is_new=1 THEN 'new' ELSE 'old' END as label
	, COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge_all_time
	LEFT JOIN new_users using (trader) WHERE 1=1
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 810
QUERY_ID: 532341c2-1c2d-49eb-ad11-0b59257c446d
QUERY_TITLE: Daily Dust Activity

QUERY_STRING:

with transfers as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND block_timestamp between '2025-03-01' AND '2025-03-31'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  and amount < 0.00001
	  AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) SELECT
	block_timestamp::date as dday
	, CASE WHEN tx_from ilike 'flip%' THEN 'FLIP permutations' ELSE 'Others' END as wallet
	, COUNT(DISTINCT tx_id) as txns
	, COUNT(DISTINCT tx_to) as receivers
	, SUM(amount) as total_amount from transfers GROUP BY 1, 2 having txns>=1000 and receivers>100 ORDER BY dday ASC, receivers DESC, wallet ASC



=======================================================================================
=======================================================================================
QUERY_NO: 811
QUERY_ID: dad1d70b-c37a-427e-950f-4af08c6de403
QUERY_TITLE: tests

QUERY_STRING:

SELECT
	DATEDIFF('month', '2024-10-01', '2024-09-02') as diff



=======================================================================================
=======================================================================================
QUERY_NO: 812
QUERY_ID: d75ac6a6-98d6-4062-8d53-36cc9b3c340b
QUERY_TITLE: donut-issue base query copy

QUERY_STRING:

-- forked from donut-issue base query @ https://flipsidecrypto.xyz/studio/queries/a693d7f4-4da6-45de-96ef-2e37cc1e45ac with base as (
	select livequery.live.udf_api('https://flipsidecrypto.xyz/api/v1/queries/a693d7f4-4da6-45de-96ef-2e37cc1e45ac/data/latest') as response ) SELECT COUNT(*) as totals from base, lateral flatten(input => response:data)



=======================================================================================
=======================================================================================
QUERY_NO: 813
QUERY_ID: cfdc5018-5934-4f99-bcf4-a3c84476cfd6
QUERY_TITLE: permanent-emerald

QUERY_STRING:

SELECT * from arbitrum.vertex.ez_liquidations WHERE 1=1
	AND block_timestamp::date='2024-12-11'
	AND abs(AMOUNT_QUOTE)>=20000



=======================================================================================
=======================================================================================
QUERY_NO: 814
QUERY_ID: 69cf3bc1-26d1-4fdf-a696-7400aeaea521
QUERY_TITLE: influential-cyan

QUERY_STRING:

select
	 min(block_timestamp) as min_t
	, max(block_timestamp) as max_t from mantle.core.fact_event_logs



=======================================================================================
=======================================================================================
QUERY_NO: 815
QUERY_ID: c7abcaa0-9c58-4618-a69e-8684363c0d0c
QUERY_TITLE: ENS cross-chain test

QUERY_STRING:

SELECT * from crosschain.ens.ez_ens_domains WHERE 1=1
	--AND ENS_DOMAIN ilike 'thelaughingman%'
	 AND ARRAY_TO_STRING(ENS_SUBDOMAINS, '|') ilike '%base%' LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 816
QUERY_ID: 8e20a816-3f03-4835-93f5-8dfaa066ac0c
QUERY_TITLE: Pool Specific LVR V3 copy

QUERY_STRING:

-- forked from zackmendel / Pool Specific LVR V3 @ https://flipsidecrypto.xyz/zackmendel/q/J8kh5b_kMnvq/pool-specific-lvr-v3 -- forked from Pool Specific LVR @ https://flipsidecrypto.xyz/studio/queries/fd008048-313b-4f48-9d2c-b5372e6df8eb /* For discrete trades, calculate LVR using the formula: LVR = a(p - q),
	 where  'a' is the asset quantity traded,  'p' is the market price, and  'q' is the AMM price  */ WITH price AS ( SELECT
	hour,
	token_address,
	symbol,
	price FROM ethereum.price.ez_prices_hourly ), pools AS ( SELECT
	hour,
	SUM(CASE WHEN token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN price ELSE 0 END) AS eth_price,
	SUM(CASE WHEN token_address = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599' THEN price ELSE 0 END) AS btc_price,
	SUM(CASE WHEN token_address = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' THEN price ELSE 0 END) AS usdc_price,
	SUM(CASE WHEN token_address = '0xdac17f958d2ee523a2206206994597c13d831ec7' THEN price ELSE 0 END) AS usdt_price FROM price
	WHERE token_address IN ('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '0xdac17f958d2ee523a2206206994597c13d831ec7') -- WETH, WBTC, USDC, USDT
	-- AND hour::date = current_date - 1 GROUP BY hour ), pool AS ( SELECT
	-- *
	hour,
	eth_price,
	btc_price,
	usdc_price,
	usdt_price,
	-- btc_price/eth_price AS WBTC_ETH_pool_price,
	-- usdc_price/eth_price AS USDC_ETH_pool_price,
	-- eth_price/usdt_price AS ETH_USDT_pool_price,
	CASE
	
	WHEN eth_price = 0 THEN NULL
	  ELSE btc_price / eth_price
	END AS WBTC_ETH_pool_price,
	CASE
	
	WHEN eth_price = 0 THEN NULL
	  ELSE usdc_price / eth_price
	END AS USDC_ETH_pool_price,
	CASE
	
	WHEN usdt_price = 0 THEN NULL
	  ELSE eth_price / usdt_price
	END AS ETH_USDT_pool_price
	-- CASE
	 --
	WHEN eth_price = 0 THEN NULL
	--
	ELSE usdc_price / eth_price
	-- END AS pool_price FROM pools ORDER BY hour ), base AS ( SELECT
	'WBTC_ETH' AS pool_name,
	s.block_timestamp,
	amount_in_usd/amount_in AS price1,
	amount_out_usd/amount_out AS price2,
	amount_in AS a,
	WBTC_ETH_pool_price AS p,
	CASE
	
	WHEN price2 = 0 THEN NULL
	  ELSE price1 / price2
	 END AS q,
	p - q,
	a * (p - q) AS lvr FROM ethereum.defi.ez_dex_swaps s JOIN pool p ON DATE_TRUNC('hour', s.block_timestamp) = p.hour --= m.hourz
	WHERE platform = 'uniswap-v3'
	-- AND tx_hash = '0x98d84c436536b0cba83e80c3197b9274f5dee5387ab4c482fe912574a1ff015f'
	AND block_timestamp::date = current_date
	AND token_in = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599' --btc
	AND token_out = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --weth UNION ALL SELECT
	'USDC_ETH' AS pool_name,
	s.block_timestamp,
	amount_in_usd/amount_in AS price1,
	amount_out_usd/amount_out AS price2,
	amount_in AS a,
	USDC_ETH_pool_price AS p,
	CASE
	
	WHEN price2 = 0 THEN NULL
	  ELSE price1 / price2
	 END AS q,
	p - q,
	a * (p - q) AS lvr FROM ethereum.defi.ez_dex_swaps s JOIN pool p ON DATE_TRUNC('hour', s.block_timestamp) = p.hour --= m.hourz
	WHERE platform = 'uniswap-v2'
	-- AND tx_hash = '0x98d84c436536b0cba83e80c3197b9274f5dee5387ab4c482fe912574a1ff015f'
	AND block_timestamp::date = current_date
	AND token_in = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' --USDC
	AND token_out = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --weth UNION ALL SELECT
	'ETH_USDT' AS pool_name,
	s.block_timestamp,
	amount_in_usd/amount_in AS price1,
	amount_out_usd/amount_out AS price2,
	amount_in AS a,
	ETH_USDT_pool_price AS p,
	CASE
	
	WHEN price2 = 0 THEN NULL
	  ELSE price1 / price2
	 END AS q,
	p - q,
	a * (p - q) AS lvr FROM ethereum.defi.ez_dex_swaps s JOIN pool p ON DATE_TRUNC('hour', s.block_timestamp) = p.hour --= m.hourz
	WHERE platform = 'uniswap-v2'
	-- AND tx_hash = '0x98d84c436536b0cba83e80c3197b9274f5dee5387ab4c482fe912574a1ff015f'
	AND block_timestamp::date = current_date
	AND token_in = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --weth
	AND token_out = '0xdac17f958d2ee523a2206206994597c13d831ec7' --USDT ) SELECT
	DATE_TRUNC('hour', block_timestamp) AS timespan,
	pool_name,
	sum (lvr),
	sum (lvr * 10000) AS lvr_bp
	-- * FROM base --1 a JOIN base2 b JOIN base3 c -- ON a.block_timestamp::date = b.block_timestamp::date -- AND a.block_timestamp::date = c.block_timestamp::date
	GROUP BY 1, pool_name LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 817
QUERY_ID: 928aad37-20c7-4597-9a69-a46851a4e809
QUERY_TITLE: DUNE LIVEQUERY

QUERY_STRING:

SELECT
	
	 livequery.live.udf_api ( 'https://api.dune.com/api/v1/query/4054744/results?api_key={api_key}', 'dune'
	
	 ) AS response



=======================================================================================
=======================================================================================
QUERY_NO: 818
QUERY_ID: 652fcd22-d8ac-49bd-b252-57f751369e56
QUERY_TITLE: LQ another Query WORKING EXAMPLE

QUERY_STRING:

-- forked from Sandesh / Holograph bridge transaction per chain @ https://flipsidecrypto.xyz/Sandesh/q/DNSW2GphUvoe/holograph-bridge-transaction-per-chain  -- forked from Holograph bridge transaction over time @ https://flipsidecrypto.xyz/edit/queries/de3f64db-2244-4a33-a16b-37b91562ed55 -- forked from Holograph consolidated wallets @ https://flipsidecrypto.xyz/edit/queries/8bead0ad-52e3-468e-9670-24152bf72631 with raw_transfers as ( select 'Ethereum' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/59d7ca86-b37e-4215-a386-019e163ce16b/latest-run') as resp union  select 'Optimism' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/c1332d43-85a3-4d0d-abd1-1754977b3a45/latest-run') as response union  select 'BSC' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/3fe4df96-9f9f-459e-be38-281dc578dcb5/latest-run') as response union  select 'Polygon' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/e20f505d-55d2-427b-8a37-0e1f80914750/latest-run') as response union  select 'Arbitrum' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/c9c88a01-a4ac-4850-8dcb-6353b64c191f/latest-run') as response union  select 'Avalanche' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/50a13280-cc5e-4480-a01f-102ae92b1f57/latest-run') as response union  select 'Base' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/89fa4b9f-35c0-4ddf-9b91-f10f83e6343b/latest-run') as response union  select 'Linea' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7d60e6e0-704e-46af-bf93-9a375a086b14/latest-run') as response union  select 'Zora' as chain, livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/be6f31dc-a6d3-4c81-9f08-ff9d1295b43c/latest-run') as response ), flattened_wallets as ( select chain,  value[0] as date,  -- value[1] as contracts_deployed, coalesce(value[2],0) as total_transactions  from  raw_transfers, lateral FLATTEN (input=> resp:data:result:rows) -- where wallets is not null ) select  chain, total_transactions as "Total Bridge Transactions"  from flattened_wallets  -- where date=current_date() qualify(rank() over(order by date desc)=1) order by 2 desc



=======================================================================================
=======================================================================================
QUERY_NO: 819
QUERY_ID: 430bad04-b9e4-4889-ab9d-2042fa400b2a
QUERY_TITLE: Token Balances/HOlders -erc20

QUERY_STRING:

with base as (
	SELECT
	
	TO_ADDRESS as wallet --receiver
	  , AMOUNT
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  AND contract_address = lower('0x6982508145454ce325ddbe47a25d4ec3d2311933')
	UNION ALL
	 SELECT
	
	FROM_ADDRESS as wallet ---sender
	  , AMOUNT*(-1) as amount
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  AND contract_address = lower('0x6982508145454ce325ddbe47a25d4ec3d2311933') ) , refine as (
	SELECT
	
	wallet
	  , SUM(amount) as balance
	from base
	 GROUP BY wallet
	having balance>0 ) SELECT COUNT(DISTINCT wallet) as total_holders from refine



=======================================================================================
=======================================================================================
QUERY_NO: 820
QUERY_ID: 59ec94eb-5345-4842-b5e7-57d21b2460a7
QUERY_TITLE: google-sheets-demo copy

QUERY_STRING:

-- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT
	livequery.live.udf_api(
	  'GET',
	  'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	  { 'Content-Type': 'application/json' },
	
	{
	
	  'sheets_id' : '1EjM6ADCjdde1dH4mCrV-hmnjEE_O3jiWwOS2mssqcek',
	
	  'tab_name' : 'list'
	  }
	) as result from DUAL ), data AS ( select result as json_result_must_pivot from res ) SELECT
	*
	  FROM
	
	
	data



=======================================================================================
=======================================================================================
QUERY_NO: 821
QUERY_ID: 7decf174-0650-40bb-83b2-c1c540ca3298
QUERY_TITLE: google-sheets-demo modified

QUERY_STRING:

-- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT
	livequery.live.udf_api(
	  'GET',
	  'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	  { 'Content-Type': 'application/json' },
	
	{
	
	  'sheets_id' : '1EjM6ADCjdde1dH4mCrV-hmnjEE_O3jiWwOS2mssqcek',
	
	  'tab_name' : 'ss1'
	  }
	) as result from DUAL ), data AS ( select result as json_result_must_pivot from res ) SELECT
	*
	  FROM
	
	
	data



=======================================================================================
=======================================================================================
QUERY_NO: 822
QUERY_ID: f67dcfb6-4e3c-4dc7-beb7-73c6b6a127c4
QUERY_TITLE: debug swaps...

QUERY_STRING:

SELECT
	 * from solana.defi.ez_dex_swaps WHERE 1=1
	AND block_timestamp::date between '2025-01-17' AND '2025-01-18'
	AND tx_id IN (
	
	 'zzdwpENDichaiZSuwnUQ73x4WrTjxsEguzcwR2fQxgspMiYvA96goiZ2Lfk9aFg5tK49xUBpkrKUjig2UY3Cm2h'
	
	 , '1139WSvLwYJTuKAzfbEGMqepwGv9JexKLKcD7qjRTmk1wcRWqvJibs1GTEEMiZM1oQc9B3cEKKm5LLSRkErDqeP'
	  ) ORDER BY block_timestamp ASC



=======================================================================================
=======================================================================================
QUERY_NO: 823
QUERY_ID: 611ddf36-dca6-4d10-9c2c-58be8d080286
QUERY_TITLE: swaps/trades direct signer

QUERY_STRING:

-- forked from swaps/trades @ https://flipsidecrypto.xyz/studio/queries/0899b4bf-6d70-47ee-b3f2-51193e7a9c91 -- with fee_transfers as ( --
	SELECT --
	  block_timestamp  --
	  , tx_id --
	  , tx_from as user --
	  , amount --
	  , mint  --
	from solana.core.fact_transfers --
	WHERE 1=1 --
	  AND block_timestamp::date between '2025-01-17' AND '2025-01-18' --
	  AND tx_to = '5wkyL2FLEcyUUgc3UeGntHTAfWfzDrVuxMnaMm7792Gk' --moonshot's fee/network fee collector wallet ( SOL + USDT/USDC + Wif)
	
	-- ) SELECT
	 COUNT(DISTINCT tx_id) as total_trades from solana.defi.ez_dex_swaps WHERE 1=1
	AND block_timestamp::date between '2025-01-17' AND '2025-01-18'
	AND swapper = '7rtiKSUDLBm59b1SBmD9oajcP8xE64vAGSMbAN5CXy1q'
	-- AND tx_id IN (SELECT DISTINCT TX_ID FROM fee_transfers)



=======================================================================================
=======================================================================================
QUERY_NO: 824
QUERY_ID: bc79cbcc-1990-474a-9878-b4767f21055c
QUERY_TITLE: dummy query #2

QUERY_STRING:

-- forked from dummy query #1  @ https://flipsidecrypto.xyz/studio/queries/5f6ba114-c408-4807-aedf-012c47cfe15c SELECT * from $query('5f6ba114-c408-4807-aedf-012c47cfe15c')



=======================================================================================
=======================================================================================
QUERY_NO: 825
QUERY_ID: a95dc779-4935-4d2a-a71a-26646ac03e61
QUERY_TITLE: glad-teal copy

QUERY_STRING:

-- forked from sam / glad-teal @ https://flipsidecrypto.xyz/sam/q/S_m82s-oza98/glad-teal with raw as ( select  slot_number,  index, balance, effective_balance, validator_status  from ethereum.beacon_chain.fact_validators qualify row_number() over (partition by index order by slot_number desc) = 1 ) select  min(slot_number), max(slot_number), count(1), sum(balance), sum(effective_balance) from raw  where effective_balance = 32 and validator_status ilike 'active%' --select distinct validator_status from ethereum.beacon_chain.fact_validators



=======================================================================================
=======================================================================================
QUERY_NO: 826
QUERY_ID: 959c2c4d-d77b-4aa0-b1b8-b9908faea68d
QUERY_TITLE: Vertex - Digest Dive

QUERY_STRING:

-- forked from Vertex - Multi-Trade Orders/Digests @ https://flipsidecrypto.xyz/edit/queries/1f8e634a-3cd5-4a93-a7c5-a12c8c03224d SELECT
	 * from arbitrum.vertex.ez_perp_trades WHERE digest = '0xe5832b76258d47d5debbf1c1074dbe3787a3ec97be9e93815772f92e93dc10d0'



=======================================================================================
=======================================================================================
QUERY_NO: 827
QUERY_ID: 085c9803-fb47-4604-9466-a2a51cfe5d9f
QUERY_TITLE: Time based Cohort Wide

QUERY_STRING:

-- Forked from https://flipsidecrypto.xyz/0xDataWolf/q/jEC6M61jinzx/time-based-cohort-wide  with base_table as ( -- this is data prep
	select
	
	buyer_address
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by buyer_address) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by buyer_address) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from ethereum.nft.ez_nft_sales
	 where platform_name = 'blur'
	  and block_timestamp >= current_timestamp() - interval '1 year' ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct buyer_address) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct buyer_address) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , new_users /*  We need to discard the 'existing_users' column for PIVOT to work */
	
	 --, existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  -- on count_new_users.earliest_date = count_returning_users.earliest_date
	
	
	  using(earliest_date)
	  -- sanity check by, check that each earliest month have a appropriate amount of difference
	  -- order by earliest_date, difference  ) SELECT
	p.* FROM long_retention_table
	  PIVOT(sum(retention_pct) FOR difference IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
	  AS p  ORDER BY earliest_date /* We can set the new columns names with AS p (earliest_date
	
	 , new_users
	
	 , one_month_later
	
	 , two_month_later
	
	 , three_month_later
	
	 , four_month_later
	
	 , five_month_later
	
	 , six_month_later
	
	 , seven_month_later
	
	 , eight_month_later
	
	 , nine_month_later
	
	 , ten_month_later
	
	 , eleven_month_later
	
	 , twelve_month_later) */ /*  , pivot as( -- this is where I wished there was a function to magically pivot. pandas has it tho
	  select
	
	  earliest_date
	
	 , new_users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) -- because there are null values, we need to 'condense the table' and make it a nice triangular like table , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(new_users, '999,999,999,999') as new_users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date  */



=======================================================================================
=======================================================================================
QUERY_NO: 828
QUERY_ID: a0f255cb-4118-4ac1-80ef-5e0cfaa05aaa
QUERY_TITLE: base sales search

QUERY_STRING:

with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) , listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) , bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing-bulk' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) , merge as (
	--ignore fields with type conflict due to bulk logic like seller/qty/token_ids...for sanity
	SELECT
	
	block_timestamp
	  , tx_hash
	
	, label
	  , buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from offer_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from bulk_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from listing_sales ) SELECT * from merge LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 829
QUERY_ID: b5be5a08-08d3-425a-894b-6c3aa7a429ee
QUERY_TITLE: Votes per proposal

QUERY_STRING:

-- forked from Proposals' Roster/metadata @ https://flipsidecrypto.xyz/studio/queries/148034ec-7805-407c-b8ec-7245a0fb85da SELECT
	 -- *
	DECODED_INSTRUCTION:accounts[2]:pubkey as voter
	, COUNT(DISTINCT tx_id) as counts
	, MAX(tx_id) as sample1
	, MIN(tx_id) as sample2 from solana.core.fact_decoded_instructions WHERE 1=1
	and block_timestamp between '2025-06-02' and '2025-06-07'
	--and tx_id='m94JGJaxqtrb8BcRtpoLwYHr7GPzn84eKj6SheZwRf5zidbXSw13KiP8gfASLq5Mm2puRwwuZhb62SGMWdTEhJa'
	 and program_id = 'voTpe3tHQ7AjQHMapgSue2HJFAh2cGsdokqN3XqmVSj'
	and event_type = 'castVote'
	and DECODED_INSTRUCTION:accounts[3]:pubkey = '2F2Gb7FWDEDmDyZhqm9QrKFE2PKFmteXXDDL9FKKsLwf' GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 830
QUERY_ID: d4954c7c-b681-4b8d-8f40-f3613af06341
QUERY_TITLE: [Nouns] Top 5 Lowest Engagement Proposals

QUERY_STRING:

with base_props as (
	SELECT
	
	block_timestamp::date as ddate,
	
	event_inputs:id as prop_id,
		event_inputs:proposer as proposer,
		event_inputs:startBlock as starttime,
		event_inputs:endBlock as endtime,
		substr(event_inputs:description, 0, 70) as short_desc
	from ethereum.core.fact_event_logs
	WHERE 1=1
		--Thanks to Delta/M.Zamani in #lilnouns
		AND origin_to_address in (
	
	 '0x6f3e6272a167e8accb32072d08e0957f9c79223d', -- NounDAOProxy, the rest is just Gnosis Safe Multisig using a delegate_call
	
	 '0x2573c60a6d127755aa2dc85e342f7da2378a0cc5',
	
	 '0xae7f458667f1b30746354abc3157907d9f6fd15e',
	
	 '0x37b8e20646d174b00198b7e183dd1f25520c0f60',
	
	 '0xcc2688350d29623e2a0844cc8885f9050f0f6ed5',
	
	 '0xf6c625851d48fe26b50d96b821a87efc7e35c222'
	  )
		AND topics[0] = '0x7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0' ), merge as (
	SELECT
	
	ddate, prop_id, proposer,
		fb.block_timestamp as start_date,
		coalesce(fb2.block_timestamp, DATEADD(day,3,start_date)) as end_date, --Handling shit that ENDS IN FUTURE ie no block data yet!
		short_desc
	from base_props b
	LEFT JOIN ethereum.core.fact_blocks fb ON TO_NUMBER(b.starttime) = fb.block_number
	LEFT JOIN ethereum.core.fact_blocks fb2 ON TO_NUMBER(b.endtime) = fb2.block_number
	ORDER BY ddate ASC ), votes as (
	SELECT
	
	event_inputs:proposalId as prop_id,
	  event_inputs:votes as votes,
		event_inputs:voter as voter,
		CASE WHEN event_inputs:support='1' THEN 'FOR'  ELSE 'AGAINST' END as cat
	from ethereum.core.fact_event_logs f
	CROSS JOIN merge m
	 WHERE 1=1
		AND contract_address = '0x6f3e6272a167e8accb32072d08e0957f9c79223d'
	AND origin_function_signature IN ( '0x7b3c71d3', '0x56781388')
		AND m.prop_id = event_inputs:proposalId
		AND m.end_date> f.block_timestamp
	AND event_inputs:votes!=0
		--AND f.block_timestamp<=p.end_date
	--GROUP BY prop_id, cat ORDER BY prop_id ASC ),
	 vnp as (
	SELECT
	
	v.prop_id,
		COUNT(DISTINCT voter) as voters,
		SUM(votes) as total_votes,
		MAX(start_date) as start_date,
		MAX(end_date) as end_date,
		MAX(short_desc) as short_desc
	from votes v
	LEFT JOIN merge m ON  m.prop_id = v.prop_id
	group by v.prop_id ), base_mints as (
	SELECT
	
	block_timestamp as ddate,
		COUNT(TOKENID) OVER (ORDER BY ddate ASC) as nouns_existing
	from ethereum.core.ez_nft_mints
	WHERE
		NFT_ADDRESS = lower('0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03') ), mints as (
	SELECT
	
	MAX(nouns_existing) as nouns_existing,
		ddate
	from base_mints
	GROUP BY ddate ORDER BY ddate ASC ), refine as (
	SELECT
		prop_id,voters,
		total_votes as total_vote_turnout,
		nouns_existing,
		start_date,
	  end_date,
		datediff(second, end_date, m.ddate) as diff,
		short_desc,
		row_number() OVER (PARTITION BY prop_id ORDER BY DIFF DESC) as rank
	from vnp v
	 CROSS JOIN mints m
	WHERE 1=1
	AND m.ddate<v.end_date AND m.ddate>v.start_date
	qualify rank=1 ) SELECT
	 TO_VARCHAR(prop_id) as prop_id,
	total_vote_turnout,
	nouns_existing,
	round((total_vote_turnout/nouns_existing)*100, 2) as proposal_engagement,
	start_date,
	end_date,
	short_desc from refine  ORDER BY proposal_engagement ASC LIMIT 5



=======================================================================================
=======================================================================================
QUERY_NO: 831
QUERY_ID: 24236c13-0f84-492a-a9c0-baddea6da741
QUERY_TITLE: volume by sale-type

QUERY_STRING:

-- forked from volume by SYMBOL @ https://flipsidecrypto.xyz/studio/queries/d2c21ba9-1b70-4f6f-9c6c-7920dc14a22c -- forked from daily stats @ https://flipsidecrypto.xyz/studio/queries/1559bf8f-7fd2-4743-b905-eaeafe88ee95 -- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/e3ee9fde-7c78-4a72-add7-9a9d880f215d -- forked from base sales search @ https://flipsidecrypto.xyz/studio/queries/a0f255cb-4118-4ac1-80ef-5e0cfaa05aaa with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) , listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) , bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing-bulk' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) , merge as (
	--ignore fields with type conflict due to bulk logic like seller/qty/token_ids...for sanity
	SELECT
	
	block_timestamp
	  , tx_hash
	
	, label
	  , buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from offer_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from bulk_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from listing_sales ) , aggr as (
	SELECT
	label
	, COUNT(DISTINCT tx_hash) as total_trades
	, SUM(quantity) as total_items
	, SUM(amount_usd) as total_volume_usd
	, COUNT(DISTINCT buyer) as buyers
	 --, row_number() OVER (partition by symbol ORDER BY total_volume_usd DESC) as rank
	from merge
	GROUP BY 1 ) select * from aggr



=======================================================================================
=======================================================================================
QUERY_NO: 832
QUERY_ID: 3ebb69dd-05bd-4024-a1d5-cf6544e7f001
QUERY_TITLE: VRTX Staking NEW copy

QUERY_STRING:

-- forked from VRTX Staking NEW @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action as label
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND symbol = 'VRTX'
	  GROUP BY ddate, label
	
	  UNION ALL
	
	--NEW Contract
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , CASE WHEN TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4') THEN 'stake' ELSE 'withdraw/claim' END as label
	
	 , SUM( CASE WHEN label='stake' THEN AMOUNT_USD ELSE AMOUNT_USD * (-1) END) as amount_usd
	
	 , SUM( CASE WHEN label='stake' THEN AMOUNT ELSE AMOUNT* (-1) END) as amount_token
	  from arbitrum.core.ez_token_transfers
	  WHERE 1=1
	
	 AND (
	
	
	TO_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	
	 OR FROM_ADDRESS = lower('0x6e89C20F182b1744405603958eC5E3fd93441cc4')
	
	 )
	
	 --AND (from_address != lower('0x5Be754aD77766089c4284d914F0cC37E8E3F669A')) --auto migration crap?/previous stake contract
	
	 AND contract_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	  GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 b.*
	, net_usd/categories as net_usd
	, net_token/categories as net_token from base b LEFT JOIN (
	SELECT
	
	SUM(amount_usd) as net_usd
	  , SUM(amount_token) as net_token
	  , COUNT(DISTINCT label) as categories
	  , ddate
	from base
	GROUP BY ddate ) n ON b.ddate=n.ddate WHERE 1=1
	--AND amount_usd IS NOT NULL ORDER BY ddate DESC, LABEL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 833
QUERY_ID: efaed75a-c622-40cb-bf13-c162ebbcec5f
QUERY_TITLE: VRTX Staking

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp::date as ddate
	  , stake_action as label
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND symbol = 'VRTX'
	GROUP BY ddate, label ORDER BY label ASC ) SELECT
	 b.*
	, net_usd/categories as net_usd
	, net_token/categories as net_token from base b LEFT JOIN (
	SELECT
	
	SUM(amount_usd) as net_usd
	  , SUM(amount_token) as net_token
	  , COUNT(DISTINCT label) as categories
	  , ddate
	from base
	GROUP BY ddate ) n ON b.ddate=n.ddate WHERE 1=1
	AND amount_usd IS NOT NULL ORDER BY ddate ASC, LABEL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 834
QUERY_ID: 33dc336c-bc76-445b-a9b4-3b401d5bbba6
QUERY_TITLE: CEX Flow

QUERY_STRING:

-- forked from DEX Flow @ https://flipsidecrypto.xyz/edit/queries/77c354dc-0c3d-4b53-8161-37327b7f5739 with transfers as (
	SELECT
	
	block_timestamp::date as ddate
	
	
	 , PROJECT_NAME
	  , t.to_address as cex_address
	  , from_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , sum(amount_usd) as usd_amount
	  , SUM(AMOUNT_PRECISE) as token_amount
	  , 'inflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.to_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  and l.label_subtype='deposit_wallet'
	group by ddate, PROJECT_NAME, CEX_address, wallet,  side
	UNION
	 SELECT
	
	block_timestamp::date as ddate
	
	
	 , PROJECT_NAME
	  , t.from_address as cex_address
	  , to_address as wallet
	  --sum(eth.amount) as eth_amount,
	  , sum(amount_usd) as usd_amount
	  , SUM(AMOUNT_PRECISE) as token_amount
	  , 'outflow' as side
	from arbitrum.core.ez_token_transfers t
	inner join arbitrum.core.dim_labels l on t.from_address=l.address
	where 1=1
	  and t.contract_address = lower('0x95146881b86b3ee99e63705ec87afe29fcc044d9')
	  and l.label_type='cex'
	  --and dl.label_subtype='hot_wallet'
	group by ddate, PROJECT_NAME, CEX_address, wallet,  side
	 ) , refine as (
	SELECT
	  ddate
	  , side
	  , SUM(CASE WHEN side='inflow' THEN usd_amount ELSE usd_amount*(-1) END) as volume_usd
	  , SUM(CASE WHEN side='inflow' THEN token_amount ELSE token_amount*(-1) END) as volume_token
	from transfers
	GROUP BY ddate, side ) SELECT
	 s.*
	, net_usd/2 as net_usd
	, net_token/2 as net_token from refine s LEFT JOIN (
	SELECT
	
	SUM(volume_usd) as net_usd
	  , SUM(volume_token) as net_token
	  , ddate
	from refine
	GROUP BY ddate ) n ON s.ddate=n.ddate WHERE 1=1
	AND volume_token IS NOT NULL ORDER BY ddate ASC, side ASC



=======================================================================================
=======================================================================================
QUERY_NO: 835
QUERY_ID: 9b7878c9-5311-4068-9184-ecf1250dc069
QUERY_TITLE: Vertex Protocol - VRTX Spot Activity

QUERY_STRING:

with base as (
	SELECT
	
	CASE WHEN trade_type = 'buy/long' THEN 'buy' ELSE 'sell' END as side
	  , SUM(CASE WHEN side='buy' THEN AMOUNT_USD ELSE AMOUNT_USD*(-1) END) as volume
	  --, trader as wallet
	  , block_timestamp::date as ddate
	from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	  AND symbol = 'VRTX'
	  and is_taker= true
	GROUP BY ddate, side ) SELECT
	 s.*
	, net_flow/2 as net_volume from base s LEFT JOIN (
	SELECT
	
	SUM(volume) as net_flow
	  , ddate
	from base
	GROUP BY ddate ) n ON s.ddate=n.ddate WHERE 1=1 ORDER BY ddate ASC, side ASC



=======================================================================================
=======================================================================================
QUERY_NO: 836
QUERY_ID: 066ceb3e-a304-4883-9cca-e4e91b3198ac
QUERY_TITLE: Burn Events - Pie Chart copy

QUERY_STRING:

-- forked from Burn Events - Pie Chart @ https://flipsidecrypto.xyz/studio/queries/98fcffbf-c1bb-47e4-9052-16f24d1b10f6 -- forked from Burn Events - Details @ https://flipsidecrypto.xyz/edit/queries/525a5563-07f5-4fd1-888f-6bdb25eb3fab -- The wallet executing the burn transfers seems to change between the 2 burn transactions we have atm -- So, kinda not possible to automate the burn events lookup, relying on manual updation of each tx_hash with burns as (
	with base as
	 (
	  SELECT
	
	  block_timestamp as timestamp
	
	 , AMOUNT as burnt_tokens
	
	 , AMOUNT_USD as usd_value_at_burn
	  from arbitrum.core.ez_token_transfers
	  WHERE 1=1
	
	 -- -- ADD NEW BURN TX_HASH HERE
	
	 -- AND tx_hash in (
	
	 --
	  '0xf329b77939562190d090b2faa762ac05f5dbe5568e1c60e4f2c4c72dd1d148ed'
	
	 --
	  , '0x595d5ab22bb9f6b2556c6b5ea110cd8bea84a72c046d2fddea40deb4f7b1df09'
	
	 --
	)
	
	 AND contract_address = '0x95146881b86b3ee99e63705ec87afe29fcc044d9'
	
	 AND to_address = lower('0x000000000000000000000000000000000000dEaD')
	
	 AND block_number>=218716628
	)
	SELECT
	
	*
	
	, SUM(burnt_tokens) OVER (ORDER BY timestamp ASC) as cumulative_burns
	from base ) , display as (
	SELECT
	
	row_number() OVER(ORDER BY timestamp ASC) as burn_iteration
	  , timestamp
	  , burnt_tokens
	  , USD_VALUE_AT_BURN
	  , SUPPLY_BURNT_PERC
	  , cumulative_burns
	  , round((cumulative_burns/supply_after_burn)*100, 3) as total_supply_burnt_perc
	  , supply_at_burn
	  , supply_after_burn
	from (
	  --- CHECK LATEST OFFICIAL SUPPLY: https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply
	  SELECT
	
	  *
	
	 , LAG(cumulative_burns) OVER (ORDER BY timestamp ASC) as prev_burn
	
	 , (1000000000 -1 - coalesce(prev_burn, 0)) as supply_at_burn
	
	 , supply_at_burn - burnt_tokens as supply_after_burn
	
	 , round((burnt_tokens/supply_at_burn)*100, 3)  as supply_burnt_perc
	  from burns
	  ORDER BY timestamp DESC
	)
	ORDER BY timestamp DESC
	LIMIT 1 ) SELECT cumulative_burns as supply, 'burnt' as label from display UNION ALL  SELECT supply_after_burn as supply, 'total_supply' as label from display ORDER BY label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 837
QUERY_ID: 98fcffbf-c1bb-47e4-9052-16f24d1b10f6
QUERY_TITLE: Burn Events - Pie Chart

QUERY_STRING:

-- forked from Burn Events - Details @ https://flipsidecrypto.xyz/edit/queries/525a5563-07f5-4fd1-888f-6bdb25eb3fab -- The wallet executing the burn transfers seems to change between the 2 burn transactions we have atm -- So, kinda not possible to automate the burn events lookup, relying on manual updation of each tx_hash with burns as (
	with base as
	 (
	  SELECT
	
	  block_timestamp as timestamp
	
	 , AMOUNT as burnt_tokens
	
	 , AMOUNT_USD as usd_value_at_burn
	  from arbitrum.core.ez_token_transfers
	  WHERE 1=1
	
	 -- -- ADD NEW BURN TX_HASH HERE
	
	 -- AND tx_hash in (
	
	 --
	  '0xf329b77939562190d090b2faa762ac05f5dbe5568e1c60e4f2c4c72dd1d148ed'
	
	 --
	  , '0x595d5ab22bb9f6b2556c6b5ea110cd8bea84a72c046d2fddea40deb4f7b1df09'
	
	 --
	)
	
	 AND contract_address = '0x95146881b86b3ee99e63705ec87afe29fcc044d9'
	
	 AND to_address = lower('0x000000000000000000000000000000000000dEaD')
	
	 AND block_number>=218716628
	)
	SELECT
	
	*
	
	, SUM(burnt_tokens) OVER (ORDER BY timestamp ASC) as cumulative_burns
	from base ) , display as (
	SELECT
	
	row_number() OVER(ORDER BY timestamp ASC) as burn_iteration
	  , timestamp
	  , burnt_tokens
	  , USD_VALUE_AT_BURN
	  , SUPPLY_BURNT_PERC
	  , cumulative_burns
	  , round((cumulative_burns/supply_after_burn)*100, 3) as total_supply_burnt_perc
	  , supply_at_burn
	  , supply_after_burn
	from (
	  --- CHECK LATEST OFFICIAL SUPPLY: https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply
	  SELECT
	
	  *
	
	 , LAG(cumulative_burns) OVER (ORDER BY timestamp ASC) as prev_burn
	
	 , (1000000000 -1 - coalesce(prev_burn, 0)) as supply_at_burn
	
	 , supply_at_burn - burnt_tokens as supply_after_burn
	
	 , round((burnt_tokens/supply_at_burn)*100, 3)  as supply_burnt_perc
	  from burns
	  ORDER BY timestamp DESC
	)
	ORDER BY timestamp DESC
	LIMIT 1 ) SELECT cumulative_burns as supply, 'burnt' as label from display UNION ALL  SELECT supply_after_burn as supply, 'total_supply' as label from display ORDER BY label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 838
QUERY_ID: ed9d6fe1-714a-4b76-87e6-96c3d2f44cf5
QUERY_TITLE: VRTX Staking Burns test

QUERY_STRING:

-- forked from VRTX Staking Totals FINAL @ https://flipsidecrypto.xyz/studio/queries/d21a2b3a-091e-4a6d-b141-d9406615b208 -- forked from VRTX Staking Totals (updated contracts) @ https://flipsidecrypto.xyz/studio/queries/38f4e527-d13d-401b-a707-e6f240f8cdf8 -- forked from VRTX Staking @ https://flipsidecrypto.xyz/studio/queries/efaed75a-c622-40cb-bf13-c162ebbcec5f with base as (
	SELECT tx_hash
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND stake_action NOT in ('migrate-stake', 'stake')
	  AND symbol = 'VRTX'
	  AND block_timestamp>='2024-12-01'
	  ANd from_address!='0x5be754ad77766089c4284d914f0cc37e8e3f669a' )
	 SELECT
	 tx_hash
	, COUNT(*) as totals from arbitrum.core.fact_event_logs WHERE 1=1
	AND tx_hash in (select * from base) GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 839
QUERY_ID: 5722389b-4c24-48be-b989-d7a61b64b3b9
QUERY_TITLE: NFT Sales Master Top NFTs

QUERY_STRING:

-- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	collection_name
	, ROUND(SUM(sale_amount), 2) as "volume(APT)"
	, ROUND(AVG(sale_amount), 2) as "avg_sale(APT)"
	, COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers from sales_mixer WHERE 1=1
	AND collection_name IS NOT NULL GROUP BY collection_name, creator ORDER BY "volume(APT)" DESC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 840
QUERY_ID: d416bcfc-4c5b-4854-9eb6-06153a5b8314
QUERY_TITLE: Daily Stats - maker instance param

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	GROUP BY ddate, label, label2 ) SELECT * from edge_vols WHERE 1=1
	AND label ilike '{{instance}}' ORDER BY ddate ASC, label2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 841
QUERY_ID: 93b760ea-9c87-4b55-9a95-621f82e03108
QUERY_TITLE: Price vs Volume Monthly

QUERY_STRING:

-- forked from Price vs Volume Daily @ https://flipsidecrypto.xyz/studio/queries/e69221ac-246d-485f-92d8-23a817b31bc5 with price_closes as (
	SELECT
	  *
	  , row_number () OVER (PARTITION BY date_trunc('month', HOUR) ORDER BY HOUR DESC) as rank
	from arbitrum.price.ez_prices_hourly p
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	qualify rank=1 ) , volume as (
	with base as (
	  SELECT date_trunc('month', BLOCK_TIMESTAMP) as ddate, SUM(FEE_AMOUNT) as fee_usd, SUM(amount_usd) as vol from arbitrum.vertex.ez_perp_trades WHERE is_taker=TRUE GROUP BY ddate
	  UNION ALL
	
	SELECT date_trunc('month', BLOCK_TIMESTAMP) as ddate, SUM(FEE_AMOUNT) as fee_usd, SUM(amount_usd) as vol from arbitrum.vertex.ez_spot_trades WHERE is_taker=TRUE GROUP BY ddate
	)
	SELECT
	
	ddate
	  , SUM(vol) as vol
	from base
	 GROUP BY ddate ) , merge as (
	SELECT
	
	ddate
	  , vol
	  , price
	
	, lag(price) OVER (order by ddate ASC ) as prev_price
	  , lag(vol) OVER (order by ddate ASC ) as prev_vol
	  , ROUND((price-prev_price)/prev_price*100, 2) as price_change
	  , ROUND((vol-prev_vol)/prev_vol*100, 2) as vol_change
	from volume v
	LEFT JOIN price_closes p ON v.ddate = date_trunc('month', p.HOUR)
	WHERE 1=1
	  AND ddate>='2023-12-01' ) SELECT * from merge



=======================================================================================
=======================================================================================
QUERY_NO: 842
QUERY_ID: 921125f5-317b-490e-b50f-d99acc40e35e
QUERY_TITLE: VRTX net_stake over time (stage breakdown)

QUERY_STRING:

-- forked from VRTX net_stake over time @ https://flipsidecrypto.xyz/studio/queries/772e5dc8-435e-43c1-9b50-cffe8e227f08 with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND stake_action!='migrate-stake'
	
	 AND symbol = 'VRTX'
	  GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , CASE  WHEN ddate<='2024-09-09' THEN 'pre-Vertical'
	
	
	
	  WHEN ddate>='2024-09-10' AND ddate<'2024-10-01' THEN 'Stage 1'
	
	
	
	 WHEN ddate>='2024-10-01' AND ddate<'2024-10-28' THEN 'Stage 2'
	
	
	
	 ELSE 'Stage 3' END as label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 ddate
	, label
	 , amount_token
	, SUM(amount_token) OVER (ORDER BY ddate ASC) as total_stake from base ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 843
QUERY_ID: 772e5dc8-435e-43c1-9b50-cffe8e227f08
QUERY_TITLE: VRTX net_stake over time

QUERY_STRING:

with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND stake_action!='migrate-stake'
	
	 AND symbol = 'VRTX'
	  GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , CASE WHEN ddate<'2024-09-09' THEN 'pre-Vertical' ELSE 'post-Vertical' END as label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 ddate
	, label
	 , amount_token
	, SUM(amount_token) OVER (ORDER BY ddate ASC) as total_stake from base ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 844
QUERY_ID: 0899b4bf-6d70-47ee-b3f2-51193e7a9c91
QUERY_TITLE: swaps w/ fee deriv

QUERY_STRING:

with fee_transfers as (
	SELECT
	  block_timestamp
	
	, tx_id
	  , tx_from as user
	  , amount
	  , mint
	 from solana.core.fact_transfers
	WHERE 1=1
	  AND block_timestamp::date between '2025-01-17' AND '2025-01-18'
	  AND tx_to = '5wkyL2FLEcyUUgc3UeGntHTAfWfzDrVuxMnaMm7792Gk' --moonshot's fee/network fee collector wallet ( SOL + USDT/USDC + Wif)
	
	) SELECT
	CASE WHEN  swapper = '7rtiKSUDLBm59b1SBmD9oajcP8xE64vAGSMbAN5CXy1q' then 'default' else 'odd case' END as label
	, COUNT(DISTINCT tx_id) as total_trades
	, MAX(swapper) as swapper1
	, MIN(swapper) as swapper2
	, MAX(tx_id) as sample1
	, MIN(tx_id) as sample2 from solana.defi.ez_dex_swaps WHERE 1=1
	AND block_timestamp::date between '2025-01-17' AND '2025-01-18'
	AND tx_id IN (SELECT DISTINCT TX_ID FROM fee_transfers) GROUP by 1



=======================================================================================
=======================================================================================
QUERY_NO: 845
QUERY_ID: 0527b0dc-7cba-4b3e-9507-57f43d07bcf8
QUERY_TITLE: Quarterly Comparisons Optimized (EDGE Excluded) 

QUERY_STRING:

-- forked from Quarterly Comparisons Strings+Emojis Optimized (EDGE included) @ https://flipsidecrypto.xyz/studio/queries/ef7b409d-a864-4e78-9961-bc7392a1814f with trades_data as (
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , daily_avg_traders as (
	SELECT
	
	year_num
	  , quarter_num
	
	, AVG(traders) as daily_avg_traders
	  , AVG(trades) as daily_avg_trades
	from (
	  SELECT
	
	  YEAR(block_timestamp) as year_num
	
	 , QUARTER(block_timestamp) as quarter_num
	
	 , block_timestamp::date as ddate
	
	 , COUNT(DISTINCT trader) as traders
	
	 , COUNT(DISTINCT digest) as trades
	  from trades_data
	  GROUP BY 1, 2, 3
	)
	GROUP BY 1, 2 ) , aggrs as (
	SELECT
	  YEAR(block_timestamp) as year_num
	  , QUARTER(block_timestamp) as quarter_num
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  , COUNT(DISTINCT block_timestamp::date) as span_days
	  , MAX(daily_avg_traders) as daily_avg_traders
	  , MAX(daily_avg_trades) as daily_avg_trades
	  , ROUND(total_orders/span_days, 0) as daily_avg_orders
	  , ROUND(total_volume/span_days, 2) as daily_avg_volume
	  , ROUND(total_fees/span_days, 2) as daily_avg_fees
	  , MAX(block_timestamp::date) as max_date
	  , MIN(block_timestamp::date) as min_date
	from trades_data a
	 LEFT JOIN daily_avg_traders t on (YEAR(a.block_timestamp)=t.year_num AND QUARTER(a.block_timestamp)=t.quarter_num)
	 GROUP BY 1, 2
	ORDER BY 1 ASC, 2 ASC ) , delta_strs as (
	SELECT
	  *
	  , lag(unique_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_unique_traders
	  , lag(total_orders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_orders
	  , lag(total_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_volume
	  , lag(total_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_fees
	  , lag(daily_avg_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_traders
	  , lag(daily_avg_trades) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_trades
	  , lag(daily_avg_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_volume
	  , lag(daily_avg_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_fees
	  -- calculate deltas
	  , ROUND(((unique_traders-p_unique_traders)/p_unique_traders)*100, 2) as traders_delta
	  , ROUND(((total_orders-p_total_orders)/p_total_orders)*100, 2) as orders_delta
	  , ROUND(((total_volume-p_total_volume)/p_total_volume)*100, 2) as vol_delta
	  , ROUND(((total_fees-p_total_fees)/p_total_fees)*100, 2) as fees_delta
	  , ROUND(((daily_avg_traders-p_daily_avg_traders)/p_daily_avg_traders)*100, 2) as dat_delta
	  , ROUND(((daily_avg_volume-p_daily_avg_volume)/p_daily_avg_volume)*100, 2) as dav_delta
	  , ROUND(((daily_avg_fees-p_daily_avg_fees)/p_daily_avg_fees)*100, 2) as daf_delta
	  , ROUND(((daily_avg_trades-p_daily_avg_trades)/p_daily_avg_trades)*100, 2) as dats_delta
	  -- stringify
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00')
	
	 ) as vol_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999')
	
	 ) as orders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN traders_delta>=0 THEN '↗️' ELSE '🔻' END) || traders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999')
	
	 ) as traders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN fees_delta>=0 THEN '↗️' ELSE '🔻' END) || fees_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00')
	
	 ) as fees_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999') || ' (' || (CASE WHEN dat_delta>=0 THEN '↗️' ELSE '🔻' END) || dat_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999')
	
	 ) as dat_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN dav_delta>=0 THEN '↗️' ELSE '🔻' END) || dav_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00')
	
	 ) as dav_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN daf_delta>=0 THEN '↗️' ELSE '🔻' END) || daf_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00')
	
	 ) as daf_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00') || ' (' || (CASE WHEN dats_delta>=0 THEN '↗️' ELSE '🔻' END) || dats_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00')
	
	 ) as dats_str
	from aggrs ) , refine as (
	SELECT
	
	('Q' || quarter_num || '-' || year_num) as label
	  , MAX(vol_str) as TOTAL_VOLUME
	  , MAX(fees_str) as TOTAL_FEES
	  , MAX(traders_str) as TOTAL_TRADERS
	  , MAX(orders_str) as TOTAL_TRADES
	  , MAX(dav_str) as DAILY_AVG_VOLUME
	  , MAX(daf_str) as DAILY_AVG_FEES
	  , MAX(dat_str) as DAILY_AVG_TRADERS
	  , MAX(dats_str) as DAILY_AVG_TRADES
	from delta_strs
	GROUP BY 1 ) , quarters as (
	SELECT
	
	year_num
	  , quarter_num
	  ,('Q' || quarter_num || '-' || year_num) as label
	from aggrs
	ORDER BY 1 ASC, 2 ASC  ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM refine
	UNPIVOT (VALUE FOR METRIC IN ( TOTAL_VOLUME, TOTAL_FEES, TOTAL_TRADERS, TOTAL_TRADES, DAILY_AVG_VOLUME, DAILY_AVG_FEES, DAILY_AVG_TRADERS, DAILY_AVG_TRADES )) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from quarters) ) ORDER BY metric DESC



=======================================================================================
=======================================================================================
QUERY_NO: 846
QUERY_ID: 92382814-4654-4763-aee8-bbd13e3c9628
QUERY_TITLE: Overview Redux

QUERY_STRING:

-- forked from special gas - over time sam's thing example @ https://flipsidecrypto.xyz/studio/queries/1dd7e264-2516-4e78-89b6-07e76c9e1a99 -- forked from special gas - over time sam's thing @ https://flipsidecrypto.xyz/studio/queries/dbb7d373-050f-4062-b84f-76bd7bc97a3e -- forked from special gas - over time contract interactor @ https://flipsidecrypto.xyz/studio/queries/ffddb2ea-925f-4d70-9ab4-252377940266 -- forked from special gas - over time only orig_func @ https://flipsidecrypto.xyz/studio/queries/618a596f-664b-4202-95a6-e30455821345 -- forked from special gas - over time copy @ https://flipsidecrypto.xyz/studio/queries/44b3d4e4-ed24-4080-823a-8c2bd6be1c46 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , to_address as wallet
	  , VALUE as amount
	  , origin_from_address
	  , origin_to_address
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xa02bbee98b05ba24ad34e8db67c2266cb2f4b2905bc27ab83d7b9b8079e16168'
	  --and origin_from_address = lower('0xc0f2bACAfbc928be652cB6fbd3CaF75D651329b8')
	  --and origin_function_signature = '0x7a53bcfc'
	  and type = 'CALL'
	  and input = '0x'
	  and value > 0
	
	
	 AND block_timestamp::date between '2025-02-18' and '2025-02-19' ) SELECT
	
	 origin_from_address as invoker
	, COUNT(distinct origin_to_address) as contracts
	, COUNT(distinct wallet) as users
	, COUNT(wallet) as dupe_users
	, COUNT(distinct tx_hash) as txns
	, MAX(tx_hash) as sample1
	, SUM(amount) as total_mon
	-- , SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	-- , SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative
	-- , SUM(txns) OVER (ORDER by dmin ASC) as txns_total from gas_base WHERE 1=1
	--AND origin_to_address!='0x9fb480a193c250bf8ece39df5d9d728e21026b34' GROUP BY 1 ORDER BY 3 DESC LIMIT 15
	-- SELECT * from gas_base



=======================================================================================
=======================================================================================
QUERY_NO: 847
QUERY_ID: dbb7d373-050f-4062-b84f-76bd7bc97a3e
QUERY_TITLE: special gas - over time sam's thing

QUERY_STRING:

-- forked from special gas - over time contract interactor @ https://flipsidecrypto.xyz/studio/queries/ffddb2ea-925f-4d70-9ab4-252377940266 -- forked from special gas - over time only orig_func @ https://flipsidecrypto.xyz/studio/queries/618a596f-664b-4202-95a6-e30455821345 -- forked from special gas - over time copy @ https://flipsidecrypto.xyz/studio/queries/44b3d4e4-ed24-4080-823a-8c2bd6be1c46 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , to_address as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  and origin_from_address = lower('0xc0f2bACAfbc928be652cB6fbd3CaF75D651329b8')
	  and type = 'CALL'
	  and input = '0x'
	  and value > 0
	  --AND block_number<4000000 ) SELECT
	 date_trunc('minute', block_timestamp) as dmin
	, COUNT(distinct wallet) as users
	, COUNT(distinct tx_hash) as txns
	, MAX(tx_hash) as sample1
	, SUM(amount) as total_mon
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative
	, SUM(txns) OVER (ORDER by dmin ASC) as txns_total from gas_base GROUP BY 1 ORDER BY 1 ASC
	-- SELECT * from gas_base



=======================================================================================
=======================================================================================
QUERY_NO: 848
QUERY_ID: 1dd7e264-2516-4e78-89b6-07e76c9e1a99
QUERY_TITLE: special gas - over time sam's thing example

QUERY_STRING:

-- forked from special gas - over time sam's thing @ https://flipsidecrypto.xyz/studio/queries/dbb7d373-050f-4062-b84f-76bd7bc97a3e -- forked from special gas - over time contract interactor @ https://flipsidecrypto.xyz/studio/queries/ffddb2ea-925f-4d70-9ab4-252377940266 -- forked from special gas - over time only orig_func @ https://flipsidecrypto.xyz/studio/queries/618a596f-664b-4202-95a6-e30455821345 -- forked from special gas - over time copy @ https://flipsidecrypto.xyz/studio/queries/44b3d4e4-ed24-4080-823a-8c2bd6be1c46 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	*
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  AND tx_hash = '0xa02bbee98b05ba24ad34e8db67c2266cb2f4b2905bc27ab83d7b9b8079e16168'
	  --and origin_from_address = lower('0xc0f2bACAfbc928be652cB6fbd3CaF75D651329b8')
	  and origin_function_signature = '0x7a53bcfc'
	  and type = 'CALL'
	  and input = '0x'
	  and value > 0
	  --AND block_number<4000000 ) -- SELECT  --
	date_trunc('minute', block_timestamp) as dmin --
	, COUNT(distinct wallet) as users --
	, COUNT(distinct tx_hash) as txns --
	, MAX(tx_hash) as sample1 --
	, SUM(amount) as total_mon --
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative --
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative --
	, SUM(txns) OVER (ORDER by dmin ASC) as txns_total -- from gas_base -- GROUP BY 1 -- ORDER BY 1 ASC
	SELECT * from gas_base



=======================================================================================
=======================================================================================
QUERY_NO: 849
QUERY_ID: 060a5ef9-92f1-4b31-a5e8-6579efb94cda
QUERY_TITLE: MiBera

QUERY_STRING:

-- forked from Cubhub @ https://flipsidecrypto.xyz/edit/queries/00d28c72-77d0-4544-9bb2-12ac23edeb58 -- forked from $ER @ https://flipsidecrypto.xyz/edit/queries/628128b8-9006-4fb4-8067-47fe244e3290 with article_data as (
	 select 1 as rn,'null' as catogery,'Lore 1 ♡ Introducing Mibera' as title, '<a href=https://0xhoneyjar.mirror.xyz/GTBSEjmFrVJ1CrCS0kUl-vaRZA6PY-c7IBs259jF1Fo>Lore 1 ♡ Introducing Mibera</a>' as articles, '0x6b31859e5e32a5212f1ba4d7b377604b9d4c7a60' as contract_address, 4713 as total_supply
	union all
	select 2 as rn,'null' as catogery,'Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill' as title, '<a href=https://0xhoneyjar.mirror.xyz/2KBy89fU4bNB09n1Mq74xkJEHyJ2Y8O1ocFdiCGMwpQ>Lore 2 ♡[HONEY] Online to get Offline: Clear pill vs Rave pill</a>' as articles, '0x9247edf18518c4dccfa7f8b2345a1e8a4738204f' as contract_address, 2355 as total_supply
	union all
	select 3 as rn,'null' as catogery,'Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism' as title, '<a href=https://0xhoneyjar.mirror.xyz/B6C07ZIXarc77aSIL9TwFpKkxxnwNFkoQUtCQbVUG8Y>Lore 3 ♡ [BERA] Kali/acc vs Cybernetic Psychedelic Mysticism</a>' as articles, '0xb2c7f411aa425d3fce42751e576a01b1ff150385' as contract_address, 1175 as total_supply
	union all
	select 4 as rn,'null' as catogery,'Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)' as title, '<a href=https://0xhoneyjar.mirror.xyz/cxMVbB4IklLs51vZp0vNe0dtegoRg-sF_RoNpPUGREw>Lore 4 ♡ [BGT] Network Spirituality (Spirit) vs Network Mysticism (Soul)</a>' as articles, '0xa12064e3b1f6102435e77aa68569e79955070357' as contract_address, 571 as total_supply
	union all
	select 5 as rn,'null' as catogery,'Lore 5 ♡ Mibera Initiation Ritual' as title, '<a href=https://0xhoneyjar.mirror.xyz/m84Rmtqo1EYJDXcuyw7V0dQ0qvuvLiuxuGNR4NWWtmw>Lore 5 ♡ Mibera Initiation Ritual </a>' as articles, '0x6ca29eed22f04c1ec6126c59922844811dcbcdfa' as contract_address, 271 as total_supply
	union all
	select 6 as rn,'null' as catogery,'Lore 6 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/wr2WuLyOcqs_1VcHArJqIrLdl2JptvisI4wjWVCgGqY>Lore 6 ♡ MiberaMaker Design Document</a>' as articles, '0x7988434E1469d35fa5F442e649dE45D47c3df23C' as contract_address, 126 as total_supply
	--0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8
	union all
	select 7 as rn,'null' as catogery,'Lore 7 ♡ MiberaMaker Design Document' as title, '<a href=https://0xhoneyjar.mirror.xyz/A79gl6lTz-rZdHlrgaR4mt2EdghG6LUtVZp8PYAe5qc>Lore 7 ♡ MiberaMaker Design Document</a>' as articles, '0x96C200Ec4CcA0bc57444cFEe888cfbA78a1ddBD8' as contract_address, 107 as total_supply ) , zora_mint_data as (
	select 1 as token_id, 'mibera lore 1 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 2 as token_id, 'mibera lore 1 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 3 as token_id, 'mibera lore 1 ♡ music [Liquid Bears by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 4 as token_id, 'mibera lore 2 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 5 as token_id, 'mibera lore 2 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 6 as token_id, 'mibera lore 2 ♡ music [Okite by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 7 as token_id, 'mibera lore 3 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 8 as token_id, 'mibera lore 3 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 9 as token_id, 'mibera lore 3 ♡ music [Sleezy B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 10 as token_id, 'mibera lore 4 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 11 as token_id, 'mibera lore 4 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 12 as token_id, 'mibera lore 4 ♡ music [Declension B by babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 13 as token_id, 'mibera lore 5 ♡ poster' as title, 0.0033 as price, 271 as supply
	union all
	select 14 as token_id, 'mibera lore 5 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 15 as token_id, 'mibera lore 5 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 16 as token_id, 'mibera lore 6 ♡ poster' as title, 0.0033 as price, 126 as supply
	union all
	select 17 as token_id, 'mibera lore 6 ♡ video' as title, 0.0042 as price, 333 as supply
	union all
	select 18 as token_id, 'mibera lore 6 ♡ music [AKTV babybera]' as title, 0.0069 as price, 420 as supply
	union all
	select 19 as token_id, 'mibera lore 7 ♡ poster' as title, 0.33 as price, 107 as supply
	union all
	select 20 as token_id, 'mibera lore 7 ♡ video' as title, 0.42 as price, 107 as supply
	union all
	select 21 as token_id, 'mibera lore 7 ♡ music' as title, 0.69 as price, 107 as supply ) , zora_mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , price as cost_eth
	  , 'MiBera (Zora Collection)' as label
	from optimism.nft.ez_nft_transfers t
	LEFT JOIN zora_mint_data d on t.tokenid = d.token_id
	WHERE 1=1
	  AND NFT_ADDRESS = '0x427a8f2e608e185eece69aca15e535cd6c36aad8'
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	  ) , mirror_mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'MiBera (Mirror Articles)' as label
	from optimism.core.fact_transactions
	WHERE 1=1
	  AND tx_hash IN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	from optimism.nft.ez_nft_transfers
	
	
	WHERE 1=1
	
	
	  AND NFT_ADDRESS IN ( SELECT lower(contract_address) from article_data)
	
	
	  AND NFT_FROM_ADDRESS = '0x0000000000000000000000000000000000000000'
	
	 ) ) SELECT SUM(cost_eth) from mirror_mints UNION  SELECT SUM(cost_eth) from zora_mints



=======================================================================================
=======================================================================================
QUERY_NO: 850
QUERY_ID: 44b3d4e4-ed24-4080-823a-8c2bd6be1c46
QUERY_TITLE: special gas - over time copy

QUERY_STRING:

-- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  --AND block_number<4000000 ) SELECT
	 date_trunc('minute', block_timestamp) as dmin
	, COUNT(distinct wallet) as users
	, SUM(amount) as total_mon
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative from gas_base GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 851
QUERY_ID: 628128b8-9006-4fb4-8067-47fe244e3290
QUERY_TITLE: $ER

QUERY_STRING:

with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  --, tokenid
	  , mint_price_eth as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , '$ER (Article NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS = '0x80ad01392b9b4a85535ec0bbff13b74c8da81070' ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 852
QUERY_ID: 37951326-5c2a-4645-be4d-b1f0e108c9bb
QUERY_TITLE: THJ - HoneyComb & HoneyJar

QUERY_STRING:

-- forked from Cubhub @ https://flipsidecrypto.xyz/edit/queries/00d28c72-77d0-4544-9bb2-12ac23edeb58 -- forked from $ER @ https://flipsidecrypto.xyz/edit/queries/628128b8-9006-4fb4-8067-47fe244e3290 with eth_mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , FROM_ADDRESS as user
	  , VALUE as cost_eth
	  , 'The Honey Jar' as label
	from ethereum.core.fact_transactions
	WHERE 1=1
	  AND ORIGIN_FUNCTION_SIGNATURE IN ('0x5d84bbfa', '0x950db017')
	  AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	  AND STATUS = 'SUCCESS' ) , ohm_mints as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , FROM_ADDRESS as USER
	
	 , AMOUNT_USD/price as cost_eth
	
	 , 'The Honey Jar' as label
	  from ethereum.core.ez_token_transfers t
	
	LEFT JOIN (
	
	 SELECT price from crosschain.price.ez_prices_hourly WHERE SYMBOL='ETH' AND blockchain='ethereum' ORDER BY HOUR DESC LIMIT 1
	
	 )
	  WHERE 1=1
	
	  AND tx_hash in (
	
	
	
	 SELECT
	
	
	
	
	
	tx_hash
	
	
	
	 from ethereum.core.fact_transactions
	
	
	
	 WHERE 1=1
	
	
	
	
	AND ORIGIN_FUNCTION_SIGNATURE IN ('0x2a8d40e7', '0xe5c9b6b4')
	
	
	
	
	AND TO_ADDRESS = '0xb474f03c2c1e15596260cda307f7827cdd3fb749'
	
	
	
	
	AND STATUS = 'SUCCESS'
	
	
	)
	
	 AND t.SYMBOL = 'OHM'
	 ) SELECT SUM(cost_eth) from ohm_mints



=======================================================================================
=======================================================================================
QUERY_NO: 853
QUERY_ID: 76100738-536b-4600-88a0-c8693b821a12
QUERY_TITLE: The HoneyCast

QUERY_STRING:

-- forked from insrt finance (BongBear ShardVaults) @ https://flipsidecrypto.xyz/edit/queries/31b3cc87-cf5d-43c0-96ce-be1287156d90 -- forked from Beramoniom @ https://flipsidecrypto.xyz/edit/queries/96e90fdd-f479-40f8-a1b6-eeded959cc18 with mints as(
	SELECT
	
	block_timestamp
	  , tx_hash
	  , NFT_TO_ADDRESS as user
	  , MINT_PRICE_ETH as cost_eth
	
	-- , cost_eth * price as cost_usd
	  , 'The HoneyCast(THC NFT)' as label
	from ethereum.nft.ez_nft_mints
	WHERE 1=1
	  AND NFT_ADDRESS ='0xd65f95a40b6de26f6c390fcb8e3377d382fe678b'
	  --AND tx_hash = '0x8907b286355b1e1b78d03e5423bade33b4a9e09d584bcc5770ec66459204f2a2' ) SELECT * from mints



=======================================================================================
=======================================================================================
QUERY_NO: 854
QUERY_ID: 068cbb6b-9241-4627-94a4-e6af88a73c53
QUERY_TITLE: overview

QUERY_STRING:

-- forked from hourly  @ https://flipsidecrypto.xyz/studio/queries/6c739909-37ff-40b3-8d8f-62fd9e460f46 with base as (
	SELECT
	  --date_trunc('hour', block_timestamp) as dhour
	  COUNT(DISTINCT from_address) as users
	  , COUNT(DISTINCT tx_hash) as txns
	  , MAX(b.blocks) as blocks
	from monad.testnet.fact_transactions t
	LEFT JOIN (
	  SELECT
	
	  COUNT(1) as blocks
	  from monad.testnet.fact_blocks
	) b on 1=1
	WHERE 1=1 ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 855
QUERY_ID: a281ac54-d871-4f7f-8163-7a5460149da8
QUERY_TITLE: Quarterly Comparisons

QUERY_STRING:

with ranges as (
	SELECT
	
	TO_TIMESTAMP_NTZ('{{start_date}}') as start_date
	  , 4 as quarters
	
	UNION ALL
	
	 SELECT
	
	DATEADD('month', -3, start_date), quarters-1
	from ranges
	WHERE
	
	quarters>1 ) , q1_data as (
	with q1_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=1)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q1_merge ) , q2_data as (
	with q2_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=2)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q2_merge ) , q3_data as (
	with q3_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=3)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q3_merge ) , q4_data as (
	with q4_merge as (
	  ---arbitrum
	  SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	 UNION ALL
	
	---base
	
	SELECT *, 'base' as label from base.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---blitz
	  SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	
	---mantle
	  SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	  UNION ALL
	  ---sei
	  SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	  LEFT JOIN (SELECT * from ranges WHERE quarters=4)
	  WHERE 1=1
	
	 AND ( block_timestamp::date >= start_date AND DATEDIFF('month', start_date, block_timestamp::date) BETWEEN 0 and 2)
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	 AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	)
	SELECT
	  MAX('Q' || QUARTER(start_date) || '-' || YEAR(start_date)) as label
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  -- , MAX(block_timestamp::date) as max_date
	  -- , MIN(block_timestamp::date) as min_date
	from q4_merge ) , q1_data_str as (
	SELECT
	
	, *
	  , total_volume as total_volume_str
	  , total_orders as total_order_str
	  , unique_traders as unique_traders_str
	  , total_fees as total_fees_str
	from q1_data ) , q2_data_str as (
	SELECT
	
	c.label
	  , c.total_volume
	  , c.total_orders
	  , c.unique_traders
	  , c.total_fees
	from q2_data c
	 LEFT JOIN q1_data p on 1=1 ) , merged_data as (
	SELECT * from q1_data
	UNION ALL
	SELECT * from q2_data
	UNION ALL
	SELECT * from q3_data
	UNION ALL
	 SELECT * from q4_data ) , merged_data_fix as (
	SELECT
	  label
	  , TO_NUMBER(MAX(unique_traders)) AS unique_traders
	  , TO_NUMBER(MAX(total_orders)) AS total_orders
	  , TO_NUMBER(MAX(total_volume)) as total_volume
	  , TO_NUMBER(MAX(total_fees)) as total_fees
	from merged_data
	GROUP BY 1 ) SELECT * FROM (
	SELECT FIELD, label, VALUE
	FROM merged_data_fix
	UNPIVOT (VALUE FOR FIELD IN ( unique_traders, total_orders, total_volume, total_fees)) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from merged_data_fix) )



=======================================================================================
=======================================================================================
QUERY_NO: 856
QUERY_ID: 6c739909-37ff-40b3-8d8f-62fd9e460f46
QUERY_TITLE: hourly - block_metrics

QUERY_STRING:

with base as (
	SELECT
	  date_trunc('hour', block_timestamp) as dhour
	  , CASE WHEN tx_count=0 THEN 'Empty' ELSE 'Non-Empty' END as label
	  , COUNT(*) as blocks
	from monad.testnet.fact_blocks
	WHERE 1=1
	  AND block_timestamp>='2025-02-19'
	GROUP by 1, 2 ) SELECT * from base ORDER by dhour ASC



=======================================================================================
=======================================================================================
QUERY_NO: 857
QUERY_ID: 56761435-c1cc-4d18-9ed8-3c235036c159
QUERY_TITLE: hourly - txns/users copy

QUERY_STRING:

-- forked from hourly - txns/users @ https://flipsidecrypto.xyz/studio/queries/6c739909-37ff-40b3-8d8f-62fd9e460f46 with base as (
	SELECT
	  date_trunc('hour', block_timestamp) as dhour
	  , CASE WHEN nonce=0 THEN 'first-time user' ELSE 'normal' END as label
	  , COUNT(DISTINCT from_address) as users
	  , COUNT(DISTINCT tx_hash) as txns
	  , txns/(60*60) as tps
	from monad.testnet.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2025-02-19'
	GROUP by 1, 2 ) SELECT * from base ORDER by 1 ASC , 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 858
QUERY_ID: cdea2958-34aa-43dd-9c75-21c7ae293673
QUERY_TITLE: ALL Incentives - Base Stats

QUERY_STRING:

with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , merge as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) SELECT
	 label
	 , COUNT(DISTINCT claimer ) as claimers
	, SUM(token_amount) as tokens
	, SUM(amount_usd) as usd_val from merge GROUP BY  label



=======================================================================================
=======================================================================================
QUERY_NO: 859
QUERY_ID: 268ccb7b-dd3d-494a-ae7d-14eb3929743a
QUERY_TITLE: traces collection offer test

QUERY_STRING:

SELECT * from ronin.core.fact_traces WHERE 1=1
	AND tx_hash = '0x43d77844acaefff0d6dde53be62ea8fdb721a2d253f4da8891c340ea52555316'



=======================================================================================
=======================================================================================
QUERY_NO: 860
QUERY_ID: c1a7e5ba-898c-40c3-b270-efc178a8d2b4
QUERY_TITLE: tests - listing sales (single)

QUERY_STRING:

-- forked from tests - offer sales @ https://flipsidecrypto.xyz/studio/queries/dc7f86ec-73c6-49a2-a7d4-6e0c3ae30b58 with listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) -- SELECT * from offer_sales -- LIMIT 100  -- SELECT * from ronin.core.fact_event_logs -- WHERE tx_hash = '0x003f4c67c158ac55a515026d5d82840c96d6958b40f6651945904e42cd877b1d' --
	AND contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy --
	AND TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda' --
	AND origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' select * from listing_sales LIMIT 10000



=======================================================================================
=======================================================================================
QUERY_NO: 861
QUERY_ID: acd53370-1af3-4a53-9ab9-6b377282a861
QUERY_TITLE: ALL Incentives - Cumulatives

QUERY_STRING:

-- forked from ALL Incentives - Base Stats @ https://flipsidecrypto.xyz/studio/queries/cdea2958-34aa-43dd-9c75-21c7ae293673 with arb_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0x5435ed64'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, CASE WHEN block_timestamp BETWEEN '2023-11-08' AND '2024-06-27' THEN 'ARB (STIP-1)' ELSE 'ARB (STIP-2)' END as label
	FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0x75A99528b5FC4D328473032c9f390db7C8BabdF1')
	  AND tx_hash IN (SELECT tx_hash from base) ) , vertex_claims as (
	with base as (
	  SELECT
	
	  *
	  from arbitrum.core.fact_transactions
	  WHERE 1=1
	
	 AND to_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	
	 AND ORIGIN_FUNCTION_SIGNATURE='0xb297cf44'
	
	 --and tx_hash = lower('0x80a90bfea5f9383f0387c46c493001d8085238e127ee27be4cb6211cdfac884f')
	)
	
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as sender
	  , to_address as claimer
	
	, amount as token_amount
	  , amount_usd
	  , symbol
	
	, 'VRTX (T&E)' label
	 FROM arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND from_address = lower('0xAfE39cD8e17Fa4172144ff95274BB665dA411F80')
	  AND tx_hash IN (SELECT tx_hash from base)
	  AND block_timestamp>= '2023-11-28' ---The initial 80M+ is likely the initial token phase as that was allocated ~100M tokens, skipping claims from 20th onward ) , merge as (
	SELECT * from arb_claims
	UNION ALL
	 SELECT * from vertex_claims ) , dates as (
	SELECT
	
	date_day as ddate
	  , label
	from ethereum.core.dim_dates d
	 LEFT JOIN  (SELECT DISTINCT label from merge) l ON 1=1
	WHERE 1=1
	  AND ddate BETWEEN '2023-11-28' AND CURRENT_DATE-1 ) , stats as (
	SELECT
	  ddate
	
	, d.label
	
	, COUNT(DISTINCT claimer ) as claimers
	  , SUM(coalesce(token_amount,0)) as tokens
	  , SUM(coalesce(amount_usd,0)) as usd_val
	from dates d
	 LEFT JOIN merge m ON d.ddate=m.block_timestamp::date AND d.label=m.label
	GROUP BY  ddate, d.label  ) SELECT
	 *
	, SUM(USD_VAL) OVER (PARTITION by label ORDER BY ddate ASC) as usd_val_running from stats ORDER BY ddate ASC , label ASC -- SELECT * from dates



=======================================================================================
=======================================================================================
QUERY_NO: 862
QUERY_ID: c6a7a17e-8f91-4252-9f0f-56384bc0ed91
QUERY_TITLE: Quarterly Comparisons Optimized (+ instance param) copy

QUERY_STRING:

-- forked from Quarterly Comparisons Optimized (+ instance param) @ https://flipsidecrypto.xyz/studio/queries/095d8b87-145b-4c65-a90d-342b80270baf -- forked from Quarterly Comparisons Optimized (EDGE Excluded)  @ https://flipsidecrypto.xyz/studio/queries/0527b0dc-7cba-4b3e-9507-57f43d07bcf8 -- forked from Quarterly Comparisons Strings+Emojis Optimized (EDGE included) @ https://flipsidecrypto.xyz/studio/queries/ef7b409d-a864-4e78-9961-bc7392a1814f with trades_data as (
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND (
	  --
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	  --
	  'all' = lower('{{instance_quarters}}')
	
	--
	  AND trader != '0x0000000000000000000000000000000000000000'
	  --
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	  --
	)
	  --
	OR
	
	--
	( -- individual instance, no need to filter EDGE
	  --
	  label = lower('{{instance_quarters}}')
	  --
	)
	  -- )
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND (
	  --
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	  --
	  'all' = lower('{{instance_quarters}}')
	
	--
	  AND trader != '0x0000000000000000000000000000000000000000'
	  --
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	  --
	)
	  --
	OR
	
	--
	( -- individual instance, no need to filter EDGE
	  --
	  label = lower('{{instance_quarters}}')
	  --
	)
	  -- )
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND (
	  --
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	  --
	  'all' = lower('{{instance_quarters}}')
	
	--
	  AND trader != '0x0000000000000000000000000000000000000000'
	  --
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	  --
	)
	  --
	OR
	
	--
	( -- individual instance, no need to filter EDGE
	  --
	  label = lower('{{instance_quarters}}')
	  --
	)
	  -- )
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND (
	  --
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	  --
	  'all' = lower('{{instance_quarters}}')
	
	--
	  AND trader != '0x0000000000000000000000000000000000000000'
	  --
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	  --
	)
	  --
	OR
	
	--
	( -- individual instance, no need to filter EDGE
	  --
	  label = lower('{{instance_quarters}}')
	  --
	)
	  -- )
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{start_date}}', block_timestamp::date) BETWEEN -9 and 2)
	  -- AND (
	  --
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	  --
	  'all' = lower('{{instance_quarters}}')
	
	--
	  AND trader != '0x0000000000000000000000000000000000000000'
	  --
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	  --
	)
	  --
	OR
	
	--
	( -- individual instance, no need to filter EDGE
	  --
	  label = lower('{{instance_quarters}}')
	  --
	)
	  -- ) ) , daily_avg_traders as (
	SELECT
	
	year_num
	  , quarter_num
	
	, AVG(traders) as daily_avg_traders
	  , AVG(trades) as daily_avg_trades
	from (
	  SELECT
	
	  YEAR(block_timestamp) as year_num
	
	 , QUARTER(block_timestamp) as quarter_num
	
	 , block_timestamp::date as ddate
	
	 , COUNT(DISTINCT trader) as traders
	
	 , COUNT(DISTINCT digest) as trades
	  from trades_data
	  WHERE 1=1
	
	 AND (
	
	
	( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	  'all' = lower('{{instance_quarters}}')
	
	
	
	AND trader != '0x0000000000000000000000000000000000000000'
	
	
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	)
	
	
	OR
	
	
	 ( -- individual instance, no need to filter EDGE
	
	
	  label = lower('{{instance_quarters}}')
	
	
	)
	
	 )
	  GROUP BY 1, 2, 3
	)
	GROUP BY 1, 2 ) , aggrs as (
	SELECT
	  YEAR(block_timestamp) as year_num
	  , QUARTER(block_timestamp) as quarter_num
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  , COUNT(DISTINCT block_timestamp::date) as span_days
	  , MAX(daily_avg_traders) as daily_avg_traders
	  , MAX(daily_avg_trades) as daily_avg_trades
	  , ROUND(total_orders/span_days, 0) as daily_avg_orders
	  , ROUND(total_volume/span_days, 2) as daily_avg_volume
	  , ROUND(total_fees/span_days, 2) as daily_avg_fees
	  , MAX(block_timestamp::date) as max_date
	  , MIN(block_timestamp::date) as min_date
	from trades_data a
	 LEFT JOIN daily_avg_traders t on (YEAR(a.block_timestamp)=t.year_num AND QUARTER(a.block_timestamp)=t.quarter_num)
	WHERE 1=1
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance_quarters}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance_quarters}}')
	
	 )
	  )
	GROUP BY 1, 2
	ORDER BY 1 ASC, 2 ASC ) , delta_strs as (
	SELECT
	  *
	  , lag(unique_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_unique_traders
	  , lag(total_orders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_orders
	  , lag(total_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_volume
	  , lag(total_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_fees
	  , lag(daily_avg_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_traders
	  , lag(daily_avg_trades) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_trades
	  , lag(daily_avg_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_volume
	  , lag(daily_avg_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_fees
	  -- calculate deltas
	  , ROUND(((unique_traders-p_unique_traders)/p_unique_traders)*100, 2) as traders_delta
	  , ROUND(((total_orders-p_total_orders)/p_total_orders)*100, 2) as orders_delta
	  , ROUND(((total_volume-p_total_volume)/p_total_volume)*100, 2) as vol_delta
	  , ROUND(((total_fees-p_total_fees)/p_total_fees)*100, 2) as fees_delta
	  , ROUND(((daily_avg_traders-p_daily_avg_traders)/p_daily_avg_traders)*100, 2) as dat_delta
	  , ROUND(((daily_avg_volume-p_daily_avg_volume)/p_daily_avg_volume)*100, 2) as dav_delta
	  , ROUND(((daily_avg_fees-p_daily_avg_fees)/p_daily_avg_fees)*100, 2) as daf_delta
	  , ROUND(((daily_avg_trades-p_daily_avg_trades)/p_daily_avg_trades)*100, 2) as dats_delta
	  -- stringify
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00')
	
	 ) as vol_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999')
	
	 ) as orders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN traders_delta>=0 THEN '↗️' ELSE '🔻' END) || traders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999')
	
	 ) as traders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN fees_delta>=0 THEN '↗️' ELSE '🔻' END) || fees_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00')
	
	 ) as fees_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999') || ' (' || (CASE WHEN dat_delta>=0 THEN '↗️' ELSE '🔻' END) || dat_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999')
	
	 ) as dat_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN dav_delta>=0 THEN '↗️' ELSE '🔻' END) || dav_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00')
	
	 ) as dav_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN daf_delta>=0 THEN '↗️' ELSE '🔻' END) || daf_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00')
	
	 ) as daf_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00') || ' (' || (CASE WHEN dats_delta>=0 THEN '↗️' ELSE '🔻' END) || dats_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00')
	
	 ) as dats_str
	from aggrs ) , refine as (
	SELECT
	
	('Q' || quarter_num || '-' || year_num) as label
	  , MAX(vol_str) as TOTAL_VOLUME
	  , MAX(fees_str) as TOTAL_FEES
	  , MAX(traders_str) as TOTAL_TRADERS
	  , MAX(orders_str) as TOTAL_TRADES
	  , MAX(dav_str) as DAILY_AVG_VOLUME
	  , MAX(daf_str) as DAILY_AVG_FEES
	  , MAX(dat_str) as DAILY_AVG_TRADERS
	  , MAX(dats_str) as DAILY_AVG_TRADES
	from delta_strs
	GROUP BY 1 ) , quarters as (
	SELECT
	
	year_num
	  , quarter_num
	  ,('Q' || quarter_num || '-' || year_num) as label
	from aggrs
	ORDER BY 1 ASC, 2 ASC  ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM refine
	UNPIVOT (VALUE FOR METRIC IN ( TOTAL_VOLUME, TOTAL_FEES, TOTAL_TRADERS, TOTAL_TRADES, DAILY_AVG_VOLUME, DAILY_AVG_FEES, DAILY_AVG_TRADERS, DAILY_AVG_TRADES )) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from quarters) ) ORDER BY metric DESC



=======================================================================================
=======================================================================================
QUERY_NO: 863
QUERY_ID: 8640d928-4d25-41a6-af9c-73e1d9566759
QUERY_TITLE: price/mcap/fdv base

QUERY_STRING:

with supplies as (
	SELECT
	
	livequery.live.udf_api('https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply'):data as total_supply
	  , livequery.live.udf_api('https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=circulating_supply'):data as circ_supply ) , price as (
	SELECT
	  PRICE
	from arbitrum.price.ez_prices_hourly
	WHERE 1=1
	  AND token_address = lower('0x95146881b86B3ee99e63705eC87AfE29Fcc044D9')
	qualify row_number() OVER (ORDER BY HOUR DESC) =1
	LIMIT 1 ) SELECT
	 PRICE
	, ROUND(TOTAL_SUPPLY, 1) as total_supply
	, ROUND(CIRC_SUPPLY, 1) as circ_supply
	, ROUND(PRICE*circ_supply, 2) as mcap
	, ROUND(PRICE*total_supply, 2) as fdv
	  , ROUND((circ_supply/total_supply)*100, 2) as dilution_status from supplies LEFT JOIN price on 1=1



=======================================================================================
=======================================================================================
QUERY_NO: 864
QUERY_ID: d70577bf-4be3-4494-8f88-829ca56a9074
QUERY_TITLE: contracts

QUERY_STRING:

SELECT * from ronin.core.dim_labels WHERE 1=1
	AND address= '0x245db945c485b68fDc429E4F7085a1761Aa4d45d'



=======================================================================================
=======================================================================================
QUERY_NO: 865
QUERY_ID: 4e6e1a84-84be-489f-83a8-4bbe7194c337
QUERY_TITLE: traces direct sales test 

QUERY_STRING:

-- forked from traces collection offer test @ https://flipsidecrypto.xyz/studio/queries/268ccb7b-dd3d-494a-ae7d-14eb3929743a SELECT * from ronin.core.fact_traces WHERE 1=1
	AND tx_hash = '0x6374aa1af4ab55a5bd0fb2baee109fde79580e49c043ad014f62fa64cea38116'



=======================================================================================
=======================================================================================
QUERY_NO: 866
QUERY_ID: f6ce862a-95fb-463a-8d3c-c33ec9b04c48
QUERY_TITLE: bitflag/uni hooks ANT

QUERY_STRING:

-- forked from Antonidas / bitflag hexa @ https://flipsidecrypto.xyz/Antonidas/q/o0WOUO7xq7Ld/bitflag-hexa with raws as ( select ethereum.public.udf_hex_to_int('0x1aaa') as hook_flag ) select
	CASE WHEN BITAND(hook_flag, pow(2,0))  = 0 THEN FALSE ELSE TRUE END as flag_0 , CASE WHEN BITAND(hook_flag, pow(2,1))  = 0 THEN FALSE ELSE TRUE END as flag_1 , CASE WHEN BITAND(hook_flag, pow(2,2))  = 0 THEN FALSE ELSE TRUE END as flag_2 , CASE WHEN BITAND(hook_flag, pow(2,3))  = 0 THEN FALSE ELSE TRUE END as flag_3 , CASE WHEN BITAND(hook_flag, pow(2,4))  = 0 THEN FALSE ELSE TRUE END as flag_4 , CASE WHEN BITAND(hook_flag, pow(2,5))  = 0 THEN FALSE ELSE TRUE END as flag_5 , CASE WHEN BITAND(hook_flag, pow(2,6))  = 0 THEN FALSE ELSE TRUE END as flag_6 , CASE WHEN BITAND(hook_flag, pow(2,7))  = 0 THEN FALSE ELSE TRUE END as flag_7 , CASE WHEN BITAND(hook_flag, pow(2,8))  = 0 THEN FALSE ELSE TRUE END as flag_8 , CASE WHEN BITAND(hook_flag, pow(2,9))  = 0 THEN FALSE ELSE TRUE END as flag_9 , CASE WHEN BITAND(hook_flag, pow(2,10)) = 0 THEN FALSE ELSE TRUE END as flag_10 , CASE WHEN BITAND(hook_flag, pow(2,11)) = 0 THEN FALSE ELSE TRUE END as flag_11 , CASE WHEN BITAND(hook_flag, pow(2,12)) = 0 THEN FALSE ELSE TRUE END as flag_12 , CASE WHEN BITAND(hook_flag, pow(2,13)) = 0 THEN FALSE ELSE TRUE END as flag_13 , CASE WHEN BITAND(hook_flag, pow(2,14)) = 0 THEN FALSE ELSE TRUE END as flag_14 from raws



=======================================================================================
=======================================================================================
QUERY_NO: 867
QUERY_ID: e53c97a5-4ef0-405b-9468-3a91c6952fe8
QUERY_TITLE: VRTX Total Stake Vs. Circ Supply

QUERY_STRING:

-- forked from VRTX net_stake over time @ https://flipsidecrypto.xyz/studio/queries/772e5dc8-435e-43c1-9b50-cffe8e227f08 with base as (
	with merge as (
	  SELECT
	
	  block_timestamp::date as ddate
	
	 , stake_action
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT_USD ELSE AMOUNT_USD *(-1) END) as amount_usd
	
	 , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END ) as amount_token
	  from arbitrum.vertex.ez_staking_actions
	  WHERE 1=1
	
	 AND stake_action!='migrate-stake'
	
	 AND symbol = 'VRTX'
	  GROUP BY 1, 2
	)
	
	SELECT
	
	ddate
	  , CASE WHEN ddate<'2024-09-09' THEN 'pre-Vertical' ELSE 'post-Vertical' END as label
	  , SUM(amount_usd) as amount_usd
	  , SUM(amount_token) as amount_token
	from merge
	GROUP BY 1, 2
	 ) SELECT
	 SUM(amount_token) as total_stake
	, livequery.live.udf_api('https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=circulating_supply'):data as circ_supply
	, ROUND((total_stake/circ_supply)*100, 2) as stake_perc from base



=======================================================================================
=======================================================================================
QUERY_NO: 868
QUERY_ID: d2eac045-ed58-4d36-aff3-b42b5b4a965c
QUERY_TITLE: Daily Stats (Supply/APY/Issuance)

QUERY_STRING:

with active_validators as (
	SELECT
	
	slot_timestamp::date as ddate
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') THEN pubkey END)) as validators
	  , validators * 32 as eth_staked
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('pending_queued') THEN pubkey END)) as validators_pending
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_exiting') THEN pubkey END)) as validators_exiting
	from ethereum.beacon_chain.fact_validators v
	LEFT JOIN ethereum.beacon_chain.fact_blocks b ON v.slot_number = b.slot_number
	WHERE 1=1
	  AND slot_timestamp>='2022-09-16'
	  --AND validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') -- 'exited_unslashed', 'exited_slashed')
	GROUP BY 1
	--AND max_active>min_exit  --sanity test: so far has never happened  -> validator once exited has never restarted/became active again ) , pf_burns as (
	with block_level as (
	  ----block level for testing/accuracy
	  SELECT
	
	 b.block_number
	
	 , b.block_timestamp
	
	 , SUM(t.tx_fee) as total_txn_fees
	
	 , MAX(CASE WHEN t.block_number >=12965000 THEN b.gas_used * b.BLOCK_HEADER_JSON:"baseFeePerGas"/1e18 ELSE 0 END) as burn --london fork, formula of burn from alchemy (August 5th, 2021)
	
	 --, SUM(t.gas_used * (t.gas_price-b.BLOCK_HEADER_JSON:"baseFeePerGas")/1e18) as pf_reward -- TOO COMPLICATED SHIT
	
	 , GREATEST(total_txn_fees-burn, 0) as pf_reward  -- far simpler calc as per etherscan if you already have the burn part// First 0 is block_rewards which are 0 since merge
	  from ethereum.core.fact_transactions t
	
	LEFT JOIN ethereum.core.fact_blocks b on b.block_number = t.block_number
	  WHERE 1=1
	
	 AND b.block_timestamp>='2022-09-16'
	
	 --AND b.block_number = 20764985
	
	 -- reward: 0.03376067686372955 ETH (0 + 0.08309174915568116 - 0.04933107229195161)
	  GROUP BY 1, 2
	)
	SELECT
	
	date_trunc('day', block_timestamp) as ddate
	  , SUM(burn) as burns
	  , SUM(pf_reward) as priority_fee_rewards
	from block_level
	GROUP BY 1 ) , combine as (
	-- READ ISSUANCE DETAILS for formulas used: https://eth2book.info/capella/part2/incentives/issuance/#overall-issuance
	-- Issuance/APY/block rewards shoutout/credits to Danning/DataAlways
	SELECT
	
	s.ddate
	  , 0 + (940.8659/365 * sqrt(validators)) as daily_issuance -- daily staking rewards, the 0 is block_rewards as no flat block_rewards after merge
	
	, 120527358.75953972 + SUM(daily_issuance-burns) OVER (ORDER BY s.ddate) AS circ_supply --120527358.75953972 = approx supply on 2022-09-15 - Day of Merge
	  , eth_staked
	  , (eth_staked / circ_supply) * 100 AS stake_ratio
	  , validators
	  --, wallets
	
	, priority_fee_rewards
	  , burns
	  , 29.4021/sqrt(floor(validators)) AS consensus_apr -- Where does 29.4021 come from? idk
	  , (priority_fee_rewards)/lag(eth_staked,1) over (order by s.ddate)*365 as fee_apy
	  , (fee_apy + consensus_apr)*100 as total_apy_perc
	from active_validators s
	LEFT JOIN pf_burns b on s.ddate = b.ddate ) SELECT
	 ddate
	, circ_supply
	, eth_staked
	, stake_ratio
	, validators
	--, wallets
	, daily_issuance
	, priority_fee_rewards
	, burns
	, consensus_apr
	, fee_apy
	, total_apy_perc
	, AVG(total_apy_perc) OVER (ORDER BY ddate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as  total_apy_7dma from combine WHERE ddate>='2022-09-17' ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 869
QUERY_ID: 5c777828-b341-4943-ad67-414e2c3c4d5d
QUERY_TITLE: Stake Flows (Monthly)

QUERY_STRING:

with deposits as (
	SELECT
	
	date_trunc('month', block_timestamp) as dmonth
	  , 'validator_init' as label
	  , SUM(deposit_amount) as eth_amount --NOT always 32E
	from ethereum.beacon_chain.ez_deposits
	WHERE 1=1
	GROUP BY 1, 2 ) , exits as (
	SELECT
	
	date_trunc('month', w.block_timestamp) as dmonth
	  , 'validator_exits' as label
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END ---ignoring summing/taking into account other values - > staking reward withdrawals
	
	 ) as eth_amount
	from ethereum.beacon_chain.ez_withdrawals w
	WHERE 1=1
	GROUP BY 1, 2 ) , rewards as (
	SELECT
	
	date_trunc('month', w.block_timestamp) as dmonth
	  , 'rewards_withdrawal' as label
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT <20 THEN -WITHDRAWAL_AMOUNT END
	
	  ) as eth_amount
	from ethereum.beacon_chain.ez_withdrawals w
	GROUP BY 1, 2 ) , merge as (
	SELECT * from deposits
	UNION ALL
	 SELECT * from exits
	UNION ALL
	SELECT * from rewards ) , netflow as (
	SELECT
	  dmonth
	  , SUM(CASE WHEN label IN ('validator_exits', 'validator_init') THEN eth_amount END ) as netflow
	  , COUNT(distinct LABEL) as categories
	from (
	  SELECT * from merge
	)
	GROUP BY 1 ) SELECT
	 m.dmonth
	, label
	, ROUND(eth_amount, 2) as eth_amount
	, categories
	, ROUND(netflow/categories,0) as netflows from merge m LEFT JOIN netflow n using(dmonth) ORDER BY dmonth ASC, LABEL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 870
QUERY_ID: 54d52496-ed17-4f0a-a09c-f5f20665c357
QUERY_TITLE: bulk sale

QUERY_STRING:

-- forked from direct sale @ https://flipsidecrypto.xyz/studio/queries/ca41e48f-c68d-4aa1-8028-e85585a649ea -- forked from collection offer @ https://flipsidecrypto.xyz/studio/queries/5f705eb9-e784-4ed2-9f62-b8f6be853b44 SELECT * from ronin.core.ez_decoded_event_logs WHERE 1=1
	AND tx_hash = '0xd2de2f235cfb1ed5c88a9a0b15bc316189f4bb94ffda0fa1ae74f81f8714b00b'
	 --OrderMatched



=======================================================================================
=======================================================================================
QUERY_NO: 871
QUERY_ID: 8488c887-8813-46ff-9bc5-d362cf595dca
QUERY_TITLE: special gas - relative wallet rank

QUERY_STRING:

-- forked from special gas - leaderboard @ https://flipsidecrypto.xyz/studio/queries/83dcf822-1bc2-46b9-aef1-c650d475b469 -- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  AND block_number<4000000 ) , aggr as (
	SELECT
	
	wallet
	  , SUM(amount) as mon_gas_totals
	  , COUNT(DISTINCT tx_hash) as payout_txns
	  from gas_base
	GROUP BY 1
	ORDER BY 2 DESC ) SELECT
	 *
	 , rank() OVER (ORDER BY mon_gas_totals DESC) as rank from aggr WHERE 1=1 qualify wallet = '{{user_wallet}}'



=======================================================================================
=======================================================================================
QUERY_NO: 872
QUERY_ID: bc7e6bf2-86d6-4eab-8d1e-2b05fb5b4ca8
QUERY_TITLE: poison test joins

QUERY_STRING:

-- forked from poison test windows @ https://flipsidecrypto.xyz/studio/queries/c0ecc203-2f26-460d-93b9-16f7f8edb669 with sends as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'sends' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_from as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111' ) , receipts as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'receipts' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_to as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111'  )
	
	SELECT
	 s.*
	, r.tx_from as matched_sender
	, r.tx_id as sent_tx
	, r.block_timestamp as send_ts
	, row_number() OVER (PARTITION BY s.wallet, s.tx_to, matched_sender ORDER BY s.block_timestamp ASC) as ranks from sends s LEFT JOIN receipts r ON (
	s.block_timestamp<r.block_timestamp
	 AND s.wallet = r.wallet
	 AND s.tx_to != r.tx_from
	AND substring(s.tx_to, 1, 3) = substring(r.tx_from, 1, 3) ) WHERE 1=1
	AND matched_sender IS NOT NULL qualify ranks=1



=======================================================================================
=======================================================================================
QUERY_NO: 873
QUERY_ID: f14b10f4-ad6f-4064-8c93-9a3f77cf39af
QUERY_TITLE: delegateRewards test

QUERY_STRING:

-- forked from txns by orig_function @ https://flipsidecrypto.xyz/studio/queries/630b1920-2506-4419-86da-1c41b3c7033b -- forked from events @ https://flipsidecrypto.xyz/studio/queries/219b61c1-a535-4c85-aec1-af27f0fa2eca with events as (
	SELECT
	  tx_hash
	  , COUNT(*) as totals
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND origin_function_signature = '0x097e4a9d'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	GROUP BY 1 ) SELECT
	totals
	, COUNT (DISTINCT tx_hash) as counts
	 , MAX(tx_hash) as sample1
	, MIN(tx_hash) as sample2 from events GROUP by 1



=======================================================================================
=======================================================================================
QUERY_NO: 874
QUERY_ID: 2d668dbe-fb24-47d5-a361-3e3ef83a8c29
QUERY_TITLE: hourly -  block_time/gas util

QUERY_STRING:

-- forked from hourly - block_metrics @ https://flipsidecrypto.xyz/studio/queries/6c739909-37ff-40b3-8d8f-62fd9e460f46 with base as (
	SELECT
	  block_timestamp
	  , block_number
	  , tx_count
	  , gas_used
	  , gas_limit
	  , lag(block_timestamp) OVER (order by block_number ASC) as p_block_timestamp
	from monad.testnet.fact_blocks
	WHERE 1=1
	  AND block_timestamp>='2025-02-19' ) SELECT
	date_trunc('hour', block_timestamp) as dhour
	, COUNT(*) as blocks
	, AVG(DATEDIFF('seconds', p_block_timestamp, block_timestamp)) as block_time_avg
	, (60*60)/ COUNT(*) as block_time
	-- these are actually stupid to do
	-- , MEDIAN(DATEDIFF('seconds', p_block_timestamp, block_timestamp)) as block_time_median
	-- , MODE(DATEDIFF('seconds', p_block_timestamp, block_timestamp)) as block_time_mode
	-- only include non-empty blocks for gas_util perc stats
	, AVG(CASE WHEN tx_count!=0 THEN ROUND((gas_used/gas_limit)*100, 2) ELSE NULL END) as gas_utilization_perc from base GROUP BY 1 having block_time_avg!=block_time ORDER BY dhour ASC



=======================================================================================
=======================================================================================
QUERY_NO: 875
QUERY_ID: 70468560-7b4f-4d7a-ab9d-d43c78540caf
QUERY_TITLE: hourly - txns/users no labels

QUERY_STRING:

-- forked from hourly - txns/users copy @ https://flipsidecrypto.xyz/studio/queries/56761435-c1cc-4d18-9ed8-3c235036c159 -- forked from hourly - txns/users @ https://flipsidecrypto.xyz/studio/queries/6c739909-37ff-40b3-8d8f-62fd9e460f46 with base as (
	SELECT
	  date_trunc('hour', block_timestamp) as dhour
	  , COUNT(DISTINCT from_address) as users
	  , COUNT(DISTINCT tx_hash) as txns
	  , txns/(60*60) as tps
	from monad.testnet.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2025-02-19'
	GROUP by 1  ) SELECT * from base ORDER by 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 876
QUERY_ID: 3e1f7973-8755-4726-90b7-386eb7e3f02e
QUERY_TITLE: EDGE Cumu Bars - maker

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ) SELECT
	1 as num
	 , label
	, SUM(volume) as total_vol from edge_vols GROUP BY num,label ORDER BY label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 877
QUERY_ID: faec2041-9847-43b8-bb78-fd103c8f9515
QUERY_TITLE: [NEAR] TPS

QUERY_STRING:

with tps as (
	SELECT
	
	COUNT(*) as total,
		date_trunc('day', block_timestamp) as ddate
	from flipside_prod_db.mdao_near.transactions
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2
		AND substr(tx_receipt[0]:"outcome":"status",3,7) ILIKE 'success'
	GROUP BY ddate ) SELECT
	ddate,
	round(total/86400, 2) as tps from tps



=======================================================================================
=======================================================================================
QUERY_NO: 878
QUERY_ID: ff8a30f9-41c8-4415-8da1-2fafeb70e0a4
QUERY_TITLE: comm table test - table/model O-MID 9march

QUERY_STRING:

-- forked from comm table test - table/model @ https://flipsidecrypto.xyz/studio/queries/a2263d52-0650-4a4a-bd79-982cab9e31a4 SELECT
	 block_timestamp::date as ddate
	, action
	, SUM(AMOUNT) as stake from community.ronin.staking_actions WHERE 1=1
	AND block_timestamp::date = '2025-03-09' GROUP BY 1, 2 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 879
QUERY_ID: fb8deb96-c78a-479c-9603-cfb5eeebd6ae
QUERY_TITLE: [NEAR] Block Times

QUERY_STRING:

with sol as (
	SELECT
	
	block_height as block,
		block_timestamp,
		'sol' as cat,
	  lag(block_timestamp, 1) OVER (ORDER BY block_height) as ptime
	from solana.core.fact_blocks
	 WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2 ), eth as (
	SELECT
	
	block_number as block,
		block_timestamp,
		'eth' as cat,
	  lag(block_timestamp, 1) OVER (ORDER BY block_number) as ptime
	from ethereum.core.fact_blocks
	 WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2 ), near as (
	SELECT
	
	block_height as block,
		block_timestamp,
		'near' as cat,
	  lag(block_timestamp, 1) OVER (ORDER BY block_height) as ptime
	from flipside_prod_db.mdao_near.blocks
	WHERE 1=1
		AND block_timestamp BETWEEN  CURRENT_DATE-20 AND CURRENT_DATE-2 ),
	 merge as (
	SELECT * from sol
	 UNION ALL
	SELECT * from eth
	 UNION ALL
	SELECT * from near
	  ) SELECT
	date_trunc('day', block_timestamp) as ddate,
	AVG(TIMEDIFF(milliseconds, ptime, block_timestamp)) as block_time,
		cat from merge  group by ddate, cat



=======================================================================================
=======================================================================================
QUERY_NO: 880
QUERY_ID: f263ab16-ff31-49e9-b9c3-197246ccbe55
QUERY_TITLE: native_stake_actions tallies

QUERY_STRING:

-- forked from native_stake_actions @ https://flipsidecrypto.xyz/studio/queries/e6ae97a5-9a59-4548-aacb-271b2d3eb744 with delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  SELECT
	COUNT(*) as totals
	, COUNT(DISTINCT tx_hash) as txns from(
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , event_index
	  , action
	  , wallet
	  , validator
	  , amount
	from merge
	WHERE 1=1
	  AND block_timestamp::date<='2025-03-23' )



=======================================================================================
=======================================================================================
QUERY_NO: 881
QUERY_ID: 3d575917-af2a-40bc-8129-2f45a08ee7b4
QUERY_TITLE: Magic Eden - $ME Claim Txs. copy

QUERY_STRING:

-- forked from marqu / Magic Eden - $ME Claim Txs. @ https://flipsidecrypto.xyz/marqu/q/GSnx5348E9im/magic-eden---me-claim-txs. with  claim_txs as (
	select
	
	  block_timestamp
	  , tx_id
	  , signers[0] as fee_payer
	  , instruction :accounts[4] as claimant
	  , utils.udf_hex_to_int(to_char(reverse(to_binary(substr(utils.udf_base58_to_hex(instruction :data), 19, 16))))) / pow(10, 6) as amount
	
	from solana.core.fact_events
	where succeeded
	  and fact_events.program_id = 'disGCfSiJKFigEphfou4PGHn1rukMfbs9cg9GpTM6oe'
	  and substr(utils.udf_base58_to_hex(fact_events.instruction :data), 3, 16) = '4eb1627bd215bb53' -- New Claim
	  and block_timestamp >= '2024-12-10 14:05:13.000' ) select * from claim_txs limit 100



=======================================================================================
=======================================================================================
QUERY_NO: 882
QUERY_ID: cc44337b-ecc7-414f-916e-589cef99ae4e
QUERY_TITLE: poison test joins copy

QUERY_STRING:

-- forked from poison test joins @ https://flipsidecrypto.xyz/studio/queries/bc7e6bf2-86d6-4eab-8d1e-2b05fb5b4ca8 -- forked from poison test windows @ https://flipsidecrypto.xyz/studio/queries/c0ecc203-2f26-460d-93b9-16f7f8edb669 with sends as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'sends' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_from as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111' ) , receipts as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'receipts' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_to as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111'  )
	
	SELECT
	 s.*
	, r.tx_from as matched_sender
	, r.tx_id as sent_tx
	, r.block_timestamp as send_ts
	, row_number() OVER (PARTITION BY s.wallet, s.tx_to, matched_sender ORDER BY s.block_timestamp ASC) as ranks from sends s LEFT JOIN receipts r ON (
	s.block_timestamp<r.block_timestamp
	 AND s.wallet = r.wallet
	 AND s.tx_to != r.tx_from
	AND substring(s.tx_to, 1, 3) = substring(r.tx_from, 1, 3) ) WHERE 1=1
	AND matched_sender IS NOT NULL qualify ranks=1



=======================================================================================
=======================================================================================
QUERY_NO: 883
QUERY_ID: 1559bf8f-7fd2-4743-b905-eaeafe88ee95
QUERY_TITLE: daily stats

QUERY_STRING:

-- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/e3ee9fde-7c78-4a72-add7-9a9d880f215d -- forked from base sales search @ https://flipsidecrypto.xyz/studio/queries/a0f255cb-4118-4ac1-80ef-5e0cfaa05aaa with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) , listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) , bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing-bulk' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) , merge as (
	--ignore fields with type conflict due to bulk logic like seller/qty/token_ids...for sanity
	SELECT
	
	block_timestamp
	  , tx_hash
	
	, label
	  , buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from offer_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from bulk_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from listing_sales ) SELECT
	block_timestamp::date as ddate
	, label
	, COUNT(DISTINCT tx_hash) as total_trades
	, SUM(quantity) as total_items
	, SUM(amount_usd) as total_volume_usd
	, COUNT(DISTINCT buyer) as unique_buyers  from merge GROUP BY 1, 2



=======================================================================================
=======================================================================================
QUERY_NO: 884
QUERY_ID: 53290fd5-4a4a-405b-a215-74fb1b3dfa4f
QUERY_TITLE: txns/wallets

QUERY_STRING:

SELECT
	date_trunc('hour', block_timestamp) as dhour
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT sender) as wallets
	, txns/3600 as tps from movement.core.fact_transactions WHERE 1=1
	AND tx_type = 'user_transaction'
	AND block_timestamp>= '2025-03-10 15:00'
	AND success GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 885
QUERY_ID: fe164ade-57a9-4975-8b7d-1ef4df93904f
QUERY_TITLE: [ENS][Q2] Claims % by date

QUERY_STRING:

with all_tokens as (
	  SELECT MAX(AMOUNT/1e18) as "tokens", origin_address, tx_id, date_trunc('day', block_timestamp) as d_date
	  FROM ethereum.udm_events
	  WHERE
	 
	origin_address = to_address
	 
	AND contract_address = '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'
	 
	AND origin_function_signature = '0x76122903'
	 
	AND event_type = 'erc20_transfer'
	 
	AND block_timestamp >= CURRENT_DATE - 180
	
	
	 GROUP BY origin_address, tx_id, d_date
	) SELECT (SUM("tokens")/(25*1e6)) * 100 as "Percent Claimed by Day", d_date from all_tokens GROUP BY d_date ORDER BY d_date



=======================================================================================
=======================================================================================
QUERY_NO: 886
QUERY_ID: a2263d52-0650-4a4a-bd79-982cab9e31a4
QUERY_TITLE: comm table test - table/model

QUERY_STRING:

SELECT
	 block_timestamp::date as ddate
	, COUNT (*) as totals from community.ronin.staking_actions GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 887
QUERY_ID: b9c997d9-42c8-48c4-a8d3-111fb62992f9
QUERY_TITLE: ETH Stake - Fact Validators Daily

QUERY_STRING:

with active_validators as (
	SELECT
	
	slot_timestamp::date as ddate
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') THEN pubkey END)) as validators
	  , validators * 32 as eth_staked
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('pending_queued') THEN pubkey END)) as validators_pending
	  , COUNT(DISTINCT (CASE WHEN validator_status in ('active_exiting') THEN pubkey END)) as validators_exiting
	from ethereum.beacon_chain.fact_validators v
	LEFT JOIN ethereum.beacon_chain.fact_blocks b ON v.slot_number = b.slot_number
	WHERE 1=1
	  --AND validator_status in ('active_ongoing', 'active_slashed', 'active_exiting') -- 'exited_unslashed', 'exited_slashed')
	GROUP BY ddate
	--AND max_active>min_exit  --sanity test: so far has never happened  -> validator once exited has never restarted/became active again ) SELECT
	* from active_validators  ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 888
QUERY_ID: 72261cb7-1ae7-4d4f-bf31-b87cd208b06b
QUERY_TITLE: undelegate tests

QUERY_STRING:

-- forked from delegateRewards test @ https://flipsidecrypto.xyz/studio/queries/f14b10f4-ad6f-4064-8c93-9a3f77cf39af -- forked from txns by orig_function @ https://flipsidecrypto.xyz/studio/queries/630b1920-2506-4419-86da-1c41b3c7033b -- forked from events @ https://flipsidecrypto.xyz/studio/queries/219b61c1-a535-4c85-aec1-af27f0fa2eca with events as (
	SELECT
	  tx_hash
	  , COUNT(*) as totals
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND origin_function_signature = '0x4d99dd16'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	GROUP BY 1 ) SELECT
	totals
	, COUNT (DISTINCT tx_hash) as counts
	 , MAX(tx_hash) as sample1
	, MIN(tx_hash) as sample2 from events GROUP by 1



=======================================================================================
=======================================================================================
QUERY_NO: 889
QUERY_ID: 2d0794fe-c106-4076-bf60-949fe510237c
QUERY_TITLE: developing-violet

QUERY_STRING:

SELECT
	 COUNT(distinct coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER)) as users
	, COUNT(DISTINCT tx_hash) as txns from near.core.fact_transactions where 1=1
	AND block_timestamp::date BETWEEN '2024-07-01' AND '2024-09-30'
	AND tx_succeeded = TRUE



=======================================================================================
=======================================================================================
QUERY_NO: 890
QUERY_ID: 5e8cf6f4-bd1b-4677-919e-0e4657230e55
QUERY_TITLE: MAUs

QUERY_STRING:

SELECT
	 date_trunc('month', block_timestamp) as dmonth
	, COUNT(distinct tx_signer) as users
	, COUNT(DISTINCT tx_hash) as txns from near.core.fact_transactions where 1=1
	AND block_timestamp::date BETWEEN '2024-01-01' AND '2024-11-30'
	AND tx_succeeded = TRUE  GROUP BY 1  ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 891
QUERY_ID: 89b975a6-5c27-42aa-8328-6a9af36f7911
QUERY_TITLE: MAUs Enhanced

QUERY_STRING:

-- forked from MAUs @ https://flipsidecrypto.xyz/studio/queries/5e8cf6f4-bd1b-4677-919e-0e4657230e55 SELECT
	 date_trunc('month', block_timestamp) as dmonth
	, COUNT(distinct coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER)) as users
	, COUNT(DISTINCT tx_hash) as txns from near.core.fact_transactions where 1=1
	AND block_timestamp::date BETWEEN '2024-01-01' AND '2024-11-30'
	AND tx_succeeded = TRUE  GROUP BY 1  ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 892
QUERY_ID: 79ef41ed-bbed-4e32-8174-0976580b3e88
QUERY_TITLE: Top Contracts/Dapps

QUERY_STRING:

-- CREDIT/SOURCE: https://flipsidecrypto.xyz/flipsideteam/state-of-near-dashboard-vG3QwR?tabIndex=1 with near_projects as (
	select
	
	ADDRESS, initcap(ADDRESS_NAME) as ADDRESS_NAME,
	
	initcap(PROJECT_NAME) as PROJECT_NAME,
	
	initcap(LABEL_TYPE) as LABEL_TYPE
	from near.core.dim_address_labels
	where LABEL_TYPE not in ('cex','token') and PROJECT_NAME is not null  ) , projects_events as (
	select
	
	BLOCK_TIMESTAMP::date as ddate,
	
	SIGNER_ID,
	
	METHOD_NAME,
	
	RECEIVER_ID,
	
	ADDRESS_NAME,
	
	PROJECT_NAME,
	
	LABEL_TYPE,
	
	TX_HASH,
	
	DEPOSIT/1e24 as Volume
	from near.core.fact_actions_events_function_call
	LEFT join near_projects ON RECEIVER_ID=ADDRESS
	where 1=1
	  AND block_timestamp::date BETWEEN '2024-01-01' AND '2024-11-30'
	  AND RECEIPT_SUCCEEDED=true
	  and PROJECT_NAME is not null ) select
	 PROJECT_NAME as "Project",
	 round(100 * (count(DISTINCT ddate)/(DATEDIFF(day, '2024-01-01'::DATE, '2024-11-30'::DATE) +1) ), 1) || ' %' as "Active Days %",
	count(*) as "Contract Calls",
	 count(distinct tx_hash) as "Transaction",
	  count(distinct SIGNER_ID) as "Users",
	sum(volume) as "Volume ($NEAR)",
	 avg(volume) as "Average Volume ($NEAR)" from projects_events group by 1 order by 5 desc  limit 5



=======================================================================================
=======================================================================================
QUERY_NO: 893
QUERY_ID: 3ec3d809-bac4-4aaa-bb07-13d7f8ffd2aa
QUERY_TITLE: ALL KAIKAI Events

QUERY_STRING:

with app_events as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-lockups' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'earn.kaiching'
	  AND from_address= 'hotwallet.kaiching'
	
	UNION ALL
	 SELECT
	
	 block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'redemptions' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'hotwallet.kaiching'
	  AND from_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'deposit-transfers' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'hotwallet.kaiching'
	  AND to_address ilike '%users.kaiching'
	
	UNION ALL
	
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-claims' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'earn.kaiching'
	  AND to_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'system/contract configs' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND (
	
	  (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	 OR
	
	 (from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	)
	  AND contract_address = 'wrap.near' ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  --, (tx:actions[0]:Transfer:deposit)/1e24 as amount
	  , 'Gas Transfers' as cat
	from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005
	  AND TX_SUCCEEDED = TRUE  ) , gas_clawbacks as (
	with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near'
	)
	SELECT * from base
	
	 UNION ALL
	
	 select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas-clawbacks' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_RECEIVER ='reserve.kaiching'
	  AND TX_SIGNER ilike '%users.kaiching'
	  AND tx_hash NOT IN (SELECT tx_hash from base) ) , acct_creations as (
	select
	
	*
	  , 'account-creations' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_SIGNER='users.kaiching'
	  AND TX:actions[0]='CreateAccount'
	  AND TX_SUCCEEDED = TRUE ) , all_txns as (
	SELECT tx_hash, cat from app_events
	UNION ALL
	SELECT tx_hash, cat from gas_transfers
	UNION ALL
	 SELECT tx_hash, cat from acct_creations
	UNION ALL
	SELECT tx_hash, cat from gas_clawbacks ) SELECT
	cat
	, totals
	, 100 * ratio_to_report(totals) OVER() coverage
	, example1
	, example2 from (
	SELECT
	
	CASE WHEN tx_hash NOT IN (SELECT DISTINCT tx_hash from all_txns) THEN 'weird/unhandled' ELSE 'covered/tracked' END as cat
	  , COUNT(DISTINCT tx_hash) as totals
	  , MAX(tx_hash) as example1
	  , MIN(tx_hash) as example2
	from near.core.fact_transactions
	WHERE 1=1
	  AND (tx_signer ilike '%kaiching' OR tx_receiver ilike '%kaiching')
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	GROUP BY 1 )



=======================================================================================
=======================================================================================
QUERY_NO: 894
QUERY_ID: 1b5f62ac-7fbd-4062-a9aa-a3674cd39012
QUERY_TITLE: KAIKAI - DApp Events

QUERY_STRING:

-- forked from Daily Transaction Groups Enhanced @ https://flipsidecrypto.xyz/studio/queries/ea0e38fc-ec92-4c09-b14e-d7d358c03ef4 -- forked from Daily Transaction Groups @ https://flipsidecrypto.xyz/studio/queries/9f29293d-d7d3-4d5e-b559-1ab0957b8ced with app_events as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-lockups' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'earn.kaiching'
	  AND from_address= 'hotwallet.kaiching'
	
	UNION ALL
	 SELECT
	
	 block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'redemptions' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'hotwallet.kaiching'
	  AND from_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'deposit-transfers' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'hotwallet.kaiching'
	  AND to_address ilike '%users.kaiching'
	
	UNION ALL
	
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-claims' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'earn.kaiching'
	  AND to_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'system/contract configs' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND (
	
	  (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	 OR
	
	 (from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	)
	  AND contract_address = 'wrap.near' ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas transfers' as cat
	from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005
	  AND TX_SUCCEEDED = TRUE  ) , gas_clawbacks as (
	with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near'
	)
	SELECT * from base
	
	 UNION ALL
	
	 select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas-clawbacks' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_RECEIVER ='reserve.kaiching'
	  AND TX_SIGNER ilike '%users.kaiching'
	  AND tx_hash NOT IN (SELECT tx_hash from base) ) , acct_creations as (
	select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'account-creations' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_SIGNER='users.kaiching'
	  AND TX:actions[0]='CreateAccount'
	  AND TX_SUCCEEDED = TRUE ) , all_txns as (
	SELECT * from app_events
	UNION ALL
	SELECT * from gas_transfers
	UNION ALL
	 SELECT * from acct_creations
	UNION ALL
	SELECT * from gas_clawbacks ) SELECT
	t.block_timestamp::date as ddate
	 , cat
	, COUNT(DISTINCT t.tx_hash) as txn_totals
	, COUNT(DISTINCT coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, T.TX_SIGNER)) as signers
	, MAX(coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, T.TX_SIGNER)) as signer_sample
	 , MAX(t.tx_hash) as example1
	, MIN(t.tx_hash) as example2 from near.core.fact_transactions t LEFT JOIN all_txns a ON t.tx_hash = a.tx_hash WHERE 1=1
	AND t.tx_hash in (SELECT tx_hash from all_txns)
	AND t.block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30' GROUP BY 1, 2  ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 895
QUERY_ID: 37124255-97a4-465c-8d35-4be4f16f3266
QUERY_TITLE: Daily Transaction Groups Enhanced (Emily Feb/March duration)

QUERY_STRING:

-- forked from Daily Transaction Groups Enhanced @ https://flipsidecrypto.xyz/studio/queries/ea0e38fc-ec92-4c09-b14e-d7d358c03ef4 -- forked from Daily Transaction Groups @ https://flipsidecrypto.xyz/studio/queries/9f29293d-d7d3-4d5e-b559-1ab0957b8ced with app_events as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-lockups' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-20' AND '2025-03-12'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'earn.kaiching'
	  AND from_address= 'hotwallet.kaiching'
	
	UNION ALL
	 SELECT
	
	 block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'redemptions' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-20' AND '2025-03-12'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'hotwallet.kaiching'
	  AND from_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'deposit-transfers' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'hotwallet.kaiching'
	  AND to_address ilike '%users.kaiching'
	
	UNION ALL
	
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-claims' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'earn.kaiching'
	  AND to_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'system/contract configs' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND (
	
	  (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	 OR
	
	 (from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	)
	  AND contract_address = 'wrap.near' ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  --, (tx:actions[0]:Transfer:deposit)/1e24 as amount
	  , 'Gas Transfers' as cat
	from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005
	  AND TX_SUCCEEDED = TRUE  ) , gas_clawbacks as (
	with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near'
	)
	SELECT * from base
	
	 UNION ALL
	
	 select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas-clawbacks' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND TX_RECEIVER ='reserve.kaiching'
	  AND TX_SIGNER ilike '%users.kaiching'
	  AND tx_hash NOT IN (SELECT tx_hash from base) ) , acct_creations as (
	select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'account-creations' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12'
	  AND TX_SIGNER='users.kaiching'
	  AND TX:actions[0]='CreateAccount'
	  AND TX_SUCCEEDED = TRUE ) , all_txns as (
	SELECT tx_hash, cat from app_events
	UNION ALL
	SELECT tx_hash, cat from gas_transfers
	UNION ALL
	 SELECT tx_hash, cat from acct_creations
	UNION ALL
	SELECT tx_hash, cat from gas_clawbacks ) SELECT
	block_timestamp::date as ddate
	 , COUNT(DISTINCT tx_hash) as txn_totals
	, COUNT(DISTINCT coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER)) as signers1
	, COUNT(DISTINCT tx_signer) as signers
	, MAX(tx_hash) as example1
	, MIN(tx_hash) as example2
	, MAX(tx:actions[0]:Delegate:delegate_action:sender_id::string) as signer1_sample1
	, MIN(tx:actions[0]:Delegate:delegate_action:sender_id::string) as singer1_sample2 from near.core.fact_transactions WHERE 1=1
	AND tx_hash IN (SELECT DISTINCT tx_hash from all_txns)
	AND block_timestamp::date BETWEEN '2025-02-15' AND '2025-03-12' GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 896
QUERY_ID: 0926abbd-72a3-41bd-87b3-69b18c9c2526
QUERY_TITLE: April 1-10th CEX Deposits - Poison Distribution

QUERY_STRING:

with cex_deposits as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers t
	LEFT JOIN solana.core.dim_labels l on (tx_to = address AND label_type ='cex' and label_subtype = 'deposit_wallet')
	WHERE 1=1
	  AND block_timestamp between '2025-04-01' AND '2025-04-10'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  -- AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NOT NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , transfers_to_depositors as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND tx_to in (SELECT DISTINCT tx_from from cex_deposits)
	  AND label_type IS NULL
	  -- AND mint='So11111111111111111111111111111111111111111'
	  AND block_timestamp between '2025-04-01' AND '2025-04-10' ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	  --, row_number() OVER (PARTITION BY s.wallet, s.tx_to ORDER BY s.block_timestamp ASC) as ranks
	from cex_deposits t1
	LEFT JOIN transfers_to_depositors t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	  OR
	
	 substring(t1.tx_to, 1, 2) = substring(t2.tx_from, 1, 2)
	
	)
	  -- AND (
	  --
	right(t1.tx_to, 3) = right(t2.tx_from, 3)
	  --
	OR
	  --
	right(t1.tx_to, 2) = right(t2.tx_from, 2)
	  -- )
	)
	WHERE 1=1
	  --AND matched_sender IS NOT NULL ) , poison_samples as (
	SELECT
	
	tx_from as wallet
	  , MAX(CASE WHEN matched_sender IS NOT NULL THEN 1 ELSE 0 END) as is_poisoned
	from matches
	GROUP BY 1 ) -- SELECT --
	COUNT(DISTINCT tx_to) as wallets -- from transfers_to_depositors SELECT
	CASE WHEN is_poisoned =1 THEN 'poisoned' ELSE 'unattacked' END as label
	, COUNT(DISTINCT wallet) as totals from poison_samples GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 897
QUERY_ID: 79200623-8153-46b0-b8a2-c49ccf480163
QUERY_TITLE: withdrawal to deposit mapping copy

QUERY_STRING:

-- forked from withdrawal to deposit mapping @ https://flipsidecrypto.xyz/studio/queries/8788f1dc-7f74-4e5e-8392-9c57010a080c -- SELECT  --
	* -- from ethereum.beacon_chain.ez_withdrawals w -- WHERE 1=1 --
	--AND pubkey = '0x8a4f2e7e2fea00a9ce77d669aeba2573137010db2f85e18c0265e492d3a9b5367e15f356abd58b2bfb3a3bddef9aece9' --
	AND validator_index=417435 --
	--AND ( (WITHDRAWAL_AMOUNT BETWEEN 20 AND 32) OR WITHDRAWAL_AMOUNT>32)  -- SELECT  --
	CASE WHEN wallet IS NULL then 'NULLTYPE' ELSE 'defined' END as label --
	, COUNT(DISTINCT pubkey) as totals -- from  --  ( SELECT  --
	  DISTINCT t.pubkey, depositor as wallet --
	  --, d.withdrawal_address  --
	  --, d.depositor --
	  from ethereum.beacon_chain.ez_withdrawals w --
	  LEFT JOIN ( --
	
	 SELECT  --
	
	
	* --
	
	
	, row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks --
	
	 from ethereum.beacon_chain.fact_validators --
	
	 QUALIFY ranks=1 --
	  ) t on w.validator_index = t.index --
	  LEFT JOIN ( --
	
	 SELECT *  --
	
	 FROM ethereum.beacon_chain.ez_deposits --
	
	 qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1 --
	  ) d ON t.pubkey = d.pubkey --
	  WHERE 1=1 -- ) -- GROUP BY label SELECT
	 COUNT(DISTINCT depositor) as totals from (
	SELECT *
	 FROM ethereum.beacon_chain.ez_deposits
	qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1 )



=======================================================================================
=======================================================================================
QUERY_NO: 898
QUERY_ID: d651c0c6-ecd3-497e-959b-10172de1cb0c
QUERY_TITLE: collection offer copy

QUERY_STRING:

-- forked from collection offer @ https://flipsidecrypto.xyz/studio/queries/5f705eb9-e784-4ed2-9f62-b8f6be853b44 with offer_sales as (
	SELECT
	
	*
	  , DECODED_LOG:"order":seller as seller
	  , DECODED_LOG:"offer":"itemPrice" as price_unadj
	  , DECODED_LOG:"offer":buyer as buyer
	  , DECODED_LOG:"offer":"paymentToken" as payment_token
	  , CASE WHEN DECODED_LOG:"offer":"isERC721" = TRUE THEN 'erc721' ELSE 'erc1155' END as token_standard
	  , DECODED_LOG:"offer":"collection" as nft_contract_address
	  , DECODED_LOG:"offer":"amount"::int as quantity
	  , DECODED_LOG:"order":ids[0] as token_id
	  , DECODED_LOG:"allocations" as allocs
	from ronin.core.ez_decoded_event_logs
	WHERE 1=1
	  --AND tx_hash = '0x43d77844acaefff0d6dde53be62ea8fdb721a2d253f4da8891c340ea52555316'
	  AND contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1'
	  AND TOPIC_0 = '0xad64053f1eeea4079b4aafaca8934fffd9a6304ccdfe094404115202bda3ed03'
	--OrderFullFilled ) SELECT
	totals
	, COUNT(*) as distinct_sales
	, MAX(tx_hash) as sample1
	, MIN(tx_hash) as sample2
	, MAX(allocs) as allocs_sample from (
	SELECT
	  tx_hash
	  , COUNT(*) as totals
	  , MAX(allocs) as allocs
	from offer_sales, lateral flatten(input=>allocs)
	GROUP BY 1 ) GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 899
QUERY_ID: 630b1920-2506-4419-86da-1c41b3c7033b
QUERY_TITLE: txns by orig_function

QUERY_STRING:

-- forked from events @ https://flipsidecrypto.xyz/studio/queries/219b61c1-a535-4c85-aec1-af27f0fa2eca with events as (
	SELECT
	  ORIGIN_FUNCTION_SIGNATURE as sig
	  , COUNT(DISTINCT tx_hash) as totals
	  , MIN(block_timestamp) as min_ts
	  , MAX(block_timestamp) as max_ts
	  , MAX(tx_hash) as sample1
	  , MIN(tx_hash) as sample2
	from ronin.core.fact_transactions
	WHERE 1=1
	  AND to_address = '0x545edb750eb8769c868429be9586f5857a768758'
	GROUP BY 1 ) SELECT * from events ORDER BY 2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 900
QUERY_ID: 2211bb3c-aa4f-4fdb-acea-eb3f7c323f6b
QUERY_TITLE: validator stakes realtime test

QUERY_STRING:

-- forked from validator stakes copy @ https://flipsidecrypto.xyz/studio/queries/d4dc50cf-c3c9-4c0d-93ab-7fbda7059741 -- forked from validator stakes @ https://flipsidecrypto.xyz/studio/queries/87bc5e02-5286-4aba-9cec-07f8444d44cb -- forked from stake over time + total stake @ https://flipsidecrypto.xyz/studio/queries/6aa7f3a4-c6eb-4757-acdc-d6a67297826f with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  , refine as (
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , event_index
	  , action
	  , wallet
	  , validator
	  , amount
	from merge ) , post_sums as (
	SELECT
	  validator
	  , MAX(label) as name
	  , MAX(CASE WHEN amount_adjusted<0 THEN 0 ELSE amount_adjusted END) as pre_amount
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	  , pre_amount + net_stake as total_stake
	  , MAX(status) as status
	from refine
	 LEFT JOIN list using(validator)
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	  AND label IS NOT NULL
	GROUP BY 1 ) SELECT
	 ROW_NUMBER() OVER (ORDER BY total_stake DESC) as rank
	, validator
	, name
	, total_stake
	, status
	 , 100* ratio_to_report(total_stake) OVER () as stake_percentage from post_sums WHERE 1=1 ORDER BY total_stake DESC



=======================================================================================
=======================================================================================
QUERY_NO: 901
QUERY_ID: ea0e38fc-ec92-4c09-b14e-d7d358c03ef4
QUERY_TITLE: Daily Transaction Groups Enhanced

QUERY_STRING:

-- forked from Daily Transaction Groups @ https://flipsidecrypto.xyz/studio/queries/9f29293d-d7d3-4d5e-b559-1ab0957b8ced with app_events as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-lockups' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'earn.kaiching'
	  AND from_address= 'hotwallet.kaiching'
	
	UNION ALL
	 SELECT
	
	 block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'redemptions' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND to_address= 'hotwallet.kaiching'
	  AND from_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'deposit-transfers' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'hotwallet.kaiching'
	  AND to_address ilike '%users.kaiching'
	
	UNION ALL
	
	 SELECT
	  block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'earn-claims' as cat
	  from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND contract_address = 'wallet.kaiching'
	  AND from_address = 'earn.kaiching'
	  AND to_address ilike '%users.kaiching'
	UNION ALL
	 SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as tx_signer
	  , to_address as tx_receiver
	  , 'system/contract configs' as cat
	 from near.core.ez_token_transfers
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND (
	
	  (from_address = 'system' AND to_address = 'hotwallet.kaiching')
	
	 OR
	
	 (from_address = 'hotwallet.kaiching' AND to_address = 'wallet.kaiching')
	
	)
	  AND contract_address = 'wrap.near' ) , gas_transfers as (
	SELECT
	  BLOCK_TIMESTAMP
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  --, (tx:actions[0]:Transfer:deposit)/1e24 as amount
	  , 'Gas Transfers' as cat
	from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND tx_signer = 'hotwallet.kaiching'
	  AND ARRAY_SIZE(tx:actions) = 1
	  AND (tx:actions[0]:Transfer:deposit)/1e24 = 0.005
	  AND TX_SUCCEEDED = TRUE  ) , gas_clawbacks as (
	with base as (
	  SELECT
	
	  block_timestamp
	
	 , tx_hash
	
	 , from_address as tx_signer
	
	 , to_address as tx_receiver
	
	 , 'gas-clawbacks' as cat
	
	 from near.core.ez_token_transfers
	  WHERE 1=1
	
	 AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	
	 AND TO_ADDRESS='reserve.kaiching'
	
	 AND FROM_ADDRESS ilike '%users.kaiching'
	
	 AND contract_address = 'wrap.near'
	)
	SELECT * from base
	
	 UNION ALL
	
	 select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'gas-clawbacks' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_RECEIVER ='reserve.kaiching'
	  AND TX_SIGNER ilike '%users.kaiching'
	  AND tx_hash NOT IN (SELECT tx_hash from base) ) , acct_creations as (
	select
	
	block_timestamp
	  , tx_hash
	  , tx_signer
	  , tx_receiver
	  , 'account-creations' as cat
	  from near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30'
	  AND TX_SIGNER='users.kaiching'
	  AND TX:actions[0]='CreateAccount'
	  AND TX_SUCCEEDED = TRUE ) , all_txns as (
	SELECT tx_hash, cat from app_events
	UNION ALL
	SELECT tx_hash, cat from gas_transfers
	UNION ALL
	 SELECT tx_hash, cat from acct_creations
	UNION ALL
	SELECT tx_hash, cat from gas_clawbacks ) SELECT
	block_timestamp::date as ddate
	 , CASE WHEN tx_hash NOT IN (SELECT DISTINCT tx_hash from all_txns) THEN 'others' ELSE 'KAIKAI' END as cat
	, COUNT(DISTINCT tx_hash) as txn_totals
	, COUNT(DISTINCT coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER)) as signers
	-- , MAX(tx_hash) as example1
	-- , MIN(tx_hash) as example2 from near.core.fact_transactions WHERE 1=1
	AND block_timestamp::date BETWEEN '2024-11-01' AND '2024-11-30' GROUP BY 1, 2  ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 902
QUERY_ID: 407e7e1c-c493-4617-b5b2-1e3c7d307390
QUERY_TITLE: claimreward test for `stake` validator

QUERY_STRING:

with events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as validator_address
	  , '0x' || RIGHT(TOPIC_2, 40) as delegator_address
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 IN (
	
	 '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'  --ClaimReward
	  )
	  AND '0x' || RIGHT(TOPIC_2, 40) = '0x6133f1ee848df0dc45abc3eb92b7627f667ae00f'
	LIMIT 100 ) SELECT * from events



=======================================================================================
=======================================================================================
QUERY_NO: 903
QUERY_ID: 219b61c1-a535-4c85-aec1-af27f0fa2eca
QUERY_TITLE: events

QUERY_STRING:

with events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as validator_address
	  , '0x' || RIGHT(TOPIC_2, 40) as delegator_address
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 IN (
	
	 '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b', --Delegate
	
	 '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c', --Undelegate
	
	 '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'  --ClaimReward
	  )
	LIMIT 100 ) SELECT * from events



=======================================================================================
=======================================================================================
QUERY_NO: 904
QUERY_ID: 90a11c81-3b55-4efd-9d15-f994b54c7de3
QUERY_TITLE: comm table test - raw query

QUERY_STRING:

-- forked from comm table test @ https://flipsidecrypto.xyz/studio/queries/a2263d52-0650-4a4a-bd79-982cab9e31a4 with delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  , refine as (
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , event_index
	  , action
	  , wallet
	  , validator
	  , amount
	from merge ) SELECT
	 block_timestamp::date as ddate
	, COUNT (*) as totals from REFINE GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 905
QUERY_ID: 6eef5f3a-a784-4dd7-89e0-cdaac7e6de98
QUERY_TITLE: sales - decoded

QUERY_STRING:

-- forked from collection offer - decoded @ https://flipsidecrypto.xyz/studio/queries/5f705eb9-e784-4ed2-9f62-b8f6be853b44 with sales as (
	SELECT
	
	l.*
	  , DECODED_LOG:"receivedAllocs" as allocs
	  , array_size(allocs) as alloc_size
	  , CASE WHEN alloc_size = 6 THEN allocs[5]:recipient ELSE allocs[4]:recipient END as seller
	  , TO_NUMERIC(DECODED_LOG:"acceptedSettlePrice")/POW(10, c.decimals)  as price
	  , origin_from_address as buyer
	  , DECODED_LOG:"settleToken" as currency_address
	  , C.SYMBOL as currency_symbol
	  , CASE WHEN DECODED_LOG:"offer":"isERC721" = TRUE THEN 'erc721' ELSE 'erc1155' END as token_standard
	  , DECODED_LOG:"order"[0]:"extraData"[0][1] as nft_contract_address
	  , N.NAME as collection_name
	  --, DECODED_LOG:"offer":"amount"::int as quantity
	  , DECODED_LOG:"order"[0]:"extraData"[0][2] as token_id
	  -- allocs[0] is always zero/null address ***
	  , CASE WHEN allocs[1]:recipient = '0x61461e094c04884217c6a4e897409626231aacc8' THEN TO_NUMERIC(allocs[1]:"value")/POW(10, c.decimals) ELSE 0 END as fee_1
	  , CASE WHEN allocs[2]:recipient = '0x245db945c485b68fdc429e4f7085a1761aa4d45d' THEN TO_NUMERIC(allocs[2]:"value")/POW(10, c.decimals)  ELSE 0 END as fee_2
	  , CASE WHEN allocs[3]:recipient = '0x22cefc91e9b7c0f3890ebf9527ea89053490694e' THEN TO_NUMERIC(allocs[3]:"value")/POW(10, c.decimals)  ELSE 0 END as fee_3
	  , fee_1 + fee_2 + fee_3 as platform_fee
	  , CASE WHEN alloc_size = 6 THEN TO_NUMERIC(allocs[4]:"value")/POW(10, c.decimals)  ELSE 0 END as creator_fee
	  , platform_fee + creator_fee as total_fees
	from ronin.core.ez_decoded_event_logs l
	LEFT JOIN ronin.core.dim_contracts c ON (DECODED_LOG:"settleToken" = c.address)
	LEFT JOIN ronin.core.dim_contracts n ON (DECODED_LOG:"order"[0]:"extraData"[0][1] = n.address)
	WHERE 1=1
	  --AND tx_hash = '0x6a48ff437c44afe869d37b25ef0fbf355e8ae832fed65616405b74e5841cec72' --single erc1155
	  AND tx_hash = '0x630646d63e39bff7a7875a043dec46fdc220918b03962f3a11af4af2b8991f34' -- 50qty erc1155
	  --AND contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3'
	  AND TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	--OrderMatched ) SELECT * from sales -- , refine as ( --
	SELECT --
	  block_number --
	  , block_timestamp --
	  , tx_hash --
	  , event_index --
	  , 'sale' as event_type --
	  , contract_address as platform_address --
	  , 'Ronin Market' as platform_name --
	  , NULL as platform_exchange_version --
	  , NULL as aggregator_name --
	  , seller as seller_address --
	  , buyer as buyer_address --
	  , nft_contract_address as contract_address --
	  , collection_name as name --
	  , token_id --
	  , 1 as quantity --
	  , token_standard --
	  , currency_symbol --
	  , currency_address --
	  , price --
	  , NULL as price_usd --
	  , total_fees --
	  , platform_fee --
	  , creator_fee --
	  , NULL as total_fees_usd --
	  , NULL as platform_fee_usd --
	  , NULL as creator_fee_usd --
	  -- , NULL as tx_fee --
	  -- , NULL as tx_fee_usd --
	from sales -- ) -- SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 906
QUERY_ID: 87c4128a-7782-43b2-a00f-050a785185e4
QUERY_TITLE: first/existing drippers

QUERY_STRING:

with min_drips as (
	SELECT
	
	to_address
	  , MIN(block_timestamp) as min_time
	from monad.testnet.fact_traces
	where 1=1
	  AND block_timestamp >= '2025-02-19 15:00' --- monad public announcement: https://x.com/monad_xyz/status/1892227817149997212
	  --AND tx_hash = '0xc3af99d908e68c5378bb98863b3e9984c7d5c9cd5c12c628ef3f9c052d538ed4'
	  AND origin_function_signature = '0x7bfc2741'
	  AND origin_to_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  AND from_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  -- faucet wallet: 0x09fb6a39471eb9dcee30fb91d8830195b1380e0f
	GROUP BY 1 ) , drip_events as (
	SELECT
	
	
	  TIME_SLICE(block_timestamp, 15, 'minute', 'START') as time_bin
	  , (CASE WHEN time_bin<=min_time THEN 'first drip' ELSE 'nth drip' END) as label
	  , COUNT(DISTINCT to_address) as receivers
	  , COUNT(DISTINCT tx_hash) as txns
	  , SUM(value) as mon_dripped
	  , MAX(tx_hash) as sample1
	  , MIN(tx_hash) as sample2
	from monad.testnet.fact_traces
	 LEFT JOIN min_drips using(to_address)
	where 1=1
	  AND block_timestamp >= '2025-02-19 15:00' --- monad public announcement: https://x.com/monad_xyz/status/1892227817149997212
	  --AND tx_hash = '0xf778e0929e99f1df14e94fb1a8089a8968c420e3c275b97033e6fd7224acd987'
	  AND origin_function_signature = '0x7bfc2741'
	  AND origin_to_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  AND from_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  -- faucet wallet: 0x09fb6a39471eb9dcee30fb91d8830195b1380e0f
	GROUP BY 1, 2 ) , time_bins as (
	SELECT
	
	TIME_SLICE(block_timestamp, 15, 'minute', 'START') as time_bin
	  , label
	  , COUNT(*) as test
	from ethereum.core.fact_blocks
	LEFT JOIN (
	  SELECT * from
	  ( values
	
	  ('first drip'),
	
	 ('nth drip')
	  ) as a (label)
	  ) on 1=1
	WHERE 1=1
	  AND block_timestamp >= '2025-02-19 15:00'
	  AND block_timestamp < CURRENT_TIMESTAMP - INTERVAL '1 hour, 30 minutes'
	GROUP BY 1, 2 ) SELECT
	 time_bin
	, label
	, coalesce(receivers, 0) as receivers
	, coalesce(txns, 0) as txns
	, coalesce(mon_dripped, 0) as mon_dripped from time_bins LEFT JOIN drip_events using (time_bin, label) ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 907
QUERY_ID: 6e264bd2-314e-4fe0-b945-6162c0f20a69
QUERY_TITLE: simple OT

QUERY_STRING:

with faucet_stats as (
	SELECT
	
	TIME_SLICE(block_timestamp, 15, 'minute', 'START') as time_bin
	  , COUNT(DISTINCT tx_hash) as txns
	  , COUNT(DISTINCT to_address) as receivers
	  , SUM(value) as mon_dripped
	from monad.testnet.fact_traces
	where 1=1
	  AND block_timestamp >= '2025-02-19 15:00' --- monad public announcement: https://x.com/monad_xyz/status/1892227817149997212
	  --AND tx_hash = '0xc3af99d908e68c5378bb98863b3e9984c7d5c9cd5c12c628ef3f9c052d538ed4'
	  AND origin_function_signature = '0x7bfc2741'
	  AND origin_to_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  AND from_address = '0x09fb6a39471eb9dcee30fb91d8830195b1380e0f'
	  -- faucet wallet: 0x09fb6a39471eb9dcee30fb91d8830195b1380e0f
	GROUP BY 1 ) , time_bins as (
	SELECT
	
	TIME_SLICE(block_timestamp, 15, 'minute', 'START') as time_bin
	
	, COUNT(*) as test
	from ethereum.core.fact_blocks
	WHERE 1=1
	  AND block_timestamp >= '2025-02-19 15:00'
	  AND block_timestamp < CURRENT_TIMESTAMP - INTERVAL '1 hour, 30 minutes'
	GROUP BY 1 ) , merge as (
	SELECT
	
	time_bin
	  , coalesce(txns, 0) as txns
	  , coalesce(receivers, 0) as receivers
	  , coalesce(mon_dripped, 0) as mon_dripped
	from time_bins
	LEFT JOIN faucet_stats using(time_bin) ) SELECT
	 *
	, CASE WHEN txns=0 THEN 'dead' ELSE 'working' END as label
	 , CASE WHEN txns=0 THEN 1 ELSE txns END as txns_adjusted from merge ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 908
QUERY_ID: e3ee9fde-7c78-4a72-add7-9a9d880f215d
QUERY_TITLE: overview stats

QUERY_STRING:

-- forked from base sales search @ https://flipsidecrypto.xyz/studio/queries/a0f255cb-4118-4ac1-80ef-5e0cfaa05aaa with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) , listing_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' ) , bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, 'listing-bulk' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) , merge as (
	--ignore fields with type conflict due to bulk logic like seller/qty/token_ids...for sanity
	SELECT
	
	block_timestamp
	  , tx_hash
	
	, label
	  , buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from offer_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from bulk_sales
	UNION ALL
	SELECT
	
	block_timestamp
	  , tx_hash
	  , label
	
	, buyer
	  , symbol
	  , amount
	  , amount_usd
	  , collection
	  , nft_contract
	  , quantity
	from listing_sales ) SELECT
	COUNT(DISTINCT tx_hash) as total_trades
	, SUM(quantity) as total_items
	, SUM(amount_usd) as total_volume_usd
	, COUNT(DISTINCT buyer) as buyers  from merge



=======================================================================================
=======================================================================================
QUERY_NO: 909
QUERY_ID: 92a91a05-e657-4b91-8e9c-4c50d1c316f6
QUERY_TITLE: [NEAR] Top Collections

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND ((tx_receiver LIKE '%paras%') OR  (tx_signer LIKE '%paras%') ) ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), refine as (
	SELECT
		token_series as collection,
		SUM(price) as volume,
		COUNT(DISTINCT tx_hash) as secondary_sales
		--COUNT(DISTINCT actor) as unique_traders
	FROM types
	WHERE
		type IN ('resolve_purchase', 'nft_mint')
	GROUP BY token_series ORDER BY volume DESC
	LIMIT 5 ) SELECT
	 * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 910
QUERY_ID: 2fa71720-3e27-444b-b491-284b59b6d580
QUERY_TITLE: debug avax_ez_bridge crap - starwatch

QUERY_STRING:

SELECT DISTINCT * EXCLUDE(EZ_BRIDGE_ACTIVITY_ID, inserted_timestamp, modified_timestamp) from avalanche.defi.ez_bridge_activity WHERE tx_hash = '0xe113783b6b9617fb7e83451b6891f67a6285793e5f0e8bcf93490e1b1684342b'



=======================================================================================
=======================================================================================
QUERY_NO: 911
QUERY_ID: 1135435a-ba3f-43ba-a7f8-b292c1a628ff
QUERY_TITLE: debug avax_ez_bridge crap - starwatch copy

QUERY_STRING:

-- forked from debug avax_ez_bridge crap - starwatch @ https://flipsidecrypto.xyz/studio/queries/2fa71720-3e27-444b-b491-284b59b6d580 SELECT DISTINCT * EXCLUDE ( EVENT_INDEX, DESTINATION_CHAIN_RECEIVER, DESTINATION_CHAIN, DESTINATION_CHAIN_ID)
	from avalanche.defi.ez_bridge_activity WHERE tx_hash = '0xe113783b6b9617fb7e83451b6891f67a6285793e5f0e8bcf93490e1b1684342b'



=======================================================================================
=======================================================================================
QUERY_NO: 912
QUERY_ID: 095d8b87-145b-4c65-a90d-342b80270baf
QUERY_TITLE: [MASTER] Quarterly Comparisons Optimized (+ instance param)

QUERY_STRING:

-- forked from Quarterly Comparisons Optimized (EDGE Excluded)  @ https://flipsidecrypto.xyz/studio/queries/0527b0dc-7cba-4b3e-9507-57f43d07bcf8 -- forked from Quarterly Comparisons Strings+Emojis Optimized (EDGE included) @ https://flipsidecrypto.xyz/studio/queries/ef7b409d-a864-4e78-9961-bc7392a1814f with trades_data as (
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{quarter_start}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance}}')
	
	 )
	  )
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{quarter_start}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance}}')
	
	 )
	  )
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{quarter_start}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance}}')
	
	 )
	  )
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{quarter_start}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance}}')
	
	 )
	  )
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (DATEDIFF('month', '{{quarter_start}}', block_timestamp::date) BETWEEN -9 and 2)
	  AND (
	
	 ( -- ignore EDGE if all instances being tallied & avoid double counting...
	
	
	'all' = lower('{{instance}}')
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	
	
	AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	 )
	
	 OR
	
	  ( -- individual instance, no need to filter EDGE
	
	
	label = lower('{{instance}}')
	
	 )
	  ) ) , daily_avg_traders as (
	SELECT
	
	year_num
	  , quarter_num
	
	, AVG(traders) as daily_avg_traders
	  , AVG(trades) as daily_avg_trades
	from (
	  SELECT
	
	  YEAR(block_timestamp) as year_num
	
	 , QUARTER(block_timestamp) as quarter_num
	
	 , block_timestamp::date as ddate
	
	 , COUNT(DISTINCT trader) as traders
	
	 , COUNT(DISTINCT digest) as trades
	  from trades_data
	  WHERE 1=1
	  GROUP BY 1, 2, 3
	)
	GROUP BY 1, 2 ) , aggrs as (
	SELECT
	  YEAR(block_timestamp) as year_num
	  , QUARTER(block_timestamp) as quarter_num
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT digest) AS total_orders
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	  , SUM(fee_amount) as total_fees
	  , COUNT(DISTINCT block_timestamp::date) as span_days
	  , MAX(daily_avg_traders) as daily_avg_traders
	  , MAX(daily_avg_trades) as daily_avg_trades
	  , ROUND(total_orders/span_days, 0) as daily_avg_orders
	  , ROUND(total_volume/span_days, 2) as daily_avg_volume
	  , ROUND(total_fees/span_days, 2) as daily_avg_fees
	  , MAX(block_timestamp::date) as max_date
	  , MIN(block_timestamp::date) as min_date
	from trades_data a
	 LEFT JOIN daily_avg_traders t on (YEAR(a.block_timestamp)=t.year_num AND QUARTER(a.block_timestamp)=t.quarter_num)
	WHERE 1=1
	GROUP BY 1, 2
	ORDER BY 1 ASC, 2 ASC ) , delta_strs as (
	SELECT
	  *
	  , lag(unique_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_unique_traders
	  , lag(total_orders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_orders
	  , lag(total_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_volume
	  , lag(total_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_total_fees
	  , lag(daily_avg_traders) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_traders
	  , lag(daily_avg_trades) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_trades
	  , lag(daily_avg_volume) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_volume
	  , lag(daily_avg_fees) OVER (ORDER BY year_num ASC, quarter_num ASC) as p_daily_avg_fees
	  -- calculate deltas
	  , ROUND(((unique_traders-p_unique_traders)/p_unique_traders)*100, 2) as traders_delta
	  , ROUND(((total_orders-p_total_orders)/p_total_orders)*100, 2) as orders_delta
	  , ROUND(((total_volume-p_total_volume)/p_total_volume)*100, 2) as vol_delta
	  , ROUND(((total_fees-p_total_fees)/p_total_fees)*100, 2) as fees_delta
	  , ROUND(((daily_avg_traders-p_daily_avg_traders)/p_daily_avg_traders)*100, 2) as dat_delta
	  , ROUND(((daily_avg_volume-p_daily_avg_volume)/p_daily_avg_volume)*100, 2) as dav_delta
	  , ROUND(((daily_avg_fees-p_daily_avg_fees)/p_daily_avg_fees)*100, 2) as daf_delta
	  , ROUND(((daily_avg_trades-p_daily_avg_trades)/p_daily_avg_trades)*100, 2) as dats_delta
	  -- stringify
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00')
	
	 ) as vol_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999')
	
	 ) as orders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN traders_delta>=0 THEN '↗️' ELSE '🔻' END) || traders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999')
	
	 ) as traders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN fees_delta>=0 THEN '↗️' ELSE '🔻' END) || fees_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00')
	
	 ) as fees_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999') || ' (' || (CASE WHEN dat_delta>=0 THEN '↗️' ELSE '🔻' END) || dat_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999')
	
	 ) as dat_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN dav_delta>=0 THEN '↗️' ELSE '🔻' END) || dav_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00')
	
	 ) as dav_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN daf_delta>=0 THEN '↗️' ELSE '🔻' END) || daf_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00')
	
	 ) as daf_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00') || ' (' || (CASE WHEN dats_delta>=0 THEN '↗️' ELSE '🔻' END) || dats_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00')
	
	 ) as dats_str
	from aggrs ) , refine as (
	SELECT
	
	(year_num || '-' || 'Q' || quarter_num) as label
	  , MAX(vol_str) as TOTAL_VOLUME
	  , MAX(fees_str) as TOTAL_FEES
	  , MAX(traders_str) as TOTAL_TRADERS
	  , MAX(orders_str) as TOTAL_TRADES
	  , MAX(dav_str) as DAILY_AVG_VOLUME
	  , MAX(daf_str) as DAILY_AVG_FEES
	  , MAX(dat_str) as DAILY_AVG_TRADERS
	  , MAX(dats_str) as DAILY_AVG_TRADES
	from delta_strs
	GROUP BY 1 ) , quarters as (
	SELECT
	
	year_num
	  , quarter_num
	  ,( year_num || '-' || 'Q' || quarter_num ) as label
	from aggrs
	ORDER BY 1 ASC, 2 ASC  ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM refine
	UNPIVOT (VALUE FOR METRIC IN ( TOTAL_VOLUME, TOTAL_FEES, TOTAL_TRADERS, TOTAL_TRADES, DAILY_AVG_VOLUME, DAILY_AVG_FEES, DAILY_AVG_TRADERS, DAILY_AVG_TRADES )) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from quarters) ) ORDER BY metric DESC



=======================================================================================
=======================================================================================
QUERY_NO: 913
QUERY_ID: d93e518d-fb9c-4938-9cec-8c20244383d2
QUERY_TITLE: community table tests PAIRS

QUERY_STRING:

SELECT * from community.arbitrum.ostium_market_pairs



=======================================================================================
=======================================================================================
QUERY_NO: 914
QUERY_ID: ca41e48f-c68d-4aa1-8028-e85585a649ea
QUERY_TITLE: direct sale

QUERY_STRING:

-- forked from collection offer @ https://flipsidecrypto.xyz/studio/queries/5f705eb9-e784-4ed2-9f62-b8f6be853b44 SELECT * from ronin.core.ez_decoded_event_logs WHERE 1=1
	AND tx_hash = '0x6374aa1af4ab55a5bd0fb2baee109fde79580e49c043ad014f62fa64cea38116'
	 --OrderMatched



=======================================================================================
=======================================================================================
QUERY_NO: 915
QUERY_ID: 4278d8b3-e48f-46c3-88a1-6c07d1a89d20
QUERY_TITLE: [ARB] L2 Summer Preferences

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp as adate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender as wallet
		, adate
	, CASE	WHEN mdate IS NULL THEN 'Arbitrum Only'
				WHEN mdate>adate THEN 'Both/Arbitrum First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , arb_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , main_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from ethereum.core.fact_transactions t
	LEFT JOIN refine r ON  t.from_address=r.wallet
	WHERE 1=1
		AND block_timestamp>adate
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , combo as (
	SELECT *, 'arb' as CAT from arb_counts
	UNION ALL
	SELECT *, 'main' as CAT from main_counts ) , pre as (
	SELECT
		MAX(CASE	WHEN CAT='arb' THEN totals ELSE 0 END) as arb_counts
		, MAX(CASE	WHEN CAT='main' THEN totals ELSE 0 END ) as main_counts
		, sender
	from combo
	GROUP BY sender ) , pre_final as (
	SELECT
		*
		, arb_counts+main_counts as total_txns
		, round(arb_counts/(total_txns) * 100, 2) as arb_pref
		, CASE
	WHEN arb_pref>=70 THEN 'Arbitrum Preferred'
				WHEN arb_pref<=30 THEN 'Mainnet Preferred'
				ELSE 'Both Balanced Usage' END as CAT
	from pre
	WHERE 1=1
		AND arb_counts>=10
		AND main_counts>=10 ) SELECT
	
	COUNT(sender) as totals
	, CAT from pre_final GROUP BY CAT



=======================================================================================
=======================================================================================
QUERY_NO: 916
QUERY_ID: de061def-73e8-43b6-88fb-df068a7c6b88
QUERY_TITLE: [ARB] L2 Summer Preferences Scatter

QUERY_STRING:

with new_arb as (
	SELECT
		from_address as sender,
		to_address as receiver,
		block_timestamp as adate
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND nonce=0 --first OUTWARD transaction
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31' ), mainnet as (
	SELECT
	
	from_address as sender
		, block_timestamp as mdate
	from ethereum.core.fact_transactions
	WHERE 1=1
		AND nonce=0
		AND from_address IN (SELECT sender from new_arb) ) ,
	 refine as (
	SELECT 
	a.sender as wallet
		, adate
	, CASE	WHEN mdate IS NULL THEN 'Arbitrum Only'
				WHEN mdate>adate THEN 'Both/Arbitrum First'
				ELSE 'Both/Mainnet First' end as cat
	from new_arb a
	 LEFT JOIN mainnet m ON a.sender=m.sender
	 ) , arb_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from arbitrum.core.fact_transactions
	WHERE 1=1
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , main_counts as (
	SELECT
		COUNT(DISTINCT tx_hash) as totals
		, from_address as sender
	from ethereum.core.fact_transactions t
	LEFT JOIN refine r ON  t.from_address=r.wallet
	WHERE 1=1
		AND block_timestamp>adate
		AND from_address IN (SELECT sender from new_arb)
		AND block_timestamp BETWEEN '2022-06-15' AND '2022-08-31'
	GROUP BY sender ) , combo as (
	SELECT *, 'arb' as CAT from arb_counts
	UNION ALL
	SELECT *, 'main' as CAT from main_counts ) , pre as (
	SELECT
		MAX(CASE	WHEN CAT='arb' THEN totals ELSE 0 END) as arb_counts
		, MAX(CASE	WHEN CAT='main' THEN totals ELSE 0 END ) as main_counts
		, sender
	from combo
	GROUP BY sender ) , pre_final as (
	SELECT
		*
		, arb_counts+main_counts as total_txns
		, CASE WHEN total_txns>1000 THEN 1000 ELSE total_txns END as norm_totals
		, round(arb_counts/(total_txns) * 100, 2) as arb_pref
		, CASE
	WHEN arb_pref>=70 THEN 'Arbitrum Preferred'
				WHEN arb_pref<=30 THEN 'Mainnet Preferred'
				ELSE 'Both Balanced Usage' END as CAT
	from pre
	WHERE 1=1
		AND arb_counts>=10
		AND main_counts>=10 ) SELECT
	
	rank() as sender
		, total_txns
		, norm_totals
		, arb_pref from pre_final



=======================================================================================
=======================================================================================
QUERY_NO: 917
QUERY_ID: 15e00b0f-e285-47d3-9521-180474b190ed
QUERY_TITLE: combined test

QUERY_STRING:

with opening_fees as (
	SELECT
	  DECODED_LOG:tradeId as trade_id
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='DevFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as dev_fee
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='VaultOpeningFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as vault_open_fee
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='OracleFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as oracle_fee
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND EVENT_NAME IN (
	
	 'DevFeeCharged',
	
	 'VaultOpeningFeeCharged',
	
	 'OracleFeeCharged'
	  )
	GROUP BY 1 ) , async_collat_actions as (
	with base as (
	  SELECT
	  block_timestamp
	  , tx_hash
	  , EVENT_NAME
	  , TO_NUMERIC(DECODED_LOG:tradeId) as trade_id
	  , TO_NUMERIC(DECODED_LOG:pairIndex) as pair_index
	  , DECODED_LOG:topUpAmount/1e6 as collateral
	  , DECODED_LOG:newLeverage/1e2 as leverage
	  , NULL as tp
	  , NULL as sl
	  from arbitrum.core.ez_decoded_event_logs
	  WHERE 1=1
	
	 AND  (EVENT_NAME = 'TopUpCollateralExecuted' AND contract_address = '0x6d0ba1f9996dbd8885827e1b2e8f6593e7702411')
	
	
	 UNION ALL
	
	
	 SELECT * EXCLUDE segmented_data from (
	
	 SELECT
	
	
	block_timestamp
	
	
	 , tx_hash
	
	
	, 'RemoveCollateralExecuted' as event_name
	
	
	, utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	
	, REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0])) as pair_index
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e6 as collateral
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[2]))/1e2 as leverage
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e18 as tp
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e18 as sl
	
	 from arbitrum.core.fact_event_logs
	
	 WHERE 1=1
	
	
	--AND tx_hash = '0x125b301f96007a98e2f0c20443fa55bcbabfddbd70c15205650968e71fd5c533'
	
	
	AND (
	
	
	  contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	
	  AND TOPIC_0 = '0xd182bace90998b7a07a54165b7beb87743756042148ff3dceb8181dd446533f4'
	
	
	)
	  )
	)
	
	SELECT
	  b.trade_id
	  , SUM(CASE WHEN event_name='TopUpCollateralExecuted' THEN b.collateral ELSE b.collateral *-1 END) as collateral_delta
	  , MAX(l.leverage) as latest_leverage
	  , MAX(l.tp) as latest_tp
	  , MAX(l.sl) as latest_sl
	  , MAX(l.tx_hash) as sample1
	from base b
	 LEFT JOIN (
	  SELECT
	
	 trade_id
	
	 , tx_hash
	
	 , collateral
	
	 , leverage
	
	 , tp
	
	 , sl
	
	 , row_number() OVER (PARTITION BY trade_id ORDER BY block_timestamp DESC) as rank
	  from base
	  qualify rank=1
	) l ON b.trade_id = l.trade_id
	GROUP BY 1 ) , trade_opens as (
	SELECT
	
	l.block_timestamp
	  , tx_hash
	  , DECODED_LOG as log
	  , DECODED_LOG:"t" as tuple
	  , tuple:index as trade_index
	  , 'open' as trade_type
	  , CASE
	
	
	 WHEN EVENT_NAME = 'LimitOpenExecuted'
	
	
	THEN 'limit'
	
	
	ELSE 'market' END  as order_type
	  , DECODED_LOG:"orderId" as trade_id
	  --, DECODED_LOG:"limitIndex" as limit_index --ignoring as this field not present in market opens...
	  , tuple:"pairIndex" as pair_index
	  , market_pair
	  , CASE WHEN tuple:buy = TRUE THEN 'buy/long' ELSE 'sell/short' END as side
	  , tuple:collateral/1e6 as collateral
	  , tuple:leverage/1e2 as leverage
	  , tuple:"openPrice"/1e18 as open_price
	  , tuple:sl/1e18 as stop_loss
	  , tuple:tp/1e18 as take_profit
	  , tuple:trader as trader
	  , DECODED_LOG:tradeNotional as notional_raw
	  , collateral*leverage as volume
	  , DECODED_LOG:priceImpactP/1e18 as price_impact_percent
	  --opening fees
	  , dev_fee
	  , oracle_fee
	  , vault_open_fee
	  --collat changes
	  , collateral_delta
	  , latest_leverage
	  , latest_tp
	  , latest_sl
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN community.arbitrum.ostium_market_pairs mp on l.DECODED_LOG:"t":"pairIndex" = mp.pair_index
	LEFT JOIN opening_fees f on l.DECODED_LOG:"orderId" = f.trade_id
	LEFT JOIN async_collat_actions a on l.DECODED_LOG:"orderId" = a.trade_id
	WHERE 1=1
	  --AND tx_hash = '0xffe3cf4d50bbce55eba988440ba55b4d8457a3bf74cf483ed073b3f798d03e6b'
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND TOPIC_0 IN (
	
	 '0x19c8a7be769082e3461a241a3b6af0adad9302b7c1623ab8adb4d787fd9df67c', --LimitOpenExecuted
	
	 '0xf14b61759b2364f919bb1ce7c68a72e7c012733a5225c194c4f9e8460d9bc0ee'  --MarketOpenExecuted
	
	)
	  AND tx_succeeded
	
	 ) , openers as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , trade_index
	  , trade_type
	  , order_type
	  , trade_id
	  , pair_index
	  , market_pair
	  , side
	  , collateral
	  , leverage
	  , open_price
	  , stop_loss
	  , take_profit
	  , trader
	  , notional_raw
	  , volume
	  , price_impact_percent
	  , dev_fee
	  , oracle_fee
	  , vault_open_fee
	  , collateral_delta
	  , latest_leverage
	  , latest_tp
	  , latest_sl
	from trade_opens ) , closure_fees as (
	--funding/rollover fees are handled as aggregates on closures and not continuously
	SELECT
	  DECODED_LOG:tradeId as trade_id
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:rolloverFees/1e6 ELSE 0 END), 0) as rollover_fees
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:fundingFees/1e6 ELSE 0 END), 0) as funding_fees
	
	, COALESCE(MAX(CASE WHEN EVENT_NAME ='VaultLiqFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as vault_liq_fees
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND (
	
	  (EVENT_NAME = 'FeesCharged' AND contract_address = '0x3890243a8fc091c626ed26c087a028b46bc9d66c')
	
	 OR
	
	 (EVENT_NAME = 'VaultLiqFeeCharged' AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9')
	  )
	GROUP BY 1 ) , trade_closures as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  --, DECODED_LOG
	  , 'close' as trade_type
	  , CASE
	
	
	 WHEN EVENT_NAME = 'MarketCloseExecuted' THEN 'market'
	
	
	WHEN DECODED_LOG:orderType = 0 THEN 'tp'
	
	
	WHEN DECODED_LOG:orderType = 1 THEN 'sl'
	
	
	WHEN DECODED_LOG:orderType = 2 THEN 'liq'
	
	
	WHEN DECODED_LOG:orderType = 3 THEN 'limit'
	
	
	ELSE NULL
	
	 END as order_type
	  , TO_NUMERIC(DECODED_LOG:"tradeId") as trade_id
	  , DECODED_LOG:percentProfit/1e6 as profit_percent
	  , DECODED_LOG:price/1e18 as close_price
	  , DECODED_LOG:priceImpactP/1e18 as closing_price_impact_perc
	  , DECODED_LOG:usdcSentToTrader/1e6 as usdc_sent
	  , TO_NUMERIC(DECODED_LOG:orderId) as order_id
	  --closure fees
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN closure_fees f on l.DECODED_LOG:"tradeId" = f.trade_id
	WHERE 1=1
	  --AND tx_hash IN ('0xfffa4bb31f9c3df28f94f84512a0611478f1346d69eee9a5de68815490f57fb4', '0xfffe9eb48baf6c91b9dbf2b3d25b3f0f2cbdcafb64c6d75a14690f84b3907db0')
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND TOPIC_0 IN (
	
	 '0x6d2428396742e21de629bc9398950301d56c1aa493d8de859c4ee751aa02a9b6', --LimitCloseExecuted
	
	 '0x5a988d8359c57f866538ea68df714da9c916a4903309f854821b8a8cb3f376e1'  --MarketCloseExecuted
	
	)
	  AND tx_succeeded
	UNION ALL
	--MarketCloseExecutedV2 THIS IS NOT IN DECODED LOGS/// TODO:WHY?
	SELECT
	  * EXCLUDE (segmented_data, test)
	from (
	  SELECT
	
	 block_timestamp
	
	 , tx_hash
	
	 , 'close' as trade_type
	
	 , 'market' as order_type
	
	 , REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	 , utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	 , utils.udf_hex_to_int('s2c', segmented_data[2])/1e6 as profit_percent
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0]))/1e18 as close_price
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e18 as closing_price_impact_perc
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e6 as usdc_sent
	
	 -- --, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e2 as percent_closed --THIS IS NEW
	
	 , utils.udf_hex_to_int(TOPIC_1) as order_id
	
	 --closure fees
	
	 , rollover_fees
	
	 , funding_fees
	
	 , vault_liq_fees
	
	 , row_number() OVER (order by block_timestamp) as test
	  from arbitrum.core.fact_event_logs l
	  LEFT JOIN closure_fees f on utils.udf_hex_to_int(TOPIC_2) = f.trade_id
	  WHERE 1=1
	
	 --AND tx_hash = '0x9d9a5c8ab4690d72ee3d8508eab2e3d92b45cb52a14154458c5dc1b2c7961aa8'
	
	 AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	 AND topic_0 = '0xcaa9acf31fbbd991f267d1fe36d806a81db477c3ad5df64ed81b5155b960e8da' --MarketCloseExecutedV2
	
	 AND tx_succeeded
	)
	
	 ) , closes as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , trade_type
	  , order_type
	  , trade_id
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from trade_closures ) , base as (
	SELECT
	
	o.*
	  , CASE WHEN c.trade_id IS NULL THEN 0 ELSE 1 END as closed
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from openers o
	LEFT JOIN closes c ON o.trade_id = c.trade_id ) SELECT * from base



=======================================================================================
=======================================================================================
QUERY_NO: 918
QUERY_ID: 61bfa75f-d822-4781-8380-69163a82e4a2
QUERY_TITLE: collection offer decoding debug

QUERY_STRING:

with offer_sales as (
	SELECT
	
	logs.block_timestamp
	  , 'collection-offer' as label
	  , logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	 tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , amount
	
	 , amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 --AND tx_hash = '0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	
	 AND to_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	
	 , quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1' --Collection Offer Proxy
	  AND logs.TOPIC_0 = '0x0306217cf6445fd510a19c9de37c8de6385bdaf25ae48240b0c9e70e18ad425e' ) SELECT
	COUNT(*) as totals
	, SUM(AMOUNT_USD) as volume
	, MAX(tx_hash) as sample1
	, MIN(tx_hash) as sample2 from offer_sales WHERE symbol IS NULL



=======================================================================================
=======================================================================================
QUERY_NO: 919
QUERY_ID: e548e988-ded7-46e9-8a41-f8afe28af941
QUERY_TITLE: tests - listing sales (bulk)

QUERY_STRING:

with bulk_sales as (
	SELECT
	  logs.block_timestamp
	
	, logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_ids
	  , quantity
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , 'RON' as symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_native_transfers
	  WHERE 1=1
	
	 AND trace_index = 0
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP BY 1, 2, 3
	  UNION ALL
	
	--incase other erc20 not native
	  SELECT
	
	  tx_hash
	
	  , from_address as buyer
	
	 , symbol
	
	 , SUM(amount) as amount
	
	 , SUM(amount_usd) as amount_usd
	  from ronin.core.ez_token_transfers
	  WHERE 1=1
	
	 AND to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy Multi Send Proxy
	  GROUP by 1, 2, 3
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  --- BULK sales so group up
	  SELECT
	
	  tx_hash
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , COUNT(DISTINCT from_address) as seller
	
	 , COUNT(DISTINCT token_id) as token_ids
	
	 , SUM(quantity) as quantity
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	  GROUP BY 1, 2, 3
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0xfc0daaa73962226e0b58ed9ffceae067ed63078891d3ace4178589911a4980d9'
	  AND logs.origin_to_address = '0x21a0a1c081dc2f3e48dc391786f53035f85ce0bc'
	  --AND logs.tx_hash = '0xaef427ed72bfdfd85d30545f0e393547e9ebef497b168057e103b557a587d4b4' ) SELECT * from bulk_sales LIMIT 10000



=======================================================================================
=======================================================================================
QUERY_NO: 920
QUERY_ID: a0cab157-8142-4761-80cc-ad760b3f49db
QUERY_TITLE: tests - listing sales (single) odd case

QUERY_STRING:

-- forked from tests - listing sales (single) @ https://flipsidecrypto.xyz/studio/queries/c1a7e5ba-898c-40c3-b270-efc178a8d2b4 -- forked from tests - offer sales @ https://flipsidecrypto.xyz/studio/queries/dc7f86ec-73c6-49a2-a7d4-6e0c3ae30b58 with listing_sales as (
	SELECT
	
	logs.tx_hash
	  , buyer
	  , seller
	
	, symbol
	  , amount
	  , amount_usd
	
	, collection
	  , nft_contract
	  , token_id
	from ronin.core.fact_event_logs logs
	LEFT JOIN (
	
	
	SELECT
	
	
	
	tx_hash
	
	
	
	, from_address as buyer
	
	
	  , 'RON' as symbol
	
	
	  , amount
	
	
	  , amount_usd
	
	
	from ronin.core.ez_native_transfers
	
	
	WHERE 1=1
	
	
	  AND trace_index = 0
	
	
	  AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	
	
	--incase other erc20 not native
	
	
	UNION ALL
	
	
	 SELECT
	
	
	
	tx_hash
	
	
	
	, from_address as buyer
	
	
	  , symbol
	
	
	  , amount
	
	
	  , amount_usd
	
	
	from ronin.core.ez_token_transfers
	
	
	WHERE 1=1
	
	
	  --AND trace_index = 0
	
	
	  AND to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	) pays on logs.tx_hash = pays.tx_hash
	LEFT JOIN (
	  SELECT
	
	  tx_hash
	
	 , from_address as seller
	
	 , contract_address as nft_contract
	
	 , name as collection
	
	 , token_id
	  from ronin.nft.ez_nft_transfers
	  WHERE 1=1
	
	 --AND tx_hash='0xb93daf89d0a2a32e00382888ce2425e058319751fc481768cd5fc53f82f5f86e'
	) nfts ON logs.tx_hash = nfts.tx_hash
	WHERE 1=1
	  AND logs.contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy
	  AND logs.TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda'
	  AND logs.origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3'
	  AND logs.tx_hash = '0xf1282b40e0de80b634ee72dcdb585596a5040ce2c7414ec131e5818f48d42bc5' ) SELECT * from listing_sales LIMIT 100  -- SELECT * from ronin.core.fact_event_logs -- WHERE tx_hash = '0x003f4c67c158ac55a515026d5d82840c96d6958b40f6651945904e42cd877b1d' --
	AND contract_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' --Market Gateway Proxy --
	AND TOPIC_0 = '0x968d1942d9971cb9c45c722957d854c38f327206399d12ae49ca2f9c5dd06fda' --
	AND origin_to_address = '0x3b3adf1422f84254b7fbb0e7ca62bd0865133fe3' -- select * from ronin.nft.ez_nft_transfers -- WHERE tx_hash = '0xf1282b40e0de80b634ee72dcdb585596a5040ce2c7414ec131e5818f48d42bc5'



=======================================================================================
=======================================================================================
QUERY_NO: 921
QUERY_ID: 1d5f50ba-f8f5-410e-8b9f-f42f3210201b
QUERY_TITLE: mon - deposits

QUERY_STRING:

with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	, CASE WHEN from_address!='0x380850effbaef0be65e10e964c23f320e4917334' THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as receivers
	, COUNT(DISTINCT from_address) as senders
	, SUM (VALUE) as mon_deposited
	, SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND value>0
	AND tx_succeeded GROUP BY 1, 2 ORDER BY 1 DESC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 922
QUERY_ID: 5f705eb9-e784-4ed2-9f62-b8f6be853b44
QUERY_TITLE: collection offer - decoded

QUERY_STRING:

with offer_sales as (
	SELECT
	
	l.*
	  , DECODED_LOG:"order":seller as seller
	  , TO_NUMERIC(DECODED_LOG:"offer":"itemPrice")/POW(10, c.decimals)  as price_raw
	  , DECODED_LOG:"offer":buyer as buyer
	  , DECODED_LOG:"offer":"paymentToken" as currency_address
	  , C.SYMBOL as currency_symbol
	  , CASE WHEN DECODED_LOG:"offer":"isERC721" = TRUE THEN 'erc721' ELSE 'erc1155' END as token_standard
	  , DECODED_LOG:"offer":"collection" as nft_contract_address
	  , N.NAME as collection_name
	  --, DECODED_LOG:"offer":"amount"::int as quantity
	  , DECODED_LOG:"order":ids as token_ids
	  , array_size(token_ids) as item_count
	  , DECODED_LOG:"allocations" as allocs
	  , array_size(allocs) as alloc_size
	  -- allocs[0] is always zero/null address ***
	  , CASE WHEN allocs[1]:recipient = '0x61461e094c04884217c6a4e897409626231aacc8' THEN TO_NUMERIC(allocs[1]:"value")/POW(10, c.decimals) ELSE 0 END as fee_1
	  , CASE WHEN allocs[2]:recipient = '0x245db945c485b68fdc429e4f7085a1761aa4d45d' THEN TO_NUMERIC(allocs[2]:"value")/POW(10, c.decimals) ELSE 0 END as fee_2
	  , CASE WHEN allocs[3]:recipient = '0x22cefc91e9b7c0f3890ebf9527ea89053490694e' THEN TO_NUMERIC(allocs[3]:"value")/POW(10, c.decimals) ELSE 0 END as fee_3
	  , (fee_1 + fee_2 + fee_3)/item_count as platform_fee
	  -- creator fees can have multiple entries/addresses the royalty is split to...h/t Sam
	  -- easier to derive creator fee as - (price - plat_fee - seller_alloc)
	  --, CASE WHEN alloc_size = 6 THEN TO_NUMERIC(allocs[4]:"value")/POW(10, c.decimals)/item_count  ELSE 0 END as creator_fee --DEPRECATED
	  , (TO_NUMERIC(allocs[alloc_size-1]:"value")/POW(10, c.decimals))/item_count as seller_alloc
	  , price_raw - platform_fee - seller_alloc as creator_fee
	  , platform_fee + creator_fee as total_fees
	  , price_raw * p.price as price_usd
	  , total_fees * p.price as total_fees_usd
	  , platform_fee * p.price as platform_fee_usd
	  , creator_fee * p.price as creator_fee_usd
	from ronin.core.ez_decoded_event_logs l
	LEFT JOIN ronin.core.dim_contracts c ON (DECODED_LOG:"offer":"paymentToken" = c.address)
	LEFT JOIN ronin.core.dim_contracts n ON (DECODED_LOG:"offer":"collection" = n.address)
	LEFT JOIN ronin.price.ez_prices_hourly p ON (DECODED_LOG:"offer":"paymentToken" = p.token_address AND date_trunc('hour', l.block_timestamp) = p.hour)
	WHERE 1=1
	  --AND tx_hash = '0x43d77844acaefff0d6dde53be62ea8fdb721a2d253f4da8891c340ea52555316' --normal/single transfer
	  --AND tx_hash = '0x0a00aae0e2c7861d17cb90e36662cb4883c05fd2738ebc44cc7e56c3b01fe401' --bulk collection sales
	  --AND tx_hash = '0x94fc169e89ee79e0778346691e5ec1ad038bc430e0f4824fc66421135ec0a2c4' --bulk collection sales
	  AND contract_address = '0x3ef234bc2a04d86f6041e419458d9acbd077f2c1'
	  AND TOPIC_0 = '0xad64053f1eeea4079b4aafaca8934fffd9a6304ccdfe094404115202bda3ed03'
	--OrderFullFilled ) , refine as (
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , event_index
	  , index as sale_index
	  , 'bid_won' as event_type
	  , contract_address as platform_address
	  , 'Ronin Market' as platform_name
	  , NULL as platform_exchange_version
	  , NULL as aggregator_name
	  , seller as seller_address
	  , buyer as buyer_address
	  , nft_contract_address as contract_address
	  , collection_name as name
	  , value as token_id
	  , 1 as quantity
	  , token_standard
	  , currency_symbol
	  , currency_address
	  , price_raw as price
	  , price_usd
	  , total_fees
	  , platform_fee
	  , creator_fee
	  , total_fees_usd
	  , platform_fee_usd
	  , creator_fee_usd
	  -- , NULL as tx_fee
	  -- , NULL as tx_fee_usd
	from offer_sales, lateral flatten(input=>token_ids) ) SELECT * from refine



=======================================================================================
=======================================================================================
QUERY_NO: 923
QUERY_ID: 2b1049f2-6a21-4284-8832-9b67d5ce73e2
QUERY_TITLE: ETH Stake - Pubkeys w/ withdrawal address

QUERY_STRING:

with wallet_labels as (
	SELECT
	
	pubkey
	  , MAX(wallet) as wallet
	  , MAX(label) as label
	  , MAX(sub_label) as sub_label
	from (
	  SELECT
	
	  pubkey
	
	 , WITHDRAWAL_ADDRESS as wallet
	
	 , PLATFORM as label
	
	 , PLATFORM_CATEGORY as sub_label
	  FROM ethereum.beacon_chain.ez_deposits
	  WHERE 1=1
	  qualify row_number() OVER (PARTITION BY pubkey ORDER BY block_timestamp DESC) =1
	
	 --AND WITHDRAWAL_ADDRESS = '0x15dace490e3bee63ba9c2695ea6d29a78360dd96'
	  UNION ALL
	
	SELECT
	
	  t.pubkey
	
	 , w.withdrawal_address  as wallet
	
	 , WITHDRAWAL_ADDRESS_NAME as label
	
	 , WITHDRAWAL_ADDRESS_CATEGORY as sub_label
	  from (
	
	 SELECT
	
	
	 *
	
	  from ethereum.beacon_chain.ez_withdrawals
	
	 qualify row_number() OVER (PARTITION BY validator_index ORDER BY block_timestamp DESC) =1
	  )  w
	  LEFT JOIN (
	
	 SELECT
	
	
	 *
	
	
	, row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks
	
	 from ethereum.beacon_chain.fact_validators
	
	 QUALIFY ranks=1
	  ) t on w.validator_index = t.index
	)
	GROUP BY 1 ) , dates as (
	SELECT
	
	DISTINCT date_trunc('month', date_day) as dmonth
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '2020-11-01' AND CURRENT_DATE ) , sample_space as (
	SELECT
	
	dmonth
	  , pubkey
	  , wallet
	  , label
	  , sub_label
	from dates
	 LEFT JOIN wallet_labels on 1=1 ) -- SELECT * from sample_space ----------------------------END OF SAMPLE SPACE ----------------------------- , deposits as (
	SELECT
	
	date_trunc('month', block_timestamp) as dmonth
	  , pubkey
	  , SUM(deposit_amount) as validator_init --NOT always 32E
	from ethereum.beacon_chain.ez_deposits
	WHERE 1=1
	GROUP BY 1, 2 ) , withdraws as (
	SELECT
	
	date_trunc('month', w.block_timestamp) as dmonth
	  , t.pubkey
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT BETWEEN 20 AND 32 THEN -WITHDRAWAL_AMOUNT ---Slashed validators exiting
	
	
	  WHEN WITHDRAWAL_AMOUNT>32 THEN -32 ----Normal validator exit with possible rewards
	
	
	  END ---ignoring summing/taking into account other values - > staking reward withdrawals
	
	 ) as validator_exit
	  , SUM(CASE
	
	
	
	WHEN WITHDRAWAL_AMOUNT <20 THEN WITHDRAWAL_AMOUNT END
	
	  ) as rewards
	from ethereum.beacon_chain.ez_withdrawals w
	LEFT JOIN (
	  SELECT
	
	  *
	
	 , row_number() OVER (PARTITION BY pubkey ORDER BY slot_number DESC) as ranks
	  from ethereum.beacon_chain.fact_validators
	  QUALIFY ranks=1
	) t on w.validator_index = t.index
	WHERE 1=1
	GROUP BY 1, 2 ) , merge as (
	SELECT
	
	s.dmonth
	  , s.pubkey
	  , s.wallet
	  , s.label
	  , d.validator_init
	  , w.validator_exit
	  , SUM(coalesce(validator_init,0)+coalesce(validator_exit,0)) OVER (PARTITION BY PUBKEY ORDER BY dmonth ASC) as key_stake_monthly
	  , w.rewards
	from sample_space s
	 LEFT JOIN deposits d using(dmonth, pubkey)
	LEFT JOIN withdraws w using(dmonth, pubkey) ) SELECT
	  dmonth
	, SUM(key_stake_monthly) as eth_staked
	, COUNT(pubkey) as validators
	, COUNT(DISTINCT wallet) as wallets from merge WHERE key_stake_monthly>=20 GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 924
QUERY_ID: 525a5563-07f5-4fd1-888f-6bdb25eb3fab
QUERY_TITLE: Burn Events - Details

QUERY_STRING:

-- The wallet executing the burn transfers seems to change between the 2 burn transactions we have atm -- So, kinda not possible to automate the burn events lookup, relying on manual updation of each tx_hash with burns as (
	with base as
	 (
	  SELECT
	
	  block_timestamp as timestamp
	
	 , AMOUNT as burnt_tokens
	
	 , AMOUNT_USD as usd_value_at_burn
	  from arbitrum.core.ez_token_transfers
	  WHERE 1=1
	
	 -- -- ADD NEW BURN TX_HASH HERE
	
	 -- AND tx_hash in (
	
	 --
	  '0xf329b77939562190d090b2faa762ac05f5dbe5568e1c60e4f2c4c72dd1d148ed'
	
	 --
	  , '0x595d5ab22bb9f6b2556c6b5ea110cd8bea84a72c046d2fddea40deb4f7b1df09'
	
	 --
	)
	
	 AND contract_address = '0x95146881b86b3ee99e63705ec87afe29fcc044d9'
	
	 AND to_address = lower('0x000000000000000000000000000000000000dEaD')
	
	 AND block_number>=218716628
	)
	SELECT
	
	*
	
	, SUM(burnt_tokens) OVER (ORDER BY timestamp ASC) as cumulative_burns
	from base ) , display as (
	SELECT
	
	row_number() OVER(ORDER BY timestamp ASC) as burn_iteration
	  , timestamp
	  , burnt_tokens
	  , USD_VALUE_AT_BURN
	  , SUPPLY_BURNT_PERC
	  , cumulative_burns
	  , round((cumulative_burns/supply_after_burn)*100, 3) as total_supply_burnt_perc
	  , supply_at_burn
	  , supply_after_burn
	from (
	  --- CHECK LATEST OFFICIAL SUPPLY: https://archive.prod.vertexprotocol.com/indexer/v2/vrtx?q=total_supply
	  SELECT
	
	  *
	
	 , LAG(cumulative_burns) OVER (ORDER BY timestamp ASC) as prev_burn
	
	 , (1000000000 -1 - coalesce(prev_burn, 0)) as supply_at_burn
	
	 , supply_at_burn - burnt_tokens as supply_after_burn
	
	 , round((burnt_tokens/supply_at_burn)*100, 3)  as supply_burnt_perc
	  from burns
	  ORDER BY timestamp DESC
	) ) SELECT * , timestamp::date as date,  from display ORDER BY timestamp DESC



=======================================================================================
=======================================================================================
QUERY_NO: 925
QUERY_ID: f6de3c22-6c8a-4540-aaf6-022c3669e454
QUERY_TITLE: week 1 quiz  Q5

QUERY_STRING:

-- forked from week 1 quiz  Q4 @ https://flipsidecrypto.xyz/studio/queries/a7fb22ab-2f78-4680-a802-f7cc4d254d13 SELECT
	--COUNT(*) as total_mint_txns
	date_trunc('week', block_timestamp) as week
	, COUNT(*) as total_mint_txns
	, SUM(MINT_AMOUNT/pow(10, decimal)) as mint_amounts from solana.defi.fact_token_mint_actions WHERE 1=1
	AND mint = 'J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn'
	AND block_timestamp::date between '2025-03-01' AND '2025-03-31' GROUP BY 1 ORDER BY 1 asc



=======================================================================================
=======================================================================================
QUERY_NO: 926
QUERY_ID: 45f4c0df-d0d9-4d65-94d3-16c4da4f48ff
QUERY_TITLE: retention plots batch data

QUERY_STRING:

-- forked from retention plots @ https://flipsidecrypto.xyz/studio/queries/d8637e50-b56b-4b0a-94c2-da5409ffda30 -- forked from new vs old traffic @ https://flipsidecrypto.xyz/studio/queries/32c825b6-9c3d-467a-811e-23cbd25bb896 -- forked from new users by instance @ https://flipsidecrypto.xyz/studio/queries/c8ac5c1a-c63d-4c2f-bb3c-8bf718b0822c -- forked from new users @ https://flipsidecrypto.xyz/studio/queries/1a856392-7af8-4ad9-96ee-909b0154fe62 with merge_all_time as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , users as (
	SELECT
	
	block_timestamp
	  , trader
	  , label
	from merge_all_time
	qualify row_number() OVER (PARTITION BY trader ORDER BY block_timestamp ASC) = 1 ) , new_users as (
	SELECT
	
	block_timestamp
	  , trader
	  , 1 as is_new
	from users
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  ) ---retention logic WEEKLY //monthly doesn't make sense for a quarterly dashboard! --- , base as (
	SELECT
	
	trader
	  --, CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by trader) as min_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by trader) -- min_date
	
	
	, date_trunc('week', block_timestamp) -- current date in month
	
	 ) as difference
	from merge_all_time a
	WHERE 1=1 AND trader  IN (SELECT trader from new_users)
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}' ) ,  count_new_users as(
	select
	
	min_date
	  , count(distinct trader) as new_users
	 from base
	group by 1 ) , count_returning_users as(
	select
	
	min_date
	  , difference
	  , count(distinct trader) as existing_users
	 from base
	where difference != 0
	group by 1,2 ) ,  long_retention_table as(
	select
	
	count_new_users.min_date as cohort
	  , difference
	  , new_users
	  , existing_users
	  , round(existing_users / new_users,2) as retention_pct
	from count_new_users
	left join count_returning_users
	
	
	on count_new_users.min_date = count_returning_users.min_date
	WHERE 1=1 AND difference IS NOT NULL  ) , filter as (
	SELECT
	
	TO_VARCHAR(CASE WHEN (MONTH(cohort)/10) < 1 THEN TO_VARCHAR(0) || TO_VARCHAR(MONTH(cohort)) ELSE TO_VARCHAR(MONTH(cohort)) END)
	
	|| '-' ||
	
	TO_VARCHAR(CASE WHEN (DAY(cohort)/10) < 1 THEN TO_VARCHAR(0) || TO_VARCHAR(DAY(cohort)) ELSE TO_VARCHAR(DAY(cohort)) END) as batch
	  , difference as weeks_since
	  , retention_pct
	  , new_users
	  , existing_users
	from long_retention_table ) SELECT
	 batch
	 , MAX(new_users) as new_users from filter WHERE 1=1 GROUP BY 1 ORDER BY batch ASC



=======================================================================================
=======================================================================================
QUERY_NO: 927
QUERY_ID: 942bd0ad-c60a-49f3-b709-a4b2c62fa970
QUERY_TITLE: api base query

QUERY_STRING:

-- forked from poison test joins weekly @ https://flipsidecrypto.xyz/studio/queries/0e4b40c7-cf68-47b0-a337-856d7a1b1def -- forked from poison test joins @ https://flipsidecrypto.xyz/studio/queries/bc7e6bf2-86d6-4eab-8d1e-2b05fb5b4ca8 -- forked from poison test windows @ https://flipsidecrypto.xyz/studio/queries/c0ecc203-2f26-460d-93b9-16f7f8edb669 SELECT
	block_timestamp
	, block_id
	, tx_id
	, index
	, tx_from
	, tx_to
	, amount
	, mint  from solana.core.fact_transfers WHERE 1=1
	AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	
	UNION ALL SELECT
	block_timestamp
	, block_id
	, tx_id
	, index
	, tx_from
	, tx_to
	, amount
	, mint  from solana.core.fact_transfers WHERE 1=1
	AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' ORDER BY BLOCK_ID ASC, INDEX ASC



=======================================================================================
=======================================================================================
QUERY_NO: 928
QUERY_ID: a7fb22ab-2f78-4680-a802-f7cc4d254d13
QUERY_TITLE: week 1 quiz  Q4

QUERY_STRING:

SELECT
	COUNT(*) as total_sales from solana.nft.ez_nft_sales WHERE 1=1
	AND block_timestamp::date = '2025-04-03'



=======================================================================================
=======================================================================================
QUERY_NO: 929
QUERY_ID: 71684c91-e54f-49d6-b9fe-7be23e718284
QUERY_TITLE:  (open/close bucketed)

QUERY_STRING:

with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	WHERE trade_id = 182080 ) SELECT
	*
	, CASE
	
	  WHEN pair_index IN (0, 1, 9) THEN 'CRYPTO'
	
	 WHEN pair_index IN (10, 11, 12, 13, 14, 15) THEN 'INDICES'
	
	 WHEN pair_index IN (16, 17, 2, 3, 4) THEN 'FOREX'
	
	 WHEN pair_index IN (5, 6, 7, 8) THEN 'COMMODITIES'
	
	 WHEN pair_index between 18 and 24 THEN 'Mag7 Stocks'
	
	 ELSE 'NEW/UNGROUPED'
	  END as label_groups
	, CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	 END
	  as volume_usd from refine ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 930
QUERY_ID: 40ef0d0d-27eb-4c45-bf07-24284c4d1734
QUERY_TITLE: combined test - refs

QUERY_STRING:

with closers as (
	SELECT *
	from $query('17e6dbae-4b1a-4ff6-af40-05a6d4fb8e78') ) , openers as (
	SELECT * from $query('527107bc-4410-40e4-af88-9c4a362f0742') ) , base as (
	SELECT
	
	o.*
	  , CASE WHEN c.trade_id IS NULL THEN 0 ELSE 1 END as closed
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from openers o
	LEFT JOIN closers c ON o.trade_id = c.trade_id ) SELECT
	SUM(CASE
	
	  WHEN closed=0 THEN volume
	
	 ELSE volume + coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	 END
	) as volume_usd from base



=======================================================================================
=======================================================================================
QUERY_NO: 931
QUERY_ID: c7382479-b56f-4f33-9e21-667c18745ab8
QUERY_TITLE: avax vertex events

QUERY_STRING:

-- forked from mantle vertex events  @ https://flipsidecrypto.xyz/studio/queries/7f03e4a1-00cc-4a24-b77e-d46f867b9894 -- forked from base vertex events  @ https://flipsidecrypto.xyz/studio/queries/3dfe3faf-5fff-45c4-9e51-0b2e08d225e1 -------------------------------------AVAX PERP TRADES--------------------------------------------------- with avax_perp_trades as (
	with avax_products as (
	  with avax as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/28178306-96ca-42fa-a740-76a3155083b8/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from avax, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	avax_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  avalanche.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-04-28'
	
	
	  AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  AND contract_address = LOWER('0x5DB7f0Fc871598AE424324477635CAcCE3f07Bec') --AVAX Offchain EXchange Contract
	
	
	 ),
	
	avax_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  avax_logs l
	),
	avax_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	  avax_order_fill_decode_v2 l
	
	 INNER JOIN avax_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 avax_order_fill_format ) -------------------------------------END OF AVAX PERP TRADES--------------------------------------------------- -- SELECT --
	SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume  --
	, SUM(CASE  --
	
	
	WHEN is_taker=FALSE --
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'  --
	
	
	
	 AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001' --
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_maker --
	, SUM(CASE  --
	
	
	WHEN is_taker=TRUE --
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'  --
	
	
	
	 AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001' --
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_taker -- from avax_perp_trades SELECT
	COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees from avax_perp_trades



=======================================================================================
=======================================================================================
QUERY_NO: 932
QUERY_ID: 9839872f-1790-46ec-888b-3120e180311f
QUERY_TITLE: vast-aqua

QUERY_STRING:

with base as (
	SELECT
	
	o.*
	  , CASE WHEN c.trade_id IS NULL THEN 0 ELSE 1 END as closed
	  , c.block_timestamp as close_timestamp
	  , c.tx_hash as close_tx
	  , c.order_type as close_type
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) SELECT * from base  WHERE 1=1
	AND close_type = 'liq'



=======================================================================================
=======================================================================================
QUERY_NO: 933
QUERY_ID: 24f4df07-8d77-46a5-8315-8a3af5ba562d
QUERY_TITLE: [FINAL] market_pairs

QUERY_STRING:

with market_pairs as (
	SELECT
	  block_timestamp
	  , DECODED_LOG:index as pair_index
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"from", 3))) as from_symbol
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"to", 3))) as to_symbol
	  , from_symbol || '-' || to_symbol as market_pair
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND contract_address = '0x260e349f643f12797fdc6f8c9d3df211d5577823' --pairsStorageAddress https://ostium-labs.gitbook.io/ostium-docs/security/smart-contract-audits
	  AND TOPIC_0 = '0x797331683c7d888af91e5c6800626a01b5f1f7337a712c6915baa1b39c138a09' --event_name = 'PairAdded'
	  AND tx_succeeded ) SELECT
	block_timestamp
	, pair_index
	, from_symbol
	, to_symbol
	, market_pair from market_pairs



=======================================================================================
=======================================================================================
QUERY_NO: 934
QUERY_ID: e6ae97a5-9a59-4548-aacb-271b2d3eb744
QUERY_TITLE: native_stake_actions

QUERY_STRING:

with delegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'delegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b'
	  AND TX_SUCCEEDED ) , undelegate_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_1, 40) as wallet
	  , '0x' || RIGHT(TOPIC_2, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'undelegate' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c'
	  AND TX_SUCCEEDED ) , stake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'stake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d'
	  AND TX_SUCCEEDED ) , unstake_events as (
	SELECT
	  *
	  , origin_from_address as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'unstake' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75'
	  AND TX_SUCCEEDED ) , reward_events as (
	SELECT
	  *
	  , '0x' || RIGHT(TOPIC_2, 40) as wallet
	  , '0x' || RIGHT(TOPIC_1, 40) as validator
	  , TO_NUMBER(livequery.utils.udf_hex_to_int(data))/1e18 as amount
	  , 'reward_claim' as action
	from ronin.core.fact_event_logs
	WHERE 1=1
	  AND contract_address = '0x545edb750eb8769c868429be9586f5857a768758'
	  AND TOPIC_0 = '0x0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7'
	  AND TX_SUCCEEDED ) , merge as (
	SELECT * from delegate_events
	UNION ALL
	SELECT * from undelegate_events
	UNION ALL
	 SELECT * from stake_events
	UNION ALL
	SELECT * from unstake_events
	UNION ALL
	SELECT * from reward_events )  SELECT
	block_number
	, block_timestamp
	, tx_hash
	, event_index
	, action
	, wallet
	, validator
	, amount from merge LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 935
QUERY_ID: 56c167cc-1050-4c8d-9501-9e0db04f3dbf
QUERY_TITLE: new users onboarded

QUERY_STRING:

with new_users as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as wallet
	from ronin.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  AND tx_succeeded ) SELECT
	block_timestamp::date as ddate
	, COUNT(DISTINCT wallet) as users
	, SUM(users) OVER (ORDER BY ddate ASC) as total_new_users from new_users GROUP BY 1  ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 936
QUERY_ID: 31a1b6ba-a597-4402-90ef-459c674c29df
QUERY_TITLE: complex txns

QUERY_STRING:

with special_ops as (
	SELECT
	  tx_hash
	  , MAX(block_timestamp) as ts
	
	, COUNT(DISTINCT action) as action_counts
	  , COUNT(CASE WHEN action='delegate' THEN 1 ELSE NULL END) as c_del
	  , COUNT(CASE WHEN action='undelegate' THEN 1 ELSE NULL END) as c_undel
	  , COUNT(CASE WHEN action='reward_claim' THEN 1 ELSE NULL END) as c_rewards
	  , MAX(amount) as amount_total
	from community.ronin.staking_actions
	GROUP BY 1
	HAVING action_counts>1 OR (action_counts=1 AND c_undel>1) ) , refine_ops as (
	SELECT
	  ts
	  , tx_hash
	  , CASE
	
	
	 WHEN action_counts=2 AND (c_del>=1 AND c_rewards>=1) THEN 'delegate-rewards'
	
	
	WHEN action_counts=2 AND (c_del=1 AND c_undel=1) THEN 're-delegate'
	
	
	WHEN action_counts=1 AND (c_undel>1) THEN 'bulk-undelegate'
	
	
	 ELSE NULL END as action
	  , amount_total as amount
	from special_ops ) SELECT
	 ts::date as ddate
	, action
	 , COUNT(DISTINCT tx_hash) as totals from refine_ops GROUP BY 1, 2



=======================================================================================
=======================================================================================
QUERY_NO: 937
QUERY_ID: 6aa7f3a4-c6eb-4757-acdc-d6a67297826f
QUERY_TITLE: stake over time + total stake

QUERY_STRING:

with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , pre_sums as (
	SELECT
	  ddate
	  , SUM(amount_adjusted) as net_stake
	from list
	WHERE 1=1
	  AND amount_adjusted>=5
	GROUP BY 1 ) , post_sums as (
	SELECT
	  block_timestamp::date as ddate
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	from community.ronin.staking_actions
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1 ) , merge as (
	SELECT * from pre_sums
	UNION ALL
	SELECT * from post_sums ) , aggr as (
	SELECT
	  *
	  , ROUND(SUM(net_stake) OVER (ORDER BY ddate ASC)/1e6, 3) as cumulative_stake
	from merge
	  ) SELECT * from aggr WHERE 1=1
	AND ddate>='2024-10-01' ORDER BY ddate DESC



=======================================================================================
=======================================================================================
QUERY_NO: 938
QUERY_ID: 03e48006-b930-40e5-861c-47d40d6602c5
QUERY_TITLE: new users + staking 

QUERY_STRING:

-- forked from new users + staking (active stakers) @ https://flipsidecrypto.xyz/studio/queries/28215a3d-7010-4aaa-8455-c1ed3a304bb0 with new_users as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as wallet
	from ronin.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  AND tx_succeeded ) , stake_stats as (
	SELECT
	  wallet
	  , COUNT(DISTINCT tx_hash) as tx_counts
	  , SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END) as net_stake
	from community.ronin.staking_actions
	 WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1 ) , merge as (
	SELECT
	  n.*
	  , coalesce(tx_counts, 0) as tx_count
	  , coalesce(net_stake, 0) as net_stakes
	  , CASE WHEN tx_count=0 THEN 'no participation' ELSE 'participated' END as label1
	  , CASE WHEN net_stakes<=0 THEN 'not currently staking' ELSE 'active staker' END as label2
	--from new_users
	 --LEFT JOIN stake_stats using(wallet)
	from new_users n
	 LEFT JOIN stake_stats s ON n.wallet = s.wallet ) SELECT
	label1 as stake_participation
	  , label2 as stake_status
	, COUNT(DISTINCT wallet) as totals from merge WHERE 1=1 GROUP BY 1, 2



=======================================================================================
=======================================================================================
QUERY_NO: 939
QUERY_ID: adaa96f7-1236-4392-9961-b49d720627a7
QUERY_TITLE: Volume Breakdown by Action

QUERY_STRING:

-- forked from stake over time + total stake @ https://flipsidecrypto.xyz/studio/queries/6aa7f3a4-c6eb-4757-acdc-d6a67297826f with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , pre_sums as (
	SELECT
	  ddate
	  , SUM(amount_adjusted) as net_stake
	from list
	WHERE 1=1
	  AND amount_adjusted>=5
	GROUP BY 1 ) , post_sums as (
	SELECT
	  block_timestamp::date as ddate
	  , action
	  , SUM(amount) as net_stake
	from community.ronin.staking_actions
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1, 2 ) SELECT
	 *
	 , CASE WHEN action IN ('delegate', 'stake') THEN net_stake ELSE net_stake*-1 END as volume from post_sums WHERE 1=1
	AND ddate>='2024-10-01' ORDER BY ddate ASC, ACTION ASC



=======================================================================================
=======================================================================================
QUERY_NO: 940
QUERY_ID: d4dc50cf-c3c9-4c0d-93ab-7fbda7059741
QUERY_TITLE: validator stakes copy

QUERY_STRING:

-- forked from validator stakes @ https://flipsidecrypto.xyz/studio/queries/87bc5e02-5286-4aba-9cec-07f8444d44cb -- forked from stake over time + total stake @ https://flipsidecrypto.xyz/studio/queries/6aa7f3a4-c6eb-4757-acdc-d6a67297826f with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , post_sums as (
	SELECT
	  validator
	  , MAX(label) as name
	  , MAX(CASE WHEN amount_adjusted<0 THEN 0 ELSE amount_adjusted END) as pre_amount
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	  , pre_amount + net_stake as total_stake
	  , MAX(status) as status
	from community.ronin.staking_actions
	 LEFT JOIN list using(validator)
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	  AND label IS NOT NULL
	GROUP BY 1 ) SELECT
	 ROW_NUMBER() OVER (ORDER BY total_stake DESC) as rank
	, validator
	, name
	, total_stake
	, status
	 , 100* ratio_to_report(total_stake) OVER () as stake_percentage from post_sums WHERE 1=1
	AND status!='inactive' ORDER BY total_stake DESC



=======================================================================================
=======================================================================================
QUERY_NO: 941
QUERY_ID: 49eed974-65bb-4333-9a21-f2b9e1971421
QUERY_TITLE: validator counts

QUERY_STRING:

-- forked from validator stakes copy @ https://flipsidecrypto.xyz/studio/queries/d4dc50cf-c3c9-4c0d-93ab-7fbda7059741 -- forked from validator stakes @ https://flipsidecrypto.xyz/studio/queries/87bc5e02-5286-4aba-9cec-07f8444d44cb -- forked from stake over time + total stake @ https://flipsidecrypto.xyz/studio/queries/6aa7f3a4-c6eb-4757-acdc-d6a67297826f with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , post_sums as (
	SELECT
	  validator
	  , MAX(label) as name
	  , MAX(CASE WHEN amount_adjusted<0 THEN 0 ELSE amount_adjusted END) as pre_amount
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	  , pre_amount + net_stake as total_stake
	  , MAX(status) as status
	from community.ronin.staking_actions
	 LEFT JOIN list using(validator)
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	  AND label IS NOT NULL
	GROUP BY 1 ) SELECT
	 COUNT(DISTINCT validator) as totals from post_sums WHERE 1=1
	AND status = 'active'



=======================================================================================
=======================================================================================
QUERY_NO: 942
QUERY_ID: 87bc5e02-5286-4aba-9cec-07f8444d44cb
QUERY_TITLE: validator stakes // naka coeff

QUERY_STRING:

-- forked from stake over time + total stake @ https://flipsidecrypto.xyz/studio/queries/6aa7f3a4-c6eb-4757-acdc-d6a67297826f with fetchLQ AS (
	SELECT
	  livequery.live.udf_api(
	
	 'GET',
	
	 'https://science.flipsidecrypto.xyz/googlesheets/readsheet',
	
	 { 'Content-Type': 'application/json' },
	
	
	{
	
	
	
	'sheets_id' : '1gijyH24-1WHS3JgJMH1zH289ZmRraMmjYQeRfHlGkXA',
	
	
	
	'tab_name' : 'Sheet2'
	
	
	}
	  ) as response ) , list as (
	SELECT
	
	value:validator as validator
	  , value:label as label
	  , value:status as status
	  , TO_NUMBER(value:amount_adjusted, 18, 2) as amount_adjusted
	  , date_trunc('day', TO_TIMESTAMP(1727679600)) as ddate
	from fetchLQ, lateral flatten (input=>response:data) ) , post_sums as (
	SELECT
	  validator
	  , MAX(label) as name
	  , MAX(CASE WHEN amount_adjusted<0 THEN 0 ELSE amount_adjusted END) as pre_amount
	  , ROUND(SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END), 2) as net_stake
	  , pre_amount + net_stake as total_stake
	  , MAX(status) as status
	from community.ronin.staking_actions
	 LEFT JOIN list using(validator)
	WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	  AND label IS NOT NULL
	GROUP BY 1 ) , refine as (
	SELECT
	
	validator
	  , name
	  , total_stake
	  , status
	
	, 100* ratio_to_report(total_stake) OVER () as stake_percentage
	  , ROW_NUMBER() OVER (ORDER BY total_stake DESC) as rank
	from post_sums
	WHERE 1=1 ) SELECT
	rank
	, SUM(stake_percentage) OVER (ORDER BY rank ASC ) as stake_cumulative
	, CASE WHEN stake_cumulative<33 THEN 'safe' ELSE 'unsafe' END as label from refine ORDER BY rank ASC



=======================================================================================
=======================================================================================
QUERY_NO: 943
QUERY_ID: 28215a3d-7010-4aaa-8455-c1ed3a304bb0
QUERY_TITLE: new users + staking (active stakers)

QUERY_STRING:

with new_users as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as wallet
	from ronin.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  AND tx_succeeded ) , stake_stats as (
	SELECT
	  wallet
	  , COUNT(DISTINCT tx_hash) as tx_counts
	  , SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END) as net_stake
	from community.ronin.staking_actions
	 WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1 ) , merge as (
	SELECT
	  n.*
	  , coalesce(tx_counts, 0) as tx_count
	  , coalesce(net_stake, 0) as net_stakes
	  , CASE WHEN tx_count=0 THEN 'no participation' ELSE 'participated' END as label1
	  , CASE WHEN net_stakes<=0 THEN 'not currently staking' ELSE 'active staker' END as label2
	--from new_users
	 --LEFT JOIN stake_stats using(wallet)
	from new_users n
	 LEFT JOIN stake_stats s ON n.wallet = s.wallet ) SELECT
	  label2 as stake_status
	, COUNT(DISTINCT wallet) as totals from merge WHERE 1=1
	AND label1 = 'participated' GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 944
QUERY_ID: 2db05c05-2ce0-4802-b438-f4b4205ba29a
QUERY_TITLE: new users + staking (active stakers) stake amounts

QUERY_STRING:

-- forked from new users + staking (active stakers) @ https://flipsidecrypto.xyz/studio/queries/28215a3d-7010-4aaa-8455-c1ed3a304bb0 with new_users as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  , from_address as wallet
	from ronin.core.fact_transactions
	WHERE 1=1
	  AND nonce=0
	  AND tx_succeeded ) , stake_stats as (
	SELECT
	  wallet
	  , COUNT(DISTINCT tx_hash) as tx_counts
	  , SUM(CASE WHEN action IN ('stake', 'delegate') THEN amount ELSE amount*-1 END) as net_stake
	from community.ronin.staking_actions
	 WHERE 1=1
	  AND action IN ('delegate', 'undelegate', 'stake', 'unstake')
	GROUP BY 1 ) , merge as (
	SELECT
	  n.*
	  , coalesce(tx_counts, 0) as tx_count
	  , coalesce(net_stake, 0) as net_stakes
	  , CASE WHEN tx_count=0 THEN 'no participation' ELSE 'participated' END as label1
	  , CASE WHEN net_stakes<=0 THEN 'not currently staking' ELSE 'active staker' END as label2
	--from new_users
	 --LEFT JOIN stake_stats using(wallet)
	from new_users n
	 LEFT JOIN stake_stats s ON n.wallet = s.wallet ) SELECT
	  CASE
	
	  WHEN net_stakes <1 THEN '<1'
	
	 WHEN net_stakes <10 THEN '<10'
	
	 WHEN net_stakes <100 THEN '<100'
	
	 WHEN net_stakes <1000 THEN '<1K'
	
	 WHEN net_stakes <10000 THEN '<10K'
	
	 WHEN net_stakes <100000 THEN '<100K'
	
	 ELSE '>100K' END as label
	, COUNT(DISTINCT wallet) as totals from merge WHERE 1=1
	AND label1 = 'participated'
	AND label2 = 'active staker' GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 945
QUERY_ID: a07b0e89-24cf-4473-9cd2-d55ec106c48a
QUERY_TITLE: edge trades arb

QUERY_STRING:

SELECT * from arbitrum.vertex.ez_edge_trades WHERE block_timestamp::date = '2024-03-15' AND symbol = 'SOL-PERP' ORDER BY block_timestamp ASC, BLOCK_NUMBER ASC, EDGE_EVENT_INDEX ASC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 946
QUERY_ID: 14caec93-4c41-485c-9969-df40c663a649
QUERY_TITLE: edge trades blitz

QUERY_STRING:

-- forked from edge trades arb @ https://flipsidecrypto.xyz/studio/queries/a07b0e89-24cf-4473-9cd2-d55ec106c48a SELECT * from blast.blitz.ez_edge_trades WHERE block_timestamp::date = '2024-03-15' AND symbol = 'SOL-PERP' ORDER BY block_timestamp ASC, BLOCK_NUMBER ASC, EDGE_EVENT_INDEX ASC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 947
QUERY_ID: 9a60061d-35fc-4256-91ac-3c24833fb613
QUERY_TITLE: all time volume - perps ( No EDGE )

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	
	
	 AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge



=======================================================================================
=======================================================================================
QUERY_NO: 948
QUERY_ID: c3f4f38e-8dea-4163-aede-6301d3a58c58
QUERY_TITLE: all time volume - spot 

QUERY_STRING:

-- forked from all time volume - perps ( No EDGE ) @ https://flipsidecrypto.xyz/studio/queries/9a60061d-35fc-4256-91ac-3c24833fb613 with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_spot_trades
	WHERE 1=1
	
	-- UNION ALL
	 -- ---base
	 -- SELECT *, 'base' as label from base.vertex.ez_spot_trades
	-- WHERE 1=1
	-- UNION ALL
	 -- ---blitz
	-- SELECT * , 'blitz' as label from blast.blitz.ez_spot_trades
	-- WHERE 1=1
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_spot_trades
	WHERE 1=1
	-- UNION ALL
	-- ---sei ERROR SQL compilation error: Object 'SEI.VERTEX.EZ_SPOT_TRADES' does not exist or not authorized.
	-- SELECT * , 'sei' as label from sei.vertex.ez_spot_trades
	-- WHERE 1=1 ) SELECT
	COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge



=======================================================================================
=======================================================================================
QUERY_NO: 949
QUERY_ID: d6515027-7651-408d-ac37-627cbdad254d
QUERY_TITLE: all time volume - perps ( w/ EDGE ) 

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1 ) SELECT
	COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge



=======================================================================================
=======================================================================================
QUERY_NO: 950
QUERY_ID: fe371d94-633d-4aa5-a7d5-ea80fd4b2f5e
QUERY_TITLE: defillama proofs: edge trades blast/blitz

QUERY_STRING:

-- forked from defillama proofs: edge trades arb  @ https://flipsidecrypto.xyz/studio/queries/e8834185-79e1-4cf4-8244-15b1bc7b1310 -- forked from edge trades arb @ https://flipsidecrypto.xyz/studio/queries/a07b0e89-24cf-4473-9cd2-d55ec106c48a SELECT * from blast.blitz.ez_perp_trades WHERE 1=1
	AND block_timestamp::date = '2024-03-15' AND symbol = 'SOL-PERP'
	--EDGE account/trader (also pays no fees/0 fees always)
	AND trader = '0x0000000000000000000000000000000000000000'
	AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001' ORDER BY block_timestamp ASC, BLOCK_NUMBER ASC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 951
QUERY_ID: e8834185-79e1-4cf4-8244-15b1bc7b1310
QUERY_TITLE: defillama proofs: edge trades arb 

QUERY_STRING:

-- forked from edge trades arb @ https://flipsidecrypto.xyz/studio/queries/a07b0e89-24cf-4473-9cd2-d55ec106c48a SELECT * from arbitrum.vertex.ez_perp_trades WHERE 1=1
	AND block_timestamp::date = '2024-03-15' AND symbol = 'SOL-PERP'
	--EDGE account/trader (also pays no fees/0 fees always)
	AND trader = '0x0000000000000000000000000000000000000000'
	AND subaccount ='0x0000000000000000000000000000000000000000000000000000000000000001' ORDER BY block_timestamp ASC, BLOCK_NUMBER ASC LIMIT 20



=======================================================================================
=======================================================================================
QUERY_NO: 952
QUERY_ID: bac58cf6-3c16-47ef-97d6-e23641e8be39
QUERY_TITLE: ostium week over week

QUERY_STRING:

-- forked from Quarterly Comparisons Optimized (EDGE Excluded)  @ https://flipsidecrypto.xyz/studio/queries/0527b0dc-7cba-4b3e-9507-57f43d07bcf8 -- forked from Quarterly Comparisons Strings+Emojis Optimized (EDGE included) @ https://flipsidecrypto.xyz/studio/queries/ef7b409d-a864-4e78-9961-bc7392a1814f with trades_data as (
	with base as (
	  SELECT
	
	  o.*
	
	 , CASE
	
	
	
	WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	
	ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	
	 END as timestamp_arr
	
	 , profit_percent
	
	 , close_price
	
	 , closing_price_impact_perc
	
	 , usdc_sent
	
	 , order_id
	
	 , rollover_fees
	
	 , funding_fees
	
	 , vault_liq_fees
	  from community.arbitrum.ostium_trade_opens o
	  LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id
	)
	
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	WHERE 1=1
	  AND (DATEDIFF('week', CURRENT_DATE, TO_TIMESTAMP_NTZ(VALUE)::date) BETWEEN -5 and -1)
	  --WHERE trade_id = 182080 ) , daily_avg_traders as (
	SELECT
	
	wdate
	  , FLOOR(AVG(traders)) as daily_avg_traders
	  , FLOOR(AVG(trades)) as daily_avg_trades
	from (
	  SELECT
	
	  date_trunc('week', trade_timestamp) as wdate
	
	 , block_timestamp::date as ddate
	
	 , COUNT(DISTINCT trader) as traders
	
	 , COUNT(DISTINCT trade_id) as trades
	  from trades_data
	  WHERE 1=1
	  GROUP BY 1, 2
	)
	GROUP BY 1 ) , aggrs as (
	SELECT
	  date_trunc('week', trade_timestamp) as wdate
	  , COUNT(DISTINCT trader) AS unique_traders
	  , COUNT(DISTINCT trade_id) AS total_orders
	  , SUM(
	
	
	CASE
	
	
	
	WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	
	  ELSE funding_fees + rollover_fees + vault_liq_fees
	
	
	END
	
	 ) as total_fees
	  , SUM(
	
	
	CASE
	
	
	
	WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	
	  ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	
	  END
	
	
	) as total_volume
	  , COUNT(DISTINCT trade_timestamp::date) as span_days
	  , MAX(daily_avg_traders) as daily_avg_traders
	  , MAX(daily_avg_trades) as daily_avg_trades
	  , ROUND(total_orders/span_days, 0) as daily_avg_orders
	  , ROUND(total_volume/span_days, 2) as daily_avg_volume
	  , ROUND(total_fees/span_days, 2) as daily_avg_fees
	  , MAX(trade_timestamp::date) as max_date
	  , MIN(trade_timestamp::date) as min_date
	from trades_data a
	 LEFT JOIN daily_avg_traders t on date_trunc('week', a.trade_timestamp) = t.wdate
	WHERE 1=1
	GROUP BY 1
	ORDER BY 1 ASC ) --SELECT * from aggrs , delta_strs as (
	SELECT
	  *
	  , lag(unique_traders) OVER (ORDER BY wdate ASC) as p_unique_traders
	  , lag(total_orders) OVER (ORDER BY wdate ASC) as p_total_orders
	  , lag(total_volume) OVER (ORDER BY wdate ASC) as p_total_volume
	  , lag(total_fees) OVER (ORDER BY wdate ASC) as p_total_fees
	  , lag(daily_avg_traders) OVER (ORDER BY wdate ASC) as p_daily_avg_traders
	  , lag(daily_avg_trades) OVER (ORDER BY wdate ASC) as p_daily_avg_trades
	  , lag(daily_avg_volume) OVER (ORDER BY wdate ASC) as p_daily_avg_volume
	  , lag(daily_avg_fees) OVER (ORDER BY wdate ASC) as p_daily_avg_fees
	  -- calculate deltas
	  , ROUND(((unique_traders-p_unique_traders)/p_unique_traders)*100, 2) as traders_delta
	  , ROUND(((total_orders-p_total_orders)/p_total_orders)*100, 2) as orders_delta
	  , ROUND(((total_volume-p_total_volume)/p_total_volume)*100, 2) as vol_delta
	  , ROUND(((total_fees-p_total_fees)/p_total_fees)*100, 2) as fees_delta
	  , ROUND(((daily_avg_traders-p_daily_avg_traders)/p_daily_avg_traders)*100, 2) as dat_delta
	  , ROUND(((daily_avg_volume-p_daily_avg_volume)/p_daily_avg_volume)*100, 2) as dav_delta
	  , ROUND(((daily_avg_fees-p_daily_avg_fees)/p_daily_avg_fees)*100, 2) as daf_delta
	  , ROUND(((daily_avg_trades-p_daily_avg_trades)/p_daily_avg_trades)*100, 2) as dats_delta
	  -- stringify
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN vol_delta>=0 THEN '↗️' ELSE '🔻' END) || vol_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_volume), '999,999,999,999,999.00')
	
	 ) as vol_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999') || ' (' || (CASE WHEN orders_delta>=0 THEN '↗️' ELSE '🔻' END) || orders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_orders), '999,999,999,999,999')
	
	 ) as orders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999') || ' (' || (CASE WHEN traders_delta>=0 THEN '↗️' ELSE '🔻' END) || traders_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(unique_traders), '999,999,999,999,999')
	
	 ) as traders_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN fees_delta>=0 THEN '↗️' ELSE '🔻' END) || fees_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(total_fees), '999,999,999,999,999.00')
	
	 ) as fees_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999') || ' (' || (CASE WHEN dat_delta>=0 THEN '↗️' ELSE '🔻' END) || dat_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_traders), '999,999,999,999,999')
	
	 ) as dat_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00') || ' (' || (CASE WHEN dav_delta>=0 THEN '↗️' ELSE '🔻' END) || dav_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_volume), '999,999,999,999,999.00')
	
	 ) as dav_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00') || ' (' || (CASE WHEN daf_delta>=0 THEN '↗️' ELSE '🔻' END) || daf_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_fees), '999,999,999,999,999.00')
	
	 ) as daf_str
	  , COALESCE (
	
	
	TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00') || ' (' || (CASE WHEN dats_delta>=0 THEN '↗️' ELSE '🔻' END) || dats_delta || '%)'
	
	
	, TO_VARCHAR(TO_NUMBER(daily_avg_trades), '999,999,999,999,999.00')
	
	 ) as dats_str
	from aggrs ) --SELECT * from delta_strs , refine as (
	SELECT
	
	split(wdate, ' ')[0] as label
	  , MAX(vol_str) as TOTAL_VOLUME
	  , MAX(fees_str) as TOTAL_FEES
	  , MAX(traders_str) as TOTAL_TRADERS
	  , MAX(orders_str) as TOTAL_TRADES
	  , MAX(dav_str) as DAILY_AVG_VOLUME
	  , MAX(daf_str) as DAILY_AVG_FEES
	  , MAX(dat_str) as DAILY_AVG_TRADERS
	  , MAX(dats_str) as DAILY_AVG_TRADES
	from delta_strs
	GROUP BY 1 ) , weeks as (
	SELECT
	
	split(wdate, ' ')[0] as label
	from aggrs
	ORDER BY 1 ASC ) SELECT * FROM (
	SELECT METRIC, label, VALUE
	FROM refine
	UNPIVOT (VALUE FOR METRIC IN ( TOTAL_VOLUME, TOTAL_FEES, TOTAL_TRADERS, TOTAL_TRADES, DAILY_AVG_VOLUME, DAILY_AVG_FEES, DAILY_AVG_TRADERS, DAILY_AVG_TRADES )) ) PIVOT (
	MAX(VALUE) FOR label IN (SELECT DISTINCT label from weeks) ) ORDER BY metric DESC



=======================================================================================
=======================================================================================
QUERY_NO: 953
QUERY_ID: 8986d451-ea7c-4e90-8878-462afc7423ad
QUERY_TITLE: mon - daily net_flow

QUERY_STRING:

-- forked from mon - deposits @ https://flipsidecrypto.xyz/studio/queries/1d5f50ba-f8f5-410e-8b9f-f42f3210201b with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) , total_flow as (
	--ALL DEPOSITS
	SELECT
	
	block_timestamp::date as ddate
	  , 'deposits' as label
	  , SUM (VALUE) as total_mon
	from monad.testnet.fact_transactions t
	inner join app_wallets w  ON (t.to_address=w.user_app_wallet)
	WHERE 1=1
	  AND value>0
	  AND tx_succeeded
	GROUP BY 1, 2
	UNION ALL
	--ALL valid withdraws
	SELECT
	  block_timestamp::date as ddate
	  , 'withdraws' as label
	  , SUM(amount_out) as total_mon
	from community.monad.kizzy_testnet_uni_v3_swaps
	WHERE 1=1
	  AND origin_from_address = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	GROUP BY 1, 2 ) , daily_flow as (
	SELECT
	  ddate
	  , label
	  , SUM(CASE WHEN label = 'withdraws' THEN total_mon*-1 ELSE total_mon END) as mon_flow
	from total_flow
	GROUP BY 1 , 2
	ORDER BY 1 ASC ) , daily_cumulative as (
	SELECT
	  ddate
	  , label_count
	  , SUM(mon_net_flow) OVER (ORDER BY ddate ASC) as cumulative_flow
	  , cumulative_flow/label_count as net_flow_adj
	from (
	  SELECT
	
	 ddate
	
	 , COUNT(DISTINCT label) as label_count
	
	 , SUM(mon_flow) as mon_net_flow
	  from daily_flow
	  GROUP BY 1
	) ) SELECT
	 df.*
	, net_flow_adj from daily_flow df LEFT JOIN daily_cumulative dc ON df.ddate = dc.ddate WHERE 1=1
	AND df.ddate <= CURRENT_DATE - 1 ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 954
QUERY_ID: 80d93c4d-235a-4357-9e60-eab9a88d4711
QUERY_TITLE: all time volume - perps by instance (w/ EDGE included)

QUERY_STRING:

-- forked from all time volume - perps @ https://flipsidecrypto.xyz/studio/queries/9a60061d-35fc-4256-91ac-3c24833fb613 with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1 ) SELECT
	label
	, COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge GROUP by 1



=======================================================================================
=======================================================================================
QUERY_NO: 955
QUERY_ID: 3dfe3faf-5fff-45c4-9e51-0b2e08d225e1
QUERY_TITLE: base vertex events 

QUERY_STRING:

-------------------------------------BASE PERP TRADES--------------------------------------------------- with base_perp_trades as (
	with base_products as (
	  with base as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from base, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  base.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-09-15'
	
	
	  AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  --Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	  AND contract_address = LOWER('0xd0899a1235771733e89b674633981e422aa45B1A') --Offchain EXchange Contract
	
	
	 ),
	
	order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  logs l
	),
	order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	  order_fill_decode_v2 l
	
	 INNER JOIN base_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 order_fill_format ) -------------------------------------END OF BASE PERP TRADES--------------------------------------------------- SELECT
	SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 , SUM(CASE
	
	
	 WHEN is_taker=FALSE
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_maker
	, SUM(CASE
	
	
	 WHEN is_taker=TRUE
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_taker from base_perp_trades



=======================================================================================
=======================================================================================
QUERY_NO: 956
QUERY_ID: 74db109a-0b69-4308-9683-6519945177cb
QUERY_TITLE: April 1-10th CEX Deposits - Daily Stats

QUERY_STRING:

-- forked from April 1-10th CEX Deposits - Poison Distribution @ https://flipsidecrypto.xyz/studio/queries/0926abbd-72a3-41bd-87b3-69b18c9c2526 with cex_deposits as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers t
	LEFT JOIN solana.core.dim_labels l on (tx_to = address AND label_type ='cex' and label_subtype = 'deposit_wallet')
	WHERE 1=1
	  AND block_timestamp between '2025-04-01' AND '2025-04-10'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  -- AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NOT NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , transfers_to_depositors as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND tx_to in (SELECT DISTINCT tx_from from cex_deposits)
	  AND label_type IS NULL
	  -- AND mint='So11111111111111111111111111111111111111111'
	  AND block_timestamp between '2025-04-01' AND '2025-04-10' ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	  --, row_number() OVER (PARTITION BY s.wallet, s.tx_to ORDER BY s.block_timestamp ASC) as ranks
	from cex_deposits t1
	LEFT JOIN transfers_to_depositors t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	  OR
	
	 substring(t1.tx_to, 1, 2) = substring(t2.tx_from, 1, 2)
	
	)
	  -- AND (
	  --
	right(t1.tx_to, 3) = right(t2.tx_from, 3)
	  --
	OR
	  --
	right(t1.tx_to, 2) = right(t2.tx_from, 2)
	  -- )
	)
	WHERE 1=1
	  --AND matched_sender IS NOT NULL ) , poison_samples as (
	SELECT
	  block_timestamp::date as dday
	
	, tx_from as wallet
	  , MAX(CASE WHEN matched_sender IS NOT NULL THEN 1 ELSE 0 END) as is_poisoned
	from matches
	GROUP BY 1, 2 ) -- SELECT --
	COUNT(DISTINCT tx_to) as wallets -- from transfers_to_depositors SELECT
	dday
	, CASE WHEN is_poisoned =1 THEN 'poisoned' ELSE 'unattacked' END as label
	, COUNT(DISTINCT wallet) as totals from poison_samples GROUP BY 1, 2



=======================================================================================
=======================================================================================
QUERY_NO: 957
QUERY_ID: 0e4b40c7-cf68-47b0-a337-856d7a1b1def
QUERY_TITLE: poison test joins weekly

QUERY_STRING:

-- forked from poison test joins @ https://flipsidecrypto.xyz/studio/queries/bc7e6bf2-86d6-4eab-8d1e-2b05fb5b4ca8 -- forked from poison test windows @ https://flipsidecrypto.xyz/studio/queries/c0ecc203-2f26-460d-93b9-16f7f8edb669 with sends as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'sends' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_from as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND block_timestamp between CURRENT_DATE - 2 AND CURRENT_DATE -1
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  AND mint='So11111111111111111111111111111111111111111'
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , receipts as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'receipts' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_to as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND block_timestamp between CURRENT_DATE - 2 AND CURRENT_DATE -1
	  --AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  AND mint='So11111111111111111111111111111111111111111'
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') )
	
	, matches as (
	SELECT
	
	s.*
	  , r.tx_from as matched_sender
	  , r.tx_id as sent_tx
	  , r.block_timestamp as send_ts
	  --, row_number() OVER (PARTITION BY s.wallet, s.tx_to ORDER BY s.block_timestamp ASC) as ranks
	from sends s
	LEFT JOIN receipts r ON (
	  s.block_timestamp<r.block_timestamp
	  AND s.wallet = r.wallet
	
	AND s.tx_to != r.tx_from
	  AND (
	
	 substring(s.tx_to, 1, 4) = substring(r.tx_from, 1, 4)
	
	  OR
	
	 substring(s.tx_to, 1, 3) = substring(r.tx_from, 1, 3)
	
	)
	  AND (
	
	 right(s.tx_to, 3) = right(r.tx_from, 3)
	
	 OR
	
	 right(s.tx_to, 2) = right(r.tx_from, 2)
	  )
	)
	WHERE 1=1
	  AND matched_sender IS NOT NULL
	--qualify ranks=1
	 LIMIT 100
	 ) , poison_samples as (
	SELECT
	
	wallet
	  , tx_to
	  , matched_sender as poisoner
	  , COUNT(*) as totals
	from matches
	GROUP BY 1, 2, 3 ) SELECT * from poison_samples -- SELECT --
	s.wallet --
	, s.tx_id --
	, s.tx_to --
	, amount -- from sends s  -- INNER JOIN poison_samples p ON (s.wallet = p.wallet AND s.tx_to = p.poisoner)



=======================================================================================
=======================================================================================
QUERY_NO: 958
QUERY_ID: 1d93e8e9-3e24-4a55-be88-510e18dab9e5
QUERY_TITLE: base  products 

QUERY_STRING:

-- forked from base sei products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 WITH logs_pull AS (
	  SELECT
	
	
	topics,
	
	
	contract_address,
	
	
	DATA,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	base.core.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-09-01'
	
	
	AND topics [0] :: STRING IN (
	
	
	
	 '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172',
	
	
	
	 '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498'
	
	
	) ), new_prod AS (
	  SELECT
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS product_id,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172' ), book_address_pull AS (
	  SELECT
	
	
	tx_hash,
	
	
	contract_address AS book_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS version
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498' ), api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  --sei-prod
	
	
	
	
	  --'https://gateway.prod.vertexprotocol.com/api/v2/assets'
	
	
	
	
	  --MANTLE: https://gateway.mantle-prod.vertexprotocol.com/v2/assets
	
	
	
	
	  'https://gateway.base-prod.vertexprotocol.com/v2/assets'
	
	
	
	 )
	
	
	) :data AS response ), api_lateral_flatten AS (
	  SELECT
	
	
	r.value
	  FROM
	
	
	api_pull,
	
	
	LATERAL FLATTEN (response) AS r ), product_metadata AS (
	  SELECT
	
	
	VALUE :product_id AS product_id,
	
	
	VALUE :ticker_id AS ticker_id,
	
	
	VALUE :symbol AS symbol,
	
	
	VALUE :name AS NAME,
	
	
	VALUE :market_type AS market_type,
	
	
	VALUE :taker_fee AS taker_fee,
	
	
	VALUE :maker_fee AS maker_fee
	  FROM
	
	
	api_lateral_flatten ), FINAL AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.product_id,
	
	
	CASE
	
	
	
	 WHEN l.product_id % 2 = 0 THEN 'perp'
	
	
	
	 ELSE 'spot'
	
	
	END AS product_type,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN 'USDC'
	
	
	
	 ELSE p.ticker_id :: STRING
	
	
	END AS ticker_id,
	
	
	p.symbol :: STRING AS symbol,
	
	
	p.name :: STRING AS NAME,
	
	
	C.book_address,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN NULL
	
	
	
	 ELSE FLOOR((l.product_id - 1) / 2)
	
	
	END AS health_group,
	
	
	CASE
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WBTC' THEN 'BTC'
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WETH' THEN 'ETH'
	
	
	
	 ELSE SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0]
	
	
	END AS health_group_symbol,
	
	
	p.taker_fee,
	
	
	p.maker_fee,
	
	
	CASE
	
	
	
	 WHEN C.version IS NOT NULL THEN 1
	
	
	
	 ELSE 2
	
	
	END AS version,
	  FROM
	
	
	new_prod l
	
	
	LEFT JOIN book_address_pull C
	
	
	ON l.tx_hash = C.tx_hash
	
	
	LEFT JOIN product_metadata p
	
	
	ON l.product_id = p.product_id
	  WHERE
	
	
	p.ticker_id IS NOT NULL ) SELECT
	  * FROM
	  FINAL qualify(ROW_NUMBER() over(PARTITION BY product_id ORDER BY block_timestamp DESC)) = 1



=======================================================================================
=======================================================================================
QUERY_NO: 959
QUERY_ID: 740a5d44-5a8e-4ae5-88a5-b6b94c2fcc3a
QUERY_TITLE: sei vertex events

QUERY_STRING:

-- forked from base sei products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 with sei_products as (
	with base as (
	  select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/a1356916-5e5f-4952-8390-1711fd4e3b16/latest-run') as resp
	)
	
	SELECT
	
	VALUE[0] as block_number
	  ,VALUE[1] as block_timestamp
	  ,VALUE[2] as tx_hash
	  ,VALUE[3]:: STRING AS product_id
	  ,VALUE[4] as product_type
	  ,VALUE[5] as ticker_id
	  ,VALUE[6] as symbol
	  ,VALUE[7] as NAME
	from base, lateral FLATTEN (input=> resp:data:result:rows) ), logs AS (
	  SELECT
	
	
	*
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-14'
	
	
	AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	--https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	--Mantle OffChain Exchange: 0x736A2ADa5F4700d49da6b28A74c4A77CDb3E2994
	
	
	AND contract_address = LOWER('0x56Ffa2fD437C3a718322ea701bEd40560745456e') --Offchain EXchange Contract
	
	), order_fill_decode_v2 AS (
	  SELECT
	
	
	block_number,
	
	
	block_timestamp,
	
	
	tx_hash,
	
	
	contract_address,
	
	
	'FillOrder' AS event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 topics [1] :: STRING
	
	
	) :: STRING AS product_id,
	
	
	topics [2] :: STRING AS digest,
	
	
	--unique hash of the order
	
	
	LEFT(
	
	
	
	 topics [3] :: STRING,
	
	
	
	 42
	
	
	) AS trader,
	
	
	topics [3] :: STRING AS subaccount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS pricex18,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [1] :: STRING
	
	
	) :: INT AS amount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [2] :: STRING
	
	
	) AS expiration,
	
	
	utils.udf_hex_to_int(
	
	
	
	 segmented_data [3] :: STRING
	
	
	) :: INT AS nonce,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [4] :: STRING
	
	
	) :: INT AS isTaker,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [5] :: STRING
	
	
	) :: INT AS feeAmount,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [6] :: STRING
	
	
	) :: INT AS baseDelta,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [7] :: STRING
	
	
	) :: INT AS quoteDelta,
	  FROM
	
	
	logs l ), order_fill_format AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.contract_address,
	
	
	event_name,
	
	
	event_index,
	
	
	origin_function_signature,
	
	
	origin_from_address,
	
	
	origin_to_address,
	
	
	s.symbol,
	
	
	l.product_id,
	
	
	digest,
	
	
	trader,
	
	
	subaccount,
	
	
	expiration AS expiration_raw,
	
	
	utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	CASE
	
	
	
	 WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	 ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	 )
	
	
	END AS expiration,
	
	
	nonce,
	
	
	isTaker,
	
	
	feeAmount AS fee_amount_unadj,
	
	
	feeAmount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS fee_amount,
	
	
	pricex18 AS price_amount_unadj,
	
	
	pricex18 / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS price_amount,
	
	
	amount AS amount_unadj,
	
	
	amount / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS amount,
	
	
	baseDelta AS base_delta_unadj,
	
	
	baseDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS base_delta,
	
	
	quoteDelta AS quote_delta_unadj,
	
	
	quoteDelta / pow(
	
	
	
	 10,
	
	
	
	 18
	
	
	) AS quote_delta,
	  FROM
	
	
	order_fill_decode_v2 l
	  INNER JOIN sei_products s
	  ON s.product_id = l.product_id ), FINAL AS (
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	
	order_fill_format ) SELECT
	block_timestamp::date as ddate
	 ,SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume  from FINAL GROUP BY ddate ORDER BY ddate ASC



=======================================================================================
=======================================================================================
QUERY_NO: 960
QUERY_ID: 7f03e4a1-00cc-4a24-b77e-d46f867b9894
QUERY_TITLE: mantle vertex events 

QUERY_STRING:

-- forked from base vertex events  @ https://flipsidecrypto.xyz/studio/queries/3dfe3faf-5fff-45c4-9e51-0b2e08d225e1 -------------------------------------MANTLE PERP TRADES--------------------------------------------------- with mantle_perp_trades as (
	with mantle_products as (
	  with mantle as (
	
	 select livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/1c9d6124-52fa-46cd-9ed9-c6e2244b3f93/latest-run') as resp
	  )
	
	
	 SELECT
	
	  VALUE[0] as block_number
	
	 ,VALUE[1] as block_timestamp
	
	 ,VALUE[2] as tx_hash
	
	 ,VALUE[3]:: STRING AS product_id
	
	 ,VALUE[4] as product_type
	
	 ,VALUE[5] as ticker_id
	
	 ,VALUE[6] as symbol
	
	 ,VALUE[7] as NAME
	  from mantle, lateral FLATTEN (input=> resp:data:result:rows)
	
	),
	
	mantle_logs AS (
	
	 SELECT
	
	
	  *
	
	 FROM
	
	
	  mantle.core.fact_event_logs
	
	 WHERE 1=1
	
	
	  AND block_timestamp>='2024-04-28'
	
	
	  AND topics [0]::STRING = '0x7c57459d6f4f0fb2fc5b1e298c8c0eb238422944964aa1e249eaa78747f0cca9'
	
	
	  --https://docs.vertexprotocol.com/getting-started/vertex-edge/mantle/open-source-contracts
	
	
	  AND contract_address = LOWER('0x736a2ada5f4700d49da6b28a74c4a77cdb3e2994') --Offchain EXchange Contract
	
	
	 ),
	
	mantle_order_fill_decode_v2 AS (
	
	 SELECT
	
	
	  block_number,
	
	
	  block_timestamp,
	
	
	  tx_hash,
	
	
	  contract_address,
	
	
	  'FillOrder' AS event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	topics [1] :: STRING
	
	
	  ) :: STRING AS product_id,
	
	
	  topics [2] :: STRING AS digest,
	
	
	  --unique hash of the order
	
	
	  LEFT(
	
	
	
	
	topics [3] :: STRING,
	
	
	
	
	42
	
	
	  ) AS trader,
	
	
	  topics [3] :: STRING AS subaccount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [0] :: STRING
	
	
	  ) :: INT AS pricex18,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [1] :: STRING
	
	
	  ) :: INT AS amount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [2] :: STRING
	
	
	  ) AS expiration,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	segmented_data [3] :: STRING
	
	
	  ) :: INT AS nonce,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [4] :: STRING
	
	
	  ) :: INT AS isTaker,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [5] :: STRING
	
	
	  ) :: INT AS feeAmount,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [6] :: STRING
	
	
	  ) :: INT AS baseDelta,
	
	
	  utils.udf_hex_to_int(
	
	
	
	
	's2c',
	
	
	
	
	segmented_data [7] :: STRING
	
	
	  ) :: INT AS quoteDelta,
	
	 FROM
	
	
	  mantle_logs l
	),
	mantle_order_fill_format AS (
	
	 SELECT
	
	
	  l.block_number,
	
	
	  l.block_timestamp,
	
	
	  l.tx_hash,
	
	
	  l.contract_address,
	
	
	  event_name,
	
	
	  event_index,
	
	
	  origin_function_signature,
	
	
	  origin_from_address,
	
	
	  origin_to_address,
	
	
	  s.symbol,
	
	
	  l.product_id,
	
	
	  digest,
	
	
	  trader,
	
	
	  subaccount,
	
	
	  expiration AS expiration_raw,
	
	
	  utils.udf_int_to_binary(TRY_TO_NUMBER(expiration)) AS exp_binary,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -2)) AS order_type,
	
	
	  utils.udf_binary_to_int(SUBSTR(exp_binary, -3, 1)) AS market_reduce_flag,
	
	
	  CASE
	
	
	
	
	WHEN len(expiration) < 11 THEN TRY_TO_TIMESTAMP(utils.udf_binary_to_int(exp_binary) :: STRING)
	
	
	
	
	ELSE TRY_TO_TIMESTAMP(
	
	
	
	
	
	 utils.udf_binary_to_int(SUBSTR(exp_binary, 24)) :: STRING
	
	
	
	
	)
	
	
	  END AS expiration,
	
	
	  nonce,
	
	
	  isTaker,
	
	
	  feeAmount AS fee_amount_unadj,
	
	
	  feeAmount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS fee_amount,
	
	
	  pricex18 AS price_amount_unadj,
	
	
	  pricex18 / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS price_amount,
	
	
	  amount AS amount_unadj,
	
	
	  amount / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS amount,
	
	
	  baseDelta AS base_delta_unadj,
	
	
	  baseDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS base_delta,
	
	
	  quoteDelta AS quote_delta_unadj,
	
	
	  quoteDelta / pow(
	
	
	
	
	10,
	
	
	
	
	18
	
	
	  ) AS quote_delta,
	
	
	 FROM
	
	
	  mantle_order_fill_decode_v2 l
	
	 INNER JOIN mantle_products s
	
	 ON s.product_id = l.product_id
	)
	
	
	SELECT
	  block_number,
	  block_timestamp,
	  tx_hash,
	  contract_address,
	  event_name,
	  event_index,
	  origin_function_signature,
	  origin_from_address,
	  origin_to_address,
	  symbol,
	  digest,
	  trader,
	  subaccount,
	  CASE
	
	
	WHEN amount < 0 THEN 'sell/short'
	
	
	WHEN amount > 0 THEN 'buy/long'
	  END AS trade_type,
	  CASE
	
	
	WHEN order_type = 0 THEN 'default'
	
	
	WHEN order_type = 1 THEN 'immediate-or-cancel'
	
	
	WHEN order_type = 2 THEN 'fill-or-kill'
	
	
	WHEN order_type = 3 THEN 'post-only'
	  END AS order_type,
	  market_reduce_flag,
	  expiration,
	  nonce,
	  CASE
	
	
	WHEN isTaker = 1 THEN TRUE
	
	
	WHEN isTaker = 0 THEN FALSE
	  END AS is_taker,
	  price_amount_unadj,
	  price_amount,
	  amount_unadj,
	  amount,
	  CASE
	
	
	WHEN quote_delta < 0 THEN quote_delta * -1
	
	
	ELSE quote_delta
	  END AS amount_usd,
	  fee_amount_unadj,
	  fee_amount,
	  base_delta_unadj AS base_delta_amount_unadj,
	  base_delta AS base_delta_amount,
	  quote_delta_unadj AS quote_delta_amount_unadj,
	  quote_delta AS quote_delta_amount,
	  NULL as EZ_PERP_TRADES_ID,
	  NULL as INSERTED_TIMESTAMP,
	  NULL as MODIFIED_TIMESTAMP
	FROM
	
	 mantle_order_fill_format ) -------------------------------------END OF MANTLE PERP TRADES--------------------------------------------------- SELECT
	SUM(CASE WHEN is_taker=FALSE THEN AMOUNT_USD ELSE 0 END) as volume
	 , SUM(CASE
	
	
	 WHEN is_taker=FALSE
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_maker
	, SUM(CASE
	
	
	 WHEN is_taker=TRUE
	
	
	
	 AND trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	
	
	 THEN AMOUNT_USD ELSE 0 END) as edge_taker from mantle_perp_trades



=======================================================================================
=======================================================================================
QUERY_NO: 961
QUERY_ID: 1c9d6124-52fa-46cd-9ed9-c6e2244b3f93
QUERY_TITLE: mantle  products 

QUERY_STRING:

-- forked from base  products  @ https://flipsidecrypto.xyz/studio/queries/1d93e8e9-3e24-4a55-be88-510e18dab9e5 -- forked from base sei products @ https://flipsidecrypto.xyz/studio/queries/a1356916-5e5f-4952-8390-1711fd4e3b16 WITH logs_pull AS (
	  SELECT
	
	
	topics,
	
	
	contract_address,
	
	
	DATA,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	mantle.core.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-04-28'
	
	
	AND topics [0] :: STRING IN (
	
	
	
	 '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172',
	
	
	
	 '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498'
	
	
	) ), new_prod AS (
	  SELECT
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS product_id,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172' ), book_address_pull AS (
	  SELECT
	
	
	tx_hash,
	
	
	contract_address AS book_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS version
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498' ), api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  --sei-prod
	
	
	
	
	  --'https://gateway.prod.vertexprotocol.com/api/v2/assets'
	
	
	
	
	  --MANTLE: https://gateway.mantle-prod.vertexprotocol.com/v2/assets
	
	
	
	
	  --'https://gateway.base-prod.vertexprotocol.com/v2/assets'
	
	
	
	
	  'https://gateway.mantle-prod.vertexprotocol.com/v2/assets'
	
	
	
	 )
	
	
	) :data AS response ), api_lateral_flatten AS (
	  SELECT
	
	
	r.value
	  FROM
	
	
	api_pull,
	
	
	LATERAL FLATTEN (response) AS r ), product_metadata AS (
	  SELECT
	
	
	VALUE :product_id AS product_id,
	
	
	VALUE :ticker_id AS ticker_id,
	
	
	VALUE :symbol AS symbol,
	
	
	VALUE :name AS NAME,
	
	
	VALUE :market_type AS market_type,
	
	
	VALUE :taker_fee AS taker_fee,
	
	
	VALUE :maker_fee AS maker_fee
	  FROM
	
	
	api_lateral_flatten ), FINAL AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.product_id,
	
	
	CASE
	
	
	
	 WHEN l.product_id % 2 = 0 THEN 'perp'
	
	
	
	 ELSE 'spot'
	
	
	END AS product_type,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN 'USDC'
	
	
	
	 ELSE p.ticker_id :: STRING
	
	
	END AS ticker_id,
	
	
	p.symbol :: STRING AS symbol,
	
	
	p.name :: STRING AS NAME,
	
	
	C.book_address,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN NULL
	
	
	
	 ELSE FLOOR((l.product_id - 1) / 2)
	
	
	END AS health_group,
	
	
	CASE
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WBTC' THEN 'BTC'
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WETH' THEN 'ETH'
	
	
	
	 ELSE SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0]
	
	
	END AS health_group_symbol,
	
	
	p.taker_fee,
	
	
	p.maker_fee,
	
	
	CASE
	
	
	
	 WHEN C.version IS NOT NULL THEN 1
	
	
	
	 ELSE 2
	
	
	END AS version,
	  FROM
	
	
	new_prod l
	
	
	LEFT JOIN book_address_pull C
	
	
	ON l.tx_hash = C.tx_hash
	
	
	LEFT JOIN product_metadata p
	
	
	ON l.product_id = p.product_id
	  WHERE
	
	
	p.ticker_id IS NOT NULL ) SELECT
	  * FROM
	  FINAL qualify(ROW_NUMBER() over(PARTITION BY product_id ORDER BY block_timestamp DESC)) = 1



=======================================================================================
=======================================================================================
QUERY_NO: 962
QUERY_ID: 2eea7641-e4cb-4264-968f-e106f124421b
QUERY_TITLE: tokens_deployed fact_events 

QUERY_STRING:

-- forked from tokens_deployed fact_events (by index sub_type) @ https://flipsidecrypto.xyz/studio/queries/ed733a29-643f-4bb8-94fe-b298db809705 SELECT  -- *
	 block_timestamp::date as ddate
	, COUNT(tx_id) as txns
	, COUNT(DISTINCT SIGNERS[0]) as creators
	, COUNT(inner_instruction:instructions[3]:parsed:info:mint) as tokens_created
	, SUM(tokens_created) OVER (ORDER BY ddate ASC) as total_tokens_created
	 , MAX(tx_id) as sample_tx
	, MAX(inner_instruction:instructions[3]:parsed:info:mint) as token_sample1
	, MIN(inner_instruction:instructions[3]:parsed:info:mint) as token_sample2 from solana.core.fact_events WHERE 1=1
	AND block_timestamp>='2024-01-01'
	AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	--AND index IN (1,2) --create event index //index seems to be random as fok
	AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
	AND inner_instruction:instructions[3]:parsed:type = 'create'
	AND succeeded GROUP BY 1 ORDER BY 1 DESC -- SELECT  -- *  -- from solana.core.fact_events -- WHERE 1=1 --
	AND block_timestamp>='2024-01-01' --
	AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' --
	--AND index=2 --create event index --
	--AND event_type = 'create' --
	AND index!=2 --
	AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' --
	AND inner_instruction:instructions[3]:parsed:type = 'create' --
	--AND succeeded -- LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 963
QUERY_ID: 17572e4e-7f27-419f-9729-eb58a04112b5
QUERY_TITLE: tests

QUERY_STRING:

-- SELECT --
	*
	-- DECODED_LOG:tradeId as trade_id
	-- , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:rolloverFees/1e6 ELSE 0 END), 0) as rollover_fees
	-- , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:fundingFees/1e6 ELSE 0 END), 0) as funding_fees
	 -- , COALESCE(MAX(CASE WHEN EVENT_NAME ='VaultLiqFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as vault_liq_fees -- from arbitrum.core.ez_decoded_event_logs -- WHERE 1=1
	-- AND (
	 --
	(EVENT_NAME = 'TopUpCollateralExecuted' AND contract_address = '0x6d0ba1f9996dbd8885827e1b2e8f6593e7702411')
	--
	OR
	--
	(EVENT_NAME = 'RemoveCollateralExecuted' AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9')
	-- )
	-- AND ( --DOESN'T WORK??? TODO/Questions
	--
	contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	--
	AND TOPIC_0 = '0xd182bace90998b7a07a54165b7beb87743756042148ff3dceb8181dd446533f4'
	-- ) with async_collat_actions as (
	with base as (
	  SELECT
	  block_timestamp
	  , tx_hash
	  , EVENT_NAME
	  , TO_NUMERIC(DECODED_LOG:tradeId) as trade_id
	  , TO_NUMERIC(DECODED_LOG:pairIndex) as pair_index
	  , DECODED_LOG:topUpAmount/1e6 as collateral
	  , DECODED_LOG:newLeverage/1e2 as leverage
	  , NULL as tp
	  , NULL as sl
	  from arbitrum.core.ez_decoded_event_logs
	  WHERE 1=1
	
	 AND  (EVENT_NAME = 'TopUpCollateralExecuted' AND contract_address = '0x6d0ba1f9996dbd8885827e1b2e8f6593e7702411')
	
	
	 UNION ALL
	
	
	 SELECT * EXCLUDE segmented_data from (
	
	 SELECT
	
	
	block_timestamp
	
	
	 , tx_hash
	
	
	, 'RemoveCollateralExecuted' as event_name
	
	
	, utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	
	, REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0])) as pair_index
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e6 as collateral
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[2]))/1e2 as leverage
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e18 as tp
	
	
	, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e18 as sl
	
	 from arbitrum.core.fact_event_logs
	
	 WHERE 1=1
	
	
	--AND tx_hash = '0x125b301f96007a98e2f0c20443fa55bcbabfddbd70c15205650968e71fd5c533'
	
	
	AND (
	
	
	  contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	
	  AND TOPIC_0 = '0xd182bace90998b7a07a54165b7beb87743756042148ff3dceb8181dd446533f4'
	
	
	)
	  )
	)
	
	SELECT
	  b.trade_id
	  , SUM(CASE WHEN event_name='TopUpCollateralExecuted' THEN b.collateral ELSE b.collateral *-1 END) as collateral_delta
	  , MAX(l.leverage) as latest_leverage
	  , MAX(l.tp) as latest_tp
	  , MAX(l.sl) as latest_sl
	  , MAX(l.tx_hash) as sample1
	from base b
	 LEFT JOIN (
	  SELECT
	
	 trade_id
	
	 , tx_hash
	
	 , collateral
	
	 , leverage
	
	 , tp
	
	 , sl
	
	 , row_number() OVER (PARTITION BY trade_id ORDER BY block_timestamp DESC) as rank
	  from base
	  qualify rank=1
	) l ON b.trade_id = l.trade_id
	GROUP BY 1 ) SELECT * from async_collat_actions



=======================================================================================
=======================================================================================
QUERY_NO: 964
QUERY_ID: 907cad5b-533d-4d8e-85d3-125493710c43
QUERY_TITLE: base volumes

QUERY_STRING:

with router_addresses as (
	SELECT * from (
	  values
	  ('0x99bc55df1eb02db64ff20fe457c996b2d53bff7e'), --V1
	  ('0x2e480b1096e5f705cc3e049685846ed3022aa226')  --V1.5
	) as a (address)
	 ) , op_data as (
	SELECT
	  'optimism' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from optimism.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x0b2c639c533813f4aa9d7837caf62653d097ff85', -- USDC
	
	 '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58', -- USDT
	
	 '0x7f5c764cbc14f9669b88837ca1490cca17c31607'  -- USDC.e
	  ) ) , base_data as (
	SELECT
	  'base' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from base.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913', -- USDC
	
	 '0xd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca'  -- USDbC
	  ) ) , arb_data as (
	SELECT
	  'arbitrum' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xaf88d065e77c8cc2239327c5edb3a432268e5831', -- USDC
	
	 '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9', -- USDT
	
	 '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'  -- USDC.e
	  )  ) , eth_data as (
	SELECT
	  'eth-mainnet' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', -- USDC
	
	 '0xdac17f958d2ee523a2206206994597c13d831ec7'  -- USDT
	  ) ) , poly_data as (
	SELECT
	  'polygon' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from polygon.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359', -- USDC
	
	 '0xc2132d05d31c914a87c6611c10748aeb04b58e8f'  -- USDT
	  ) ) , ink_data as (
	SELECT
	  'ink' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ink.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0xf1815bd50389c46847f0bda824ec8da914045d14', -- USDCE//stargate bridged
	
	 '0x0200c29006150606b650577bbe7b6248f58470c1'  -- USDT0
	  )
	 ) -- CELO//UNICHAIN , missing_chains_dune as (
	SELECT
	  VALUE:chain as chain
	  , TO_TIMESTAMP_NTZ(SPLIT(VALUE:block_timestamp, ' UTC')[0]) as block_timestamp
	  , VALUE:tx_hash as tx_hash
	  , VALUE:from_address as from_address
	  , VALUE:to_address as to_address
	  , VALUE:symbol as symbol
	  , VALUE:amount as amount
	  , VALUE:amount_usd as amount_usd
	from (
	  SELECT
	  livequery.live.udf_api('https://api.dune.com/api/v1/query/5170017/results?api_key={dune_key}','dune') AS response
	), lateral flatten(input => response:data:result:rows) ) , merge as (
	SELECT * from op_data
	UNION ALL
	SELECT * from base_data
	UNION ALL
	 SELECT * from arb_data
	UNION ALL
	SELECT * from eth_data
	UNION ALL
	SELECT * from poly_data
	UNION ALL
	SELECT * from ink_data
	UNION ALL
	SELECT * from missing_chains_dune ) SELECT
	block_timestamp::date as ddate
	, chain
	, SUM(amount) as volume from merge GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 965
QUERY_ID: 18b253c3-9ed8-4617-9c6d-ba72d3507b49
QUERY_TITLE: totals

QUERY_STRING:

-- forked from base volumes @ https://flipsidecrypto.xyz/studio/queries/907cad5b-533d-4d8e-85d3-125493710c43 with router_addresses as (
	SELECT * from (
	  values
	  ('0x99bc55df1eb02db64ff20fe457c996b2d53bff7e'), --V1
	  ('0x2e480b1096e5f705cc3e049685846ed3022aa226')  --V1.5
	) as a (address)
	 ) , op_data as (
	SELECT
	  'optimism' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from optimism.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x0b2c639c533813f4aa9d7837caf62653d097ff85', -- USDC
	
	 '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58', -- USDT
	
	 '0x7f5c764cbc14f9669b88837ca1490cca17c31607'  -- USDC.e
	  ) ) , base_data as (
	SELECT
	  'base' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from base.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913', -- USDC
	
	 '0xd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca'  -- USDbC
	  ) ) , arb_data as (
	SELECT
	  'arbitrum' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xaf88d065e77c8cc2239327c5edb3a432268e5831', -- USDC
	
	 '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9', -- USDT
	
	 '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'  -- USDC.e
	  )  ) , eth_data as (
	SELECT
	  'eth-mainnet' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', -- USDC
	
	 '0xdac17f958d2ee523a2206206994597c13d831ec7'  -- USDT
	  ) ) , poly_data as (
	SELECT
	  'polygon' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from polygon.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359', -- USDC
	
	 '0xc2132d05d31c914a87c6611c10748aeb04b58e8f'  -- USDT
	  ) ) , ink_data as (
	SELECT
	  'ink' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ink.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0xf1815bd50389c46847f0bda824ec8da914045d14', -- USDCE//stargate bridged
	
	 '0x0200c29006150606b650577bbe7b6248f58470c1'  -- USDT0
	  )
	 ) -- CELO//UNICHAIN , missing_chains_dune as (
	SELECT
	  VALUE:chain as chain
	  , TO_TIMESTAMP_NTZ(SPLIT(VALUE:block_timestamp, ' UTC')[0]) as block_timestamp
	  , VALUE:tx_hash as tx_hash
	  , VALUE:from_address as from_address
	  , VALUE:to_address as to_address
	  , VALUE:symbol as symbol
	  , VALUE:amount as amount
	  , VALUE:amount_usd as amount_usd
	from (
	  SELECT
	  livequery.live.udf_api('https://api.dune.com/api/v1/query/5170017/results?api_key={dune_key}','dune') AS response
	), lateral flatten(input => response:data:result:rows) ) , merge as (
	SELECT * from op_data
	UNION ALL
	SELECT * from base_data
	UNION ALL
	 SELECT * from arb_data
	UNION ALL
	SELECT * from eth_data
	UNION ALL
	SELECT * from poly_data
	UNION ALL
	SELECT * from ink_data
	UNION ALL
	SELECT * from missing_chains_dune ) SELECT
	SUM(amount) as total_volume from merge



=======================================================================================
=======================================================================================
QUERY_NO: 966
QUERY_ID: 50659b34-ff3d-415e-9138-5cb24344b6a7
QUERY_TITLE: all time volume - perps by instance (w/ EDGE FILTERED) 

QUERY_STRING:

-- forked from all time volume - perps by instance (w/ EDGE) @ https://flipsidecrypto.xyz/studio/queries/80d93c4d-235a-4357-9e60-eab9a88d4711 -- forked from all time volume - perps @ https://flipsidecrypto.xyz/studio/queries/9a60061d-35fc-4256-91ac-3c24833fb613 with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount !='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount !='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount !='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount !='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount !='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	label
	, COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume_usd
	, COALESCE(SUM(fee_amount), 0) as total_fees from merge GROUP by 1



=======================================================================================
=======================================================================================
QUERY_NO: 967
QUERY_ID: ccd47782-cf2d-482b-9034-0c9809c2a974
QUERY_TITLE: April 1-10th CEX Deposits - Poison Attack MINTS used

QUERY_STRING:

-- forked from April 1-10th CEX Deposits - Poison Attack MATCH Scores @ https://flipsidecrypto.xyz/studio/queries/da1b51b4-7da4-447b-baa3-d81f85c1a740 -- forked from April 1-10th CEX Deposits - Daily Stats @ https://flipsidecrypto.xyz/studio/queries/74db109a-0b69-4308-9683-6519945177cb -- forked from April 1-10th CEX Deposits - Poison Distribution @ https://flipsidecrypto.xyz/studio/queries/0926abbd-72a3-41bd-87b3-69b18c9c2526 with cex_deposits as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers t
	LEFT JOIN solana.core.dim_labels l on (tx_to = address AND label_type ='cex' and label_subtype = 'deposit_wallet')
	WHERE 1=1
	  AND block_timestamp between '2025-04-01' AND '2025-04-10'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NOT NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , transfers_to_depositors as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND tx_to in (SELECT DISTINCT tx_from from cex_deposits)
	  AND label_type IS NULL
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND block_timestamp between '2025-04-01' AND '2025-04-10' ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	  , t2.mint as poison_mint
	from cex_deposits t1
	LEFT JOIN transfers_to_depositors t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	  OR
	
	 substring(t1.tx_to, 1, 2) = substring(t2.tx_from, 1, 2)
	
	)
	)
	WHERE 1=1
	  AND matched_sender IS NOT NULL ) , poison_samples as (
	SELECT
	  tx_from as wallet
	  , matched_sender
	  , poison_mint
	  -- , MAX(CASE
	
	--
	  WHEN left(matched_sender, 5) = left(tx_to, 5) THEN 5
	  --
	  WHEN left(matched_sender, 4) = left(tx_to, 4) THEN 4
	
	--
	  WHEN left(matched_sender, 3) = left(tx_to, 3) THEN 3
	  --
	  WHEN left(matched_sender, 2) = left(tx_to, 2) THEN 2
	  --
	  ELSE 0
	  --
	END) as front_score
	  -- , MAX(CASE
	  --
	  WHEN right(matched_sender, 3) = right(tx_to, 3) THEN 3
	  --
	  WHEN right(matched_sender, 2) = right(tx_to, 2) THEN 2
	  --
	  WHEN right(matched_sender, 1) = right(tx_to, 1) THEN 1
	  --
	  ELSE 0
	  --
	END) as end_score
	from matches
	GROUP BY 1, 2, 3 ) -- -- SELECT -- --
	COUNT(DISTINCT tx_to) as wallets -- -- from transfers_to_depositors SELECT
	CASE WHEN poison_mint = 'So11111111111111111111111111111111111111111' THEN 'sol' ELSE 'other SPL token(s)' END as label
	, COUNT(DISTINCT matched_sender) as total_poisoners from poison_samples GROUP BY 1 -- SELECT * from poison_samples



=======================================================================================
=======================================================================================
QUERY_NO: 968
QUERY_ID: 8de8470b-9a97-4d95-9ff8-26f7c41297cf
QUERY_TITLE: JUP Holders Q1 (no mapping b/w stake escrow and actual owner)

QUERY_STRING:

with latest_balance as (
	SELECT
	  block_timestamp
	  , owner
	  , balance
	from solana.core.fact_token_balances
	WHERE 1=1
	  AND MINT = 'JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN'
	  AND block_id > 243989543 --token creation
	  AND block_timestamp < '2025-04-01' --Q2 start
	qualify row_number() OVER (partition by owner order by block_timestamp DESC) =1 ) SELECT
	COUNT(DISTINCT owner) as holders from latest_balance WHERE 1=1
	and balance>0



=======================================================================================
=======================================================================================
QUERY_NO: 969
QUERY_ID: e2cd515f-28e5-47c3-bae1-22ecf678ad74
QUERY_TITLE: April 1-10th CEX Deposits - Poison Attack Samples

QUERY_STRING:

-- forked from April 1-10th CEX Deposits - Poison Attack MATCH Scores @ https://flipsidecrypto.xyz/studio/queries/da1b51b4-7da4-447b-baa3-d81f85c1a740 -- forked from April 1-10th CEX Deposits - Daily Stats @ https://flipsidecrypto.xyz/studio/queries/74db109a-0b69-4308-9683-6519945177cb -- forked from April 1-10th CEX Deposits - Poison Distribution @ https://flipsidecrypto.xyz/studio/queries/0926abbd-72a3-41bd-87b3-69b18c9c2526 with cex_deposits as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers t
	LEFT JOIN solana.core.dim_labels l on (tx_to = address AND label_type ='cex' and label_subtype = 'deposit_wallet')
	WHERE 1=1
	  AND block_timestamp between '2025-04-01' AND '2025-04-10'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NOT NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , transfers_to_depositors as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND tx_to in (SELECT DISTINCT tx_from from cex_deposits)
	  AND label_type IS NULL
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND block_timestamp between '2025-04-01' AND '2025-04-10' ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	from cex_deposits t1
	LEFT JOIN transfers_to_depositors t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	  OR
	
	 substring(t1.tx_to, 1, 2) = substring(t2.tx_from, 1, 2)
	
	)
	)
	WHERE 1=1
	  AND matched_sender IS NOT NULL ) , poison_samples as (
	SELECT
	  tx_from as wallet
	  , tx_to as real_wallet_recipient
	  , matched_sender as poison_wallet
	  , MAX(CASE
	
	
	 WHEN left(matched_sender, 5) = left(tx_to, 5) THEN 5
	
	
	WHEN left(matched_sender, 4) = left(tx_to, 4) THEN 4
	
	
	 WHEN left(matched_sender, 3) = left(tx_to, 3) THEN 3
	
	
	WHEN left(matched_sender, 2) = left(tx_to, 2) THEN 2
	
	
	ELSE 0
	
	 END) as front_score
	  , MAX(CASE
	
	
	WHEN right(matched_sender, 3) = right(tx_to, 3) THEN 3
	
	
	WHEN right(matched_sender, 2) = right(tx_to, 2) THEN 2
	
	
	WHEN right(matched_sender, 1) = right(tx_to, 1) THEN 1
	
	
	ELSE 0
	
	 END) as end_score
	from matches
	GROUP BY 1, 2, 3 ) -- -- SELECT -- --
	COUNT(DISTINCT tx_to) as wallets -- -- from transfers_to_depositors SELECT
	* from poison_samples LIMIT 10000 -- SELECT * from poison_samples



=======================================================================================
=======================================================================================
QUERY_NO: 970
QUERY_ID: da1b51b4-7da4-447b-baa3-d81f85c1a740
QUERY_TITLE: April 1-10th CEX Deposits - Poison Attack MATCH Scores

QUERY_STRING:

-- forked from April 1-10th CEX Deposits - Daily Stats @ https://flipsidecrypto.xyz/studio/queries/74db109a-0b69-4308-9683-6519945177cb -- forked from April 1-10th CEX Deposits - Poison Distribution @ https://flipsidecrypto.xyz/studio/queries/0926abbd-72a3-41bd-87b3-69b18c9c2526 with cex_deposits as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers t
	LEFT JOIN solana.core.dim_labels l on (tx_to = address AND label_type ='cex' and label_subtype = 'deposit_wallet')
	WHERE 1=1
	  AND block_timestamp between '2025-04-01' AND '2025-04-10'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NOT NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , transfers_to_depositors as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND tx_to in (SELECT DISTINCT tx_from from cex_deposits)
	  AND label_type IS NULL
	  --AND mint='So11111111111111111111111111111111111111111'
	  AND block_timestamp between '2025-04-01' AND '2025-04-10' ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	from cex_deposits t1
	LEFT JOIN transfers_to_depositors t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	  OR
	
	 substring(t1.tx_to, 1, 2) = substring(t2.tx_from, 1, 2)
	
	)
	)
	WHERE 1=1
	  AND matched_sender IS NOT NULL ) , poison_samples as (
	SELECT
	  tx_from as wallet
	  , matched_sender
	  , MAX(CASE
	
	
	 WHEN left(matched_sender, 5) = left(tx_to, 5) THEN 5
	
	
	WHEN left(matched_sender, 4) = left(tx_to, 4) THEN 4
	
	
	 WHEN left(matched_sender, 3) = left(tx_to, 3) THEN 3
	
	
	WHEN left(matched_sender, 2) = left(tx_to, 2) THEN 2
	
	
	ELSE 0
	
	 END) as front_score
	  , MAX(CASE
	
	
	WHEN right(matched_sender, 3) = right(tx_to, 3) THEN 3
	
	
	WHEN right(matched_sender, 2) = right(tx_to, 2) THEN 2
	
	
	WHEN right(matched_sender, 1) = right(tx_to, 1) THEN 1
	
	
	ELSE 0
	
	 END) as end_score
	from matches
	GROUP BY 1, 2 ) -- -- SELECT -- --
	COUNT(DISTINCT tx_to) as wallets -- -- from transfers_to_depositors SELECT
	front_score || ',' || end_score as poison_score
	, COUNT(DISTINCT matched_sender) as totals from poison_samples GROUP BY 1 -- SELECT * from poison_samples



=======================================================================================
=======================================================================================
QUERY_NO: 971
QUERY_ID: 0ce93f17-4e3e-4bf3-b473-a9364126f7a5
QUERY_TITLE: March Dusting Summary

QUERY_STRING:

-- forked from Daily Dust Activity @ https://flipsidecrypto.xyz/studio/queries/532341c2-1c2d-49eb-ad11-0b59257c446d with transfers as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND block_timestamp between '2025-03-01' AND '2025-03-31'
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  and amount < 0.00001
	  AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , filter as (
	SELECT
	  block_timestamp::date as dday
	  , CASE WHEN tx_from ilike 'flip%' THEN 'FLIP permutations' ELSE 'Others' END as label
	  , tx_from as wallet
	  , COUNT(DISTINCT tx_id) as txns
	  , COUNT(DISTINCT tx_to) as receivers
	  , SUM(amount) as total_amount
	from transfers
	GROUP BY 1, 2, 3
	having txns>=1000 and receivers>100
	ORDER BY dday ASC, receivers DESC, wallet ASC ) SELECT
	wallet
	, label
	, SUM(txns) as span_txns
	, COUNT(DISTINCT dday) as active_days
	, SUM(total_amount) as sol_transferred
	, RATIO_TO_REPORT(span_txns) OVER () * 100 as txns_perc from filter GROUP BY 1, 2 having active_days>=20



=======================================================================================
=======================================================================================
QUERY_NO: 972
QUERY_ID: ff626170-6d30-4bfa-aec7-141f01f1cdd0
QUERY_TITLE: TVL over Time

QUERY_STRING:

with base as (
	SELECT
	
	*
	 from  $query('2909d4af-9255-4be4-bb5e-5bb421990a3a') ) SELECT * from base ORDER BY DDATE DESC, CHAIN ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 973
QUERY_ID: 136596d3-873a-4de4-9cd5-76791418c4b3
QUERY_TITLE: intense-purple

QUERY_STRING:

SELECT
	 DAY(TO_DATE('2024-05-05', 'AUTO'))/10 < 1



=======================================================================================
=======================================================================================
QUERY_NO: 974
QUERY_ID: a6e200bc-27ff-40e3-b870-7f1482f9bb34
QUERY_TITLE: overview stats by pair

QUERY_STRING:

-- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/a07b674b-3d21-4aae-a79a-73bff99d80b3 with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT
	market_pair
	, SUM(
	  CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	  END
	  ) as volume_usd
	, SUM(
	  CASE
	
	  WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	 ELSE funding_fees + rollover_fees + vault_liq_fees
	  END
	) as total_fees
	, COUNT(DISTINCT trade_id) as trades
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT market_pair) as markets from refine  GROUP BY 1 ORDER BY 2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 975
QUERY_ID: d66a4abd-b4c2-452e-9c64-03b6da61f382
QUERY_TITLE: debug

QUERY_STRING:

-- forked from totals @ https://flipsidecrypto.xyz/studio/queries/18b253c3-9ed8-4617-9c6d-ba72d3507b49 -- forked from base volumes @ https://flipsidecrypto.xyz/studio/queries/907cad5b-533d-4d8e-85d3-125493710c43 with router_addresses as (
	SELECT * from (
	  values
	  ('0x99bc55df1eb02db64ff20fe457c996b2d53bff7e'), --V1
	  ('0x2e480b1096e5f705cc3e049685846ed3022aa226')  --V1.5
	) as a (address)
	 ) , op_data as (
	SELECT
	  'optimism' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from optimism.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x0b2c639c533813f4aa9d7837caf62653d097ff85', -- USDC
	
	 '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58', -- USDT
	
	 '0x7f5c764cbc14f9669b88837ca1490cca17c31607'  -- USDC.e
	  ) ) , base_data as (
	SELECT
	  'base' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from base.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913', -- USDC
	
	 '0xd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca'  -- USDbC
	  ) ) , arb_data as (
	SELECT
	  'arbitrum' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from arbitrum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xaf88d065e77c8cc2239327c5edb3a432268e5831', -- USDC
	
	 '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9', -- USDT
	
	 '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'  -- USDC.e
	  )  ) , eth_data as (
	SELECT
	  'eth-mainnet' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address in (
	
	 '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', -- USDC
	
	 '0xdac17f958d2ee523a2206206994597c13d831ec7'  -- USDT
	  ) ) , poly_data as (
	SELECT
	  'polygon' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from polygon.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359', -- USDC
	
	 '0xc2132d05d31c914a87c6611c10748aeb04b58e8f'  -- USDT
	  ) ) , ink_data as (
	SELECT
	  'ink' as chain
	  , block_timestamp
	  , tx_hash
	  , from_address
	  , to_address
	  , symbol
	  , amount
	  , amount_usd
	from ink.core.ez_token_transfers
	WHERE 1=1
	  AND to_address IN (SELECT * from router_addresses)
	  AND contract_address IN (
	
	 '0xf1815bd50389c46847f0bda824ec8da914045d14', -- USDCE//stargate bridged
	
	 '0x0200c29006150606b650577bbe7b6248f58470c1'  -- USDT0
	  )
	 ) -- CELO//UNICHAIN , missing_chains_dune as (
	SELECT
	  VALUE:chain as chain
	  , TO_TIMESTAMP_NTZ(SPLIT(VALUE:block_timestamp, ' UTC')[0]) as block_timestamp
	  , VALUE:tx_hash as tx_hash
	  , VALUE:from_address as from_address
	  , VALUE:to_address as to_address
	  , VALUE:symbol as symbol
	  , VALUE:amount as amount
	  , VALUE:amount_usd as amount_usd
	from (
	  SELECT
	  livequery.live.udf_api('https://api.dune.com/api/v1/query/5170017/results?api_key={dune_key}','dune') AS response
	), lateral flatten(input => response:data:result:rows) ) , merge as (
	SELECT * from op_data
	UNION ALL
	SELECT * from base_data
	UNION ALL
	 SELECT * from arb_data
	UNION ALL
	SELECT * from eth_data
	UNION ALL
	SELECT * from poly_data
	UNION ALL
	SELECT * from ink_data
	UNION ALL
	SELECT * from missing_chains_dune ) SELECT  * from merge WHERE 1=1
	and chain = 'ink'



=======================================================================================
=======================================================================================
QUERY_NO: 976
QUERY_ID: 1a856392-7af8-4ad9-96ee-909b0154fe62
QUERY_TITLE: new users

QUERY_STRING:

with merge_all_time as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , users as (
	SELECT
	
	block_timestamp
	  , trader
	  , label
	from merge_all_time
	qualify row_number() OVER (PARTITION BY trader ORDER BY block_timestamp ASC) = 1 ) SELECT
	 COUNT(DISTINCT trader) as new_users from users WHERE 1=1
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'



=======================================================================================
=======================================================================================
QUERY_NO: 977
QUERY_ID: 39b86641-d237-4262-ba9d-1c246e5b818b
QUERY_TITLE: poison test daily stats/ samples

QUERY_STRING:

with transfers as (
	SELECT
	  block_timestamp
	  , block_id
	  , tx_id
	  , index
	  , tx_from
	  , tx_to
	  , amount
	  , mint
	 from solana.core.fact_transfers
	LEFT JOIN solana.core.dim_labels on tx_from = address
	WHERE 1=1
	  AND block_timestamp between CURRENT_DATE-3 AND CURRENT_DATE-1
	  --AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc' OR tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  AND mint='So11111111111111111111111111111111111111111'
	  AND label_type IS NULL
	  --AND mint IN ('So11111111111111111111111111111111111111111', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v') ) , matches as (
	SELECT
	
	t1.*
	  , t2.tx_from as matched_sender
	  , t2.tx_id as sent_tx
	  , t2.block_timestamp as send_ts
	  --, row_number() OVER (PARTITION BY s.wallet, s.tx_to ORDER BY s.block_timestamp ASC) as ranks
	from transfers t1
	LEFT JOIN transfers t2 ON (
	  1=1
	  AND t1.tx_from = t2.tx_to
	
	AND t1.tx_to != t2.tx_from
	  and t2.amount < 0.0001
	  AND t1.block_timestamp < t2.block_timestamp
	  AND (
	
	 substring(t1.tx_to, 1, 4) = substring(t2.tx_from, 1, 4)
	
	  OR
	
	 substring(t1.tx_to, 1, 3) = substring(t2.tx_from, 1, 3)
	
	)
	  -- AND (
	  --
	right(t1.tx_to, 3) = right(t2.tx_from, 3)
	  --
	OR
	  --
	right(t1.tx_to, 2) = right(t2.tx_from, 2)
	  -- )
	)
	WHERE 1=1
	  AND matched_sender IS NOT NULL
	--qualify ranks=1  ) , poison_samples as (
	SELECT
	
	tx_from as wallet
	  , tx_to
	  , matched_sender as poisoner
	  , COUNT(*) as totals
	from matches
	GROUP BY 1, 2, 3 ) SELECT * from poison_samples -- SELECT --
	s.wallet --
	, s.tx_id --
	, s.tx_to --
	, amount -- from sends s  -- INNER JOIN poison_samples p ON (s.wallet = p.wallet AND s.tx_to = p.poisoner)



=======================================================================================
=======================================================================================
QUERY_NO: 978
QUERY_ID: 06e7f77b-5689-4825-b542-a7d6b0007a36
QUERY_TITLE: poison test match_recog

QUERY_STRING:

-- forked from poison test @ https://flipsidecrypto.xyz/studio/queries/c0ecc203-2f26-460d-93b9-16f7f8edb669 with transfers as (
	SELECT
	  block_timestamp
	  , block_id
	  , index
	  , 'sends' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_from as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  AND block_id<=302791108
	  --AND mint = 'So11111111111111111111111111111111111111111'
	
	UNION
	 SELECT
	  block_timestamp
	  , block_id
	  , index
	  , 'receipts' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_to as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  AND block_id <= 302791108
	  --AND mint = 'So11111111111111111111111111111111111111111'
	
	 ) SELECT
	 * from transfers MATCH_RECOGNIZE(
	PARTITION BY wallet
	ORDER BY block_id ASC, index ASC
	 MEASURES
	  MATCH_NUMBER() AS match_number
	  , COUNT(*) AS rows_in_sequence
	  , FIRST(tx_id) AS start_tx
	  , LAST(tx_id) AS end_tx
	  , FIRST(tx_to) as t_to
	  , LAST(blanks.tx_from) as t_from
	  , LAST(is_poison.tx_from) as t_from_poison
	
	ONE ROW PER MATCH
	AFTER MATCH SKIP TO NEXT ROW
	PATTERN(match_start match_start* blanks* is_poison?)
	DEFINE
	  match_start AS side='sends',
	  blanks  AS (side = 'receipts'  AND NOT (substring(FIRST_VALUE(tx_to), 1, 2) = substring(tx_from, 1, 2) ) ),
	  is_poison AS (side = 'receipts' AND substring(FIRST_VALUE(tx_to), 1, 2) = substring(tx_from, 1, 2) )
	) ORDER BY match_number ASC  -- SELECT --
	substring('4yfu48qwim7hGzD3Nphzd2A6ThydzysfKi4wBPFSgnhY', 1, 2) = substring('4yfuQCL4fnNfSbBgqFcPTFn5GGZABDaEFQLhGpwjizcY', 1, 2)



=======================================================================================
=======================================================================================
QUERY_NO: 979
QUERY_ID: 17e6dbae-4b1a-4ff6-af40-05a6d4fb8e78
QUERY_TITLE: [FINAL] ostium_trade_closures

QUERY_STRING:

with closure_fees as (
	--funding/rollover fees are handled as aggregates on closures and not continuously
	SELECT
	  DECODED_LOG:tradeId as trade_id
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:rolloverFees/1e6 ELSE 0 END), 0) as rollover_fees
	  , COALESCE(MAX(CASE WHEN EVENT_NAME ='FeesCharged' THEN DECODED_LOG:fundingFees/1e6 ELSE 0 END), 0) as funding_fees
	
	, COALESCE(MAX(CASE WHEN EVENT_NAME ='VaultLiqFeeCharged' THEN DECODED_LOG:amount/1e6 ELSE 0 END), 0) as vault_liq_fees
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND (
	
	  (EVENT_NAME = 'FeesCharged' AND contract_address IN ('0x3890243a8fc091c626ed26c087a028b46bc9d66c', '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'))
	
	 OR
	
	 (EVENT_NAME = 'VaultLiqFeeCharged' AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9')
	  )
	  AND tx_hash = '0x6723274d98eca659ea79e556f77b0e821b0827e103f64c8a55603724d388e3cf'
	GROUP BY 1 ) , trade_closures as (
	SELECT
	
	block_timestamp
	  , tx_hash
	  --, DECODED_LOG
	  , 'close' as trade_type
	  , CASE
	
	
	 WHEN EVENT_NAME = 'MarketCloseExecuted' THEN 'market'
	
	
	WHEN DECODED_LOG:orderType = 0 THEN 'tp'
	
	
	WHEN DECODED_LOG:orderType = 1 THEN 'sl'
	
	
	WHEN DECODED_LOG:orderType = 2 THEN 'liq'
	
	
	WHEN DECODED_LOG:orderType = 3 THEN 'limit'
	
	
	ELSE NULL
	
	 END as order_type
	  , TO_NUMERIC(DECODED_LOG:"tradeId") as trade_id
	  , DECODED_LOG:percentProfit/1e6 as profit_percent
	  , DECODED_LOG:price/1e18 as close_price
	  , DECODED_LOG:priceImpactP/1e18 as closing_price_impact_perc
	  , DECODED_LOG:usdcSentToTrader/1e6 as usdc_sent
	  , TO_NUMERIC(DECODED_LOG:orderId) as order_id
	  --closure fees
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN closure_fees f on l.DECODED_LOG:"tradeId" = f.trade_id
	WHERE 1=1
	  --AND tx_hash IN ('0xfffa4bb31f9c3df28f94f84512a0611478f1346d69eee9a5de68815490f57fb4', '0xfffe9eb48baf6c91b9dbf2b3d25b3f0f2cbdcafb64c6d75a14690f84b3907db0')
	  AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	  AND TOPIC_0 IN (
	
	 '0x6d2428396742e21de629bc9398950301d56c1aa493d8de859c4ee751aa02a9b6', --LimitCloseExecuted
	
	 '0x5a988d8359c57f866538ea68df714da9c916a4903309f854821b8a8cb3f376e1'  --MarketCloseExecuted
	
	)
	  --AND tx_hash = '0xd1951eb3ee6ed3b79f5e87314899cf0a222c532768515005a3589bf106216de4'
	  AND tx_succeeded
	UNION ALL
	--MarketCloseExecutedV2 THIS IS NOT IN DECODED LOGS/// TODO:WHY?
	SELECT
	  * EXCLUDE (segmented_data, test)
	from (
	  SELECT
	
	 block_timestamp
	
	 , tx_hash
	
	 , 'close' as trade_type
	
	 , 'market' as order_type
	
	 , REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	 , utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	 , utils.udf_hex_to_int('s2c', segmented_data[2])/1e6 as profit_percent
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0]))/1e18 as close_price
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e18 as closing_price_impact_perc
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e6 as usdc_sent
	
	 -- --, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e2 as percent_closed --THIS IS NEW
	
	 , utils.udf_hex_to_int(TOPIC_1) as order_id
	
	 --closure fees
	
	 , rollover_fees
	
	 , funding_fees
	
	 , vault_liq_fees
	
	 , row_number() OVER (order by block_timestamp) as test
	  from arbitrum.core.fact_event_logs l
	  LEFT JOIN closure_fees f on utils.udf_hex_to_int(TOPIC_2) = f.trade_id
	  WHERE 1=1
	
	 --AND tx_hash = '0x9d9a5c8ab4690d72ee3d8508eab2e3d92b45cb52a14154458c5dc1b2c7961aa8'
	
	 --AND tx_hash = '0xd1951eb3ee6ed3b79f5e87314899cf0a222c532768515005a3589bf106216de4'
	
	 AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	 AND topic_0 = '0xcaa9acf31fbbd991f267d1fe36d806a81db477c3ad5df64ed81b5155b960e8da' --MarketCloseExecutedV2
	
	 AND tx_succeeded
	  )
	  ) SELECT
	 block_timestamp
	, tx_hash
	, trade_type
	, order_type
	, trade_id
	, profit_percent
	, close_price
	, closing_price_impact_perc
	, usdc_sent
	, order_id
	, rollover_fees
	, funding_fees
	, vault_liq_fees from trade_closures



=======================================================================================
=======================================================================================
QUERY_NO: 980
QUERY_ID: 08871b97-09c7-44bf-ad5d-70540167c656
QUERY_TITLE: Transfers Abuse - Peculiar Case

QUERY_STRING:

-- forked from SEI Transfers Abuse Filters @ https://flipsidecrypto.xyz/edit/queries/ff96b2ac-bda9-43e5-b091-3918764f44d1 -- forked from Get data from previous query @ https://flipsidecrypto.xyz/edit/queries/d2676227-3299-41a8-bc56-6425d16fac64  /* The query id can be taken from the browser address bar when editing your target query */ with get_base_query AS ( -- Get data from target query SELECT
	value[0]::numeric as VOL_IN
	, value[1]::numeric as VOL_OUT
	, value[2]::numeric as VOL_DROP
	, value[3]::numeric as AMT_DROP
	, value[4]::numeric as TXNS
	, TO_TIMESTAMP(value[5]) as T_MIN
	, TO_TIMESTAMP(value[6]) as T_MAX
	, TO_TIMESTAMP(value[7]) as T_DROP
	, value[8]::string as USER
	 FROM (
	SELECT
	  livequery.live.udf_api('https://flipsidecrypto.xyz/api/queries/7f04dcf7-02e7-4abb-acd3-8d4d6cc0c0e1/latest-run') as response
	), lateral FLATTEN (input => response:data:result:rows) ) , base_set as (
	SELECT
	  *
	FROM get_base_query
	 where 1=1
	  AND VOL_IN IS NOT NULL AND VOL_OUT IS NOT NULL
	  AND abs(vol_in-vol_out)<= 0.1*vol_in
	  AND vol_in>9000 ) SELECT * from base_set WHERE vol_in>4140000 ORDER BY t_max ASC



=======================================================================================
=======================================================================================
QUERY_NO: 981
QUERY_ID: 4aba02e9-4503-4685-82ad-8a3401ed8f1d
QUERY_TITLE: market_close_v2

QUERY_STRING:

SELECT
	
	 block_timestamp
	
	 , tx_hash
	
	 , 'close' as trade_type
	
	 , 'market' as order_type
	
	 , REGEXP_SUBSTR_ALL(SUBSTR(data, 3, len(data)), '.{64}') as segmented_data
	
	 , utils.udf_hex_to_int(TOPIC_2) as trade_id
	
	 , utils.udf_hex_to_int('s2c', segmented_data[2])/1e6 as profit_percent
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[0]))/1e18 as close_price
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[1]))/1e18 as closing_price_impact_perc
	
	 , TO_NUMERIC(utils.udf_hex_to_int(segmented_data[3]))/1e6 as usdc_sent
	
	 -- --, TO_NUMERIC(utils.udf_hex_to_int(segmented_data[4]))/1e2 as percent_closed --THIS IS NEW
	
	 , utils.udf_hex_to_int(TOPIC_1) as order_id
	
	
	
	from arbitrum.core.fact_event_logs l
	  WHERE 1=1
	
	 --AND tx_hash = '0x9d9a5c8ab4690d72ee3d8508eab2e3d92b45cb52a14154458c5dc1b2c7961aa8'
	
	 AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	
	 AND topic_0 = '0xcaa9acf31fbbd991f267d1fe36d806a81db477c3ad5df64ed81b5155b960e8da' --MarketCloseExecutedV2
	
	  -- block_timestamp -- , tx_hash -- , DECODED_LOG -- , 'close' as trade_type -- , CASE  --
	  WHEN EVENT_NAME = 'MarketCloseExecuted' THEN 'market' --
	  WHEN DECODED_LOG:orderType = 0 THEN 'tp' --
	  WHEN DECODED_LOG:orderType = 1 THEN 'sl' --
	  WHEN DECODED_LOG:orderType = 2 THEN 'liq' --
	  WHEN DECODED_LOG:orderType = 3 THEN 'limit' --
	  ELSE NULL --
	END as order_type -- , DECODED_LOG:"tradeId" as trade_id -- , DECODED_LOG:percentProfit/1e6 as profit_percent -- , DECODED_LOG:price/1e18 as close_price -- , DECODED_LOG:priceImpactP/1e18 as closing_price_impact_perc -- , DECODED_LOG:usdcSentToTrader/1e6 as usdc_sent -- , DECODED_LOG:orderId as order_id



=======================================================================================
=======================================================================================
QUERY_NO: 982
QUERY_ID: 4b452cdd-267b-4377-9228-521b406065fd
QUERY_TITLE: trade event samples

QUERY_STRING:

-- with market_pairs as ( --
	SELECT --
	  DECODED_LOG:index as pair_index --
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"from", 3))) as from_symbol --
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"to", 3))) as to_symbol --
	  , from_symbol || '-' || to_symbol as market_pair --
	from arbitrum.core.ez_decoded_event_logs --
	WHERE 1=1 --
	  AND contract_address = '0x260e349f643f12797fdc6f8c9d3df211d5577823' --pairsStorageAddress https://ostium-labs.gitbook.io/ostium-docs/security/smart-contract-audits --
	  AND TOPIC_0 = '0x797331683c7d888af91e5c6800626a01b5f1f7337a712c6915baa1b39c138a09' --event_name = 'PairAdded' --
	  AND tx_succeeded -- ) SELECT
	 EVENT_NAME
	, TOPIC_0
	, COUNT(*) as totals
	, MAX(tx_hash) as sample1
	, MIN(tx_hash) as sample2 from arbitrum.core.ez_decoded_event_logs WHERE 1=1
	--AND tx_hash = '0x4763d040786e1ec3f0aeedcec368834edeee00593125bddb985b671e0d5db190'
	AND contract_address = '0x7720fc8c8680bf4a1af99d44c6c265a74e9742a9'
	--AND TOPIC_0 = '0x19c8a7be769082e3461a241a3b6af0adad9302b7c1623ab8adb4d787fd9df67c' --LimitOpenExecuted GROUP BY 1,2



=======================================================================================
=======================================================================================
QUERY_NO: 983
QUERY_ID: a1356916-5e5f-4952-8390-1711fd4e3b16
QUERY_TITLE: sei vertex products

QUERY_STRING:

WITH logs_pull AS (
	  SELECT
	
	
	topics,
	
	
	contract_address,
	
	
	DATA,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	sei.core_evm.fact_event_logs
	  WHERE 1=1
	
	
	AND block_timestamp>='2024-08-01'
	
	
	AND topics [0] :: STRING IN (
	
	
	
	 '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172',
	
	
	
	 '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498'
	
	
	) ), new_prod AS (
	  SELECT
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS product_id,
	
	
	tx_hash,
	
	
	block_number,
	
	
	block_timestamp
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x3286b0394bf1350245290b7226c92ed186bd716f28938e62dbb895298f018172' ), book_address_pull AS (
	  SELECT
	
	
	tx_hash,
	
	
	contract_address AS book_address,
	
	
	regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,
	
	
	utils.udf_hex_to_int(
	
	
	
	 's2c',
	
	
	
	 segmented_data [0] :: STRING
	
	
	) :: INT AS version
	  FROM
	
	
	logs_pull
	  WHERE
	
	
	topics [0] :: STRING = '0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498' ), api_pull AS (
	  SELECT
	
	
	PARSE_JSON(
	
	
	
	 live.udf_api(
	
	
	
	
	  --sei-prod
	
	
	
	
	  --'https://gateway.prod.vertexprotocol.com/api/v2/assets'
	
	
	
	
	  --MANTLE: https://gateway.mantle-prod.vertexprotocol.com/v2/assets
	
	
	
	
	  'https://gateway.sei-prod.vertexprotocol.com/v2/assets'
	
	
	
	 )
	
	
	) :data AS response ), api_lateral_flatten AS (
	  SELECT
	
	
	r.value
	  FROM
	
	
	api_pull,
	
	
	LATERAL FLATTEN (response) AS r ), product_metadata AS (
	  SELECT
	
	
	VALUE :product_id AS product_id,
	
	
	VALUE :ticker_id AS ticker_id,
	
	
	VALUE :symbol AS symbol,
	
	
	VALUE :name AS NAME,
	
	
	VALUE :market_type AS market_type,
	
	
	VALUE :taker_fee AS taker_fee,
	
	
	VALUE :maker_fee AS maker_fee
	  FROM
	
	
	api_lateral_flatten ), FINAL AS (
	  SELECT
	
	
	l.block_number,
	
	
	l.block_timestamp,
	
	
	l.tx_hash,
	
	
	l.product_id,
	
	
	CASE
	
	
	
	 WHEN l.product_id % 2 = 0 THEN 'perp'
	
	
	
	 ELSE 'spot'
	
	
	END AS product_type,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN 'USDC'
	
	
	
	 ELSE p.ticker_id :: STRING
	
	
	END AS ticker_id,
	
	
	p.symbol :: STRING AS symbol,
	
	
	p.name :: STRING AS NAME,
	
	
	C.book_address,
	
	
	CASE
	
	
	
	 WHEN l.product_id = 0 THEN NULL
	
	
	
	 ELSE FLOOR((l.product_id - 1) / 2)
	
	
	END AS health_group,
	
	
	CASE
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WBTC' THEN 'BTC'
	
	
	
	 WHEN SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0] = 'WETH' THEN 'ETH'
	
	
	
	 ELSE SPLIT(
	
	
	
	
	  p.symbol,
	
	
	
	
	  '-'
	
	
	
	 ) [0]
	
	
	END AS health_group_symbol,
	
	
	p.taker_fee,
	
	
	p.maker_fee,
	
	
	CASE
	
	
	
	 WHEN C.version IS NOT NULL THEN 1
	
	
	
	 ELSE 2
	
	
	END AS version,
	  FROM
	
	
	new_prod l
	
	
	LEFT JOIN book_address_pull C
	
	
	ON l.tx_hash = C.tx_hash
	
	
	LEFT JOIN product_metadata p
	
	
	ON l.product_id = p.product_id
	  WHERE
	
	
	p.ticker_id IS NOT NULL ) SELECT
	  * FROM
	  FINAL qualify(ROW_NUMBER() over(PARTITION BY product_id ORDER BY block_timestamp DESC)) = 1



=======================================================================================
=======================================================================================
QUERY_NO: 984
QUERY_ID: d9c0beab-abe1-4461-a711-11808ffc3f77
QUERY_TITLE: community table tests

QUERY_STRING:

with base as (
	SELECT
	
	o.*
	  , CASE WHEN c.trade_id IS NULL THEN 0 ELSE 1 END as closed
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) SELECT
	SUM(CASE
	
	  WHEN closed=0 THEN volume
	
	 ELSE volume + coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	 END
	) as volume_usd from base



=======================================================================================
=======================================================================================
QUERY_NO: 985
QUERY_ID: c63c27b5-68a2-4448-9514-269bc4b5498a
QUERY_TITLE: LOUDIO CLAIMS Over Time

QUERY_STRING:

-- forked from LOUDIO presale summary @ https://flipsidecrypto.xyz/studio/queries/a98c3650-56ae-4614-a455-95e00c605f85 -- forked from LOUDIO presale over time @ https://flipsidecrypto.xyz/studio/queries/7f613684-3bc7-4152-9035-049f95a92bee --phase 1 program: uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK --phase 2 program: Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6 with all_deposits as (
	SELECT
	
	tr.*
	  , fe.program_id
	from solana.core.fact_transfers tr
	LEFT JOIN (
	  SELECT
	
	  *
	
	from solana.core.fact_events
	  WHERE 1=1
	
	 AND program_id in ('uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK', 'Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6')
	
	 AND block_id between 343717045 and 343753774
	) fe ON tr.tx_id = fe.tx_id
	WHERE 1=1
	  AND tx_to IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	  AND mint in ('So11111111111111111111111111111111111111112', 'So11111111111111111111111111111111111111111')
	  --AND amount = 0.2
	  AND tr.block_id between 343717045 and 343753774  ) SELECT
	--tr.*
	--TIME_SLICE(tr.block_timestamp, 15, 'MINUTE') as dtime
	date_trunc(hour, tr.block_timestamp) as dhour
	, CASE WHEN tr.tx_from='DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy' THEN 'phase1-claims' ELSE 'phase2-claims' END as label
	, SUM(tr.amount) as amount_claimed
	, COUNT(DISTINCT tr.tx_to) as claimers from solana.core.fact_transfers tr INNER JOIN all_deposits d ON tr.tx_to = d.tx_from WHERE 1=1
	AND tr.mint = 'EJZJpNa4tDZ3kYdcRZgaAtaKm3fLJ5akmyPkCaKmfWvd'
	AND d.program_id IS NOT NULL
	AND tr.block_id > 343717045
	AND tr.tx_from IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY') --qualify row_number() OVER (partition by tr.tx_to ORDER BY tr.block_id ASC)=1 GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 986
QUERY_ID: 828f7f20-a126-4ede-b9cd-a287319d0310
QUERY_TITLE: LOUDIO CLAIMS Summaries

QUERY_STRING:

-- forked from LOUDIO CLAIMS Over Time @ https://flipsidecrypto.xyz/studio/queries/c63c27b5-68a2-4448-9514-269bc4b5498a -- forked from LOUDIO presale summary @ https://flipsidecrypto.xyz/studio/queries/a98c3650-56ae-4614-a455-95e00c605f85 -- forked from LOUDIO presale over time @ https://flipsidecrypto.xyz/studio/queries/7f613684-3bc7-4152-9035-049f95a92bee --phase 1 program: uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK --phase 2 program: Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6 with all_deposits as (
	SELECT
	
	tr.*
	  , fe.program_id
	  , CASE WHEN tr.tx_to='DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy' THEN 'phase1-claims' ELSE 'phase2-claims' END as label
	from solana.core.fact_transfers tr
	LEFT JOIN (
	  SELECT
	
	  *
	
	from solana.core.fact_events
	  WHERE 1=1
	
	 AND program_id in ('uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK', 'Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6')
	
	 AND block_id between 343717045 and 343753774
	) fe ON tr.tx_id = fe.tx_id
	WHERE 1=1
	  AND tx_to IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	  AND mint in ('So11111111111111111111111111111111111111112', 'So11111111111111111111111111111111111111111')
	  --AND amount = 0.2
	  AND tr.block_id between 343717045 and 343753774  ) , claim_summary as (
	SELECT
	  CASE WHEN tr.tx_from='DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy' THEN 'phase1-claims' ELSE 'phase2-claims' END as label
	  , SUM(tr.amount) as amount_claimed
	  , COUNT(DISTINCT tr.tx_to) as claimers
	  , MAX(tr.amount) as max_claim
	  , MIN(tr.amount) as min_claim
	from solana.core.fact_transfers tr
	INNER JOIN all_deposits d ON tr.tx_to = d.tx_from
	WHERE 1=1
	  AND tr.mint = 'EJZJpNa4tDZ3kYdcRZgaAtaKm3fLJ5akmyPkCaKmfWvd'
	  AND d.program_id IS NOT NULL
	  AND tr.block_id > 343717045
	  AND tr.tx_from IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	--qualify row_number() OVER (partition by tr.tx_to ORDER BY tr.block_id ASC)=1
	GROUP BY 1  ) SELECT
	s.*
	, valid_claimers
	, total_amount as amount_allocated
	--, ROUND((claimers/valid_claimers)*100, 2) as perc_claimers_claimed
	, ROUND((amount_claimed/total_amount)*100, 2) as perc_allocation_claimed from claim_summary s LEFT JOIN (
	SELECT
	  label
	  , COUNT(tx_from) as valid_claimers
	  , valid_claimers * (CASE WHEN label='phase2-claims' THEN 56250 ELSE 225000 END) as total_amount
	from all_deposits
	WHERE 1=1
	  AND program_id IS NOT NULL
	GROUP BY 1 ) d ON s.label = d.label



=======================================================================================
=======================================================================================
QUERY_NO: 987
QUERY_ID: d903e302-1e5b-45a5-99f9-e8a8b1289989
QUERY_TITLE: deployed vs graduated

QUERY_STRING:

-- forked from tokens_deployed fact_events  @ https://flipsidecrypto.xyz/studio/queries/2eea7641-e4cb-4264-968f-e106f124421b -- forked from tokens_deployed fact_events (by index sub_type) @ https://flipsidecrypto.xyz/studio/queries/ed733a29-643f-4bb8-94fe-b298db809705 with deployments as (
	SELECT
	 -- *
	
	block_timestamp::date as ddate
	  , tx_id
	
	, SIGNERS[0] as creator
	  , inner_instruction:instructions[3]:parsed:info:mint as token_created
	from solana.core.fact_events
	WHERE 1=1
	  AND block_timestamp>='2025-03-21' --SYNC with Fish's graduation table for only PUMP AMM graduations
	  AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	  --AND index IN (1,2) --create event index //index seems to be random as fok
	  AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
	  AND inner_instruction:instructions[3]:parsed:type = 'create'
	  AND succeeded ) , graduations_merge as (
	SELECT
	  d.*
	  , g.tx_id as grad_tx
	  , g.block_timestamp as grad_ts
	from deployments d
	LEFT JOIN community.solana.pump_fun_new_graduation  g ON d.token_created = g.base_mint )  SELECT
	ddate
	, CASE WHEN grad_tx IS NULL THEN 'stalled' ELSE 'graduated' END as label
	, COUNT(token_created) as tokens from graduations_merge WHERE 1=1
	AND ddate<=CURRENT_DATE-2 GROUP BY 1, 2 ORDER BY 1 DESC, 2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 988
QUERY_ID: f5a20deb-30c4-4f9f-af0a-f220f9d0c99b
QUERY_TITLE: Instance Asset Rates over Time

QUERY_STRING:

-- forked from Instance Asset Flow Over Time @ https://flipsidecrypto.xyz/studio/queries/91d3ade6-11a7-4133-bf0c-be0b72351820 -- forked from TVL over Time (PARAM) @ https://flipsidecrypto.xyz/studio/queries/758d5314-58f1-4086-b5af-03d95f82ae40 -- forked from TVL over Time @ https://flipsidecrypto.xyz/studio/queries/ff626170-6d30-4bfa-aec7-141f01f1cdd0 with base as (
	SELECT *, 'arbitrum' as label from arbitrum.vertex.ez_money_markets
	WHERE 1=1
	UNION ALL
	 SELECT *, 'base' as label from base.vertex.ez_money_markets
	WHERE 1=1
	
	UNION ALL
	 SELECT *, 'blitz-blast' as label from blast.blitz.ez_money_markets
	WHERE 1=1
	
	
	UNION ALL
	 SELECT *, 'mantle' as label from mantle.vertex.ez_money_markets
	WHERE 1=1
	
	  UNION ALL
	 SELECT *, 'sei' as label from sei.vertex.ez_money_markets
	WHERE 1=1
	
	) SELECT
	 LABEL as instance
	, SYMBOL
	, ROUND(TVL, 2) as TVL_USD
	, ROUND(DEPOSIT_APR * 100, 3) as DEPOSIT_APR
	, ROUND(BORROW_APR * 100, 3) as BORROW_APR
	, HOUR from base WHERE 1=1
	  and instance = lower('{{instance}}')
	  and symbol = upper('{{asset}}') ORDER BY LABEL ASC, HOUR DESC



=======================================================================================
=======================================================================================
QUERY_NO: 989
QUERY_ID: f4083419-d81f-46fd-b33f-ca8e75860447
QUERY_TITLE: summary stats

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) SELECT
	COUNT(DISTINCT trader) AS unique_traders
	, COUNT(DISTINCT digest) AS total_orders
	, SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS total_volume
	, SUM(fee_amount) as total_fees from merge -- SELECT * from merge WHERE label = 'arbitrum' -- LIMIT 1



=======================================================================================
=======================================================================================
QUERY_NO: 990
QUERY_ID: 91d3ade6-11a7-4133-bf0c-be0b72351820
QUERY_TITLE: Instance Asset Flow Over Time

QUERY_STRING:

-- forked from TVL over Time (PARAM) @ https://flipsidecrypto.xyz/studio/queries/758d5314-58f1-4086-b5af-03d95f82ae40 -- forked from TVL over Time @ https://flipsidecrypto.xyz/studio/queries/ff626170-6d30-4bfa-aec7-141f01f1cdd0 with base as (
	SELECT
	
	*
	 from  $query('2909d4af-9255-4be4-bb5e-5bb421990a3a')
	WHERE 1=1
	  and chain = lower('{{instance}}')
	  and symbol = upper('{{asset}}') ) SELECT * from base ORDER BY DDATE DESC, CHAIN ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 991
QUERY_ID: 83c28c5b-7337-4b6b-9947-314f73bb4346
QUERY_TITLE: Top Pairs - Spreads

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , refine as (
	SELECT
	  symbol
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS volume
	  , row_number() OVER (ORDER BY volume DESC) as ranks
	from merge
	WHERE 1=1
	GROUP BY 1 ) , top5 as (
	SELECT
	
	symbol
	  , SUM(volume) as volume
	from refine
	WHERE ranks <=9
	GROUP BY 1
	ORDER BY VOLUME DESC )
	SELECT
	 HOUR
	, split(ticker_id,'_')[0] as symbol
	, MIN(CASE WHEN orderbook_side='asks' THEN price ELSE NULL END) as price_ask
	, MAX(CASE WHEN orderbook_side='bids' THEN price ELSE NULL END) as price_bid
	, ROUND(abs(((price_ask-price_bid)/price_ask)*100), 3) as spread
	, SUM(CASE WHEN orderbook_side='asks' THEN volume ELSE NULL END) as vol_ask
	, SUM(CASE WHEN orderbook_side='bids' THEN volume ELSE NULL END) as vol_bid from arbitrum.vertex.ez_market_depth_stats WHERE 1=1
	AND HOUR::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	 AND split(ticker_id,'_')[0] in (SELECT DISTINCT symbol from top5)
	--AND ticker_id = 'BTC-PERP_USDC'
	--AND orderbook_side = 'asks' GROUP BY HOUR, symbol ORDER BY HOUR ASC, symbol ASC



=======================================================================================
=======================================================================================
QUERY_NO: 992
QUERY_ID: 8c966e3c-dd2b-461f-9533-46dbc46d4162
QUERY_TITLE: classifications

QUERY_STRING:

-- forked from summary stats @ https://flipsidecrypto.xyz/studio/queries/f4083419-d81f-46fd-b33f-ca8e75860447 with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , user_stats as (
	SELECT
	
	trader
	  , COUNT(DISTINCT label) as instances
	  , MAX(label) as instance_name
	  , COUNT(DISTINCT block_timestamp::date) as active_days
	  , COUNT(DISTINCT digest) as total_orders
	  , SUM(amount_usd ) as total_volume
	  , SUM(fee_amount) as total_fees
	from merge
	GROUP BY 1 ) SELECT
	CASE
	
	WHEN instances=1 THEN instance_name || ' - only'
	
	WHEN instances=2 THEN '2 instances'
	  ELSE '3 or more instances'
	 end as instance_type
	, CASE
	
	  WHEN active_days=1 THEN 'single day'
	
	 WHEN active_days BETWEEN 2 and 10 THEN '2-10 days'
	
	 WHEN active_days BETWEEN 11 AND 30 THEN '11-30 days'
	
	 ELSE '>30 days'
	  END as active_days_type
	, CASE
	
	  WHEN total_volume BETWEEN 0 AND 99 THEN '<$100'
	
	 WHEN total_volume BETWEEN 100 and 999 THEN '<$1K'
	
	 WHEN total_volume BETWEEN 1000 AND 9999 THEN '<$10K'
	
	 WHEN total_volume BETWEEN 10000 AND 99999 THEN '<$100K'
	
	 ELSE '>$100K'
	  END as volume_types
	, COUNT (DISTINCT trader) as users from user_stats GROUP BY 1, 2, 3



=======================================================================================
=======================================================================================
QUERY_NO: 993
QUERY_ID: ed733a29-643f-4bb8-94fe-b298db809705
QUERY_TITLE: tokens_deployed fact_events (by index sub_type)

QUERY_STRING:

SELECT  -- *
	 block_timestamp::date as ddate
	, index as sub_type
	, COUNT(tx_id) as txns
	, COUNT(DISTINCT SIGNERS[0]) as creators
	, COUNT(inner_instruction:instructions[3]:parsed:info:mint) as tokens_created
	, SUM(tokens_created) OVER (ORDER BY ddate ASC) as total_tokens_created
	 , MAX(tx_id) as sample_tx
	, MAX(inner_instruction:instructions[3]:parsed:info:mint) as token_sample1
	, MIN(inner_instruction:instructions[3]:parsed:info:mint) as token_sample2 from solana.core.fact_events WHERE 1=1
	AND block_timestamp>='2024-01-01'
	AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	--AND index IN (1,2) --create event index //index seems to be random as fok
	AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
	AND inner_instruction:instructions[3]:parsed:type = 'create'
	AND succeeded GROUP BY 1, 2 ORDER BY 1 DESC, 2 ASC  -- SELECT  -- *  -- from solana.core.fact_events -- WHERE 1=1 --
	AND block_timestamp>='2024-01-01' --
	AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' --
	--AND index=2 --create event index --
	--AND event_type = 'create' --
	AND index!=2 --
	AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' --
	AND inner_instruction:instructions[3]:parsed:type = 'create' --
	--AND succeeded -- LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 994
QUERY_ID: a1a642ef-ed24-4203-ba8e-957d06fe4579
QUERY_TITLE: top pairs

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , refine as (
	SELECT
	  symbol
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS volume
	  , row_number() OVER (ORDER BY volume DESC) as ranks
	from merge
	WHERE 1=1
	GROUP BY 1 ) SELECT
	 CASE WHEN ranks<=9 THEN symbol ELSE 'Others' END as label
	, SUM(volume) as volume from refine GROUP BY label ORDER BY VOLUME DESC



=======================================================================================
=======================================================================================
QUERY_NO: 995
QUERY_ID: bfc0667e-ec37-4636-ba76-4f3258152c34
QUERY_TITLE: tokens_deployed inner

QUERY_STRING:

-- forked from tokens_deployed inner @ https://flipsidecrypto.xyz/studio/queries/ed733a29-643f-4bb8-94fe-b298db809705 SELECT -- *
	block_timestamp::date as ddate
	, COUNT(tx_id) as txns
	, COUNT(DISTINCT SIGNERS[0]) as creator_wallet
	, COUNT(instruction:parsed:info:mint) as token_created  from solana.core.fact_events_inner WHERE 1=1
	AND block_timestamp::date>='2024-01-10'
	--AND tx_id='ay3h8ZSrEGxfxwXX9voD4x7LNYcSrtM3wrW2q3AeBSbdtQRrwUa7xRoeCiaHhwZmc4JnoufAvacEy9pCag9gCWr'
	--AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' // it's ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
	AND instruction_program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	AND event_type = 'create' GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 996
QUERY_ID: 7728b1b0-fca8-4b6e-b027-9c8cdec6987f
QUERY_TITLE: daily stats by label

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	 SELECT *, 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) ---create sample space for labels persisting colors--- , labels as (
	select * from
	  ( values
	
	  ('arbitrum'),
	
	 ('base'),
	
	 ('blitz'),
	
	 ('mantle'),
	
	 ('sei')
	  ) as a (label) ) , dates as (
	SELECT
	
	DISTINCT date_day
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '{{start_date}}' AND '{{end_date}}' ) , sample_space as (
	SELECT
	
	date_day
	  , label
	from dates
	 LEFT JOIN labels  on 1=1 ) SELECT
	date_trunc('day', date_day) as ddate
	, s.label
	 , COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(CASE WHEN fee_amount>=0 THEN fee_amount ELSE 0 END), 0) as total_fees
	, COALESCE(SUM(CASE WHEN fee_amount<0 THEN fee_amount ELSE 0 END), 0) as total_rebates from sample_space s  LEFT JOIN merge m on (s.date_day = m.block_timestamp::date AND s.label = m.label)  GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC  -- SELECT * from labels



=======================================================================================
=======================================================================================
QUERY_NO: 997
QUERY_ID: 4c9cbfcd-5882-47d5-8083-82186e77bb46
QUERY_TITLE: total stats by label

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	  AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) ---create sample space for labels persisting colors--- , labels as (
	select * from
	  ( values
	
	  ('arbitrum'),
	
	 ('base'),
	
	 ('blitz'),
	
	 ('mantle'),
	
	 ('sei')
	  ) as a (label) ) , dates as (
	SELECT
	
	DISTINCT date_day
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '{{start_date}}' AND '{{end_date}}' ) , sample_space as (
	SELECT
	
	date_day
	  , label
	from dates
	 LEFT JOIN labels  on 1=1 ) SELECT
	s.label
	 , COALESCE(COUNT(DISTINCT trader), 0) AS unique_traders
	, COALESCE(COUNT(DISTINCT digest), 0) AS total_orders
	, COALESCE(SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END), 0) AS total_volume
	, COALESCE(SUM(fee_amount), 0) as total_fees from sample_space s  LEFT JOIN merge m on (s.date_day = m.block_timestamp::date AND s.label = m.label)  GROUP BY 1 ORDER BY 1 ASC -- SELECT * from labels



=======================================================================================
=======================================================================================
QUERY_NO: 998
QUERY_ID: 43ff0d13-62f9-4b92-9b11-280b7967cce9
QUERY_TITLE: Top Pairs - FRates

QUERY_STRING:

with merge as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	
	
	 AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , refine as (
	SELECT
	  symbol
	  , SUM(CASE WHEN (is_taker=FALSE) THEN amount_usd ELSE 0 END) AS volume
	  , row_number() OVER (ORDER BY volume DESC) as ranks
	from merge
	WHERE 1=1
	GROUP BY 1 ) , top5 as (
	SELECT
	
	symbol
	  , SUM(volume) as volume
	from refine
	WHERE ranks <=9
	GROUP BY 1
	ORDER BY VOLUME DESC )
	SELECT
	 HOUR
	, symbol
	, coalesce(funding_rate, 0 ) as funding_rate
	, funding_rate*24*365 as rate_annualized from arbitrum.vertex.ez_market_stats WHERE 1=1
	AND HOUR::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	 AND symbol in (SELECT DISTINCT symbol from top5) ORDER BY HOUR ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 999
QUERY_ID: c8ac5c1a-c63d-4c2f-bb3c-8bf718b0822c
QUERY_TITLE: new users by instance

QUERY_STRING:

-- forked from new users @ https://flipsidecrypto.xyz/studio/queries/1a856392-7af8-4ad9-96ee-909b0154fe62 with merge_all_time as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , users as (
	SELECT
	
	block_timestamp
	  , trader
	  , label
	from merge_all_time
	qualify row_number() OVER (PARTITION BY trader ORDER BY block_timestamp ASC) = 1 ) , labels as (
	select * from
	  ( values
	
	  ('arbitrum'),
	
	 ('base'),
	
	 ('blitz'),
	
	 ('mantle'),
	
	 ('sei')
	  ) as a (label) ) SELECT
	 label
	, COALESCE(COUNT(DISTINCT trader), 0) as new_users from labels LEFT JOIN users using(label) WHERE 1=1
	AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  GROUP BY 1 ORDER BY LABEL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1000
QUERY_ID: d8637e50-b56b-4b0a-94c2-da5409ffda30
QUERY_TITLE: retention plots

QUERY_STRING:

-- forked from new vs old traffic @ https://flipsidecrypto.xyz/studio/queries/32c825b6-9c3d-467a-811e-23cbd25bb896 -- forked from new users by instance @ https://flipsidecrypto.xyz/studio/queries/c8ac5c1a-c63d-4c2f-bb3c-8bf718b0822c -- forked from new users @ https://flipsidecrypto.xyz/studio/queries/1a856392-7af8-4ad9-96ee-909b0154fe62 with merge_all_time as (
	---arbitrum
	SELECT * EXCLUDE version, 'arbitrum' as label from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	
	UNION ALL
	 ---base
	 SELECT *, 'base' as label from base.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---blitz
	SELECT * , 'blitz' as label from blast.blitz.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	 ---mantle
	SELECT * , 'mantle' as label from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001'
	UNION ALL
	---sei
	SELECT * , 'sei' as label from sei.vertex.ez_perp_trades
	WHERE 1=1
	  --AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	
	AND trader != '0x0000000000000000000000000000000000000000'
	  AND subaccount!='0x0000000000000000000000000000000000000000000000000000000000000001' ) , users as (
	SELECT
	
	block_timestamp
	  , trader
	  , label
	from merge_all_time
	qualify row_number() OVER (PARTITION BY trader ORDER BY block_timestamp ASC) = 1 ) , new_users as (
	SELECT
	
	block_timestamp
	  , trader
	  , 1 as is_new
	from users
	WHERE 1=1
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}'  ) ---retention logic WEEKLY //monthly doesn't make sense for a quarterly dashboard! --- , base as (
	SELECT
	
	trader
	  --, CASE WHEN total_claim_val IS NULL THEN 'non-claimer' ELSE 'claimer' END as label
	  , date_trunc('week', block_timestamp) as date
	  , min(date_trunc('week', block_timestamp)) over(partition by trader) as min_date
	  , datediff(
	
	
	'week'
	
	
	, min(date_trunc('week', block_timestamp)) over(partition by trader) -- min_date
	
	
	, date_trunc('week', block_timestamp) -- current date in month
	
	 ) as difference
	from merge_all_time a
	WHERE 1=1 AND trader  IN (SELECT trader from new_users)
	  AND block_timestamp::date BETWEEN '{{start_date}}' AND '{{end_date}}' ) ,  count_new_users as(
	select
	
	min_date
	  , count(distinct trader) as new_users
	 from base
	group by 1 ) , count_returning_users as(
	select
	
	min_date
	  , difference
	  , count(distinct trader) as existing_users
	 from base
	where difference != 0
	group by 1,2 ) ,  long_retention_table as(
	select
	
	count_new_users.min_date as cohort
	  , difference
	  , new_users
	  , existing_users
	  , round(existing_users / new_users,2) as retention_pct
	from count_new_users
	left join count_returning_users
	
	
	on count_new_users.min_date = count_returning_users.min_date
	WHERE 1=1 AND difference IS NOT NULL  ) , filter as (
	SELECT
	
	TO_VARCHAR(CASE WHEN (MONTH(cohort)/10) < 1 THEN TO_VARCHAR(0) || TO_VARCHAR(MONTH(cohort)) ELSE TO_VARCHAR(MONTH(cohort)) END)
	
	|| '-' ||
	
	TO_VARCHAR(CASE WHEN (DAY(cohort)/10) < 1 THEN TO_VARCHAR(0) || TO_VARCHAR(DAY(cohort)) ELSE TO_VARCHAR(DAY(cohort)) END) as batch
	  , difference as weeks_since
	  , retention_pct
	  , new_users
	  , existing_users
	from long_retention_table ) SELECT * from filter WHERE 1=1 ORDER BY batch ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1001
QUERY_ID: e2fc3efa-5470-4d4a-ba38-0ee17c6d929d
QUERY_TITLE: new users/total users

QUERY_STRING:

with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	  , SUM(USERS) OVER (ORDER BY signup_date ASC) as total_users
	from app_wallets
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1002
QUERY_ID: 6080c47d-9869-4829-9fa3-4828d4a3199b
QUERY_TITLE: Proposals Roster/Metadata  TESTS

QUERY_STRING:

-- forked from Proposals Roster/Metadata  @ https://flipsidecrypto.xyz/studio/queries/148034ec-7805-407c-b8ec-7245a0fb85da with prop_metadata as (
	SELECT
	  *
	from solana.core.fact_decoded_instructions
	WHERE 1=1
	  and program_id = 'GovaE4iu227srtG2s3tZzB4RmWBzw8sTwrCLZz7kN7rY'
	  and event_type = 'createProposalMeta' ) , prop_activation_data as (
	  -- log pattern start: 'Program data: 9zWm+' (start is the instruction/function sig...should remain the same unless...)
	  SELECT
	
	  dt.block_timestamp as vote_start_time
	
	 , dt.tx_id
	
	 , split(value, ': ')[1] as activation_log_base64
	
	 , to_varchar(base64_decode_binary(activation_log_base64)) as hex_data
	
	 --, substr(hex_data, 0, 16) as instruction_sig
	
	 --, livequery.utils.udf_hex_to_base58('0x' || substr(hex_data, 1 + 16, 64)) as governor
	
	 , livequery.utils.udf_hex_to_base58('0x' || substr(hex_data, 1 + 16 + 64, 64)) as proposal
	
	 , TO_TIMESTAMP_NTZ(livequery.utils.udf_hex_to_int('s2c', to_char(reverse(to_binary(substr(hex_data, 1+ 16 + 64 + 64, 16))))) ) as vote_end_time
	  FROM solana.core.fact_decoded_instructions dt
	  LEFT JOIN solana.core.fact_transactions t ON dt.tx_id = t.tx_id
	  , lateral flatten(input=>t.log_messages)
	  WHERE 1=1
	
	 --and tx_id = 'nSofUZjcUDVpPwfxGzDyHasUskwv4GrJzfPZ6cChxPXNfCpupetNaaDo5SjGmttxxowtvJgMXMeouoNU7wHFqV8'
	
	 and program_id = 'GovaE4iu227srtG2s3tZzB4RmWBzw8sTwrCLZz7kN7rY'
	
	 and value ILIKE 'Program data: 9zWm+%'
	
	 and event_type = 'activateProposal' ) , merge as (
	SELECT
	  pm.creation_time
	  , pm.title
	  , pm.details
	  , pd.vote_start_time
	  , pd.vote_end_time
	  , pm.proposal
	from prop_metadata pm
	LEFT JOIN prop_activation_data pd ON pm.proposal = pd.proposal ) SELECT * from merge ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1003
QUERY_ID: bd50f3fe-2abd-4a03-acd5-3c4ecb3b670f
QUERY_TITLE: deployed vs graduated test

QUERY_STRING:

-- forked from deployed vs graduated @ https://flipsidecrypto.xyz/studio/queries/d903e302-1e5b-45a5-99f9-e8a8b1289989 -- forked from tokens_deployed fact_events  @ https://flipsidecrypto.xyz/studio/queries/2eea7641-e4cb-4264-968f-e106f124421b -- forked from tokens_deployed fact_events (by index sub_type) @ https://flipsidecrypto.xyz/studio/queries/ed733a29-643f-4bb8-94fe-b298db809705 with deployments as (
	SELECT
	 -- *
	
	block_timestamp::date as ddate
	  , tx_id
	
	, SIGNERS[0] as creator
	  , inner_instruction:instructions[3]:parsed:info:mint as token_created
	from solana.core.fact_events
	WHERE 1=1
	  AND block_timestamp>='2024-01-01'
	  AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	  --AND index IN (1,2) --create event index //index seems to be random as fok
	  AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
	  AND inner_instruction:instructions[3]:parsed:type = 'create'
	  AND succeeded ) , graduations_merge as (
	SELECT
	  d.*
	  , g.tx_id as grad_tx
	  , g.block_timestamp as grad_ts
	from deployments d
	LEFT JOIN community.solana.pump_fun_new_graduation  g ON d.token_created = g.base_mint )  SELECT
	*
	, DATEDIFF('days', ddate, grad_ts) as days_to_grad from graduations_merge WHERE 1=1
	AND grad_tx is not null ORDER BY ddate ASC  LIMIT 500



=======================================================================================
=======================================================================================
QUERY_NO: 1004
QUERY_ID: fd07c30a-fd83-4d03-bbe4-b727c16919c8
QUERY_TITLE: deployed vs graduated (%s)

QUERY_STRING:

-- forked from deployed vs graduated @ https://flipsidecrypto.xyz/studio/queries/d903e302-1e5b-45a5-99f9-e8a8b1289989 -- forked from tokens_deployed fact_events  @ https://flipsidecrypto.xyz/studio/queries/2eea7641-e4cb-4264-968f-e106f124421b -- forked from tokens_deployed fact_events (by index sub_type) @ https://flipsidecrypto.xyz/studio/queries/ed733a29-643f-4bb8-94fe-b298db809705 with deployments as (
	SELECT
	 -- *
	
	block_timestamp::date as ddate
	  , tx_id
	
	, SIGNERS[0] as creator
	  , inner_instruction:instructions[3]:parsed:info:mint as token_created
	from solana.core.fact_events
	WHERE 1=1
	  AND block_timestamp>='2025-03-21' --SYNC with Fish's graduation table for only PUMP AMM graduations
	  AND program_id = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'
	  --AND index IN (1,2) --create event index //index seems to be random as fok
	  AND inner_instruction:instructions[3]:programId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
	  AND inner_instruction:instructions[3]:parsed:type = 'create'
	  AND succeeded ) , graduations_merge as (
	SELECT
	  d.*
	  , g.tx_id as grad_tx
	  , g.block_timestamp as grad_ts
	from deployments d
	LEFT JOIN community.solana.pump_fun_new_graduation  g ON d.token_created = g.base_mint )  SELECT
	ddate
	, COUNT(CASE WHEN grad_tx IS NULL THEN 1 ELSE NULL END) as stalls
	, COUNT(CASE WHEN grad_tx IS NULL THEN NULL ELSE 1 END) as grads
	, COUNT(token_created) as tokens
	, ROUND((grads/tokens)*100, 2) as grad_perc from graduations_merge WHERE 1=1
	AND ddate<=CURRENT_DATE-2 GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1005
QUERY_ID: c0ecc203-2f26-460d-93b9-16f7f8edb669
QUERY_TITLE: poison test windows

QUERY_STRING:

with transfers as (
	SELECT
	  block_timestamp
	  , block_id
	  , 'sends' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_from as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_from = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111'
	
	UNION
	 SELECT
	  block_timestamp
	  , block_id
	  , 'receipts' as side
	  , tx_id
	  , tx_from
	  , tx_to
	  , tx_to as wallet
	  , amount
	from solana.core.fact_transfers
	WHERE 1=1
	  AND tx_to = '5LbwC1ewY3Sca7T8CwzX9wsjvwMAHbdRo6SCQL8j7EWc'
	  --AND mint = 'So11111111111111111111111111111111111111111'
	
	 ) SELECT
	 *
	-- , CASE WHEN side = 'sends' and lead(side) OVER (PARTITION BY wallet ORDER BY block_id asc) ='receipts' THEN lead(tx_from) OVER (PARTITION BY wallet ORDER BY block_id asc)  ELSE NULL END as l1_sender
	-- , CASE WHEN side = 'sends' and lead(side, 2) OVER (PARTITION BY wallet ORDER BY block_id asc) ='receipts' THEN lead(tx_from, 2) OVER (PARTITION BY wallet ORDER BY block_id asc)  ELSE NULL END as l2_sender
	-- , CASE WHEN side = 'sends' and lead(side, 3) OVER (PARTITION BY wallet ORDER BY block_id asc) ='receipts' THEN lead(tx_from, 3) OVER (PARTITION BY wallet ORDER BY block_id asc)  ELSE NULL END as l3_sender from transfers ORDER BY block_id ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1006
QUERY_ID: a3005985-08d8-45d0-9508-af694e68c37f
QUERY_TITLE: special gas - overview

QUERY_STRING:

with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  AND block_number<4000000 ) SELECT
	 COUNT(distinct wallet) as users
	, SUM(amount) as total_mon
	, MAX(block_timestamp) as max_time
	, MIN(block_timestamp) as min_time
	, MAX(block_number) as last_block from gas_base



=======================================================================================
=======================================================================================
QUERY_NO: 1007
QUERY_ID: f4d9a46a-86d0-400e-a6f8-ae8e30a6c748
QUERY_TITLE: special gas - over time

QUERY_STRING:

-- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  AND block_number<4000000 ) SELECT
	 date_trunc('minute', block_timestamp) as dmin
	, COUNT(distinct wallet) as users
	, SUM(amount) as total_mon
	, SUM(total_mon) OVER (ORDER BY dmin ASC) as mon_cumulative
	, SUM(users) OVER (ORDER BY dmin ASC) as users_cumulative from gas_base GROUP BY 1 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1008
QUERY_ID: 83dcf822-1bc2-46b9-aef1-c650d475b469
QUERY_TITLE: special gas - leaderboard

QUERY_STRING:

-- forked from special gas - over time @ https://flipsidecrypto.xyz/studio/queries/f4d9a46a-86d0-400e-a6f8-ae8e30a6c748 -- forked from special gas - overview @ https://flipsidecrypto.xyz/studio/queries/a3005985-08d8-45d0-9508-af694e68c37f with gas_base as (
	SELECT
	
	tx_hash
	  , block_number
	  , block_timestamp
	  , TO_ADDRESS as wallet
	  , VALUE as amount
	  --, row_number() OVER (partition by to_address ORDER BY tx_hash DESC) as rank
	from monad.testnet.fact_traces
	WHERE 1=1
	  --AND tx_hash = '0xdac05244373d466d547690ecaf151b3a3a1d6365a520c68528e8a83681dc7351'
	  AND origin_to_address = '0x9fb480a193c250bf8ece39df5d9d728e21026b34'
	  AND origin_function_signature = '0x7a53bcfc'
	  AND TX_SUCCEEDED
	  AND trace_index>=1
	  AND block_number<4000000 ) , aggr as (
	SELECT
	
	wallet
	  , SUM(amount) as mon_gas_totals
	  , COUNT(DISTINCT tx_hash) as payout_txns
	  , rank() OVER (order BY mon_gas_totals DESC) as rank
	from gas_base
	GROUP BY 1
	ORDER BY 2 DESC ) SELECT * from aggr ORDER BY 2 DESC LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 1009
QUERY_ID: 568a2141-9915-4665-b544-6c9f4148908b
QUERY_TITLE: Daily Stats - taker

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	
	UNION ALL
	
	SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'blitz-blast' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND trader = '0x0000000000000000000000000000000000000000'
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001'
	GROUP BY ddate, label ) SELECT * from edge_vols ORDER BY ddate ASC, label ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1010
QUERY_ID: 9b767033-d78d-4f10-a2f3-fda272bd116e
QUERY_TITLE: overview stats test

QUERY_STRING:

-- forked from overview stats by pair @ https://flipsidecrypto.xyz/studio/queries/a6e200bc-27ff-40e3-b870-7f1482f9bb34 -- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/a07b674b-3d21-4aae-a79a-73bff99d80b3 with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT
	SUM(
	  CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	  END
	  ) as volume_usd
	, SUM(
	  CASE
	
	  WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	 ELSE funding_fees + rollover_fees + vault_liq_fees
	  END
	) as total_fees
	, COUNT(DISTINCT trade_id) as trades
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT market_pair) as markets from refine



=======================================================================================
=======================================================================================
QUERY_NO: 1011
QUERY_ID: da614ee7-403e-4482-8dde-317080b240c1
QUERY_TITLE: flaky-aquamarine

QUERY_STRING:

SHOW TABLES IN DATABASE DATASCIENCE_PUBLIC_MISC



=======================================================================================
=======================================================================================
QUERY_NO: 1012
QUERY_ID: 527d825c-eb74-435b-9d83-e1432d7a9e0f
QUERY_TITLE: FRates Picker

QUERY_STRING:

SELECT
	 HOUR
	, symbol
	, coalesce(funding_rate, 0 ) as funding_rate
	, funding_rate*24*365 as rate_annualized from arbitrum.vertex.ez_market_stats WHERE 1=1
	AND HOUR::date BETWEEN '{{start_date}}' AND '{{end_date}}'
	 AND symbol ilike '{{ticker}}%' ORDER BY HOUR ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1013
QUERY_ID: cfd5f1f1-5270-435a-ab61-678030e9d341
QUERY_TITLE: C - Users meeting both staking/trading requirements

QUERY_STRING:

-- forked from B - Traders meeting volume/trades requirements @ https://flipsidecrypto.xyz/edit/queries/09400cde-46bd-492e-91cf-66173e1ade64 with traders as (
	with base as (
	  SELECT
	
	  trader as user
	
	 , SUM(amount_usd) as volume
	
	 , COUNT(DISTINCT DIGEST) as trades
	  from arbitrum.vertex.ez_spot_trades
	  GROUP BY user
	
	  UNION
	
	
	SELECT
	
	  trader as user
	
	 , SUM(amount_usd) as volume
	
	 , COUNT(DISTINCT DIGEST) as trades
	  from arbitrum.vertex.ez_perp_trades
	  GROUP BY user
	)
	
	SELECT
	
	user
	  , SUM(volume) as total_volume
	  , SUM(trades) as total_trades
	from base
	GROUP BY USER
	  HAVING ( total_volume>={{volume_usd}} AND total_trades>={{trade_count}} ) ) , stakers as (
	SELECT
	
	origin_from_address as user
	  , SUM ( CASE WHEN stake_action='stake' THEN AMOUNT ELSE AMOUNT *(-1) END) as vertex_staked
	from arbitrum.vertex.ez_staking_actions
	WHERE 1=1
	  AND symbol = 'VRTX'
	GROUP BY user
	 HAVING vertex_staked>={{stake_amount}}
	 ) SELECT
	 t.user
	, total_volume
	, total_trades
	, vertex_staked from traders t LEFT JOIN stakers s on t.user=s.user WHERE 1=1
	AND vertex_staked IS NOT NULL ORDER BY total_volume DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1014
QUERY_ID: d361ca64-0567-48fd-bb4b-bb85eeda9106
QUERY_TITLE: all wallets (faucet + swap pool)

QUERY_STRING:

with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) SELECT
	signup_date
	, COUNT(DISTINCT user_app_wallet) as signups
	, SUM(signups) OVER (ORDER BY signup_date ASC) as total_users from app_wallets GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1015
QUERY_ID: f8a4e255-66b2-411c-b836-c87efc8b2677
QUERY_TITLE: Edge Taker Volume (USD) 

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	ddate
	, label
	, SUM(volume) as volume from edge_vols WHERE 1=1
	AND label2 = 'EDGE' GROUP BY ddate, label ORDER BY ddate ASC, label DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1016
QUERY_ID: 148034ec-7805-407c-b8ec-7245a0fb85da
QUERY_TITLE: Proposals Roster/Metadata 

QUERY_STRING:

with prop_metadata as (
	SELECT
	  block_timestamp as creation_time
	  , DECODED_INSTRUCTION:accounts[0]:pubkey as proposal
	  , DECODED_INSTRUCTION:args:title as title
	  , DECODED_INSTRUCTION:args:descriptionLink as details
	from solana.core.fact_decoded_instructions
	WHERE 1=1
	  and program_id = 'GovaE4iu227srtG2s3tZzB4RmWBzw8sTwrCLZz7kN7rY'
	  and event_type = 'createProposalMeta' ) , prop_activation_data as (
	  -- log pattern start: 'Program data: 9zWm+' (start is the instruction/function sig...should remain the same unless...)
	  SELECT
	
	  dt.block_timestamp as vote_start_time
	
	 , dt.tx_id
	
	 , split(value, ': ')[1] as activation_log_base64
	
	 , to_varchar(base64_decode_binary(activation_log_base64)) as hex_data
	
	 --, substr(hex_data, 0, 16) as instruction_sig
	
	 --, livequery.utils.udf_hex_to_base58('0x' || substr(hex_data, 1 + 16, 64)) as governor
	
	 , livequery.utils.udf_hex_to_base58('0x' || substr(hex_data, 1 + 16 + 64, 64)) as proposal
	
	 , TO_TIMESTAMP_NTZ(livequery.utils.udf_hex_to_int('s2c', to_char(reverse(to_binary(substr(hex_data, 1+ 16 + 64 + 64, 16))))) ) as vote_end_time
	  FROM solana.core.fact_decoded_instructions dt
	  LEFT JOIN solana.core.fact_transactions t ON dt.tx_id = t.tx_id
	  , lateral flatten(input=>t.log_messages)
	  WHERE 1=1
	
	 --and tx_id = 'nSofUZjcUDVpPwfxGzDyHasUskwv4GrJzfPZ6cChxPXNfCpupetNaaDo5SjGmttxxowtvJgMXMeouoNU7wHFqV8'
	
	 and program_id = 'GovaE4iu227srtG2s3tZzB4RmWBzw8sTwrCLZz7kN7rY'
	
	 and value ILIKE 'Program data: 9zWm+%'
	
	 and event_type = 'activateProposal' ) , merge as (
	SELECT
	  pm.creation_time
	  , pm.title
	  , pm.details
	  , pd.vote_start_time
	  , pd.vote_end_time
	  , pm.proposal
	from prop_metadata pm
	LEFT JOIN prop_activation_data pd ON pm.proposal = pd.proposal ) SELECT * from merge ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1017
QUERY_ID: 28e93dc4-bae5-40d8-a2ab-6d2b6395dfe3
QUERY_TITLE: Solana: fees copy

QUERY_STRING:

-- forked from marqu / Solana: fees @ https://flipsidecrypto.xyz/marqu/q/kqV6kVjTaGEP/solana-fees with jito_tip_txs as (
	select
	  tx_id
	  , sum(amount) as amount_tip_sol
	from solana.core.fact_transfers
	where mint in (
	
	 'So11111111111111111111111111111111111111111' -- SOL
	
	 , 'So11111111111111111111111111111111111111112' -- wSOL
	  )
	  and tx_to in ( -- Jito Tip Payment Addresses https://jito-foundation.gitbook.io/mev/mev-payment-and-distribution/on-chain-addresses#mainnet
	
	 '96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5'
	
	 , 'HFqU5x63VTqvQss8hp11i4wVV8bD44PvwucfZ2bU7gRe'
	
	 , 'Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY'
	
	 , 'ADaUMid9yfUytqMBgopwjb2DTLSokTSzL1zt6iGPaS49'
	
	 , 'DfXygSm4jCyNCybVYYK6DwvWqjKee8pbDmJGcLWNDXjh'
	
	 , 'ADuUkR4vqLUMWXxW9gh6D6L8pMSawimctcNZ5pGwDcEt'
	
	 , 'DttWaMuVvTiduZRnguLF7jNxTgiMBZ1hyAumKUiL2KRL'
	
	 , '3AVi9Tg9Uo68tJfuvoKvqKNWKkC5wPdSSdeBnizKZ6jT'
	  )
	  -- and block_timestamp > current_timestamp() - interval '24 days'
	  and block_timestamp ::date = '2025-04-22'
	group by tx_id ), non_vote_txs as (
	select
	  block_timestamp
	  , tx_id
	  , succeeded
	  , array_size(signers) * 5000 / pow(10, 9) as base_fee_sol
	  , (fee - array_size(signers) * 5000) / pow(10, 9) as priority_fee_sol
	  , iff(priority_fee_sol > 0, TRUE, FALSE) as is_priority
	  , zeroifnull(amount_tip_sol) as validator_tip_sol
	  , iff(jito_tip_txs.amount_tip_sol > 0, TRUE, FALSE) as is_jito_tip
	from solana.core.fact_transactions
	left join jito_tip_txs
	  using(tx_id)
	-- where block_timestamp > current_timestamp() - interval '24 days'
	where block_timestamp ::date = '2025-04-22' ), agg_non_vote as (
	select
	  date_trunc('day', block_timestamp) as date
	  , sum(base_fee_sol) as base_fee_sol
	  , sum(priority_fee_sol) as priority_fee_sol
	  , sum(validator_tip_sol) as jito_tip_sol
	from non_vote_txs
	group by date ), vote_txs as (
	select
	  block_timestamp
	  , num_votes * 5000 / pow(10, 9) as vote_fee_sol
	from solana.gov.fact_votes_agg_block
	-- where block_timestamp > current_timestamp() - interval '24 days'
	where block_timestamp ::date = '2025-04-22' ), agg_vote as (
	select
	  date_trunc('day', block_timestamp) as date
	  , sum(vote_fee_sol) as vote_fee_sol
	from vote_txs
	group by date ) select
	date
	, 'SOL' as symbol
	, 'So11111111111111111111111111111111111111112' as token_contract -- wSOL
	, vote_fee_sol + base_fee_sol + priority_fee_sol as fees_token
	, vote_fee_sol
	, base_fee_sol
	, priority_fee_sol
	, jito_tip_sol from agg_vote left join agg_non_vote
	using(date) order by date desc



=======================================================================================
=======================================================================================
QUERY_NO: 1018
QUERY_ID: e71ec307-53c5-4337-8249-e46b207df907
QUERY_TITLE: EDGE - Taker Source Volume Distribution

QUERY_STRING:

with edge_vols as (
	SELECT
	  block_timestamp::date as ddate
	  , 'sei' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from sei.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'base' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from base.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'mantle' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from mantle.vertex.ez_perp_trades
	WHERE 1=1
	  AND (symbol ilike '{{ticker}}%' AND symbol ilike '%perp')
	GROUP BY ddate, label, label2
	UNION ALL
	SELECT
	  block_timestamp::date as ddate
	  , 'blitz' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from blast.blitz.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2
	UNION ALL
	 SELECT
	  block_timestamp::date as ddate
	  , 'arbitrum' as label
	  , CASE
	
	
	 WHEN
	
	
	
	(trader = '0x0000000000000000000000000000000000000000'
	
	
	
	  AND subaccount='0x0000000000000000000000000000000000000000000000000000000000000001')
	
	
	THEN 'EDGE'
	
	
	ELSE 'Normal' END as label2
	  , SUM(CASE WHEN is_taker=TRUE THEN AMOUNT_USD ELSE 0 END) as volume
	 from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp>='2024-03-13'
	  AND symbol ilike '{{ticker}}%'
	GROUP BY ddate, label, label2 ) SELECT
	label
	, SUM(volume) as volume from edge_vols WHERE 1=1
	AND label2 = 'EDGE' GROUP BY label ORDER BY label DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1019
QUERY_ID: e00fcb9f-ef7f-40c7-8b5f-d4f5640a9578
QUERY_TITLE: Random Sampler (Vertex + GMX Traders)

QUERY_STRING:

with v1 as (
	SELECT
	
	block_timestamp
	  , 'GMX V1' as platform
	  , TO_VARCHAR(DECODED_LOG:account) as account
	  , TO_VARCHAR(DECODED_LOG:index) as market
	  , event_name as order_type
	  , CASE WHEN DECODED_LOG:"isLong"=true THEN 'long' ELSE 'short' END as trade_type
	  , DECODED_LOG:"sizeDelta"/1e30 as volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , COALESCE(DECODED_LOG:"collateralDelta", 0)/pow(10, decimals) as init_collateral_delta_amount
	  , DECODED_LOG:"executionFee"/1e18 as execution_fee_eth
	  , ARRAY_CONSTRUCT(event_name || ':' || tx_hash ) as tx_hashes
	  , DECODED_LOG
	  , tx_hash
	  -- , DECODED_LOG:path
	from arbitrum.core.ez_decoded_event_logs l
	LEFT JOIN arbitrum.core.dim_contracts con
	 ON (CASE WHEN ARRAY_SIZE(DECODED_LOG:path)=1 THEN DECODED_LOG:path[0] ELSE DECODED_LOG:path[1] END)=con.address
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = '0xb87a436b93ffe9d75c5cfa7bacfff96430b09868'
	  AND EVENT_NAME ILIKE 'Create%'
	  AND DECODED_LOG:"collateralDelta" IS NOT NULL
	  AND tx_status = 'SUCCESS' ) , v2 as (
	with orders_exec as (
	SELECT
	
	tx_hash
	  , block_timestamp
	  , DECODED_LOG:"eventData"[4][0][0][1] as ex_key
	  , DECODED_LOG:"eventData"[0][0][0][1] as ex_account
	  , 1 as exec
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	
	AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	  AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	  AND decoded_log:"eventName"='OrderExecuted'
	
	
	 AND event_name='EventLog2'
	  AND tx_status = 'SUCCESS'
	)
	,
	orders_created as (
	  SELECT
	
	  tx_hash
	
	 , block_timestamp
	
	 , DECODED_LOG
	
	 , DECODED_LOG:"eventData"[0][0][0][1] as account
	
	 , DECODED_LOG:"eventData"[0][0][4][1] as market
	
	 , DECODED_LOG:"eventData"[0][0][5][1] as init_collateral_token
	
	 , DECODED_LOG:"eventData"[1][0][3][1] as init_collateral_delta_amount
	
	 , DECODED_LOG:"eventData"[1][0][2][1]/1e30 as volume  --div by 1e30
	
	 , DECODED_LOG:"eventData"[4][0][0][1] as key
	
	 , DECODED_LOG:"eventData"[1][0][0][1] as order_type
	
	 , CASE WHEN DECODED_LOG:"eventData"[3][0][0][1]=true THEN 'long' ELSE 'short' END as trade_type
	
	 , DECODED_LOG:"eventData"[1][0][6][1]/1e18 as execution_fee_eth
	  from arbitrum.core.ez_decoded_event_logs
	
	WHERE 1=1
	
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}'
	
	 AND contract_address = lower('0xc8ee91a54287db53897056e12d9819156d3822fb')
	
	 AND decoded_log:"eventName"='OrderCreated'
	
	
	
	  AND decoded_log:"eventData"[1][0][0][1] NOT IN (0,1) --limit/market swap orders
	
	 AND event_name='EventLog2'
	
	 AND tx_status = 'SUCCESS'
	)
	SELECT
	
	c.block_timestamp
	  , 'GMX V2' as platform
	  , TO_VARCHAR(account) as account
	  , TO_VARCHAR(market) as market
	  , order_type
	  , trade_type
	  , volume
	  , volume * 0.0005 as fee_amount
	  , SYMBOL as collateral_token
	  , init_collateral_delta_amount/pow(10, decimals) as init_collateral_delta_amount
	  , execution_fee_eth
	  , ARRAY_CONSTRUCT('orderCreated:' || c.tx_hash, 'orderExecuted:' || e.tx_hash) as tx_hashes
	  , c.DECODED_LOG
	  , c.tx_hash
	from orders_created c
	 LEFT JOIN orders_exec e ON c.key=e.ex_key
	LEFT JOIN arbitrum.core.dim_contracts con on c.init_collateral_token=con.address
	WHERE 1=1
	  AND exec=1 ) , vertex as (
	SELECT
	  block_timestamp
	  , TO_VARCHAR('Vertex ' || version) as platform
	  , trader as account
	  , SYMBOL as market
	  , order_type
	  , trade_type
	
	, amount_usd as volume
	  , fee_amount
	  , NULL as collateral_token
	  , NULL as init_collateral_delta_amount
	  , NULL as execution_fee_eth
	  , ARRAY_CONSTRUCT('orderExecuted:' || tx_hash) as tx_hashes
	  , NULL as DECODED_LOG
	  , tx_hash
	from arbitrum.vertex.ez_perp_trades
	WHERE 1=1
	  AND block_timestamp between '{{Start_date}}' AND '{{End_date}}' ) , combo as (
	SELECT * from v1
	UNION
	 SELECT * from v2
	UNION
	 SELECT * from vertex ) SELECT
	 account
	, SUM(iff(platform ilike 'gmx%', volume, 0)) as volume_gmx
	, SUM(iff(platform ilike 'vertex%', volume, 0)) as volume_vertex
	, COUNT(DISTINCT CASE WHEN platform ilike 'gmx%' THEN tx_hash ELSE NULL END) as trades_gmx
	, COUNT(DISTINCT CASE WHEN platform ilike 'vertex%' THEN tx_hash ELSE NULL END) as trades_vertex from combo GROUP BY account having volume_gmx>2000 AND volume_vertex>2000 LIMIT 20 -- SELECT * from combo



=======================================================================================
=======================================================================================
QUERY_NO: 1020
QUERY_ID: a7eb7db8-a849-476c-a3d7-b9baef00c589
QUERY_TITLE: DeFiLlama example 'Solana historical TVL' copy

QUERY_STRING:

-- forked from piper / DeFiLlama example 'Solana historical TVL' @ https://flipsidecrypto.xyz/piper/q/HDjhCcIPSmXr/defillama-example-solana-historical-tvl with defillama_data AS (
	SELECT
	  live.udf_api('https://api.llama.fi/v2/historicalChainTvl/base') as response ), get_raw_defillama_data AS (
	SELECT
	  *
	FROM
	  defillama_data, lateral flatten(input => response:data)
	--WHERE KEY = 'data' ) -- , get_defillama_data AS ( --
	SELECT --
	  --date AS date, --
	  --tvl AS tvl  --
	  * --
	FROM --
	  --get_raw_defillama_data, lateral flatten(input => VALUE) --
	  get_raw_defillama_data -- ) -- SELECT --
	* -- FROM --
	get_defillama_data -- ORDER BY --
	1 DESC SELECT * from get_raw_defillama_data



=======================================================================================
=======================================================================================
QUERY_NO: 1021
QUERY_ID: 298c2682-19a4-4e5f-84e1-ef18aafb924d
QUERY_TITLE: Daily users <Emily> - Edited

QUERY_STRING:

-- forked from Daily users <Emily> @ https://flipsidecrypto.xyz/studio/queries/24dd69e2-fdcf-49a8-abf1-64e1c7f4937d -- forked from emferons / Daily users @ https://flipsidecrypto.xyz/emferons/q/u4K5NctD8t2A/daily-users -- Get all active days first to create a clean date backbone with active_days AS (
	SELECT
	
	date_day as day
	from crosschain.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN CURRENT_DATE - INTERVAL '90 days' AND CURRENT_DATE ), -- Daily Transactions And Signers daily_activity AS (
	SELECT
	
	DATE_TRUNC('day', block_timestamp) AS day,
	  COUNT(DISTINCT tx_hash) AS transaction_count,
	  COUNT(DISTINCT coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER)) as daily_active_users
	FROM near.core.fact_transactions
	WHERE 1=1
	  AND block_timestamp >= CURRENT_DATE - INTERVAL '90 days'
	  AND (tx_signer LIKE '%.kaiching' OR tx:actions[0]:Delegate:delegate_action:sender_id::string LIKE '%.kaiching')
	GROUP BY 1 ), -- Daily New Wallets new_wallets AS (
	WITH first_interactions AS (
	  SELECT
	
	  coalesce(tx:actions[0]:Delegate:delegate_action:sender_id::string, TX_SIGNER) AS wallet,
	
	 MIN(block_timestamp) AS first_interaction_time
	  FROM near.core.fact_transactions
	  WHERE 1=1
	
	 AND (tx_signer LIKE '%.kaiching' OR tx:actions[0]:Delegate:delegate_action:sender_id::string LIKE '%.kaiching')
	  GROUP BY 1
	)
	
	SELECT
	
	DATE_TRUNC('day', first_interaction_time) AS day,
	  COUNT(DISTINCT wallet) AS new_wallets
	FROM first_interactions
	WHERE first_interaction_time >= CURRENT_DATE - INTERVAL '90 days'
	GROUP BY 1 ) -- Combine metrics using the active days as the backbone SELECT
	 ad.day,
	COALESCE(da.daily_active_users, 0) AS daily_active_users,
	COALESCE(da.transaction_count, 0) AS transaction_count,
	COALESCE(nw.new_wallets, 0) AS new_wallets FROM active_days ad LEFT JOIN daily_activity da ON ad.day = da.day LEFT JOIN new_wallets nw ON ad.day = nw.day ORDER BY ad.day DESC;



=======================================================================================
=======================================================================================
QUERY_NO: 1022
QUERY_ID: 680cd39b-7750-4800-a62a-451d930afbe3
QUERY_TITLE: jupiter summary tests

QUERY_STRING:

SELECT * from solana.defi.fact_swaps_jupiter_summary WHERE block_timestamp>'2024-10-01' LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 1023
QUERY_ID: f3a97787-5415-4976-9f5e-044d5e5bdec3
QUERY_TITLE: Stakers by Stake Duration copy

QUERY_STRING:

-- forked from Masi / Stakers by Stake Duration @ https://flipsidecrypto.xyz/Masi/q/xmEvAP_209pn/stakers-by-stake-duration WITH tb1 AS (
	  SELECT
	
	
	 block_timestamp,
	
	
	ACTION_DATA:args:"amount" / POW(10, 18) AS amount,
	
	
	 ACTION_DATA:args:"duration" / 86400 AS days,
	
	
	 TX_SIGNER,
	
	
	 tx_hash
	  FROM near.core.ez_actions
	  WHERE action_data:method_name::STRING = 'account_stake_booster'
	
	 AND TX_RECEIVER = 'contract.main.burrow.near'
	
	 AND tx_succeeded = TRUE ), tb2 AS (
	  SELECT
	
	
	 block_timestamp,
	
	
	PARSE_JSON(SUBSTR(LOGS[0], 12))['data'][0]['total_booster_amount'] / POW(10, 18) AS amount,
	
	
	 tx_hash,
	
	
	 signer_id
	
	FROM near.core.fact_actions_events_function_call
	  WHERE receiver_id = 'contract.main.burrow.near'
	
	 AND METHOD_NAME = 'account_unstake_booster' ),  tb3 as ( SELECT
	
	
	 days,
	
	
	COUNT(DISTINCT tx_signer) AS stakers,
	
	
	COUNT(DISTINCT tx_hash) AS stakes,
	
	
	SUM(amount) AS stake_amount,
	
	
	avg(amount) as avg_stake_amount
	  FROM tb1
	  group by 1) -- select case when days = '30' then 'a. 1 Month' -- when days = '60' then 'b. 2 Months' -- when days = '90' then 'c. 3 Months' -- when days = '120' then 'd. 4 Months' -- when days = '150' then 'e. 5 Months' -- when days = '180' then 'f. 6 Months' -- when days = '210' then 'g. 7 Months' -- when days = '240' then 'h. 8 Months' -- when days = '270' then 'i. 9 Months' -- when days = '300' then 'j. 10 Months' -- when days = '330' then 'k. 11 Months' -- when days >= '360' then 'l. >= 12 Months' end as breakdown, -- stakers, -- stake_amount -- from tb3 SELECT
	block_timestamp::date as ddate
	, SUM(amount) as tokens
	, COUNT(DISTINCT tx_hash) as txns from tb1 GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 1024
QUERY_ID: 695af6ea-bc26-4328-bfca-fc7c42d96eaa
QUERY_TITLE: NFT Sales Master - Wash Trades Base Summary

QUERY_STRING:

-- forked from NFT Sales Master - Wash Trades Base @ https://flipsidecrypto.xyz/edit/queries/c0b2ca53-86be-461a-bfb7-22b5f2c65228 -- forked from NFT Sales Master - Trader Profiles - Total Summary @ https://flipsidecrypto.xyz/edit/queries/87f01dc0-9228-4a1e-927d-49b209e9f41c -- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , sales_table as (
	SELECT
	
	*
	  ---counters for repeat buying/selling from sale wallet for that unique token from a collection
	  , count(*) over (partition by purchaser, collection_name, creator, token_id) as buyer_count
	  , count(*) over (partition by seller, collection_name, creator, token_id) as seller_count
	from sales_mixer ) , transfers as (
	SELECT
	  block_timestamp
	  , version
	  , from_address
	  , to_address
	  , amount
	from
	  aptos.core.ez_native_transfers
	WHERE 1=1
	  AND success = true ) , -------------------- Wash Trades & LOGIC -------------------- wash_trades as (
	-- -- Case I: Self-funded wash trades
	select
	  sales.*
	  , 'I' as type
	from
	  sales_table sales
	  join transfers on sales.purchaser = transfers.to_address
	
	 and sales.seller = transfers.from_address
	
	 and sales.sale_amount <= transfers.amount
	
	 and sales.block_timestamp > transfers.block_timestamp
	-- Credit: @Pinehearst
	-- Case II: An NFT token exchanged between same hands
	union
	select
	  sales_first.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller
	
	 and sales_first.seller = sales_second.purchaser
	union
	select
	  sales_second.*
	  , 'II' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.seller	
	
	 and sales_first.seller = sales_second.purchaser
	-- Credit: @Pinehearst
	-- Case III: Buyer transfers the NFT back to seller and repurchase it
	union
	select
	  sales_first.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	union
	select
	  sales_second.*
	  , 'III' as type
	from
	  sales_table sales_first
	  join sales_table sales_second on (sales_first.collection_name = sales_second.collection_name AND sales_first.creator = sales_second.creator)
	
	 and sales_first.token_id = sales_second.token_id
	
	 and sales_first.purchaser = sales_second.purchaser	
	
	 and sales_first.seller = sales_second.seller
	
	 and sales_first.block_timestamp < sales_second.block_timestamp
	-- Credit: @Marqu
	-- Case IV: Multiple sales for the same NFT
	union
	select
	  *
	  , 'IV' as type
	from
	  sales_table sales
	where
	  buyer_count > 2
	  or seller_count > 2
	  or buyer_count + seller_count > 3 ) , merger as (
	SELECT
	
	sales.*
	  , COALESCE(wash.type, NULL) as wash_type
	from sales_table sales
	LEFT JOIN wash_trades wash ON sales.version=wash.version AND (sales.collection_name = wash.collection_name AND sales.creator = wash.creator
	  AND sales.token_id = wash.token_id) ) ,  refine as (
	SELECT
	  COUNT(*) as sales
	  , SUM(sale_amount) as volume
	  , date_trunc('day', block_timestamp) as ddate
	  , CASE WHEN wash_type IS NULL THEN 'normal' ELSE 'wash' END as label
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	from merger
	GROUP BY ddate, marketplace, label ORDER BY ddate ASC ) SELECT
	 ROUND(SUM(CASE WHEN label = 'wash' THEN volume ELSE 0 END ), 2) as vol_wash
	, ROUND(SUM(CASE WHEN label != 'wash' THEN volume ELSE 0 END ), 2) as vol_normal
	, ROUND(SUM(volume), 2) as vol_total
	, ROUND((vol_wash/vol_total)*100, 2) as wash_perc from refine



=======================================================================================
=======================================================================================
QUERY_NO: 1025
QUERY_ID: 87f01dc0-9228-4a1e-927d-49b209e9f41c
QUERY_TITLE: NFT Sales Master - Trader Profiles - Total Summary

QUERY_STRING:

-- forked from NFT Sales Master - Trader Profiles - Marketplaces @ https://flipsidecrypto.xyz/edit/queries/70cadecb-6411-4f99-a9df-6814ae2d00fa -- forked from NFT Sales Master - Top Traders By Volume @ https://flipsidecrypto.xyz/edit/queries/02dd2d46-62bc-4100-b394-df1c092e3756 -- forked from NFT Sales Master - Summaries Users @ https://flipsidecrypto.xyz/edit/queries/864bb43f-0b6f-44e8-84d9-81a6417923d8 -- forked from NFT Sales Master - Summaries @ https://flipsidecrypto.xyz/edit/queries/b53750bc-259c-43aa-a33a-243771647f29 -- forked from NFT Sales Master @ https://flipsidecrypto.xyz/edit/queries/e221a125-970c-4ed8-aff3-83fd4430285a -----------------BLUEMOVE_V1 PRE-REQUISITES--------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferEvent'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	 AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	 AND event_resource = 'AcceptOfferCollectionEvent' ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	UNION ALL
	---new mercato shit
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , COALESCE(event_data:buyer, event_data:purchaser, event_data:owner, event_data:bid_buyer) as purchaser
	  , COALESCE(event_data:seller, event_data:bid_seller, event_data:owner) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='AcceptTokenBidEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='AcceptCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'mercato' as marketplace
	from aptos.core.fact_events
	where 1=1
	  -- mercato contract and sale-specific event_resource names
	  AND event_address = '0xe11c12ec495f3989c35e1c6a0af414451223305b579291fc8f3d9d0575a23c26'
	  AND event_resource IN ( 'AcceptTokenBidEvent', 'BuyEvent', 'AcceptCollectionBidEvent')
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) , users as (
	SELECT
	
	TO_VARCHAR(purchaser) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , SUM(sale_amount) as buy_vol
	  , COUNT(*) as buy_tot
	  , SUM(0) as sel_vol
	  , COUNT(NULL) as sel_tot
	from sales_mixer
	group by 1, 2
	UNION ALL
	SELECT
	
	TO_VARCHAR(seller) as user
	  , CASE WHEN marketplace LIKE 'bluemove%' THEN 'bluemove' ELSE marketplace END as marketplace
	  , SUM(0) as buy_vol
	  , COUNT(NULL) as buy_tot
	  , SUM(sale_amount) as sel_vol
	  , COUNT(*) as sel_tot
	from sales_mixer
	group by 1, 2 ) , refine as (
	SELECT
	
	SUM(buy_vol) buy_volz
	  , SUM(sel_vol) sel_volz
	  , buy_volz + sel_volz as volume
	  , SUM(buy_tot) buy_totz
	  , SUM(sel_tot) sel_totz
	  , buy_totz + sel_totz as trades
	  , COUNT(DISTINCT marketplace) as marketplaces
	  , user
	from users
	GROUP BY user ) SELECT
	COUNT(DISTINCT user) as totals from refine



=======================================================================================
=======================================================================================
QUERY_NO: 1026
QUERY_ID: e96916fd-4df3-4261-9aa7-5e936e75bca0
QUERY_TITLE: Collections - Summaries

QUERY_STRING:

-- forked from Collections - Sale History 30D @ https://flipsidecrypto.xyz/edit/queries/76f18931-e552-47d0-9b43-17766856cf87 with root as (
	SELECT version from aptos.core.fact_transactions
	WHERE
	
	payload_function like '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e%' ) , base as (
	select
	
	COUNT(*) as sales
	  , version
	  , event_resource
	from aptos.core.fact_events
	where 1=1
	  AND event_resource IN ('BuyEvent') --'AcceptOfferCollectionEvent', 'AcceptOfferEvent'
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND version IN (SELECT * from root)
	GROUP BY version, event_resource  ) , aggregates as (
	SELECT
	
	COUNT(*) as total_events
	  , MAX(sales) as sale_counts
	  , f.version
	from aptos.core.fact_events f
	LEFT JOIN base b ON  f.version = b.version
	WHERE 1=1
	  AND f.version in (select version from base where event_resource='BuyEvent')
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	GROUP BY f.version ) , labels as (
	SELECT
	  *
	  , CASE
	
	  WHEN mod(total_events, 8)=0 AND sale_counts*8=total_events THEN 8
	
	 WHEN mod(total_events, 6)=0 AND sale_counts*6=total_events THEN 6
	
	 WHEN mod(total_events, 4)=0 AND sale_counts*4=total_events THEN 4
	
	 ELSE NULL END as cat
	from aggregates ) , bluemovev1_sales as (
	select
	  f.version
	  , MAX(block_number) as block_number
	  , MAX(block_timestamp) as block_timestamp
	  , MAX(sale_counts) as sales
	  , cat as anchor
	  , floor(event_index/anchor) as anchor_index
	  , MAX(CASE WHEN
	
	
	
	
	
	(cat=8 AND mod(event_index, anchor)=5)
	
	
	
	
	  OR
	
	
	
	
	
	(cat=6 AND mod(event_index, anchor)=3)
	
	
	
	
	  OR
	
	
	
	
	  (cat=4 AND mod(event_index, anchor)=1) THEN account_address
	
	
	  ELSE NULL END) as seller
	  , SUM(CASE WHEN event_type='0x1::coin::WithdrawEvent' THEN TO_NUMERIC(event_data:amount)/1e8 ELSE NULL END) as sale_amount
	  , MAX('listing') as sale_type -------SINCE filtered for only BuyEvents
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:buyer_address  END) as purchaser
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:collection  END) as collection_name
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:name  END) as token_id
	  , MAX(CASE WHEN event_resource='BuyEvent' THEN event_data:id:token_data_id:creator  END) as creator
	  , MAX('bluemove_v1') as marketplace
	from aptos.core.fact_events f
	LEFT JOIN labels a ON f.version = a.version
	where 1=1
	  AND f.version IN (SELECT version from base)
	  AND cat IS NOT NULL
	  AND f.event_resource IN ('BuyEvent', 'DepositEvent', 'WithdrawEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	GROUP BY f.version, anchor_index, anchor ) , bm_offer_sales as (
	--token offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offerer as purchaser
	  , event_data:owner_token as seller
	  , event_data:amount/1e8 as sale_amount
	  , 'token_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	
	--collection offers
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:offer_collection_item:offerer as purchaser
	  , event_data:offer_collection_item:can_claim_tokens:data[0]:value as seller
	  , event_data:offer_collection_item:amount_per_item/1e8 as sale_amount
	  , 'collection_offer' as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'bluemove_v1' as marketplace
	from aptos.core.fact_events
	where 1=1
	  AND event_address = '0xd1fd99c1944b84d1670a2536417e997864ad12303d19eac725891691b04d614e'
	  AND event_resource = 'AcceptOfferCollectionEvent'
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	 ) , ------------END OF BLUEMOVE_V1 PRE-REQUISITES------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- sales_mixer as (
	---WAPAL and BLUEMOVE_V2
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:purchaser as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='TokenOfferFilledEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='CollectionOfferFilledEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='ListingFilledEvent' THEN 'listing' END as sale_type
	  , event_data:token_metadata:collection_name as collection_name
	  , event_data:token_metadata:token_name as token_id
	  , event_data:token_metadata:creator_address as creator
	  , CASE WHEN event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' THEN 'wapal'
	
	
	
	 ELSE 'bluemove_v2' END as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  -- contract and sale-specific event_resource names
	  AND ( event_address = '0x584b50b999c78ade62f8359c91b5165ff390338d45f8e55969a04e65d76258c9' --wapal
	
	
	OR event_address = '0xd520d8669b0a3de23119898dcdff3e0a27910db247663646ad18cf16e44c6f5' ) --bluemove_v2
	  AND event_resource IN ( 'TokenOfferFilledEvent', 'CollectionOfferFilledEvent', 'ListingFilledEvent')
	  AND event_data:token_metadata:collection_name ILIKE '{{collection_name}}'
	  AND event_data:token_metadata:creator_address ILIKE '{{creator_address}}'
	UNION ALL
	
	---TOPAZ
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , event_data:buyer as purchaser
	  , TO_VARCHAR(event_data:seller) as seller
	  , event_data:price/1e8 as sale_amount
	  , CASE  WHEN event_resource='SellEvent' THEN 'token_offer'
	
	
	
	 WHEN event_resource='FillCollectionBidEvent' THEN 'collection_offer'
	
	
	
	 WHEN event_resource='BuyEvent' THEN 'listing' END as sale_type
	  , event_data:token_id:token_data_id:collection as collection_name
	  , event_data:token_id:token_data_id:name as token_id
	  , event_data:token_id:token_data_id:creator as creator
	  , 'topaz' as marketplace
	
	  from aptos.core.fact_events
	where 1=1
	  AND event_address = '0x2c7bccf7b31baf770fdbcc768d9e9cb3d87805e255355df5db32ac9a669010a2'
	  AND event_resource IN ( 'BuyEvent', 'SellEvent', 'FillCollectionBidEvent')
	  AND event_data:token_id:token_data_id:collection ILIKE '{{collection_name}}'
	  AND event_data:token_id:token_data_id:creator ILIKE '{{creator_address}}'
	UNION ALL
	---bluemovev1 minus the extra fields
	SELECT
	
	block_timestamp
	  , block_number
	  , version
	  , purchaser
	  , seller as seller
	  , sale_amount
	  , sale_type
	  , collection_name
	  , token_id
	  , creator
	  , 'bluemove_v1' as marketplace
	from bluemovev1_sales
	UNION ALL
	 SELECT * from bm_offer_sales ) SELECT
	COUNT(*) as sales
	, COUNT(DISTINCT purchaser) as buyers
	, COUNT(DISTINCT seller) as sellers
	, round(SUM(sale_amount), 2) as volume
	, round(AVG(sale_amount), 2) as price from sales_mixer



=======================================================================================
=======================================================================================
QUERY_NO: 1027
QUERY_ID: 5ed4d308-b626-4974-92a8-f84104ecfc06
QUERY_TITLE: DAUs (based off deposits/faucet)

QUERY_STRING:

with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	--, CASE WHEN from_address!='0x380850effbaef0be65e10e964c23f320e4917334' THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as users
	-- , COUNT(DISTINCT from_address) as senders
	-- , SUM (VALUE) as mon_deposited
	-- , SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND value>0
	AND tx_succeeded GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1028
QUERY_ID: 69ec7853-a1bb-4f24-8bec-773dac9f9794
QUERY_TITLE: mon - total deposits (user deposits only)

QUERY_STRING:

with app_wallets as (
	with base as (
	  --Kizzy faucet
	  SELECT
	
	 to_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from monad.testnet.fact_transactions
	  WHERE 1=1
	
	 AND from_address = '0x380850effbaef0be65e10e964c23f320e4917334'
	
	
	 UNION ALL
	  --univ3 WMON-KESO pool
	
	SELECT
	
	 origin_from_address as user_app_wallet
	
	 , block_timestamp::date as signup_date
	  from community.monad.kizzy_testnet_uni_v3_swaps
	  WHERE 1=1
	
	 AND receiver = '0x25859318f26a78b7613ef1b7a9005e997ea03821'
	)
	SELECT
	  user_app_wallet
	  , MIN(signup_date) as signup_date
	from base
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	, CASE WHEN from_address!='0x380850effbaef0be65e10e964c23f320e4917334' THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as receivers
	, COUNT(DISTINCT from_address) as senders
	, SUM (VALUE) as mon_deposited
	, SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND from_address!='0x380850effbaef0be65e10e964c23f320e4917334'
	AND value>0
	AND tx_succeeded GROUP BY 1, 2 ORDER BY 1 DESC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1029
QUERY_ID: decc0189-3c79-423c-90cb-e46ce3a49cb3
QUERY_TITLE: NEAR - Sweat Users Retention

QUERY_STRING:

-- forked from NEAR - Base retention @ https://flipsidecrypto.xyz/edit/queries/0a584012-0f8a-440d-96fc-d7421fdf1955  with sweat_users as  (
	  select
	 block_timestamp,
	 tx_signer as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_receiver = b.address
	where (project_name ilike '%sweat%'and project_name not ilike '%farand%')
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-09-01'
	UNION
	select
	 block_timestamp,
	 tx_receiver as user,
	tx_hash
	from near.core.fact_transactions a join near.core.dim_address_labels b on a.tx_signer = b.address
	where (project_name ilike '%sweat%' and project_name not ilike '%farand%')
	  and TX_STATUS = 'Success'
	  and block_timestamp>= '2022-09-01' ) , base_table as (
	select
	
	user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from sweat_users
	where 1=1 ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 1030
QUERY_ID: 0a584012-0f8a-440d-96fc-d7421fdf1955
QUERY_TITLE: NEAR - Base retention

QUERY_STRING:

with near_users as  (
	select
	
	block_timestamp,
	
	tx_signer as user,
	  tx_hash
	from near.core.fact_transactions
	 where 1=1
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-09-01'
	UNION
	select
	
	block_timestamp,
	
	tx_receiver as user,
	  tx_hash
	from near.core.fact_transactions
	 where 1=1
	  and TX_STATUS = 'Success'
	  and block_timestamp >= '2022-09-01' ) , base_table as (
	select
	
	user
	  , date_trunc('month', block_timestamp) as date
	  , min(date_trunc('month', block_timestamp)) over(partition by user) as earliest_date
	  , datediff(
	
	
	'month'
	
	
	, min(date_trunc('month', block_timestamp)) over(partition by user) -- earliest_date
	
	
	, date_trunc('month', block_timestamp) -- current date in month
	
	 ) as difference
	from near_users
	where 1=1 ) , count_new_users as(
	  select
	
	  earliest_date
	
	 , count(distinct user) as new_users
	
	from base_table
	  group by 1 ) , count_returning_users as(
	  select
	
	  earliest_date
	
	 , difference
	
	 , count(distinct user) as existing_users
	
	from base_table
	  where difference != 0
	  group by 1,2 ) , long_retention_table as(
	  select
	
	  count_new_users.earliest_date
	
	 , difference
	
	 , new_users
	
	 , existing_users
	
	 , round(existing_users / new_users,2) as retention_pct
	  from count_new_users
	  left join count_returning_users
	
	
	  on count_new_users.earliest_date = count_returning_users.earliest_date
	
	) , pivot as(
	
	select
	
	  earliest_date
	
	 , new_users as users
	
	 , case when difference = 1 then retention_pct end as one_month_later
	
	 , case when difference = 2 then retention_pct else null end as two_month_later
	
	 , case when difference = 3 then retention_pct else null end as three_month_later
	
	 , case when difference = 4 then retention_pct else null end as four_month_later
	
	 , case when difference = 5 then retention_pct else null end as five_month_later
	
	 , case when difference = 6 then retention_pct else null end as six_month_later
	
	 , case when difference = 7 then retention_pct else null end as seven_month_later
	
	 , case when difference = 8 then retention_pct else null end as eight_month_later
	
	 , case when difference = 9 then retention_pct else null end as nine_month_later
	
	 , case when difference = 10 then retention_pct else null end as ten_month_later
	
	 , case when difference = 11 then retention_pct else null end as eleven_month_later
	
	 , case when difference = 12 then retention_pct else null end as twelve_month_later
	  from long_retention_table ) , aggregate as(
	  select
	
	  TO_VARCHAR(earliest_date, 'yyyy-MM') as earliest_date
	
	 , to_varchar(users, '999,999,999,999') as users
	
	 , concat(max(one_month_later) * 100 ,'%') as one_month_later
	
	 , concat(max(two_month_later) * 100 ,'%') as two_month_later
	
	 , concat(max(three_month_later) * 100 ,'%') as three_month_later
	
	 , concat(max(four_month_later) * 100 ,'%') as four_month_later
	
	 , concat(max(five_month_later) * 100 ,'%') as five_month_later
	
	 , concat(max(six_month_later) * 100 ,'%') as six_month_later
	
	 , concat(max(seven_month_later) * 100 ,'%') as seven_month_later
	
	  , concat(max(eight_month_later) * 100 ,'%') as eight_month_later
	
	 , concat(max(nine_month_later) * 100 ,'%') as nine_month_later
	
	 , concat(max(ten_month_later) * 100 ,'%') as ten_month_later
	
	 , concat(max(eleven_month_later) * 100 ,'%') as eleven_month_later
	
	 , concat(max(twelve_month_later) * 100 ,'%') as twelve_month_later
	  from pivot
	
	group by 1,2 ) select * from aggregate order by earliest_date



=======================================================================================
=======================================================================================
QUERY_NO: 1031
QUERY_ID: f28d5545-a9ae-4a7c-af2b-242f7ec3d949
QUERY_TITLE: LOUDIO CLAIMS Raw

QUERY_STRING:

-- forked from LOUDIO CLAIMS Over Time @ https://flipsidecrypto.xyz/studio/queries/c63c27b5-68a2-4448-9514-269bc4b5498a -- forked from LOUDIO presale summary @ https://flipsidecrypto.xyz/studio/queries/a98c3650-56ae-4614-a455-95e00c605f85 -- forked from LOUDIO presale over time @ https://flipsidecrypto.xyz/studio/queries/7f613684-3bc7-4152-9035-049f95a92bee --phase 1 program: uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK --phase 2 program: Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6 with all_deposits as (
	SELECT
	
	tr.*
	  , fe.program_id
	from solana.core.fact_transfers tr
	LEFT JOIN (
	  SELECT
	
	  *
	
	from solana.core.fact_events
	  WHERE 1=1
	
	 AND program_id in ('uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK', 'Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6')
	
	 AND block_id between 343717045 and 343753774
	) fe ON tr.tx_id = fe.tx_id
	WHERE 1=1
	  AND tx_to IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	  AND mint in ('So11111111111111111111111111111111111111112', 'So11111111111111111111111111111111111111111')
	  --AND amount = 0.2
	  AND tr.block_id between 343717045 and 343753774  ) SELECT
	tr.* from solana.core.fact_transfers tr INNER JOIN all_deposits d ON tr.tx_to = d.tx_from WHERE 1=1
	AND tr.mint = 'EJZJpNa4tDZ3kYdcRZgaAtaKm3fLJ5akmyPkCaKmfWvd'
	AND d.program_id IS NOT NULL
	AND tr.block_id > 343717045
	AND tr.tx_from IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY') --qualify row_number() OVER (partition by tr.tx_to ORDER BY tr.block_id ASC)=1



=======================================================================================
=======================================================================================
QUERY_NO: 1032
QUERY_ID: e5be2500-807f-44e1-a03b-be11b440a7e9
QUERY_TITLE: aggregates

QUERY_STRING:

-- forked from aggregates by block @ https://flipsidecrypto.xyz/studio/queries/d1f5d6e1-8f28-4112-a77b-69e55cbefd48 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , tx_position
	  , tx_hash
	  , event_index
	  , CASE WHEN from_address = '0x0000000000000000000000000000000000000000' THEN 'vault-mint' ELSE 'stable-deposit' END as label
	  , SYMBOL
	  , COALESCE(AMOUNT, RAW_AMOUNT/1e6) as amount
	  , from_address as wallet
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  --AND tx_hash = '0x4ef1d51d035a3522c0d082ff92d171e7fbccbc109f91c9c8483e131470469501'
	  --AND block_timestamp >= CURRENT_TIMESTAMP - INTERVAL '3 hour'
	  AND (
	
	 (from_address = '0x0000000000000000000000000000000000000000' and contract_address ='0xd1074e0ae85610ddba0147e29ebe0d8e5873a000') --mint of PlasmaUSD to depositor
	
	 OR
	
	  to_address = '0xd1074e0ae85610ddba0147e29ebe0d8e5873a000' --deposit of stable
	  )
	  AND contract_address!=lower('0xAed4e6cbC3CE346407A2BeE4552A0aBd858f05f2')
	  --AND block_number between 22666764 and 22667227 -- wallet:0xd109ffb0947407c6275610c07155b07a75f3f017 had been depositing 1hr early - dust amounts...
	  AND block_number between 22667180 and 22667227 ) SELECT
	COUNT(DISTINCT b.wallet) as wallets
	, SUM(b.amount) as total_raise
	, SUM(t.tx_fee) as eth_fees
	, MAX(b.block_number) - MIN(b.block_number) as blocks
	, TIMEDIFF(second, MIN(b.block_timestamp), MAX(b.block_timestamp))/60 as total_minutes from base b  LEFT JOIN ethereum.core.fact_transactions t on b.tx_hash = t.tx_hash WHERE 1=1
	AND label = 'stable-deposit'



=======================================================================================
=======================================================================================
QUERY_NO: 1033
QUERY_ID: d1f5d6e1-8f28-4112-a77b-69e55cbefd48
QUERY_TITLE: aggregates by block

QUERY_STRING:

with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , tx_position
	  , tx_hash
	  , event_index
	  , CASE WHEN from_address = '0x0000000000000000000000000000000000000000' THEN 'vault-mint' ELSE 'stable-deposit' END as label
	  , SYMBOL
	  , COALESCE(AMOUNT, RAW_AMOUNT/1e6) as amount
	  , from_address as wallet
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  --AND tx_hash = '0x4ef1d51d035a3522c0d082ff92d171e7fbccbc109f91c9c8483e131470469501'
	  --AND block_timestamp >= CURRENT_TIMESTAMP - INTERVAL '3 hour'
	  AND (
	
	 (from_address = '0x0000000000000000000000000000000000000000' and contract_address ='0xd1074e0ae85610ddba0147e29ebe0d8e5873a000') --mint of PlasmaUSD to depositor
	
	 OR
	
	  to_address = '0xd1074e0ae85610ddba0147e29ebe0d8e5873a000' --deposit of stable
	  )
	  AND contract_address!=lower('0xAed4e6cbC3CE346407A2BeE4552A0aBd858f05f2')
	  --AND block_number between 22666764 and 22667227 -- wallet:0xd109ffb0947407c6275610c07155b07a75f3f017 had been depositing 1hr early - dust amounts...
	  AND block_number between 22667180 and 22667227 ) SELECT
	b.block_number
	, b.block_timestamp
	, SUM(b.amount) as total_amount
	, COUNT(distinct b.wallet) as wallets
	, SUM(t.tx_fee) as total_fees_eth
	, SUM(total_amount) OVER (ORDER BY b.block_number ASC) as cumulative_raise from base b  LEFT JOIN ethereum.core.fact_transactions t on b.tx_hash = t.tx_hash WHERE 1=1
	AND label = 'stable-deposit' GROUP BY 1, 2 ORDER BY 1 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1034
QUERY_ID: 70a1cc6f-5984-48fc-b18a-bdf474f84967
QUERY_TITLE: new users/total users copy

QUERY_STRING:

-- forked from new users/total users @ https://flipsidecrypto.xyz/studio/queries/e2fc3efa-5470-4d4a-ba38-0ee17c6d929d -- forked from harvests -  fact_transactions @ https://flipsidecrypto.xyz/studio/queries/d284357a-3554-44f6-949c-afeffa34d4d0 -- forked from harvests @ https://flipsidecrypto.xyz/studio/queries/b20e44f8-4807-467b-8c3e-58b875cae3f7 with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x6ccfa537a048ab3d00ba1ec1896aecea57950b6cc50ab23e631bf0e023f78d42'
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x7cd0fc1f7997a45ccfdb3833b63bc09bc703a518e4578b277a590574f5741ab7'
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	  , SUM(USERS) OVER (ORDER BY signup_date ASC) as total_users
	from (
	  SELECT
	
	 user_app_wallet
	
	 , MIN(block_timestamp::date) as signup_date
	  from harvests
	  GROUP BY 1
	)
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1035
QUERY_ID: 4c09f9c3-7a67-4835-92b8-a8d9bea6eccd
QUERY_TITLE: harvests -  fact_transactions copy

QUERY_STRING:

-- forked from harvests -  fact_transactions @ https://flipsidecrypto.xyz/studio/queries/d284357a-3554-44f6-949c-afeffa34d4d0 -- forked from harvests @ https://flipsidecrypto.xyz/studio/queries/b20e44f8-4807-467b-8c3e-58b875cae3f7 with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x6ccfa537a048ab3d00ba1ec1896aecea57950b6cc50ab23e631bf0e023f78d42'
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x7cd0fc1f7997a45ccfdb3833b63bc09bc703a518e4578b277a590574f5741ab7'
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	  , SUM(USERS) OVER (ORDER BY signup_date ASC) as total_users
	from (
	  SELECT
	
	 user_app_wallet
	
	 , MIN(block_timestamp::date) as signup_date
	  from harvests
	  GROUP BY 1
	)
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1036
QUERY_ID: d879707f-571c-476f-b472-380543abcda7
QUERY_TITLE: DAUs (based off deposits/faucet) copy

QUERY_STRING:

-- forked from DAUs (based off deposits/faucet) @ https://flipsidecrypto.xyz/studio/queries/5ed4d308-b626-4974-92a8-f84104ecfc06 -- forked from mon - deposits @ https://flipsidecrypto.xyz/studio/queries/1d5f50ba-f8f5-410e-8b9f-f42f3210201b with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , app_wallets as (
	SELECT
	  user_app_wallet
	  , MIN(block_timestamp::date) as signup_date
	from harvests
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	--, CASE WHEN from_address!=lower('0x380850efFbAEf0be65e10E964C23F320e4917334') THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as users
	-- , COUNT(DISTINCT from_address) as senders
	-- , SUM (VALUE) as mon_deposited
	-- , SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND value>0
	AND tx_succeeded GROUP BY 1 ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1037
QUERY_ID: 22488443-cc91-4be2-94b4-597e1f8202ac
QUERY_TITLE: mon - deposits copy

QUERY_STRING:

-- forked from mon - deposits @ https://flipsidecrypto.xyz/studio/queries/1d5f50ba-f8f5-410e-8b9f-f42f3210201b with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , app_wallets as (
	SELECT
	  user_app_wallet
	  , MIN(block_timestamp::date) as signup_date
	from harvests
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	, CASE WHEN from_address!=lower('0x380850efFbAEf0be65e10E964C23F320e4917334') THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as receivers
	, COUNT(DISTINCT from_address) as senders
	, SUM (VALUE) as mon_deposited
	, SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND value>0
	AND tx_succeeded GROUP BY 1, 2 ORDER BY 1 DESC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1038
QUERY_ID: e52de719-ee2a-4eec-aa9b-0bf420e69e58
QUERY_TITLE: harvests - traces copy

QUERY_STRING:

-- forked from harvests - traces @ https://flipsidecrypto.xyz/studio/queries/b20e44f8-4807-467b-8c3e-58b875cae3f7 with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , TYPE
	  , trace_address
	  , trace_index
	  , origin_from_address
	  , origin_to_address
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_traces
	WHERE 1=1
	
	 --AND tx_hash = '0x6ccfa537a048ab3d00ba1ec1896aecea57950b6cc50ab23e631bf0e023f78d42'
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	
	 AND trace_succeeded
	
	 AND type NOT IN (
	
	
	  'DELEGATECALL',
	
	
	  'STATICCALL'
	
	 )
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , TYPE
	  , trace_address
	  , trace_index
	  , origin_from_address
	  , origin_to_address
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_traces
	WHERE 1=1
	
	 --AND tx_hash = '0x7cd0fc1f7997a45ccfdb3833b63bc09bc703a518e4578b277a590574f5741ab7'
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded
	
	 AND trace_succeeded
	
	 AND type NOT IN (
	
	
	  'DELEGATECALL',
	
	
	  'STATICCALL'
	
	 ) ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	from (
	  SELECT
	
	 user_app_wallet
	
	 , MIN(block_timestamp::date) as signup_date
	  from harvests
	  GROUP BY 1
	)
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1039
QUERY_ID: 540affe3-34f6-4b5b-b616-dac8067548bb
QUERY_TITLE: round test

QUERY_STRING:

SELECT
	round(0.95, 1) as t1
	, round(1.06, 1) as t2



=======================================================================================
=======================================================================================
QUERY_NO: 1040
QUERY_ID: b20e44f8-4807-467b-8c3e-58b875cae3f7
QUERY_TITLE: harvests - traces

QUERY_STRING:

with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , TYPE
	  , trace_address
	  , trace_index
	  , origin_from_address
	  , origin_to_address
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_traces
	WHERE 1=1
	
	 --AND tx_hash = '0x6ccfa537a048ab3d00ba1ec1896aecea57950b6cc50ab23e631bf0e023f78d42'
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	
	 AND trace_succeeded
	
	 AND type NOT IN (
	
	
	  'DELEGATECALL',
	
	
	  'STATICCALL'
	
	 )
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , TYPE
	  , trace_address
	  , trace_index
	  , origin_from_address
	  , origin_to_address
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_traces
	WHERE 1=1
	
	 --AND tx_hash = '0x7cd0fc1f7997a45ccfdb3833b63bc09bc703a518e4578b277a590574f5741ab7'
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded
	
	 AND trace_succeeded
	
	 AND type NOT IN (
	
	
	  'DELEGATECALL',
	
	
	  'STATICCALL'
	
	 ) ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	from (
	  SELECT
	
	 user_app_wallet
	
	 , MIN(block_timestamp::date) as signup_date
	  from harvests
	  GROUP BY 1
	)
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1041
QUERY_ID: d284357a-3554-44f6-949c-afeffa34d4d0
QUERY_TITLE: harvests -  fact_transactions

QUERY_STRING:

-- forked from harvests @ https://flipsidecrypto.xyz/studio/queries/b20e44f8-4807-467b-8c3e-58b875cae3f7 with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x6ccfa537a048ab3d00ba1ec1896aecea57950b6cc50ab23e631bf0e023f78d42'
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 --AND tx_hash = '0x7cd0fc1f7997a45ccfdb3833b63bc09bc703a518e4578b277a590574f5741ab7'
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , signups as (
	SELECT
	  signup_date
	  , COUNT(user_app_wallet) as users
	  , SUM(USERS) OVER (ORDER BY signup_date ASC) as total_users
	from (
	  SELECT
	
	 user_app_wallet
	
	 , MIN(block_timestamp::date) as signup_date
	  from harvests
	  GROUP BY 1
	)
	GROUP BY 1 ) SELECT * from signups ORDER BY 1 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1042
QUERY_ID: 2909d4af-9255-4be4-bb5e-5bb421990a3a
QUERY_TITLE: [BASE] VERTEX - TVL Query (ALL INSTANCES) 

QUERY_STRING:

with arb_data as (
	SELECT
	  'arbitrum' as chain
	
	, block_timestamp::date as ddate
	  , token_address
	  , symbol
	
	, SUM(amount) as amount
	  , SUM(amount * price) as amount_usd --override to latest prices
	from arbitrum.vertex.ez_clearing_house_events t  --token_address
	LEFT JOIN (
	  SELECT
	
	  token_address
	
	 , price
	  from arbitrum.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND hour> CURRENT_DATE - 1
	  qualify row_number() OVER (partition by token_address ORDER BY HOUR DESC) = 1
	) p using (token_address)
	where 1=1
	  AND modification_type IN ('deposit', 'withdraw')
	GROUP by 1, 2, 3, 4 ) , base_data as (
	SELECT
	  'base' as chain
	
	, block_timestamp::date as ddate
	  , t.token_address
	  , symbol
	
	, SUM(amount) as amount
	  , SUM(amount * price) as amount_usd --override to latest prices
	from base.vertex.ez_clearing_house_events t  --token_address
	LEFT JOIN (
	  SELECT
	
	  token_address
	
	 , price
	  from base.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND hour> CURRENT_DATE - 1
	  qualify row_number() OVER (partition by token_address ORDER BY HOUR DESC) = 1
	) p on p.token_address = (CASE WHEN t.token_address='0x4300000000000000000000000000000000000006' THEN '0x4200000000000000000000000000000000000006' ELSE t.token_address END)
	where 1=1
	  AND modification_type IN ('deposit', 'withdraw')
	GROUP by 1, 2, 3, 4 ) , blast_data as (
	SELECT
	  'blitz' as chain
	
	, block_timestamp::date as ddate
	  , token_address
	  , symbol
	
	, SUM(amount) as amount
	  , SUM(amount * price) as amount_usd --override to latest prices
	from blast.blitz.ez_clearing_house_events t  --token_address
	LEFT JOIN (
	  SELECT
	
	  token_address
	
	 , price
	  from blast.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND hour> CURRENT_DATE - 1
	  qualify row_number() OVER (partition by token_address ORDER BY HOUR DESC) = 1
	) p using (token_address)
	where 1=1
	  AND modification_type IN ('deposit', 'withdraw')
	GROUP by 1, 2, 3, 4 ) , mantle_data as (
	SELECT
	  'mantle' as chain
	
	, block_timestamp::date as ddate
	  , token_address
	  , symbol
	
	, SUM(amount) as amount
	  , SUM(amount * price) as amount_usd --override to latest prices
	from mantle.vertex.ez_clearing_house_events t  --token_address
	LEFT JOIN (
	  SELECT
	
	  token_address
	
	 , price
	  from mantle.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND hour> CURRENT_DATE - 1
	  qualify row_number() OVER (partition by token_address ORDER BY HOUR DESC) = 1
	) p using (token_address)
	where 1=1
	  AND modification_type IN ('deposit', 'withdraw')
	GROUP by 1, 2, 3, 4 ) , sei_data as (
	SELECT
	  'sei' as chain
	
	, block_timestamp::date as ddate
	  , token_address
	  , symbol
	
	, SUM(amount) as amount
	  , SUM(amount * price) as amount_usd --override to latest prices
	from sei.vertex.ez_clearing_house_events t  --token_address
	LEFT JOIN (
	  SELECT
	
	  token_address
	
	 , price
	  from sei.price.ez_prices_hourly
	  WHERE 1=1
	
	 AND hour> CURRENT_DATE - 1
	  qualify row_number() OVER (partition by token_address ORDER BY HOUR DESC) = 1
	) p using (token_address)
	where 1=1
	  AND modification_type IN ('deposit', 'withdraw')
	GROUP by 1, 2, 3, 4 ) , merge as (
	SELECT * from arb_data
	UNION ALL
	 SELECT * from base_data
	UNION ALL
	 SELECT * from blast_data
	UNION ALL
	 SELECT * from mantle_data
	UNION ALL
	 SELECT * from sei_data ) --- SAMPLE SPACE AND FILL GAPS CRAP --- , dates as (
	SELECT
	
	date_day as ddate
	from ethereum.core.dim_dates
	WHERE 1=1
	  AND date_day BETWEEN '2023-03-07' AND CURRENT_DATE  ) , pairs as (
	SELECT DISTINCT CHAIN, TOKEN_ADDRESS, SYMBOL
	FROM merge
	--where chain='arbitrum' ) , space as (
	SELECT
	
	ddate
	  , chain
	
	, token_address
	  , symbol
	from dates
	LEFT JOIN pairs on 1=1 ) ---------------------------------------------------- SELECT
	 s.ddate
	, s.chain
	, s.token_address
	, s.symbol
	 , COALESCE(amount, 0) as amount
	, COALESCE(amount_usd, 0) as amount_usd
	, SUM(amount) OVER (partition by s.chain, s.token_address ORDER BY s.ddate ASC) as latest_tvl_amount
	, SUM(amount_usd) OVER (partition by s.chain, s.token_address ORDER BY s.ddate ASC) as latest_tvl_usd from space s
	LEFT JOIN merge m  using(ddate, token_address, chain)  --ON s.ddate = m.ddate AND s.token_address=m.token_address AND s.chain = m.chain WHERE 1=1
	AND s.symbol NOT IN ('HARRISWIN', 'TRUMPWIN') ORDER BY s.ddate DESC, s.CHAIN ASC, s.SYMBOL ASC  -- SELECT * from space -- ORDER BY ddate DESC, CHAIN ASC , SYMBOL ASC  -- SELECT --
	* --
	, SUM(amount) OVER (partition by chain, token_address ORDER BY ddate ASC) as latest_tvl_amount --
	, SUM(amount_usd) OVER (partition by chain, token_address ORDER BY ddate ASC) as latest_tvl_usd -- from merge -- ORDER BY ddate DESC, CHAIN ASC, SYMBOL ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1043
QUERY_ID: d838d488-e30f-440c-adc6-32ef17032eff
QUERY_TITLE: mon - total deposits (user deposits only) copy

QUERY_STRING:

-- forked from mon - total deposits (user deposits only) @ https://flipsidecrypto.xyz/studio/queries/69ec7853-a1bb-4f24-8bec-773dac9f9794 -- forked from mon - deposits @ https://flipsidecrypto.xyz/studio/queries/1d5f50ba-f8f5-410e-8b9f-f42f3210201b with harvests as (
	-- legacy contract/harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND origin_function_signature =	'0x7c51d6cf'
	
	 AND to_address = '0xff26933157351c3a587cd502c864e4ff308956aa'
	
	 AND value > 0
	
	 AND tx_succeeded
	UNION ALL
	-- current harvests
	SELECT
	  block_number
	  , block_timestamp
	  , tx_hash
	  , origin_function_signature
	  , from_address
	  , to_address
	  , VALUE AS harvest_amount
	  , from_address as user_app_wallet
	from monad.testnet.fact_transactions
	WHERE 1=1
	
	 AND to_address = '0xd397cae69bdf9286a06b6554fb94dbdabda4eaa1'
	
	 AND origin_function_signature = '0x7ebbc3e7'
	
	 AND value > 0
	
	 AND tx_succeeded ) , app_wallets as (
	SELECT
	  user_app_wallet
	  , MIN(block_timestamp::date) as signup_date
	from harvests
	GROUP BY 1 ) SELECT
	 block_timestamp::date as ddate
	, CASE WHEN from_address!=lower('0x380850efFbAEf0be65e10E964C23F320e4917334') THEN 'user-deposit' ELSE 'app-drip/faucet' END as label
	, COUNT(DISTINCT tx_hash) as txns
	, COUNT(DISTINCT to_address) as receivers
	, COUNT(DISTINCT from_address) as senders
	, SUM (VALUE) as mon_deposited
	, SUM(mon_deposited) OVER (partition by label ORDER BY ddate ASC) as mon_cumu from monad.testnet.fact_transactions t inner join app_wallets w  ON (t.to_address=w.user_app_wallet) WHERE 1=1
	AND from_address!=lower('0x380850efFbAEf0be65e10E964C23F320e4917334')
	AND value>0
	AND tx_succeeded GROUP BY 1, 2 ORDER BY 1 DESC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1044
QUERY_ID: f0655041-4bbe-4474-9107-2459fbb029ea
QUERY_TITLE: nonce tests

QUERY_STRING:

with base as (
	SELECT
	  from_address as wallet
	  , block_timestamp::date as ddate
	  , tx_hash
	from monad.testnet.fact_transactions
	WHERE 1=1
	  AND block_timestamp>='2025-02-18'
	  AND nonce=1000000 ) SELECT * from base LIMIT 100



=======================================================================================
=======================================================================================
QUERY_NO: 1045
QUERY_ID: 2f89caff-a753-4584-9a9d-7b9342128f97
QUERY_TITLE: balancerv2_swaps_test copy

QUERY_STRING:

-- forked from balancerv2_swaps_test @ https://flipsidecrypto.xyz/studio/queries/fac6e2d6-3ce5-4cfb-8931-30bac5a166ef select
	block_timestamp,
	tx_hash,
	event_index,
	decoded_log:amountIn :: float / pow(10, 18) as amount_in,
	decoded_log:amountOut :: float / pow(10, 18) as amount_out,
	decoded_log:tokenIn  as token_in,
	decoded_log:tokenOut  as token_out from
	ethereum.core.fact_decoded_event_logs where
	1 = 1
	and contract_address = '0xba12222222228d8ba445958a75a0704d566bf2c8'
	and event_name = 'Swap'
	and decoded_log:poolId::string = '0xdacf5fa19b1f720111609043ac67a9818262850c000000000000000000000635'



=======================================================================================
=======================================================================================
QUERY_NO: 1046
QUERY_ID: 507bf7bf-0ce3-469a-be7f-3c3c446b3205
QUERY_TITLE: daily_stats

QUERY_STRING:

-- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/a07b674b-3d21-4aae-a79a-73bff99d80b3 with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT
	trade_timestamp::date as ddate
	, SUM(CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	 END
	  ) as volume_usd
	, SUM(
	  CASE
	
	  WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	 ELSE funding_fees + rollover_fees + vault_liq_fees
	  END
	) as total_fees
	, COUNT(DISTINCT trade_id) as trades
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT market_pair) as markets from refine  GROUP BY 1



=======================================================================================
=======================================================================================
QUERY_NO: 1047
QUERY_ID: 7f613684-3bc7-4152-9035-049f95a92bee
QUERY_TITLE: LOUDIO presale over time

QUERY_STRING:

-- forked from LOUDIO presale summary @ https://flipsidecrypto.xyz/studio/queries/14873fa4-edc5-4a63-93c7-d9f610f74db8 -- forked from LOUDIO presale initials @ https://flipsidecrypto.xyz/studio/queries/9a11eb21-a6b9-44f6-b44e-3792c1fde833 --phase 1 program: uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK --phase 2 program: Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6 with all_deposits as (
	SELECT
	
	tr.*
	  , fe.program_id
	from solana.core.fact_transfers tr
	LEFT JOIN (
	  SELECT
	
	  *
	
	from solana.core.fact_events
	  WHERE 1=1
	
	 AND program_id in ('uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK', 'Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6')
	
	 AND block_id between 343717045 and 343753774
	) fe ON tr.tx_id = fe.tx_id
	WHERE 1=1
	  AND tx_to IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	  AND mint in ('So11111111111111111111111111111111111111112', 'So11111111111111111111111111111111111111111')
	  --AND amount = 0.2
	  AND tr.block_id between 343717045 and 343753774  ) SELECT
	TIME_SLICE(block_timestamp, 10, 'MINUTE') as dtime
	, CASE WHEN program_id IS NOT NULL THEN 'valid' ELSE 'retardio' END as label
	, COUNT(DISTINCT tx_from) as wallets
	, SUM(amount) as sol_raised from all_deposits GROUP BY 1, 2 ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1048
QUERY_ID: a98c3650-56ae-4614-a455-95e00c605f85
QUERY_TITLE: LOUDIO presale summary

QUERY_STRING:

-- forked from LOUDIO presale over time @ https://flipsidecrypto.xyz/studio/queries/7f613684-3bc7-4152-9035-049f95a92bee --phase 1 program: uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK --phase 2 program: Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6 with all_deposits as (
	SELECT
	
	tr.*
	  , fe.program_id
	from solana.core.fact_transfers tr
	LEFT JOIN (
	  SELECT
	
	  *
	
	from solana.core.fact_events
	  WHERE 1=1
	
	 AND program_id in ('uGRp5erG43tt1PYBip8DDDvKaUgDr897ExKYYevzAGK', 'Cmmaq6EjiHWJfa1JPnUEmdr8ijB41bEWouQbfYxQTxH6')
	
	 AND block_id between 343717045 and 343753774
	) fe ON tr.tx_id = fe.tx_id
	WHERE 1=1
	  AND tx_to IN ('DKfH3jiKHRcx6T7A9f9tisfbHk4nRmjWf335S3Lg1AJy', 'DqiafLQPhGyYuTmxtymDCzBmbtCTbK9ijn33tCYDxBeY')
	  AND mint in ('So11111111111111111111111111111111111111112', 'So11111111111111111111111111111111111111111')
	  --AND amount = 0.2
	  AND tr.block_id between 343717045 and 343753774  ) SELECT
	CASE WHEN program_id IS NOT NULL THEN 'valid' ELSE 'retardio' END as label
	, COUNT(DISTINCT tx_from) as wallets
	, SUM(amount) as sol_raised from all_deposits GROUP BY 1 ORDER BY 2 DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1049
QUERY_ID: 441e5b77-dab0-4236-87b2-e2e954fb4300
QUERY_TITLE: base query/early duster raw

QUERY_STRING:

-- forked from base query/early duster filtered @ https://flipsidecrypto.xyz/studio/queries/d1f5d6e1-8f28-4112-a77b-69e55cbefd48 with base as (
	SELECT
	
	block_timestamp
	  , block_number
	  , tx_position
	  , tx_hash
	  , event_index
	  , CASE WHEN from_address = '0x0000000000000000000000000000000000000000' THEN 'vault-mint' ELSE 'stable-deposit' END as label
	  , SYMBOL
	  , COALESCE(AMOUNT, RAW_AMOUNT/1e6) as amount
	  , from_address as wallet
	from ethereum.core.ez_token_transfers
	WHERE 1=1
	  --AND tx_hash = '0x4ef1d51d035a3522c0d082ff92d171e7fbccbc109f91c9c8483e131470469501'
	  --AND block_timestamp >= CURRENT_TIMESTAMP - INTERVAL '3 hour'
	  AND (
	
	 (from_address = '0x0000000000000000000000000000000000000000' and contract_address ='0xd1074e0ae85610ddba0147e29ebe0d8e5873a000') --mint of PlasmaUSD to depositor
	
	 OR
	
	  to_address = '0xd1074e0ae85610ddba0147e29ebe0d8e5873a000' --deposit of stable
	  )
	  AND contract_address!=lower('0xAed4e6cbC3CE346407A2BeE4552A0aBd858f05f2')
	  AND block_number between 22666764 and 22667227 -- wallet:0xd109ffb0947407c6275610c07155b07a75f3f017 had been depositing 1hr early - dust amounts...
	  --AND block_number between 22667180 and 22667227 VALID START ) , refine as (
	SELECT
	
	*
	  , SUM(CASE WHEN label ='vault-mint' THEN amount ELSE 0 END) OVER (ORDER BY block_number ASC, tx_position ASC)/1e6 as total_raise
	
	, first_value(block_number) OVER (ORDER BY block_number ASC, tx_position ASC) as first_block
	  , first_value(block_timestamp) OVER (ORDER BY block_number ASC, tx_position ASC) as first_ts
	from base
	ORDER BY block_number ASC, tx_position ASC, event_index ASC  ) SELECT
	*
	, block_number - first_block as total_blocks
	, TIMEDIFF(second, first_ts, block_timestamp)/60 as total_minutes from refine ORDER BY block_number ASC, tx_position ASC, event_index ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1050
QUERY_ID: 1dfbd3d7-d929-464f-a966-f28b79d0edd8
QUERY_TITLE: daily_stats by market

QUERY_STRING:

-- forked from daily_stats @ https://flipsidecrypto.xyz/studio/queries/507bf7bf-0ce3-469a-be7f-3c3c446b3205 -- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/a07b674b-3d21-4aae-a79a-73bff99d80b3 with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT
	trade_timestamp::date as ddate
	, CASE
	
	  WHEN pair_index IN (0, 1, 9) THEN 'CRYPTO'
	
	 WHEN pair_index IN (10, 11, 12, 13, 14, 15) THEN 'INDICES'
	
	 WHEN pair_index IN (16, 17, 2, 3, 4) THEN 'FOREX'
	
	 WHEN pair_index IN (5, 6, 7, 8) THEN 'COMMODITIES'
	
	 WHEN pair_index between 18 and 24 THEN 'Mag7 Stocks'
	
	 ELSE 'NEW/UNGROUPED'
	  END as label_groups
	, market_pair
	, SUM(CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	
	 END
	  ) as volume_usd
	, SUM(
	  CASE
	
	  WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	 ELSE funding_fees + rollover_fees + vault_liq_fees
	  END
	) as total_fees
	, COUNT(DISTINCT trade_id) as trades
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT market_pair) as markets from refine  GROUP BY 1, 2, 3 ORDER BY 1 ASC, 2 ASC



=======================================================================================
=======================================================================================
QUERY_NO: 1051
QUERY_ID: a07b674b-3d21-4aae-a79a-73bff99d80b3
QUERY_TITLE: overview stats

QUERY_STRING:

with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT
	SUM(
	  CASE
	
	  WHEN index=0 THEN volume  -- index=0 open trade, timestamp_arr[0]
	
	 ELSE coalesce(latest_leverage, leverage) * (collateral + coalesce(collateral_delta,0))
	  END
	  ) as volume_usd
	, SUM(
	  CASE
	
	  WHEN index=0 THEN dev_fee + oracle_fee + vault_open_fee
	
	 ELSE funding_fees + rollover_fees + vault_liq_fees
	  END
	) as total_fees
	, COUNT(DISTINCT trade_id) as trades
	, COUNT(DISTINCT trader) as traders
	, COUNT(DISTINCT market_pair) as markets from refine



=======================================================================================
=======================================================================================
QUERY_NO: 1052
QUERY_ID: 3b6467e6-1034-43d1-8153-2cfc533af1cf
QUERY_TITLE: market_pairs group_index

QUERY_STRING:

-- forked from market_pairs @ https://flipsidecrypto.xyz/studio/queries/24f4df07-8d77-46a5-8315-8a3af5ba562d with market_pairs as (
	SELECT
	  *
	  , DECODED_LOG:index as pair_index
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"from", 3))) as from_symbol
	  , livequery.utils.udf_hex_to_string((substring(DECODED_LOG:"to", 3))) as to_symbol
	  , from_symbol || '/' || to_symbol as market_pair
	from arbitrum.core.ez_decoded_event_logs
	WHERE 1=1
	  AND contract_address = '0x260e349f643f12797fdc6f8c9d3df211d5577823'
	  AND TOPIC_0 = '0x797331683c7d888af91e5c6800626a01b5f1f7337a712c6915baa1b39c138a09' --event_name = 'PairAdded' ) --debug , add_pair_traces as ( SELECT
	*
	, REGEXP_SUBSTR_ALL(SUBSTR(input, 11, len(input)), '.{64}') as segmented_data
	, utils.udf_hex_to_int(segmented_data[0]) as offset_int --no clue
	, utils.udf_hex_to_string(segmented_data[1]) as from_symbol
	, utils.udf_hex_to_string(segmented_data[2]) as to_symbol
	, segmented_data[3] as feed_address
	, utils.udf_hex_to_int(segmented_data[4]) as size_ref
	, utils.udf_hex_to_int(segmented_data[5]) as spreadp
	, utils.udf_hex_to_int(segmented_data[6]) as max_lev
	, utils.udf_hex_to_int(segmented_data[7]) as group_index
	, utils.udf_hex_to_int(segmented_data[8]) as fee_index
	, utils.udf_hex_to_int(segmented_data[9]) as idk
	, utils.udf_hex_to_int(segmented_data[10]) as to_decimals -- guesswork???
	, utils.udf_hex_to_string(segmented_data[11]) as oracle_name from arbitrum.core.fact_traces WHERE 1=1
	--AND tx_hash = '0x545a593fa60f14af16d8ac340a26b5e837624f7df16df30e80ec0e488ccde3a4'
	--AND tx_hash = '0xce8121fa6d2c1a06f83821c34084dcf2e454bd286c19cbd55fd530d8179a81de'
	AND input LIKE '0x89343f7c%'
	AND type = 'DELEGATECALL'
	AND origin_to_address in ('0xdead60ad9900fb3bb81bd150c5f7954beb9712b5', '0x260e349f643f12797fdc6f8c9d3df211d5577823') ) SELECT
	 * from arbitrum.core.fact_traces WHERE 1=1
	AND tx_hash = '0xd98a3ce6ec3402d7557ab7b5c447118e9491df257d889b0debb444334e19782e'
	--AND type = 'CALL'



=======================================================================================
=======================================================================================
QUERY_NO: 1053
QUERY_ID: f54dea5a-d265-417d-8283-090e34a785f3
QUERY_TITLE: last run test

QUERY_STRING:

(
	SELECT block_timestamp as last_event_time, 'kizzy_testnet_uni_v3_swaps' as label from community.monad.kizzy_testnet_uni_v3_swaps
	ORDER BY block_timestamp DESC
	LIMIT 1 ) UNION ALL (
	SELECT block_timestamp as last_event_time, 'ronin.staking_actions' as label from community.ronin.staking_actions
	ORDER BY block_timestamp DESC
	LIMIT 1 ) UNION ALL  (
	SELECT block_timestamp as last_event_time, 'arbitrum.ostium_trade_closures' as label from community.arbitrum.ostium_trade_closures
	ORDER BY block_timestamp DESC
	LIMIT 1 ) UNION ALL  (
	SELECT block_timestamp as last_event_time, 'arbitrum.ostium_trade_opens' as label from community.arbitrum.ostium_trade_opens
	ORDER BY block_timestamp DESC
	LIMIT 1 )



=======================================================================================
=======================================================================================
QUERY_NO: 1054
QUERY_ID: 32effa9b-7720-434b-b443-93298594e3db
QUERY_TITLE: close fee / collat tests

QUERY_STRING:

-- forked from overview stats by pair @ https://flipsidecrypto.xyz/studio/queries/a6e200bc-27ff-40e3-b870-7f1482f9bb34 -- forked from overview stats @ https://flipsidecrypto.xyz/studio/queries/a07b674b-3d21-4aae-a79a-73bff99d80b3 with base as (
	SELECT
	
	o.*
	  , CASE
	
	
	 WHEN c.trade_id IS NULL THEN ARRAY_CONSTRUCT(o.block_timestamp)
	
	
	 ELSE ARRAY_CONSTRUCT(o.block_timestamp, c.block_timestamp)
	
	  END as timestamp_arr
	  , profit_percent
	  , close_price
	  , closing_price_impact_perc
	  , usdc_sent
	  , order_id
	  , rollover_fees
	  , funding_fees
	  , vault_liq_fees
	  , ARRAY_CONSTRUCT(o.tx_hash, c.tx_hash) as txns
	from community.arbitrum.ostium_trade_opens o
	LEFT JOIN community.arbitrum.ostium_trade_closures c ON o.trade_id = c.trade_id ) , refine as (
	SELECT
	
	*
	  , TO_TIMESTAMP_NTZ(VALUE) as trade_timestamp
	from base, lateral flatten(input=>timestamp_arr)
	--WHERE trade_id = 182080 ) SELECT * from refine  WHERE 1=1
	--and index=1
	--and (coalesce(rollover_fees, funding_fees) IS NULL) --OR coalesce(rollover_fees, funding_fees) = 0)
	and trade_id = 297986
	and index=0
	and (collateral_delta IS NOT NULL) and latest_leverage IS NOT  NULL ORDER BY trade_timestamp DESC  LIMIT 10



=======================================================================================
=======================================================================================
QUERY_NO: 1055
QUERY_ID: a23ccf23-2b1b-4d91-9411-69a1755db2a7
QUERY_TITLE: JUP Holders (w/ stake) 

QUERY_STRING:

-- forked from JUP Holders (ignoring stake) @ https://flipsidecrypto.xyz/studio/queries/8de8470b-9a97-4d95-9ff8-26f7c41297cf -- with latest_balance as ( --
	SELECT --
	  block_timestamp --
	  , owner --
	  , balance --
	from solana.core.fact_token_balances --
	WHERE 1=1 --
	  AND MINT = 'JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN' --
	  AND block_id> 243989543 --token creation --
	  AND block_timestamp<'2025-04-01' --Q2 start --
	qualify row_number() OVER (partition by owner order by block_timestamp DESC) =1 -- ) -- SELECT --
	COUNT(DISTINCT owner) as holders -- from latest_balance -- WHERE 1=1 --
	and balance>0  SELECT *
	-- signers[0]
	-- , count(tx_id) as totals
	-- DECODED_INSTRUCTION:accounts[2]:pubkey as staker
	-- , COUNT(DISTINCT DECODED_INSTRUCTION:accounts[1]:pubkey) stake_escrow from solana.core.ez_events_decoded WHERE 1=1
	and program_id = 'voTpe3tHQ7AjQHMapgSue2HJFAh2cGsdokqN3XqmVSj'
	and event_type = 'newEscrow'
	and signers[0] = '6h43GsVT3TjtLa5nRpsXp15GDpAY4smWCYHgcq58dSPM' -- GROUP BY 1 -- having stake_escrows>1



=======================================================================================
=======================================================================================
QUERY_NO: 1056
QUERY_ID: b9b8922a-c9e2-41e7-ad39-d3b479454c11
QUERY_TITLE: [FS] Shrooms Minters

QUERY_STRING:

with mints as (
	SELECT
		MIN(date_trunc('hour', block_timestamp)) as min_time,
		NFT_TO_ADDRESS as minter
	from ethereum.core.ez_nft_mints
	WHERE 1=1
		AND NFT_ADDRESS = lower('0xdfb57B6E16DDB97Aeb8847386989f4DCA7202146')
	GROUP by NFT_TO_ADDRESS  ) SELECT
	min_time,
		COUNT(minter) as minters,
		SUM(minters) OVER (ORDER BY min_time ASC) as minters_cumulative from mints GROUP BY min_time ORDER BY min_time DESC



=======================================================================================
=======================================================================================
QUERY_NO: 1057
QUERY_ID: 3c643f77-6369-4838-a7b5-505d0c3a1908
QUERY_TITLE: [NEAR] Daily Active Users

QUERY_STRING:

with base as (
	SELECT
	
	*
	FROM  near.core.fact_transactions
	WHERE 1=1
	AND (tx_receiver LIKE '%paras%') ), extracts as (
	SELECT
	
	tx_hash, block_timestamp,
	
	
	 --logs,
	  replace(logs[0], '\\') as logs_pre,
	
	CASE WHEN logs_pre like 'EVENT_JSON:%' THEN  replace( replace(split(logs_pre,'EVENT_JSON:')[1], '\:\"\{\"', '\:\{\"'), '\"}\"\}', '\"}\}') ELSE logs_pre END as logs_cleaned,
	  check_json(logs_cleaned) as checks,
		TRY_PARSE_JSON(logs_cleaned) as log_json
	FROM near.core.fact_receipts
	WHERE 1=1
		AND tx_hash IN (SELECT tx_hash from base)
		AND ARRAY_SIZE(logs)>0 ), types as (
	SELECT
	
	e.tx_hash,
	
	e.block_timestamp,
	
	tx_signer,
	
	tx_receiver,
	  coalesce(log_json:type, log_json:event) as type,
	
		coalesce(coalesce(log_json:params:price, log_json:data[0]:memo:price, log_json:params:amount)/1e24, 0) as price,
		log_json:params:ft_token_id as price_token,
	
		coalesce(log_json:params:buyer_id, log_json:data[0]:new_owner_id, log_json:data[0]:owner_id, log_json:params:creator_id ) as actor,
	  CASE
	WHEN type != 'nft_mint' THEN coalesce(log_json:params:old_owner, log_json:data[0]:owner_id, log_json:params:owner_id) ELSE null END  as prev_actor,
		log_json:params:buyer_nft_contract_id as buyer_nft_contract_id,
		log_json:params:nft_contract_id as nft_contract_id,
		coalesce( log_json:data[0]:token_ids[0], log_json:params:token_id ) as token_info,
		CASE
	WHEN contains(token_info,':')=TRUE THEN coalesce( log_json:params:token_series_id, split(token_info,':')[0])
	
		
	ELSE nft_contract_id END as token_series,
		CASE
	WHEN contains(token_info,':')=TRUE THEN split(token_info,':')[1]
	
			ELSE token_info END as token_id,
		
		replace( log_json:params:royalty, 'https\:') as royalty_corrected, -- SOME [REDACTED] dude put URL in royalty section JFC
		regexp_count( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as pairs,
		split( replace( ltrim( rtrim( royalty_corrected,'\}'), '{'), '\"'), ',') as royalty_set,
		
		log_json:params:is_offer as is_offer,
	  log_json:params:is_auction as is_auction,
	
	 
	log_json
	from extracts e
	 LEFT JOIN base b ON b.tx_hash =e.tx_hash
	WHERE 1=1
	AND log_json IS NOT NULL
	 ), stats as (
	SELECT
		COUNT(DISTINCT tx_hash) as total_txs,
		SUM(price) as near_volume,
		COUNT(DISTINCT tx_signer) as daily_users,
		date_trunc('day', block_timestamp) as ddate,
		CASE WHEN type='nft_mint' THEN 'NFT Mints' ELSE 'NFT Secondary Sales' END as type
	from types
	WHERE type IN ('nft_mint', 'resolve_purchase')
	GROUP BY ddate, type ORDER BY ddate ASC ), dates as (
	
	select
	
	 -- first argument is unit of time to add, second is amount to increment, third is starting date
	
	 dateadd(day, '-' || row_number() over (order by null),  current_date() + 1) as ddate
	  from table (generator(rowcount => 400)) ), collats as (
	SELECT DISTINCT type, '0' as blank
	from stats ), sample_space as (
	SELECT
	
	ddate,
		type,
		MAX(blank) as blank
	from dates d
	CROSS JOIN collats c
	GROUP BY ddate, type ORDER BY ddate ) SELECT sp.ddate,
	coalesce(near_volume, blank) as near_volume,
	SUM(near_volume) OVER(PARTITION BY sp.type ORDER BY sp.ddate ASC) as volume_cumulative,
	coalesce(total_txs, blank) as total_txs,
	SUM(total_txs) OVER(PARTITION BY sp.type ORDER BY sp.ddate ASC) as txs_cumulative,
	coalesce(daily_users, blank) as daily_users,
	sp.type from sample_space sp LEFT JOIN stats s ON sp.ddate=s.ddate AND sp.type = s.type WHERE
	sp.ddate>='2021-09-07' ORDER BY ddate



=======================================================================================
=======================================================================================
QUERY_NO: 1058
QUERY_ID: e90f7641-43fd-4d30-a437-afbfa3965cd8
QUERY_TITLE: [wormhole] Activity After Adopting Wormhole (counts)

QUERY_STRING:

with terra_shuttle_out as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_from as address
		from terra.transfers
	WHERE
		event_to in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
	'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
							'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
						)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
			AND block_timestamp <= '2022-01-10' ), terra_shuttle_in as (
		SELECT
	tx_id, block_timestamp as shuttle_date,
				event_to as address
		from terra.transfers
	WHERE
		event_from in	(	'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc',
						
		'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2',
								'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk'
							)
			AND block_timestamp >= '2021-10-20' --Official WH Launch
		AND block_timestamp <= '2022-01-10' ), total_shuttle_txns as (
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_in
	UNION ALL
	SELECT address, shuttle_date, tx_id, 'shuttle' as cat from terra_shuttle_out ), total_shuttle_users as (
	SELECT address, MIN(shuttle_date) as shuttle_date
		from total_shuttle_txns
		GROUP BY address ), shuttle_stats as (
	SELECT COUNT(DISTINCT address) as shuttle_users
		from total_shuttle_users ), wh_txns as ( SELECT	
			block_timestamp as wh_date,
		
	tx_id,
			'wh' as cat,
	
	
	msg_value:sender as address
	  from terra.msgs
	  WHERE
	
	
	msg_type = 'wasm/MsgExecuteContract'
	
	
	AND msg_value:contract = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	
	
	AND msg_value:execute_msg:initiate_transfer IS NOT NULL
	 
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
		AND block_timestamp <= '2022-01-10' UNION ALL  SELECT
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:"recipient" as address FROM terra.msg_events --WHERE -- tx_id = '05A1DF7D5B88490E0652A47EE069092A3123FCF0B9F5EAF4D89FFF5C2C6C3ED4' -- sol test tx
	WHERE event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' -- Wormhole Wrapped Registry
	AND event_attributes:"0_action" = 'complete_transfer_wrapped'
	AND event_type ='from_contract'
	AND tx_status = 'SUCCEEDED'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	  AND block_timestamp <= '2022-01-10' UNION ALL
	 SELECT -- REceiving Native Terra Tokens from Wormhole
	block_timestamp as wh_date,
	tx_id,
	'wh' as cat,
	event_attributes:recipient as address
	FROM terra.msg_events
	WHERE event_type = 'from_contract'-- AFE75F3E33C16C2693437EC0855D2867927D07113FB4E0F5F7E87E64D453AFE8
	  AND event_attributes:action = 'complete_transfer_terra_native'
	  AND tx_status = 'SUCCEEDED'
	  AND block_timestamp > '2021-10-01'
	AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
	AND block_timestamp >= '2021-10-20' --Official WH Launch
	 
	AND block_timestamp <= '2022-01-10' ), min_wh_user as (
	SELECT MIN(wh_date) as wh_date, address
		from wh_txns
		GROUP BY address ), common_user as ( SELECT
	min_wh_user.address, wh_date, shuttle_date, 'test' as dummy,
		DATEDIFF('day', shuttle_date, wh_date) as d_diff,
			CAST(d_diff/7 as INTEGER) as  w_diff
		from min_wh_user LEFT JOIN total_shuttle_users
			on min_wh_user.address = total_shuttle_users.address
		WHERE
			shuttle_date < wh_date ), total_txns as (
	SELECT shuttle_date as ddate, tx_id, cat, address from total_shuttle_txns
	UNION ALL
	SELECT wh_date as ddate, tx_id, cat, address from wh_txns ), post_txns as (
		SELECT ddate, tx_id, cat,  total_txns.address, dummy, wh_date
		from total_txns
	LEFT JOIN common_user ON total_txns.address = common_user.address
	WHERE
	dummy IS NOT NULL
	AND ddate>wh_date ),
	 txns_formatted as (
	SELECT 
		CASE WHEN cat='wh' THEN 1 ELSE 0 END as wh_count,
		CASE WHEN cat='shuttle' THEN 1 ELSE 0 END as shuttle_count,
		tx_id, ddate, cat ,address
	from post_txns	 ), pre_output as (
	SELECT
	SUM(wh_count) as wh_count,
				SUM(shuttle_count) as shuttle_count,
			COUNT(DISTINCT tx_id) as total_txns,
				address
	from txns_formatted
	GROUP BY address ) SELECT	CASE
	WHEN WH_COUNT=0 AND SHUTTLE_COUNT!=0 THEN 'shuttle only'
				WHEN WH_COUNT!=0 AND SHUTTLE_COUNT=0 THEN 'wormhole only'
				ELSE 'BOTH' END 
			as types,
		COUNT(DISTINCT address) as total_users from pre_output GROUP by types



